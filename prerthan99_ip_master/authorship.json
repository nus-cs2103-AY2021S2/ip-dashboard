[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"# Setting up"},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"**Prerequisites**"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"* JDK 11"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"* Recommended: IntelliJ IDE"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"* Fork this repo to your GitHub account and clone the fork to your computer"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"**Importing the project into IntelliJ**"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"1. Set up the correct JDK version."},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"   * Click `OK`."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"1. Click `Import Project`."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"1. Locate the project directory and click `OK`."},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"1. Select `Create project from existing sources` and click `Next`."},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"1. Rename the project if you want. Click `Next`."},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"1. Ensure that your src folder is checked. Keep clicking `Next`."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"1. Click `Finish`."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"# Tutorials "},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"Duke Increment | Tutorial"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"---------------|---------------"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"# Feedback, Bug Reports"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"* We welcome pull requests too."}],"authorContributionMap":{"prerthan99":40}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.2.0\u0027"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"dependencies {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"group \u0027sharadhr.duke\u0027"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"version \u00270.1.0\u0027"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"application {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    // Change this to your main class."},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    mainClassName \u003d \"sharadhr.duke.Duke\""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"run {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    standardInput \u003d System.in"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"tasks.withType(JavaCompile) {"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"repositories {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    mavenCentral()"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"checkstyle {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    toolVersion \u003d \u00278.23\u0027"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    archiveVersion \u003d \"0.1\""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    archiveAppendix \u003d null"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"test {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"    useJUnitPlatform()"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":59}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":":init"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":":end"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":":omega"}],"authorContributionMap":{"prerthan99":100}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"rootProject.name \u003d \u0027duke\u0027"}],"authorContributionMap":{"prerthan99":1}},{"path":"src/main/java/prerthan/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Input;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Output;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * "},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    public static TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    public static Input input;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    public static Output output;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    public static Storage fileRW;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public boolean run() {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"     * Runs the main program loop."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"     * @return {@code false} when the user says \u0027bye\u0027; otherwise, never returns."},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    public static boolean programLoop() {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"        boolean exitLoop \u003d false;"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        String command;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        input.nextLine();"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        return false;"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"     * Cleans up objects and quits the program by calling {@link System#exit(int)}."},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    public static void exit() {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        output.sayGoodBye();"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        input.close();"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"        output.close();"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        System.exit(0);"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    public static void main(String[] args) {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        // Initialises file and UI I/O"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        fileRW \u003d new Storage(\"data\", \"duke.txt\");"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"        input \u003d new Input();"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        output \u003d new Output();"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        // Greets the user."},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        output.sayHello();"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"        // Creates the task list"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        if (programLoop())"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"            exit();"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":61}},{"path":"src/main/java/prerthan/duke/IO/Input.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.IO;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.*;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.io.InputStreamReader;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.regex.Pattern;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Collectors;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" * A class to accept and parse user inputs from the input stream."},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"public class Input {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    private static BufferedReader reader;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern whitespace \u003d Pattern.compile(\"\\\\s+\");"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private static final Pattern slashCommands \u003d Pattern.compile(\"(?i)\\\\/((from)|(to)|(at)|(by)|(on))\");"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    static String readline() {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            return reader.readLine();"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"            System.err.println(\"I/O exception occurred.\");"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"            return \"\";"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    // Instance"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    protected String line;"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"    protected String[] tokens;"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    public Input() {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        reader \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * Gets the next line in the input stream, and stores it. Returns this object"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * for method chaining."},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     * @return this {@link Input} object, with the cursor advanced by one line."},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    public Input nextLine() {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        this.line \u003d readline();"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        this.tokens \u003d whitespace.split(this.line.trim());"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        return this;"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"     * Returns the current line of input as a {@link String} array of tokens, where"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"     * the {@link String} is trimmed and separated by any whitespace character."},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"     * @return the current line, tokenised."},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    public String[] getTokens() {"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        this.tokens \u003d this.tokens.length \u003d\u003d 0 ? whitespace.split(this.line.trim()) : this.tokens;"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"        return this.tokens;"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"     * Returns the current line of input as a {@link Stream} of {@link String}s,"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"     * trimmed and tokenised by any whitespace character."},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"     * @return the current line of input as a {@link Stream}\u003c{@link String}\u003e."},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"    public Stream\u003cString\u003e getTokenStream() {"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"        return Stream.of(this.getTokens());"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    String getFirstToken() {"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"        return this.getTokens()[0];"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    public Command getCommand() throws DukeInvalidArgumentException, DukeInvalidCommandException {"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"        String commandString \u003d this.getFirstToken();"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"        Command.CommandName cmd \u003d Command.whichCommand(commandString);"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"        switch (cmd) {"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"        case TODO:"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"            return new AddCommand(this.getDetail(), cmd);"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"        case DEADLINE:"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"            return new AddCommand(this.getDetail(), this.getFirstTimeString(), cmd);"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"        case EVENT:"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"            return new AddCommand(this.getDetail(), this.getFirstTimeString(), this.getNextTimeString(), cmd);"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"        case LIST:"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"            return new ListCommand(this.tokensWithoutFirst());"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":"        case DONE:"},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"            return new DoneCommand(this.tokensWithoutFirst());"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"        case FIND:"},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"            return new FindCommand(this.tokensWithoutFirst());"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"        case DELETE:"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"            return new DeleteCommand(this.tokensWithoutFirst());"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"        case EMPTY:"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":"            Duke.output.say(\"Empty input; please enter something.\");"},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"            return null;"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"        case INVALID:"},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidCommandException(commandString, Input.class.getSimpleName());"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"        case BYE:"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"            return new ByeCommand(commandString);"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"        default:"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"        return null;"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"    public String[] tokensWithoutFirst() {"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().skip(1).toArray(String[]::new);"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"    public String inputWithoutFirstToken() {"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().skip(1).collect(Collectors.joining(\" \"));"},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"    public String getDetail() {"},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().takeWhile(slashCommands.asMatchPredicate().negate())"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"                .collect(Collectors.joining(\" \"));"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"    public String getFirstTimeString() {"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":"                .takeWhile(slashCommands.asMatchPredicate().negate()).collect(Collectors.joining(\" \"));"},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":"    public String getNextTimeString() {"},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":"        return this.getTokenStream().dropWhile(slashCommands.asMatchPredicate().negate()).skip(1)"},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"                .dropWhile(slashCommands.asMatchPredicate().negate()).skip(1).collect(Collectors.joining(\" \"));"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":"    public void close() {"},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"            reader.close();"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"        } catch (IOException e) {"},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"            System.err.println(\"I/O Exception occurred.\");"},{"lineNumber":139,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":141}},{"path":"src/main/java/prerthan/duke/IO/Output.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.IO;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import java.io.OutputStreamWriter;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A class to neatly format and write any output from the organiser chat bot,"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * Duke, to the standard output."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"public class Output {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    BufferedWriter writer \u003d new BufferedWriter(new OutputStreamWriter(System.out));"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    static final String logo \u003d \"\\n ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    static void ioException() {"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        System.err.println(\"I/O Exception occurred.\");"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    // Instance"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /////////////////////////////////////////////////////////////////////////"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    public Output() {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        ;"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    void appendWithNewline(String string) {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            this.writer.append(string);"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            this.writer.newLine();"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    void appendWithNewline(String... strings) {"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"        Arrays.asList(strings).forEach(this::appendWithNewline);"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    public void add(String message) {"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"            this.writer.append(message);"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"     * Flushes the contents of this writer\u0027s buffer to the standard output."},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    public void say() {"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"            this.writer.flush();"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"     * Writes a specified message (given as a {@link String}) to the standard"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"     * output."},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"     * @param message The message to be written"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"    public void say(String message) {"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"            this.appendWithNewline(message);"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"            this.writer.flush();"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"     * Writes multiple messages to the standard output. These messages are given as"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"     * a comma-separated list of {@link String}s."},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"     * @param messages The list of messages to be written to standard output"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    public void say(String... messages) {"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"prerthan99"},"content":"            this.appendWithNewline(messages);"},{"lineNumber":87,"author":{"gitId":"prerthan99"},"content":"            writer.flush();"},{"lineNumber":88,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":89,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":90,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":93,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"prerthan99"},"content":"     * Greets the user."},{"lineNumber":95,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"prerthan99"},"content":"    public void sayHello() {"},{"lineNumber":97,"author":{"gitId":"prerthan99"},"content":"        this.say(\"Hello, this is\" + logo + \"How can I help?\");"},{"lineNumber":98,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":100,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"prerthan99"},"content":"     * Bids the user farewell; should be called when program is exiting."},{"lineNumber":102,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"prerthan99"},"content":"    public void sayGoodBye() {"},{"lineNumber":104,"author":{"gitId":"prerthan99"},"content":"        this.say(\"Goodbye, then; see you soon!\");"},{"lineNumber":105,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":107,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"prerthan99"},"content":"     * Given a task, tells the user that the task was added to the task list,"},{"lineNumber":109,"author":{"gitId":"prerthan99"},"content":"     * formatted appropriately."},{"lineNumber":110,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"prerthan99"},"content":"     * @param task The task that was added to the task list"},{"lineNumber":112,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskAdded(Task task) {"},{"lineNumber":114,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task was added: \", task.toString());"},{"lineNumber":115,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":117,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"prerthan99"},"content":"     * Given a task, tells the user that the task was marked complete, formatted"},{"lineNumber":119,"author":{"gitId":"prerthan99"},"content":"     * appropriately."},{"lineNumber":120,"author":{"gitId":"prerthan99"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"prerthan99"},"content":"     * @param task The task that was marked complete"},{"lineNumber":122,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskMarkedComplete(Task task) {"},{"lineNumber":124,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task has been marked done:\", task.toString());"},{"lineNumber":125,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":127,"author":{"gitId":"prerthan99"},"content":"    public void sayTaskDeleted(Task task) {"},{"lineNumber":128,"author":{"gitId":"prerthan99"},"content":"        this.say(\"This task has been deleted:\", task.toString());"},{"lineNumber":129,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":131,"author":{"gitId":"prerthan99"},"content":"    public void close() {"},{"lineNumber":132,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"prerthan99"},"content":"            writer.close();"},{"lineNumber":134,"author":{"gitId":"prerthan99"},"content":"        } catch (Exception e) {"},{"lineNumber":135,"author":{"gitId":"prerthan99"},"content":"            ioException();"},{"lineNumber":136,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":138}},{"path":"src/main/java/prerthan/duke/IO/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.IO;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedReader;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.io.BufferedWriter;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Path;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.Paths;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.nio.file.StandardOpenOption;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * A class to handle file read/write operations by the Duke program."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    private Path taskFile;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private BufferedReader reader;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private BufferedWriter writer;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    public Storage(String... directory) {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        this.taskFile \u003d Paths.get(\".\", directory).normalize().toAbsolutePath();"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"            Files.createDirectories(this.taskFile.getParent());"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"            if (Files.notExists(this.taskFile)) {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"                Files.createFile(this.taskFile);"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            this.writer \u003d Files.newBufferedWriter(this.taskFile, StandardOpenOption.WRITE, "},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"                    StandardOpenOption.APPEND);"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            this.reader \u003d Files.newBufferedReader(this.taskFile);"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    public void appendTask(Task task) {"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"            writer.append(task.encode());"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"            writer.newLine();"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"            writer.flush();"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    public void decodeLine(String line) {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    public TaskList loadFromFile() {"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        return null;"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":58}},{"path":"src/main/java/prerthan/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import sharadhr.duke.io.Storage;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" * AddCommand"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"public class AddCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    private CommandName commandName;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, CommandName commandName) {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String timeString, CommandName commandName) {"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"        super(detail, timeString);"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    public AddCommand(String detail, String startString, String endString, CommandName commandName) {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        super(detail, startString, endString);"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    public void execute(final TaskList tasks, final Storage storage)"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"            throws DukeEmptyDetailException, DukeInvalidDateException {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        switch (this.commandName) {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        case TODO:"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask(new Todo(this.argumentTokens[0]));"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        case EVENT:"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask(new Event(this.argumentTokens[0], this.argumentTokens[1], this.argumentTokens[2]));"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        case DEADLINE:"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"            tasks.addTask(new Deadline(this.argumentTokens[0], this.argumentTokens[1]));"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        default:"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":47}},{"path":"src/main/java/prerthan/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * ByeCommand"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class ByeCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    public ByeCommand(String argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        super(argumentTokens);"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d CommandName.BYE;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        if (argumentTokens.length() \u003e\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(\"Bye command must have no arguments.\","},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"                    ByeCommand.class.getSimpleName());"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeEmptyDetailException, DukeInvalidDateException {"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":28}},{"path":"src/main/java/prerthan/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * Models a possible user command to the Duke program; commands are of type"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * \u0027ADD\u0027, \u0027DELETE\u0027,"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    public enum CommandName {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        TODO, DEADLINE, EVENT, LIST, DONE, FIND, DELETE, BY, AT, ON, EMPTY, INVALID, BYE"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    };"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    protected CommandName commandName;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    protected String argument;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    protected String[] argumentTokens;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    public static CommandName whichCommand(String token) {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        for (CommandName cmdname : CommandName.values()) {"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"            if (token.equalsIgnoreCase(cmdname.toString())) {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"                return cmdname;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"            } else if (token.isBlank()) {"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"                return CommandName.EMPTY;"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        return CommandName.INVALID;"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     * Creates a {@link Command}, with a {@link String}[] that contains the"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     * tokenised arguments to the command, from the user input."},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"     * @param argumentTokens the tokenised input from the user, as arguments to the"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"     *                      command"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    public Command(String... argumentTokens) {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        this.argumentTokens \u003d argumentTokens;"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    public abstract void execute(TaskList tasks, Storage storage)"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"            throws DukeEmptyDetailException, DukeInvalidDateException;"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":45}},{"path":"src/main/java/prerthan/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * A user"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    private int position;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    DeleteCommand(String[] argumentTokens, int position) throws DukeInvalidArgumentException {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        super(argumentTokens);"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d CommandName.DELETE;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        this.position \u003d position;"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        if (this.argumentTokens.length !\u003d 1 || !this.argumentTokens[1].matches(\"\\\\d+\")"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"                || Integer.parseInt(this.argumentTokens[1]) \u003c\u003d 1)"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(\"Delete command must be of the format: \u0027delete 12\u0027\","},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"                    DeleteCommand.class.getSimpleName());"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * @param commandTokens"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     * @throws NumberFormatException"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidCommandException"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    public DeleteCommand(String[] commandTokens) throws DukeInvalidArgumentException {"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        this(commandTokens, Integer.parseInt(commandTokens[1]));"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"            tasks.deleteTaskAtPosition(position);"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":41}},{"path":"src/main/java/prerthan/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * DoneCommand"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    private int position;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    DoneCommand(String[] commandTokens, int position) throws DukeInvalidArgumentException {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        super(commandTokens);"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d CommandName.DONE;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        this.position \u003d position;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        if (this.argumentTokens.length !\u003d 2 || !this.argumentTokens[1].matches(\"\\\\d+\"))"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(null, DeleteCommand.class.getSimpleName());"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"     * @param commandTokens"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    public DoneCommand(String[] commandTokens) throws DukeInvalidArgumentException {"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        this(commandTokens, Integer.parseInt(commandTokens[1]));"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        if (!(this.position \u003e\u003d 1) \u0026\u0026 this.position \u003c\u003d tasks.numberOfTasks()) {"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"            tasks.deleteTaskAtPosition(position);"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":37}},{"path":"src/main/java/prerthan/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.*;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * FindCommand"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"public class FindCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    public FindCommand(String[] argumentTokens) throws DukeInvalidArgumentException {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        super(argumentTokens);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        if (argumentTokens.length \u003e 1) {"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(\"Find command must be of the format: \u0027find \u003ckeyword\u003e\u0027.\","},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"                    this.getClass().getSimpleName());"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeEmptyDetailException, DukeInvalidDateException {"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"        Duke.output.add(\"These tasks match or contain the keyword \u0027\u0027\");"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        Duke.output.say(Stream.of(Duke.tasks.findTasksWithKeyword(argumentTokens[0])).map(Task::toString)"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"                .toArray(String[]::new));"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":34}},{"path":"src/main/java/prerthan/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.IO.Storage;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" * ListCommand"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"     * @param commandTokens"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidCommandException"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public ListCommand(String[] commandTokens) throws DukeInvalidArgumentException {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        super(commandTokens);"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        this.commandName \u003d CommandName.LIST;"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        if (commandTokens.length !\u003d 1)"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidArgumentException(null, ListCommand.class.getSimpleName());"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"        tasks.listTasks();"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":29}},{"path":"src/main/java/prerthan/duke/exception/DukeEmptyDetailException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * An exception thrown when the {@code detail} {@link String} passed to a"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" * {@link Task} constructor is empty."},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * "},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"public class DukeEmptyDetailException extends DukeException {"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1127957475772724808L;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    public DukeEmptyDetailException(String thrownBy) {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"        super(\"Task detail cannot be empty.\", thrownBy);"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"        return super.toString();"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":22}},{"path":"src/main/java/prerthan/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * An exception thrown to denote that an expected, but invalid program state has"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" * been reached. These exceptions are straightforward, and should be caught."},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"public class DukeException extends Throwable {"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 7354097854189773198L;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    protected String thrownBy;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    public DukeException(String message, String thrownBy) {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        this.thrownBy \u003d thrownBy;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"Message:%n%s%nStack trace:%s\", this.getMessage(), getStackTrace());"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":20}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * InvalidArgumentException"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidArgumentException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 5221851007504557801L;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidArgumentException(String message, String thrownBy) {"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"        super(message, thrownBy);"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":12}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * Thrown when user input is incorrect for a given correct command, or the"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" * command does not exist (i.e. the user command resolves to"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":" * {@link Command.CommandName#INVALID}.)"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidCommandException extends DukeException {"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 5862830938541195307L;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    private String command;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidCommandException(String command, String thrownBy) {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        super(\"Invalid command: \" + command, thrownBy);"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), this.command,"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"                this.thrownBy, getStackTrace());"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":24}},{"path":"src/main/java/prerthan/duke/exception/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.exception;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":" * DukeInvalidDateException"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"public class DukeInvalidDateException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"    private static final long serialVersionUID \u003d 1967070878565904626L;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    private String dateString;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"    public DukeInvalidDateException(String thrownBy, String dateString) {"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"        super(\"Invalid date format: \", thrownBy);"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"        this.dateString \u003d dateString;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"Message:%s%s%nThrown by:%s%nStack trace:%s\", this.getMessage(), "},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"                this.dateString, this.thrownBy, getStackTrace());"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":21}},{"path":"src/main/java/prerthan/duke/parse/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalAccessor;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"import java.time.temporal.TemporalField;"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"import java.util.Optional;"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"import java.util.stream.Stream;"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" * A utility class to parse {@link String}s into {@link ZonedDateTime} objects,"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" * useable by the Duke program."},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":" * "},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"public final class DateParser {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    private static final String DAY_FORMAT_PATTERN \u003d \"[EEEE][E]\";"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    private static final String DATE_FORMAT_PATTERN \u003d \"[dd][d][\u0027st\u0027][\u0027nd\u0027][\u0027rd\u0027][\u0027th\u0027][\u0027 of\u0027][/][-][ ][LLLL][MMM][L][, ][/][-][ ][uuuu]\";"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    private static final String TIME_FORMAT_PATTERN \u003d \"[kk:mm][[hh][h][[:][.]mm][ ]a][ v]\";"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    private static final DateTimeFormatter[] FORMATTERS \u003d Stream"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"            .of(DAY_FORMAT_PATTERN, DATE_FORMAT_PATTERN, TIME_FORMAT_PATTERN).map(DateTimeFormatter::ofPattern)"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"            .toArray(DateTimeFormatter[]::new);"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    private static final String OUTPUT_FORMAT_PATTERN \u003d \"EEEE dd\u0027st\u0027 MMMM YYYY, hh:mm a v\";"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"    private static final ZonedDateTime now \u003d ZonedDateTime.now();"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    public static ZonedDateTime parseDateTimeString(String dateTimeString) throws DukeInvalidDateException {"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        ZonedDateTime returnable \u003d now;"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"        String[] tokens \u003d dateTimeString.split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"        for (String token : tokens) {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"            for (DateTimeFormatter formatter : FORMATTERS) {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"                returnable \u003d parseTokenWithFormatter(token, formatter);"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"        return returnable;"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    public static String parseZonedDateTime(ZonedDateTime dateTimeGroup) {"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"        return DateTimeFormatter.ofPattern(OUTPUT_FORMAT_PATTERN).format(dateTimeGroup);"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    private static ZonedDateTime parseTokenWithFormatter(String token, DateTimeFormatter formatter)"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"            throws DukeInvalidDateException {"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"        Optional\u003cTemporalAccessor\u003e possiblyParsed;"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        ZonedDateTime returnable \u003d ZonedDateTime.ofInstant(now.toInstant(), now.getZone());"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"            possiblyParsed \u003d Optional.of(formatter.parse(token));"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"            possiblyParsed \u003d Optional.empty();"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"            throw new DukeInvalidDateException(DateParser.class.getSimpleName(), token);"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"        if (possiblyParsed.isPresent()) {"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"            TemporalAccessor parsed \u003d possiblyParsed.get();"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"            for (TemporalField field : formatter.getResolverFields()) {"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"                returnable \u003d returnable.with(field, parsed.isSupported(field) ? parsed.get(field) : now.get(field));"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"        return returnable;"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":65}},{"path":"src/main/java/prerthan/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.parse.DateParser;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * A Deadline, with a date-time group when it is due."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    private ZonedDateTime by;"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    Deadline(String detail, ZonedDateTime by) throws DukeEmptyDetailException {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"        this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"     * Creates a deadline with a specified detail, and a date-time to be done by."},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"     * @param detail the deadline detail"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"     * @param by     the date-time to be done by"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException if the detail is empty."},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateException"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    public Deadline(String detail, String by) throws DukeEmptyDetailException, DukeInvalidDateException {"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        this(detail, DateParser.parseDateTimeString(by));"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    public char getTaskTypeIcon() {"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"        return \u0027D\u0027;"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(), super.toString(), this.by);"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    public String encode() {"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s (due on: %s)\", this.getTaskTypeIcon(), super.toString(),"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"                this.by.format(DateTimeFormatter.ofPattern(\"dd/MMM/uuuu hh:mma z\")));"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    // @Override"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    // public String toString()"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    // {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    // return String.format(\"[%c]%s (by: %s)\", this.getTaskTypeIcon(),"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    // super.toString(),"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    // this.byString);"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"    // }"},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":56}},{"path":"src/main/java/prerthan/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeInvalidDateException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.parse.DateParser;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.time.ZonedDateTime;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * An Event, with a detail, a start time, and an end time."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"    protected String duration;"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    protected ZonedDateTime startTime;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    protected ZonedDateTime endTime;"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    Event(String detail, ZonedDateTime startTime, ZonedDateTime endTime) throws DukeEmptyDetailException {"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"     * Creates an Event with a specified detail, and a {@link String} that specifies"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"     * the duration of the Event. The actual starting and ending"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     * {@link ZonedDateTime} instance variables are parsed from this string."},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     * @param detail     The Event detail"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException if {@code detail} is blank (as specified by"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     *                                  {@link String#isBlank()})"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidDateException if the date cannot be parsed into a starting"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     *                                  and ending date"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    public Event(String detail, String startString, String endString)"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"            throws DukeEmptyDetailException, DukeInvalidDateException {"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        this(detail, DateParser.parseDateTimeString(startString), DateParser.parseDateTimeString(endString));"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"    public char getTaskTypeIcon() {"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"        return \u0027E\u0027;"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s (at: %s)\", this.getTaskTypeIcon(), super.toString(), this.duration);"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    public String encode() {"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%c,%d,%s,%s,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail,"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"                this.startTime, this.endTime);"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":55}},{"path":"src/main/java/prerthan/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":" * A Task class that allows creating a static list of tasks, that can be added"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":" * to, iterated through and polled for contents, or deleted from."},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":" * \u003cp\u003e"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":" * Also allows initialising an instance of a Task, which come with appropriate"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":" * instance methods."},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"public abstract class Task {"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    // A list of tasks."},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    protected static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    protected String detail;"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"    protected boolean isComplete;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"    Task() {"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d false;"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"     * Initialises a {@link Task} with some specified {@code detail}, and is set as"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"     * incomplete."},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"     * @param detail the task detail"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeEmptyDetailException if {@code detail} is blank, as specified by"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"     *                                  {@link String#isBlank()}."},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":"    protected Task(String detail) throws DukeEmptyDetailException {"},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"        this();"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"        if (detail.isBlank())"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":"            throw new DukeEmptyDetailException(this.getClass().getName());"},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"        this.detail \u003d detail;"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * Returns a character representing the completion state of this task."},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     * @return {@code \u0027✔\u0027} if complete, {@code \u0027✘\u0027} otherwise"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"    public char getCompleteIcon() {"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"        return isComplete ? \u0027✔\u0027 : \u0027✘\u0027;"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"     * Marks this task as complete, and returns the state of the task (must be"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"     * {@code true})."},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"     * @return {@code true} if complete"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     * @throws IOException"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"    public boolean markComplete() {"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"        this.isComplete \u003d true;"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        Duke.output.sayTaskMarkedComplete(this);"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"        return isComplete;"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"     * Returns a character representing the type of Task (To-Do, Deadline, or"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"     * Event)."},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"     * @return the character representing the task type"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"    public abstract char getTaskTypeIcon();"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"    public abstract String encode();"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]\\t %s\", this.getCompleteIcon(), this.detail);"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":81}},{"path":"src/main/java/prerthan/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.Duke;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"     * Adds a task to the list."},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"     * @param task A task to be added to the list."},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"     * @return {@code true} if task was successfully added (as specified by"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"     *         {@link ArrayList#add})"},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"     * @throws IOException"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"    public boolean addTask(Task task) {"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"        // Was the task successfully added to the list?"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"        boolean added \u003d Task.tasks.add(task);"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"        Duke.output.sayTaskAdded(task);"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        Duke.fileRW.appendTask(task);"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"        return added;"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"    private Task getTaskAtIndex(int index) throws IndexOutOfBoundsException {"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"        return tasks.get(index);"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"     * Returns a task at {@code position}."},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":"     * @param position The 1-indexed position of the task in the list"},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"     * @return The task at the specified {@code position}"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"     * @throws IndexOutOfBoundsException if {@code position} ≥ size of tasks list +"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"     *                                   1"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"    public Task getTaskAtPosition(int position) throws IndexOutOfBoundsException {"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"        return this.getTaskAtIndex(position - 1);"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"    public Task[] findTasksWithKeyword(String keyword) {"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"        return this.tasks.stream().dropWhile(x -\u003e !x.detail.contains(keyword)).toArray(Task[]::new);"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"     * Deletes the task at the specified {@code position}."},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":"     * @param position the (1-indexed) position of the task to be deleted"},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"    public void deleteTaskAtPosition(int position) {"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"        Duke.output.sayTaskDeleted(this.getTaskAtPosition(position));"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"        tasks.remove(position - 1);"},{"lineNumber":64,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":66,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"prerthan99"},"content":"     * Prints the tasks in this list."},{"lineNumber":68,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"prerthan99"},"content":"    public void listTasks() {"},{"lineNumber":70,"author":{"gitId":"prerthan99"},"content":"        if (!Task.tasks.isEmpty()) {"},{"lineNumber":71,"author":{"gitId":"prerthan99"},"content":"            Duke.output.say(\"Here are the tasks in your list:\");"},{"lineNumber":72,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":73,"author":{"gitId":"prerthan99"},"content":"            int listNumber \u003d 1;"},{"lineNumber":74,"author":{"gitId":"prerthan99"},"content":"            for (Task task : Task.tasks) {"},{"lineNumber":75,"author":{"gitId":"prerthan99"},"content":"                Duke.output.add(String.format(\"%d.%s%n\", listNumber++, task));"},{"lineNumber":76,"author":{"gitId":"prerthan99"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"prerthan99"},"content":"            Duke.output.say();"},{"lineNumber":78,"author":{"gitId":"prerthan99"},"content":"        } else"},{"lineNumber":79,"author":{"gitId":"prerthan99"},"content":"            Duke.output.say(\"You have no tasks in your list.\");"},{"lineNumber":80,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":82,"author":{"gitId":"prerthan99"},"content":"    public int numberOfTasks() {"},{"lineNumber":83,"author":{"gitId":"prerthan99"},"content":"        return this.tasks.size();"},{"lineNumber":84,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":85}},{"path":"src/main/java/prerthan/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import prerthan.duke.exception.DukeEmptyDetailException;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":" * A To-Do; effectively the same as the inherited abstract class, {@link Task}."},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":" */"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"     * Creates a Todo with some detail."},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"     * "},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"     * @param detail the Todo detail"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"     * @throws DukeInvalidArgumentException if the detail is blank"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"    public Todo(String detail) throws DukeEmptyDetailException {"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"        super(detail);"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"    public char getTaskTypeIcon() {"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"        return \u0027T\u0027;"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"[%c]%s\", this.getTaskTypeIcon(), super.toString());"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"    public String encode() {"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"        return String.format(\"%c,%d,%s\", this.getTaskTypeIcon(), this.isComplete ? 1 : 0, this.detail);"},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":33}},{"path":"src/test/java/prerthan/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DukeTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void run()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void programLoop()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void exit()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void main()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":23}},{"path":"src/test/java/prerthan/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class AddCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":10}},{"path":"src/test/java/prerthan/duke/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class ByeCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DeleteCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DoneCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class FindCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.command;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class ListCommandTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void execute()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":11}},{"path":"src/test/java/prerthan/duke/io/InputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class InputTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void readline()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void nextLine()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokens()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTokenStream()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstToken()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void getCommand()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t@Test void tokensWithoutFirst()"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t@Test void inputWithoutFirstToken()"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t@Test void getDetail()"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t@Test void getFirstTimeString()"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t@Test void getNextTimeString()"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":55}},{"path":"src/test/java/prerthan/duke/io/OutputTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class OutputTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void ioException()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendWithNewline()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void testAppendWithNewline()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void add()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void say()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":32,"author":{"gitId":"prerthan99"},"content":"\t@Test void testSay1()"},{"lineNumber":33,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":34,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":35,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":36,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayError()"},{"lineNumber":37,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":38,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":39,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":40,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayHello()"},{"lineNumber":41,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":42,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":44,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayGoodBye()"},{"lineNumber":45,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":46,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":47,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":48,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskAdded()"},{"lineNumber":49,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":50,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":52,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskMarkedComplete()"},{"lineNumber":53,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":54,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":56,"author":{"gitId":"prerthan99"},"content":"\t@Test void sayTaskDeleted()"},{"lineNumber":57,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":58,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":59,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":60,"author":{"gitId":"prerthan99"},"content":"\t@Test void close()"},{"lineNumber":61,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":62,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":63,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":63}},{"path":"src/test/java/prerthan/duke/io/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.io;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class StorageTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void appendTask()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void decodeLine()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void loadFromFile()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/parse/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.parse;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DateParserTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void parseDateTimeString()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void formatZonedDateTime()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":15}},{"path":"src/test/java/prerthan/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class DeadlineTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class EventTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"src/test/java/prerthan/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class TaskListTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void addTask()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskAtPosition()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void findTasksWithKeyword()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":20,"author":{"gitId":"prerthan99"},"content":"\t@Test void deleteTaskAtPosition()"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":22,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":23,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":24,"author":{"gitId":"prerthan99"},"content":"\t@Test void listTasks()"},{"lineNumber":25,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":27,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":28,"author":{"gitId":"prerthan99"},"content":"\t@Test void numberOfTasks()"},{"lineNumber":29,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":30,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":31,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":31}},{"path":"src/test/java/prerthan/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"prerthan99"},"content":"package prerthan.duke.task;"},{"lineNumber":2,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":3,"author":{"gitId":"prerthan99"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":5,"author":{"gitId":"prerthan99"},"content":"class TodoTest"},{"lineNumber":6,"author":{"gitId":"prerthan99"},"content":"{"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":8,"author":{"gitId":"prerthan99"},"content":"\t@Test void getTaskTypeIcon()"},{"lineNumber":9,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":11,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":12,"author":{"gitId":"prerthan99"},"content":"\t@Test void testToString()"},{"lineNumber":13,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":14,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":15,"author":{"gitId":"prerthan99"},"content":""},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"\t@Test void encode()"},{"lineNumber":17,"author":{"gitId":"prerthan99"},"content":"\t{"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"\t}"},{"lineNumber":19,"author":{"gitId":"prerthan99"},"content":"}"}],"authorContributionMap":{"prerthan99":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"prerthan99"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"prerthan99"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\sharadhr\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"prerthan99"},"content":"java -classpath ..\\bin\\main Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"prerthan99"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"prerthan99":4,"-":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"prerthan99"},"content":"if ! javac -cp ../src -Xlint:none -d ../bin ../src/main/java/sharadhr/duke/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"prerthan99"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"prerthan99":2,"-":32}}]
