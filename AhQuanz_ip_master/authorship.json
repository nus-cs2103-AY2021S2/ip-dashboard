[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"AhQuanz":18,"-":46}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"### Viewing tasks: `list`"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"### Complete a task: `done`"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"### Delete a task: `delete`"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"### find tasks: `find`"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"### Add a todo task : `todo`"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"### Add a deadline task : `deadline`"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"### Add a Event task: `event`"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"### Exit the program : `bye`"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"### `list` - list all the task"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"Shows all tasks that are currently in Duke"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"Format: `list`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `list`"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"Expected outcome:"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"![Image of tasks](Ui.png)"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"Or"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"![Image_of_no_task](List_No_task.PNG)"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"### `done` - Completes a task "},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"Marks a given task number as done"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"Format: `done INDEX`"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"- INDEX is a non negative number"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"- INDEX starts from 1 - number of task in Duke "},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `done 1`"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"Expected outcome: "},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_done](done_success.png)"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"Or"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"![Image_of_failure_done](done_failure.png)"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"### `delete` - Deletes a task "},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"Deletes a given task number in Duke"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"Format: `delete INDEX`"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"- INDEX is a non negative number"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"- INDEX starts from 1 - number of task in Duke "},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"  "},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `delete 1`"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"Expected outcome:"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_delete](delete_success.png)"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"Or"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"![Image_of_failure_delete](delete_failure.png)"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"### `find` - Finding of tasks "},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"finds tasks that contains a certain keyword"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"Format: `find SeachKey`"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"- The search is case-insensitive. e.g buy will match Buy"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"- Only task description will be searched"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `find buy`"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_find](search_success.png)"},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"Or"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"![Image_of_failure_find](search_failure.png)"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":"### `todo \u003ctaskName\u003e` - Adds a todo task "},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":"Adds a todo task into Duke"},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"Format : `todo taskName`"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `todo buy book`"},{"lineNumber":87,"author":{"gitId":"-"},"content":""},{"lineNumber":88,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_todo_add](add_todo_success.png)"},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"### `deadline \u003ctaskName\u003e /by \u003cdeadline\u003e` - Adds a deadline task "},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"Adds a deadline task into Duke "},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":"Format: `deadline taskName /by yyyy-M-dd hhmm`"},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"- deadline has to be in the form of yyyy-M-dd hmm or yyyy-mm-dd hhmm (e.g 2021-5-03 630 or 2021-05-03 0630)"},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `deadline project meeting \\by 2020-2-15 1600`"},{"lineNumber":99,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":"Expected outcome:"},{"lineNumber":101,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_deadline_add](add_deadline_success.png)"},{"lineNumber":103,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"### `event \u003ctaskName\u003e /by \u003cdeadline\u003e` -  Adds a event task "},{"lineNumber":105,"author":{"gitId":"AhQuanz"},"content":"Adds a event task into Duke "},{"lineNumber":106,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":107,"author":{"gitId":"AhQuanz"},"content":"Format: `event taskName /by yyyy-M-dd hhmm - hhmm`"},{"lineNumber":108,"author":{"gitId":"AhQuanz"},"content":"- deadline has to be in the form of yyyy-M-dd hmm - hmm or yyyy-mm-dd hhmm - hhmm "},{"lineNumber":109,"author":{"gitId":"AhQuanz"},"content":"  (e.g 2021-5-03 630 - 830 or 2021-05-03 0630 - 0830)"},{"lineNumber":110,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":111,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `event mid terms \\by 2020-03-07 830 - 1000`"},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":113,"author":{"gitId":"AhQuanz"},"content":"Expected outcome:"},{"lineNumber":114,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":115,"author":{"gitId":"AhQuanz"},"content":"![Image_of_success_event_add](add_event_success.png)"},{"lineNumber":116,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":117,"author":{"gitId":"AhQuanz"},"content":"### `bye` - exits the application"},{"lineNumber":118,"author":{"gitId":"AhQuanz"},"content":"Saves the current tasks into file specificed at the start "},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":120,"author":{"gitId":"AhQuanz"},"content":"Example of usage: `bye`"}],"authorContributionMap":{"AhQuanz":104,"-":16}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class AddCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private Task task;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    public AddCommand(Task task) {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"        this.task \u003d task;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"        return taskList.addTask(task);"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":11}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public abstract class Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    public abstract String execute(TaskList tasks, Ui ui);"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"/** Class Deadline that represent a task with a deadline **/"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"    /** Symbol to represent a deadline task **/"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    private static final char SYMBOL \u003d \u0027D\u0027;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    /** deadline of the task **/"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    private LocalDateTime deadline;"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"     * Constructor of a Deadline task."},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"     * @param desc Description of the deadline task"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"     * @param deadline Deadline of the deadline task"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"    public Deadline(String desc, LocalDateTime deadline) {"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"        super(desc);"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task."},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"[%c] %s (by: %s)\", SYMBOL, super.toString(), super.format(this.deadline));"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task for saving."},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task for saving"},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"    public String save() {"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%c,%s,%s\\n\", SYMBOL, super.save(), super.saveFormat(this.deadline));"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"     * Returns result of the updating of task."},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"     * @param field , field to be updated"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"     * @param value , value to be updated"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"     * @return String , result of the updating"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"    public String update(String field, String value) {"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"        System.out.println(field);"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"        System.out.println(field.contains(\"deadline\"));"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"        if (field.contains(\"desc\")) {"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"            super.update(field, value);"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"            LocalDateTime dateTime \u003d Parser.parseDate(value, Parser.ERROR_INVALID_DATE_FORMAT);"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"            if (field.contains(\"deadline\")) {"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"                deadline \u003d dateTime;"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"                return Ui.showSuccessUpdate();"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"            return Ui.showError(e.getMessage());"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showFailUpdate();"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":62}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private int option;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    public DeleteCommand(int option) {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"        this.option \u003d option;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"        return taskList.deleteTask(option);"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":11}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":" * An example of a custom control using FXML."},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":" * containing text from the speaker."},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"public class DialogBox extends HBox {"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    private Label dialog;"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    private ImageView displayPicture;"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"    private final Circle clip \u003d new Circle(50, 50, 45);"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"        dialog.setText(text);"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"        displayPicture.setImage(img);"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"    private void flip() {"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        Collections.reverse(tmp);"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"        db.setBackground(new Background(new BackgroundFill(Color.LIGHTBLUE, null, null)));"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"        db.setPadding(new Insets(0, 0, 0, 10));"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"        db.flip();"},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"        db.setPadding(new Insets(0, 10, 0, 0));"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"        return db;"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":70}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class DoneCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private int option;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    public DoneCommand(int option) {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"        this.option \u003d option;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"        return taskList.markAsDone(this.option);"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":11}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private boolean isSetUp \u003d false;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"    private Ui ui;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"    private void setUp() {"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"        isSetUp \u003d true;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"        ui \u003d new Ui();"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    public String getResponse(String fullCommand) {"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"        if (!isSetUp) {"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"            setUp();"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"            return ui.load(fullCommand);"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"        return ui.parseAndPrint(fullCommand);"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"AhQuanz":14,"-":3}},{"path":"src/main/java/DukeDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class DukeDeadlineException extends Exception {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    public DukeDeadlineException(String message) {"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    public DukeException(String message) {"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"/** Class Event that represents a Event task**/"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"public class Event extends Task {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"    /** Symbol to represent a Event task **/"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    private static final char SYMBOL \u003d \u0027E\u0027;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    /** Start datetime of the event **/"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    private LocalDateTime start;"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    /** End datetime of the event **/"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    private LocalDateTime end;"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"     * Constructor of a Event task."},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"     * @param desc Description of the deadline task"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"     * @param start Start datetime of the event"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"     * @param end End datetime of the event"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    public Event(String desc, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"        super(desc);"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        this.start \u003d start;"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"        this.end \u003d end;"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task."},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"[%c] %s (%s - %s)\", SYMBOL, super.toString(),"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"                    super.format(this.start), super.format(this.end));"},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task for saving."},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task for saving"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"    public String save() {"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%c,%s,%s,%s\\n\", SYMBOL, super.save(),"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"                    super.saveFormat(this.start), super.saveFormat(this.end));"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"     * Returns result of the updating of task."},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"     * @param field , field to be updated"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"     * @param value , value to be updated"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"     * @return String , result of the updating"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"    public String update(String field, String value) {"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        if (field.contains(\"desc\")) {"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"            super.update(field, value);"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"            LocalDateTime dateTime \u003d Parser.parseDate(value, Parser.ERROR_INVALID_DATE_FORMAT);"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"            if (field.contains(\"start\")) {"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"                start \u003d dateTime;"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"            } else if (field.contains(\"end\")) {"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"                end \u003d dateTime;"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"            return Ui.showError(e.getMessage());"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showFailUpdate();"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":67}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class FindCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private String searchTerm;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    public FindCommand(String searchTerm) {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"        this.searchTerm \u003d searchTerm;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"        return taskList.search(searchTerm);"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":11}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":10}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class ListCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"        return taskList.printAllTask();"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":5}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"            stage.show();"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"            e.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":29}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"        duke \u003d d;"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"                DialogBox.getDukeDialog(Ui.showGreeting(), dukeImage)"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"    private void handleUserInput() {"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"        if (response.equalsIgnoreCase(Ui.GOODBYE)) {"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"            System.exit(0);"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":58}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    public static final String ERROR_INVALID_DATE_FORMAT \u003d \"OOPS!! DateTime format is incorrect. yyyy-M-dd Hmm\";"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_EMPTY_DESCRIPTION \u003d \"OOPS!!! The description cannot be empty.\";"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_EMPTY_SEARCH_TERM \u003d \"OPPS!!! The search term for find cannot be empty.\";"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_EMPTY_COMMAND \u003d \"OPPS!!! The command cannot be empty\";"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_EMPTY_DEADLINE \u003d \"OOPS!!! The deadline of a task cannot be empty.\";"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_OPTION \u003d \"OOPS!! Option is missing or at the wrong place. Keyword \u003cOption\u003e ....\";"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_INVALID_COMMAND \u003d \"OOPS!!! I`m sorry. but i don`t know what that means :-(\";"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_INVALID_UPDATE_COMMAND \u003d \"OOPS!! Update command should be in this form : \""},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"            + \"Update \u003cfield\u003e \u003cValue\u003e \";"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_INVALID_DEADLINE_DATETIME \u003d \"OOPS!!! Format of the deadline of \""},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"            + \"a deadline task should be (Year-Month-Day time (24 hours)\";"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_INVALID_EVENT_DATETIME \u003d \"OOPS!!! Format of the time period of a Event task \""},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"            + \"should be (Year-Month-Day Time(24 hours)-Time(24 hours)\";"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_LOAD_INVALID \u003d \"OPPS!!! This task seems to be corrupted\";"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_LOAD_TASK_DATE \u003d \"The deadline for this task is corrupted \""},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"            + \"(Required : yyyy-M-dd Hmm)\";"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"     * Returns a Command object based on the fullCommand given."},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"     * @param fullCommand (command entered by the user)."},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"     * @return Command comamnd , Command object from parsing the string entered by the user."},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , Exception regarding the command."},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException , Exception regarding the dateTime of the command."},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"    public static Command parse(String fullCommand) throws DukeException , DukeDeadlineException {"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"        String[] commandParts \u003d getKeyword(fullCommand);"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"        checkKeyword(commandParts);"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"        return createCommand(commandParts);"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"     * Returns String array containing the keyword extracted from the command and the remaining of the command."},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"     * @param command , String entered by the user"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"     * @return String[] , array containing the keyword and the remaining of the command."},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"    private static String[] getKeyword(String command) {"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"        ArrayList\u003cString\u003e commandParts \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        String trimCommand \u003d command.trim();"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"        int firstSpace \u003d trimCommand.indexOf(\" \");"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        if (firstSpace \u003d\u003d -1) {"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"            commandParts.add(trimCommand);"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"            String keyword \u003d trimCommand.substring(0, firstSpace);"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"            commandParts.add(keyword);"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"            commandParts.add(trimCommand.substring(firstSpace));"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"        return commandParts.toArray(new String[commandParts.size()]);"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"     * Checks if the keyword is a valid keyword."},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , Array that contains the parts of the command (Keyword , remainder)."},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , Exception thrown when the keyword is not in the a accepted keyword."},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"    private static void checkKeyword (String[] commandParts) throws DukeException {"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"        if (commandParts.length \u003d\u003d 0) {"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_EMPTY_COMMAND);"},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"AhQuanz"},"content":"        switch (commandParts[0].toLowerCase()) {"},{"lineNumber":73,"author":{"gitId":"AhQuanz"},"content":"        case\"bye\":"},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"        case\"list\":"},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"        case\"done\":"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"        case\"delete\":"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":"        case \"find\":"},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":"        case\"todo\":"},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"        case\"deadline\":"},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"        case\"event\":"},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"        case \"update\":"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"        default:"},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_INVALID_COMMAND);"},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":"     * Returns a command based on the commandParts provided."},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String array that contains the parts of the command (Keyword,remainder)."},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , command created based on the String array provided."},{"lineNumber":101,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if there is any missing fields required by the command."},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException , if datetime provided is not of the format."},{"lineNumber":103,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"    private static Command createCommand(String[] commandParts) throws DukeException , DukeDeadlineException {"},{"lineNumber":105,"author":{"gitId":"AhQuanz"},"content":"        String keyword \u003d commandParts[0].toLowerCase();"},{"lineNumber":106,"author":{"gitId":"AhQuanz"},"content":"        boolean requireDesc \u003d checkRequireDescription(keyword);"},{"lineNumber":107,"author":{"gitId":"AhQuanz"},"content":"        boolean requireOption \u003d checkRequireOption(keyword);"},{"lineNumber":108,"author":{"gitId":"AhQuanz"},"content":"        boolean requireDeadline \u003d checkRequireDeadline(keyword);"},{"lineNumber":109,"author":{"gitId":"AhQuanz"},"content":"        boolean isUpdate \u003d keyword.equalsIgnoreCase(\"Update\");"},{"lineNumber":110,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":111,"author":{"gitId":"AhQuanz"},"content":"        if (!requireDesc) {"},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":"            return createWithoutDescCommand(commandParts);"},{"lineNumber":113,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":115,"author":{"gitId":"AhQuanz"},"content":"        if (isUpdate) {"},{"lineNumber":116,"author":{"gitId":"AhQuanz"},"content":"            checkOption(commandParts);"},{"lineNumber":117,"author":{"gitId":"AhQuanz"},"content":"            return createUpdateCommand(commandParts);"},{"lineNumber":118,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":120,"author":{"gitId":"AhQuanz"},"content":"        if (requireOption) {"},{"lineNumber":121,"author":{"gitId":"AhQuanz"},"content":"            checkOption(commandParts);"},{"lineNumber":122,"author":{"gitId":"AhQuanz"},"content":"            return createWithOptionCommand(commandParts);"},{"lineNumber":123,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":125,"author":{"gitId":"AhQuanz"},"content":"        if (!requireDeadline) {"},{"lineNumber":126,"author":{"gitId":"AhQuanz"},"content":"            String errorMessage \u003d ERROR_EMPTY_DESCRIPTION;"},{"lineNumber":127,"author":{"gitId":"AhQuanz"},"content":"            if (keyword.equalsIgnoreCase(\"find\")) {"},{"lineNumber":128,"author":{"gitId":"AhQuanz"},"content":"                errorMessage \u003d ERROR_EMPTY_SEARCH_TERM;"},{"lineNumber":129,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"AhQuanz"},"content":"            checkDescription(commandParts, errorMessage);"},{"lineNumber":131,"author":{"gitId":"AhQuanz"},"content":"            return createWithoutDeadlineCommand(commandParts);"},{"lineNumber":132,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":134,"author":{"gitId":"AhQuanz"},"content":"        checkDescription(commandParts, ERROR_EMPTY_DESCRIPTION);"},{"lineNumber":135,"author":{"gitId":"AhQuanz"},"content":"        return createAddCommand(commandParts);"},{"lineNumber":136,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":138,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"AhQuanz"},"content":"     * Checks if the keyword requires a description."},{"lineNumber":140,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"AhQuanz"},"content":"     * @param keyword , String to be checked."},{"lineNumber":142,"author":{"gitId":"AhQuanz"},"content":"     * @return boolean , if the keyword requires a description."},{"lineNumber":143,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"AhQuanz"},"content":"    private static boolean checkRequireDescription(String keyword) {"},{"lineNumber":145,"author":{"gitId":"AhQuanz"},"content":"        switch (keyword) {"},{"lineNumber":146,"author":{"gitId":"AhQuanz"},"content":"        case\"bye\":"},{"lineNumber":147,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":148,"author":{"gitId":"AhQuanz"},"content":"        case\"list\":"},{"lineNumber":149,"author":{"gitId":"AhQuanz"},"content":"            return false;"},{"lineNumber":150,"author":{"gitId":"AhQuanz"},"content":"        default:"},{"lineNumber":151,"author":{"gitId":"AhQuanz"},"content":"            return true;"},{"lineNumber":152,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":155,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"AhQuanz"},"content":"     * Checks if the keyword requires a option."},{"lineNumber":157,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"AhQuanz"},"content":"     * @param keyword , String to be checked."},{"lineNumber":159,"author":{"gitId":"AhQuanz"},"content":"     * @return boolean, if the keyword requires a option."},{"lineNumber":160,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"AhQuanz"},"content":"    private static boolean checkRequireOption(String keyword) {"},{"lineNumber":162,"author":{"gitId":"AhQuanz"},"content":"        switch (keyword) {"},{"lineNumber":163,"author":{"gitId":"AhQuanz"},"content":"        case\"done\":"},{"lineNumber":164,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":165,"author":{"gitId":"AhQuanz"},"content":"        case\"delete\":"},{"lineNumber":166,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":167,"author":{"gitId":"AhQuanz"},"content":"        case \"update\":"},{"lineNumber":168,"author":{"gitId":"AhQuanz"},"content":"            return true;"},{"lineNumber":169,"author":{"gitId":"AhQuanz"},"content":"        default:"},{"lineNumber":170,"author":{"gitId":"AhQuanz"},"content":"            return false;"},{"lineNumber":171,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":174,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"AhQuanz"},"content":"     * Checks if the keyword requires a deadline."},{"lineNumber":176,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"AhQuanz"},"content":"     * @param keyword , String to be checked."},{"lineNumber":178,"author":{"gitId":"AhQuanz"},"content":"     * @return boolean, if the keyword requires a deadline."},{"lineNumber":179,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"AhQuanz"},"content":"    private static boolean checkRequireDeadline(String keyword) {"},{"lineNumber":181,"author":{"gitId":"AhQuanz"},"content":"        switch(keyword) {"},{"lineNumber":182,"author":{"gitId":"AhQuanz"},"content":"        case \"find\":"},{"lineNumber":183,"author":{"gitId":"AhQuanz"},"content":"            //Fallthrough"},{"lineNumber":184,"author":{"gitId":"AhQuanz"},"content":"        case \"todo\":"},{"lineNumber":185,"author":{"gitId":"AhQuanz"},"content":"            return false;"},{"lineNumber":186,"author":{"gitId":"AhQuanz"},"content":"        default:"},{"lineNumber":187,"author":{"gitId":"AhQuanz"},"content":"            return true;"},{"lineNumber":188,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":191,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"AhQuanz"},"content":"     * Returns a command that does not require a description."},{"lineNumber":193,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String array containing the parts of the command (Keyword)"},{"lineNumber":195,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , a command based on the keyword."},{"lineNumber":196,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if the keyword is not a accepted keyword."},{"lineNumber":197,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"AhQuanz"},"content":"    private static Command createWithoutDescCommand(String[] commandParts) throws DukeException {"},{"lineNumber":199,"author":{"gitId":"AhQuanz"},"content":"        String keyword \u003d commandParts[0];"},{"lineNumber":200,"author":{"gitId":"AhQuanz"},"content":"        if (keyword.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":201,"author":{"gitId":"AhQuanz"},"content":"            return new SaveCommand(keyword);"},{"lineNumber":202,"author":{"gitId":"AhQuanz"},"content":"        } else if (keyword.equalsIgnoreCase(\"list\")) {"},{"lineNumber":203,"author":{"gitId":"AhQuanz"},"content":"            return new ListCommand();"},{"lineNumber":204,"author":{"gitId":"AhQuanz"},"content":"        } else {"},{"lineNumber":205,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_INVALID_COMMAND);"},{"lineNumber":206,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":209,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":210,"author":{"gitId":"AhQuanz"},"content":"     * Checks that the command entered has a numeric option."},{"lineNumber":211,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":213,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if the option does not exist or it is not a number."},{"lineNumber":214,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"AhQuanz"},"content":"    private static void checkOption(String[] commandParts) throws DukeException {"},{"lineNumber":216,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":217,"author":{"gitId":"AhQuanz"},"content":"            String remainderCommand \u003d commandParts[1].trim();"},{"lineNumber":218,"author":{"gitId":"AhQuanz"},"content":"            int nextSpace \u003d remainderCommand.indexOf(\" \");"},{"lineNumber":219,"author":{"gitId":"AhQuanz"},"content":"            if (nextSpace \u003d\u003d -1) {"},{"lineNumber":220,"author":{"gitId":"AhQuanz"},"content":"                nextSpace \u003d remainderCommand.length();"},{"lineNumber":221,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":222,"author":{"gitId":"AhQuanz"},"content":"            int option \u003d Integer.parseInt(remainderCommand.substring(0, nextSpace)) - 1;"},{"lineNumber":223,"author":{"gitId":"AhQuanz"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":224,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_OPTION);"},{"lineNumber":225,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":228,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"AhQuanz"},"content":"     * Creates a command that requires a option."},{"lineNumber":230,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":232,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , a command that requires a option based on the commandParts given."},{"lineNumber":233,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if option is invalid or invalid keyword."},{"lineNumber":234,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"AhQuanz"},"content":"    private static Command createWithOptionCommand(String[] commandParts) throws DukeException {"},{"lineNumber":236,"author":{"gitId":"AhQuanz"},"content":"        String keyword \u003d commandParts[0];"},{"lineNumber":237,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":238,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":239,"author":{"gitId":"AhQuanz"},"content":"            String remainderCommand \u003d commandParts[1].trim();"},{"lineNumber":240,"author":{"gitId":"AhQuanz"},"content":"            int nextSpace \u003d remainderCommand.indexOf(\" \");"},{"lineNumber":241,"author":{"gitId":"AhQuanz"},"content":"            if (nextSpace \u003d\u003d -1) {"},{"lineNumber":242,"author":{"gitId":"AhQuanz"},"content":"                nextSpace \u003d remainderCommand.length();"},{"lineNumber":243,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":244,"author":{"gitId":"AhQuanz"},"content":"            int option \u003d Integer.parseInt(remainderCommand.substring(0, nextSpace)) - 1;"},{"lineNumber":245,"author":{"gitId":"AhQuanz"},"content":"            switch (keyword) {"},{"lineNumber":246,"author":{"gitId":"AhQuanz"},"content":"            case \"done\" :"},{"lineNumber":247,"author":{"gitId":"AhQuanz"},"content":"                return new DoneCommand(option);"},{"lineNumber":248,"author":{"gitId":"AhQuanz"},"content":"            case \"delete\":"},{"lineNumber":249,"author":{"gitId":"AhQuanz"},"content":"                return new DeleteCommand(option);"},{"lineNumber":250,"author":{"gitId":"AhQuanz"},"content":"            default:"},{"lineNumber":251,"author":{"gitId":"AhQuanz"},"content":"                throw new DukeException(ERROR_INVALID_COMMAND);"},{"lineNumber":252,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":253,"author":{"gitId":"AhQuanz"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":254,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_OPTION);"},{"lineNumber":255,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":256,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":258,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":259,"author":{"gitId":"AhQuanz"},"content":"     * Creates Command that does not need a deadline."},{"lineNumber":260,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":261,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":262,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , a command that does not requires a deadline based on the commandParts given."},{"lineNumber":263,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if keyword is a invalid keyword."},{"lineNumber":264,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":265,"author":{"gitId":"AhQuanz"},"content":"    private static Command createWithoutDeadlineCommand(String[] commandParts) throws DukeException {"},{"lineNumber":266,"author":{"gitId":"AhQuanz"},"content":"        String keyword \u003d commandParts[0];"},{"lineNumber":267,"author":{"gitId":"AhQuanz"},"content":"        String remainderCommand \u003d commandParts[1].trim();"},{"lineNumber":268,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":269,"author":{"gitId":"AhQuanz"},"content":"        if (keyword.equalsIgnoreCase(\"find\")) {"},{"lineNumber":270,"author":{"gitId":"AhQuanz"},"content":"            return new FindCommand(remainderCommand);"},{"lineNumber":271,"author":{"gitId":"AhQuanz"},"content":"        } else if (keyword.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":272,"author":{"gitId":"AhQuanz"},"content":"            return new AddCommand(new Todo(remainderCommand));"},{"lineNumber":273,"author":{"gitId":"AhQuanz"},"content":"        } else {"},{"lineNumber":274,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_INVALID_COMMAND);"},{"lineNumber":275,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":276,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":278,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"AhQuanz"},"content":"     * Creates a update command."},{"lineNumber":280,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":282,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , a update command."},{"lineNumber":283,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if there is missing information."},{"lineNumber":284,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"AhQuanz"},"content":"    private static Command createUpdateCommand(String[] commandParts) throws DukeException {"},{"lineNumber":286,"author":{"gitId":"AhQuanz"},"content":"        String remainderCommand \u003d commandParts[1].trim();"},{"lineNumber":287,"author":{"gitId":"AhQuanz"},"content":"        int firstSpace \u003d remainderCommand.indexOf(\" \");"},{"lineNumber":288,"author":{"gitId":"AhQuanz"},"content":"        int option \u003d Integer.parseInt(remainderCommand.substring(0, firstSpace)) - 1;"},{"lineNumber":289,"author":{"gitId":"AhQuanz"},"content":"        int nextSpace \u003d remainderCommand.indexOf(\" \", firstSpace + 1);"},{"lineNumber":290,"author":{"gitId":"AhQuanz"},"content":"        if (nextSpace \u003d\u003d -1) {"},{"lineNumber":291,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_INVALID_UPDATE_COMMAND);"},{"lineNumber":292,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":293,"author":{"gitId":"AhQuanz"},"content":"        String field \u003d remainderCommand.substring(firstSpace, nextSpace);"},{"lineNumber":294,"author":{"gitId":"AhQuanz"},"content":"        String value \u003d remainderCommand.substring(nextSpace + 1);"},{"lineNumber":295,"author":{"gitId":"AhQuanz"},"content":"        return new UpdateCommand(option, field, value);"},{"lineNumber":296,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":298,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"AhQuanz"},"content":"     * Creates a add Command."},{"lineNumber":300,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":301,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":302,"author":{"gitId":"AhQuanz"},"content":"     * @return Command , a AddCommand to add a task."},{"lineNumber":303,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if keyword is invalid."},{"lineNumber":304,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException , if deadline is missing or deadline is incorrect format."},{"lineNumber":305,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"AhQuanz"},"content":"    private static Command createAddCommand(String[] commandParts) throws DukeException, DukeDeadlineException {"},{"lineNumber":307,"author":{"gitId":"AhQuanz"},"content":"        String keyword \u003d commandParts[0];"},{"lineNumber":308,"author":{"gitId":"AhQuanz"},"content":"        String remainderCommand \u003d commandParts[1].trim();"},{"lineNumber":309,"author":{"gitId":"AhQuanz"},"content":"        Task task \u003d null;"},{"lineNumber":310,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":311,"author":{"gitId":"AhQuanz"},"content":"        assert !keyword.trim().isEmpty();"},{"lineNumber":312,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":313,"author":{"gitId":"AhQuanz"},"content":"        Task t \u003d null;"},{"lineNumber":314,"author":{"gitId":"AhQuanz"},"content":"        int firstSlash \u003d remainderCommand.indexOf(\"/\");"},{"lineNumber":315,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":316,"author":{"gitId":"AhQuanz"},"content":"        if (firstSlash \u003d\u003d -1) {"},{"lineNumber":317,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeDeadlineException(ERROR_EMPTY_DEADLINE);"},{"lineNumber":318,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":319,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":320,"author":{"gitId":"AhQuanz"},"content":"        int nextSpace \u003d remainderCommand.indexOf(\" \", firstSlash) + 1;"},{"lineNumber":321,"author":{"gitId":"AhQuanz"},"content":"        String taskDescription \u003d remainderCommand.substring(0, firstSlash);"},{"lineNumber":322,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":323,"author":{"gitId":"AhQuanz"},"content":"        if (keyword.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":324,"author":{"gitId":"AhQuanz"},"content":"            LocalDateTime deadline \u003d parseDate(remainderCommand.substring(nextSpace), ERROR_INVALID_DEADLINE_DATETIME);"},{"lineNumber":325,"author":{"gitId":"AhQuanz"},"content":"            task \u003d new Deadline(taskDescription, deadline);"},{"lineNumber":326,"author":{"gitId":"AhQuanz"},"content":"        } else if (keyword.equalsIgnoreCase(\"event\")) {"},{"lineNumber":327,"author":{"gitId":"AhQuanz"},"content":"            LocalDateTime[] deadlines \u003d parseDates(remainderCommand.substring(nextSpace), ERROR_INVALID_EVENT_DATETIME);"},{"lineNumber":328,"author":{"gitId":"AhQuanz"},"content":"            task \u003d new Event(taskDescription, deadlines[0], deadlines[1]);"},{"lineNumber":329,"author":{"gitId":"AhQuanz"},"content":"        } else {"},{"lineNumber":330,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(ERROR_INVALID_COMMAND);"},{"lineNumber":331,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":333,"author":{"gitId":"AhQuanz"},"content":"        return new AddCommand(task);"},{"lineNumber":334,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":336,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":337,"author":{"gitId":"AhQuanz"},"content":"     * Checks commandParts has description."},{"lineNumber":338,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":339,"author":{"gitId":"AhQuanz"},"content":"     * @param commandParts , String Array containing the parts of the command (keyword,remainder)."},{"lineNumber":340,"author":{"gitId":"AhQuanz"},"content":"     * @param errorMessage , Error message to display if description is missing."},{"lineNumber":341,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException , if description is missing."},{"lineNumber":342,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":343,"author":{"gitId":"AhQuanz"},"content":"    private static void checkDescription(String[] commandParts, String errorMessage) throws DukeException {"},{"lineNumber":344,"author":{"gitId":"AhQuanz"},"content":"        if (commandParts.length !\u003d 2) {"},{"lineNumber":345,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":346,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":349,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":350,"author":{"gitId":"AhQuanz"},"content":"     * Returns a array of LocalDateTime object."},{"lineNumber":351,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":352,"author":{"gitId":"AhQuanz"},"content":"     * @param data String that contains the date."},{"lineNumber":353,"author":{"gitId":"AhQuanz"},"content":"     * @param errorMessage  error message to display when error is occur during prasing to LocalDateTIme."},{"lineNumber":354,"author":{"gitId":"AhQuanz"},"content":"     * @return LocalDateTime[] , Array of localDateTime objects parsed from the data provided."},{"lineNumber":355,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException , Exception thrown when dateTime provided is not in the correct format."},{"lineNumber":356,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":357,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":358,"author":{"gitId":"AhQuanz"},"content":"    public static LocalDateTime[] parseDates(String data, String errorMessage) throws DukeDeadlineException {"},{"lineNumber":359,"author":{"gitId":"AhQuanz"},"content":"        assert !data.trim().isEmpty();"},{"lineNumber":360,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":361,"author":{"gitId":"AhQuanz"},"content":"        int firstSpace \u003d data.indexOf(\" \");"},{"lineNumber":362,"author":{"gitId":"AhQuanz"},"content":"        String date \u003d data.substring(0, firstSpace);"},{"lineNumber":363,"author":{"gitId":"AhQuanz"},"content":"        data \u003d data.substring(firstSpace + 1);"},{"lineNumber":364,"author":{"gitId":"AhQuanz"},"content":"        String[] timePeriod \u003d data.split(\"-\");"},{"lineNumber":365,"author":{"gitId":"AhQuanz"},"content":"        if (timePeriod.length !\u003d 2) {"},{"lineNumber":366,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeDeadlineException(errorMessage);"},{"lineNumber":367,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"AhQuanz"},"content":"        LocalDateTime[] deadline \u003d new LocalDateTime[2];"},{"lineNumber":369,"author":{"gitId":"AhQuanz"},"content":"        for (int i \u003d 0; i \u003c timePeriod.length; i++) {"},{"lineNumber":370,"author":{"gitId":"AhQuanz"},"content":"            String dateTime \u003d date + \" \" + timePeriod[i].trim();"},{"lineNumber":371,"author":{"gitId":"AhQuanz"},"content":"            deadline[i] \u003d parseDate(dateTime, errorMessage);"},{"lineNumber":372,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":373,"author":{"gitId":"AhQuanz"},"content":"        return deadline;"},{"lineNumber":374,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":375,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":376,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":377,"author":{"gitId":"AhQuanz"},"content":"     * Returns LocalDateTime object based on string given."},{"lineNumber":378,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":379,"author":{"gitId":"AhQuanz"},"content":"     * @param date , String that contains the date in the format of yyyy-M-d hhmm."},{"lineNumber":380,"author":{"gitId":"AhQuanz"},"content":"     * @param errorMessage , error message to display when error is occur during prasing to LocalDateTIme."},{"lineNumber":381,"author":{"gitId":"AhQuanz"},"content":"     * @return LocalDateTime , LocalDateTime object parsed from the data provided."},{"lineNumber":382,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException , Exception thrown when the data provided is not of yyyy-M-dd Hmm format."},{"lineNumber":383,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":384,"author":{"gitId":"AhQuanz"},"content":"    public static LocalDateTime parseDate(String date, String errorMessage) throws DukeDeadlineException {"},{"lineNumber":385,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":386,"author":{"gitId":"AhQuanz"},"content":"            return LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"yyyy-M-dd Hmm\"));"},{"lineNumber":387,"author":{"gitId":"AhQuanz"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":388,"author":{"gitId":"AhQuanz"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":389,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeDeadlineException(errorMessage);"},{"lineNumber":390,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":391,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":392,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":393,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":394,"author":{"gitId":"AhQuanz"},"content":"     * Returns a Task Object based on the csvData provided."},{"lineNumber":395,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":396,"author":{"gitId":"AhQuanz"},"content":"     * @param csvData (a row from the saved file)."},{"lineNumber":397,"author":{"gitId":"AhQuanz"},"content":"     * @return Task , the result of parsing the text."},{"lineNumber":398,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":399,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":400,"author":{"gitId":"AhQuanz"},"content":"    public static Task parseForText(String csvData) throws DukeDeadlineException, DukeException {"},{"lineNumber":401,"author":{"gitId":"AhQuanz"},"content":"        String[] taskArr \u003d csvData.split(\",\");"},{"lineNumber":402,"author":{"gitId":"AhQuanz"},"content":"        Task task \u003d null;"},{"lineNumber":403,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":404,"author":{"gitId":"AhQuanz"},"content":"            switch (taskArr[0]) {"},{"lineNumber":405,"author":{"gitId":"AhQuanz"},"content":"            case \"T\":"},{"lineNumber":406,"author":{"gitId":"AhQuanz"},"content":"                task \u003d new Todo(taskArr[2]);"},{"lineNumber":407,"author":{"gitId":"AhQuanz"},"content":"                break;"},{"lineNumber":408,"author":{"gitId":"AhQuanz"},"content":"            case \"E\":"},{"lineNumber":409,"author":{"gitId":"AhQuanz"},"content":"                String[] deadlineArr \u003d {taskArr[3], taskArr[4]};"},{"lineNumber":410,"author":{"gitId":"AhQuanz"},"content":"                LocalDateTime[] deadlines \u003d new LocalDateTime[2];"},{"lineNumber":411,"author":{"gitId":"AhQuanz"},"content":"                for (int i \u003d 0; i \u003c deadlineArr.length; i++) {"},{"lineNumber":412,"author":{"gitId":"AhQuanz"},"content":"                    deadlines[i] \u003d Parser.parseDate(deadlineArr[i], ERROR_LOAD_TASK_DATE);"},{"lineNumber":413,"author":{"gitId":"AhQuanz"},"content":"                }"},{"lineNumber":414,"author":{"gitId":"AhQuanz"},"content":"                task \u003d new Event(taskArr[2], deadlines[0], deadlines[1]);"},{"lineNumber":415,"author":{"gitId":"AhQuanz"},"content":"                break;"},{"lineNumber":416,"author":{"gitId":"AhQuanz"},"content":"            case \"D\":"},{"lineNumber":417,"author":{"gitId":"AhQuanz"},"content":"                LocalDateTime deadline \u003d Parser.parseDate(taskArr[3], ERROR_LOAD_TASK_DATE);"},{"lineNumber":418,"author":{"gitId":"AhQuanz"},"content":"                task \u003d new Deadline(taskArr[2], deadline);"},{"lineNumber":419,"author":{"gitId":"AhQuanz"},"content":"                break;"},{"lineNumber":420,"author":{"gitId":"AhQuanz"},"content":"            default:"},{"lineNumber":421,"author":{"gitId":"AhQuanz"},"content":"                throw new DukeException(ERROR_LOAD_INVALID);"},{"lineNumber":422,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":423,"author":{"gitId":"AhQuanz"},"content":"            if (taskArr[1] \u003d\u003d \"1\") {"},{"lineNumber":424,"author":{"gitId":"AhQuanz"},"content":"                task.markAsDone();"},{"lineNumber":425,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":426,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":427,"author":{"gitId":"AhQuanz"},"content":"            throw e;"},{"lineNumber":428,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":429,"author":{"gitId":"AhQuanz"},"content":"        return task;"},{"lineNumber":430,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":431,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":431}},{"path":"src/main/java/SaveCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class SaveCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private String command;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    public SaveCommand(String command) {"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"        this.command \u003d command;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"     * Main function of SaveCommand task, saving tasks into fileName given at the start of the program."},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"     * @param taskList"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"     * @return String , goodbye message to display"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"        ui.save();"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showGoodbye();"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":17}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"import java.io.FileWriter;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"public class Storage {"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    private String fileName;"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"     * return tasks loaded from fileName given."},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"     * @param fileName (file to load task from)"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"     * @return tasks, an arrayList of task"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeException e, an exception thrown for unable to create file"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"     * @throws DukeDeadlineException e, an exception regarding deadline of the task"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    public ArrayList\u003cTask\u003e load(String fileName) throws DukeException, DukeDeadlineException {"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"            File f \u003d new File(fileName);"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"            f.createNewFile();"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"            Scanner s \u003d new Scanner(f);"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"            while (s.hasNext()) {"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"                String strTask \u003d s.nextLine();"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"                Task task \u003d Parser.parseForText(strTask);"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"                assert task !\u003d null;"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"                tasks.add(task);"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"            this.fileName \u003d fileName;"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"            s.close();"},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"            throw new DukeException(\"Unable to create file\");"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"            throw e;"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"        return tasks;"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"     * Saving tasks into file given during loaded."},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"     * @param taskList , ArrayList of tasks to be saved"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"    public void save(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"            FileWriter fw \u003d new FileWriter(this.fileName);"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"            for (Task t : taskList) {"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"                fw.write(t.save());"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"            fw.close();"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"            System.out.println(\"File cannot be opened\");"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":55}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":" * Abstract class Task to represent a Task"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":" */"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    /** Description of a class */"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    private String description;"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    /** Completion  Status of the task */"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"    private boolean isDone;"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"     * Constructor of the Task object."},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"     * @param desc Description of the task"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    public Task(String desc) {"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"        this.description \u003d desc;"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"     * Marks a task a done if the task is not yet done."},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"     * @return boolean indicating if there is a change"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"    public boolean markAsDone() {"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"        if (!this.isDone) {"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"            this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"            return true;"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"        //Return boolean to signal that we have successfully / fail to mark task as done."},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"        return false;"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"     * Returns the task description."},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"     * @return String , String that contains the task description"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"    public String getDescription() {"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"        return description;"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"     * Returns result of the updating of task."},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"     * @param field , field to be updated"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"     * @param value , value to be updated"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"     * @return String , result of the updating"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"    public String update(String field, String value) {"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        if (field.contains(\"desc\")) {"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"            description \u003d value;"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"            return Ui.showSuccessUpdate();"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showFailUpdate();"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task for saving."},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task for saving"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"    public String save() {"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%s,%s\", this.isDone ? \"1\" : \"0\", this.description);"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task."},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"    public String toString() {"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":73,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"     * Returns a String of the datetime of the format \"MMM d yyyy Hmm\"."},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"     * @param dateTime LocalDateTime object to be formatted"},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":"     * @return String , String that conatinas the LocalDateTIme object in the \"MMM d yyyy Hmm\" format"},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"    public String format(LocalDateTime dateTime) {"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy Hmm\"));"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":"     * Returns a Strubg representation of dateTime for saving."},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"     * @param dateTime LocalDateTime object to be formatted"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"     * @return String, String that contains the LocalDateTime object in the \"yyyy-M-d Hmm\""},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"    public String saveFormat(LocalDateTime dateTime) {"},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-M-d Hmm\"));"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"     * Returns a String representation of the status of the task."},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"     * @return String , String representation of the status of the task"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":"    public String getStatusIcon() {"},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"        return (this.isDone) ? \"X\" : \" \";"},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":98}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_TASK_DONE \u003d \"Task is already marked done\";"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"    private static final String ERROR_INVALID_OPTION \u003d \"Invalid task Option\";"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    private static final String NO_TASK_ADDED \u003d \"There is no task added!\";"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskCollection) {"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(taskCollection);"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"     * Returns a String representation of all the task."},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"     * @return String , String representation of all the task in taskList."},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    public String printAllTask() {"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"        String output \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"            output +\u003d Ui.printTask(i + 1 + \".\", tasks.get(i).toString());"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"        if (output.isEmpty()) {"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"            return NO_TASK_ADDED;"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"        return output;"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    private String showOptionError () {"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showError(ERROR_INVALID_OPTION);"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"     * Returns boolean that represent option being valid / invalid."},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"     * @param option Input for checking"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"     * @return boolean indicating the validity of index option"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"    public boolean checkValidOption(int option) {"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"        boolean result \u003d option \u003c 0 || option \u003e\u003d this.tasks.size();"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"        return result;"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"     * Marks a specific task based on the number given as done."},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"     * @param option task number entered by the user."},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"    public String markAsDone(int option) {"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        if (!checkValidOption(option)) {"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"            Task task \u003d tasks.get(option);"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"            if (!task.markAsDone()) {"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"                return Ui.showError(ERROR_TASK_DONE);"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"                return Ui.showSuccessMarkDone(task.toString(), tasks.size());"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        return showOptionError();"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"     * Deletes a task in the taskList based on the number given."},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":"     * @param option task number entered by the user."},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"    public String deleteTask(int option) {"},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"        if (!checkValidOption(option)) {"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"            Task t \u003d tasks.remove(option);"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"            return Ui.showSuccessDeleteTask(t.toString(), tasks.size());"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"        return showOptionError();"},{"lineNumber":72,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"     * Adds a task into the taskList."},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"     * @param task Task object to be adding into the taskList."},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"    public String addTask(Task task) {"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":"        tasks.add(task);"},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showSuccessAddTask(task.toString(), tasks.size());"},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"     * Prints task that has description containing the search term."},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":"     * @param searchTerm String that contains the search term."},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"    public String search(String searchTerm) {"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":"        int count \u003d 0;"},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"        String output \u003d \"\";"},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"        for (Task t : tasks) {"},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"            if (t.getDescription().indexOf(searchTerm) !\u003d -1) {"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"                output +\u003d Ui.printTask(++count + \".\", t.toString());"},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":"        if (count \u003d\u003d 0) {"},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"            return Ui.showFailSearch(searchTerm);"},{"lineNumber":99,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":"        return Ui.showSuccessSearch() + \"\\n\" + output;"},{"lineNumber":101,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":103,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"     * Update a task by given field by given value."},{"lineNumber":105,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"AhQuanz"},"content":"     * @param option , task numbering in the taskList."},{"lineNumber":107,"author":{"gitId":"AhQuanz"},"content":"     * @param field , field to be updated."},{"lineNumber":108,"author":{"gitId":"AhQuanz"},"content":"     * @param value , value to update the field to."},{"lineNumber":109,"author":{"gitId":"AhQuanz"},"content":"     * @return String, the result of the update."},{"lineNumber":110,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"AhQuanz"},"content":"    public String update(int option, String field, String value) {"},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":"        checkValidOption(option);"},{"lineNumber":113,"author":{"gitId":"AhQuanz"},"content":"        return tasks.get(option).update(field, value);"},{"lineNumber":114,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":116,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"AhQuanz"},"content":"     * Returns the TaskList."},{"lineNumber":118,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":"     * @return ArrayList of Task , taskList."},{"lineNumber":120,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"AhQuanz"},"content":"    public ArrayList\u003cTask\u003e getTaskList() {"},{"lineNumber":122,"author":{"gitId":"AhQuanz"},"content":"        return tasks;"},{"lineNumber":123,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":124}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"/** Class Todo that represent a Todo task **/"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"public class Todo extends Task {"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"    /** Symbol to represent a Todo task **/"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    private static final char SYMBOL \u003d \u0027T\u0027;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"     * Constructor of a Event task."},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"     * @param desc Description of the deadline task"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    public Todo(String desc) {"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"        super(desc);"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task."},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"[%c] %s\", SYMBOL, super.toString());"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"     * Returns the representation of a task for saving."},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"     * @return String representation of a task for saving"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":"    public String save() {"},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%c,%s\\n\", SYMBOL, super.save());"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":31}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class Ui {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    public static final String GOODBYE \u003d \"Thank you for using Duke , please come back again\";"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    private static final String GREETING \u003d \"Hello! I`m Duke\\n\""},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"            + \"Please enter file name to load tasks\\n \";"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    private static final String FAILURE_LOAD_START \u003d \"No task is found in file, what can i do for you? \";"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"    private static final String FAILURE_UPDATE \u003d \"Field to update is invalid\";"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"    private static final String FAILURE_SEARCH \u003d \"There are no matching task with \";"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_LOAD_START \u003d \"File loaded, what can i do for you? \";"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_UPDATE \u003d \"Task is updated successfully\";"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_MARK_DONE \u003d \"Got it. I`ve mark this task as done:\";"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_DELETE_TASK \u003d \"Noted. I`ve removed this task: \\n\";"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_ADD_TASK \u003d \"Got it. I`ve added this task: \\n\";"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"    private static final String SUCCESS_SEARCH \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    private static final String HELP_MESSAGE \u003d \"Example commands: \\n\""},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"            + \"bye \\n\""},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"            + \"list \\n\""},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"            + \"done \u003cnumber\u003e \\n\""},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"            + \"delete \u003cnumber\u003e \\n\""},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"            + \"find \u003csearch key\u003e \\n\""},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"            + \"todo \u003ctaskName\u003e \\n\""},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"            + \"deadline \u003ctaskName\u003e /by yyyy-M-dd Hmm \\n\""},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"            + \"event \u003ctaskName\u003e /by yyyy-M-dd Hmm - Hmm \\n\""},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"            + \"update \u003cnumber\u003e \u003cfieldName\u003e \u003cvalue\u003e \\n\";"},{"lineNumber":27,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":28,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":29,"author":{"gitId":"AhQuanz"},"content":"    private TaskList tasks;"},{"lineNumber":30,"author":{"gitId":"AhQuanz"},"content":"    private Storage storage;"},{"lineNumber":31,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":32,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"AhQuanz"},"content":"     * Display greeting messages"},{"lineNumber":34,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"AhQuanz"},"content":"    public static String showGreeting() {"},{"lineNumber":36,"author":{"gitId":"AhQuanz"},"content":"        return GREETING;"},{"lineNumber":37,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":39,"author":{"gitId":"AhQuanz"},"content":"    public static String showGoodbye() {"},{"lineNumber":40,"author":{"gitId":"AhQuanz"},"content":"        return GOODBYE;"},{"lineNumber":41,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":43,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"AhQuanz"},"content":"     * Loads tasks from the fileName provided."},{"lineNumber":45,"author":{"gitId":"AhQuanz"},"content":"     * @param fileName (file to load tasks from)"},{"lineNumber":46,"author":{"gitId":"AhQuanz"},"content":"     * @return message to indicate success / failure"},{"lineNumber":47,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"AhQuanz"},"content":"    public String load(String fileName) {"},{"lineNumber":49,"author":{"gitId":"AhQuanz"},"content":"        storage \u003d new Storage();"},{"lineNumber":50,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"AhQuanz"},"content":"            tasks \u003d new TaskList(storage.load(fileName));"},{"lineNumber":52,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"AhQuanz"},"content":"            return showError(e.getMessage());"},{"lineNumber":54,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":55,"author":{"gitId":"AhQuanz"},"content":"            return showError(e.getMessage());"},{"lineNumber":56,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"AhQuanz"},"content":"        String result \u003d SUCCESS_LOAD_START;"},{"lineNumber":58,"author":{"gitId":"AhQuanz"},"content":"        if (tasks.getTaskList().size() \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"AhQuanz"},"content":"            result \u003d FAILURE_LOAD_START;"},{"lineNumber":60,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":62,"author":{"gitId":"AhQuanz"},"content":"        return result + \"\\n\" + HELP_MESSAGE;"},{"lineNumber":63,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":65,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"AhQuanz"},"content":"     * Shows error message provided"},{"lineNumber":67,"author":{"gitId":"AhQuanz"},"content":"     * @param error error message"},{"lineNumber":68,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"AhQuanz"},"content":"    public static String showError(String error) {"},{"lineNumber":70,"author":{"gitId":"AhQuanz"},"content":"        return error;"},{"lineNumber":71,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":73,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"AhQuanz"},"content":"     * Prints the representation of task with a numbering"},{"lineNumber":75,"author":{"gitId":"AhQuanz"},"content":"     * @param numbering"},{"lineNumber":76,"author":{"gitId":"AhQuanz"},"content":"     * @param task"},{"lineNumber":77,"author":{"gitId":"AhQuanz"},"content":"     * @return String , message to be printed on GUI"},{"lineNumber":78,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"AhQuanz"},"content":"    public static String printTask(String numbering, String task) {"},{"lineNumber":80,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%2s %s\\n\", numbering, task);"},{"lineNumber":81,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":83,"author":{"gitId":"AhQuanz"},"content":"    private static String printExecuteResult(String message, String task , int numTasks, String numbering) {"},{"lineNumber":84,"author":{"gitId":"AhQuanz"},"content":"        String output \u003d message + \"\\n\" + printTask(numbering, task);"},{"lineNumber":85,"author":{"gitId":"AhQuanz"},"content":"        return String.format(\"%s\\nNow you have %d task in the list\\n\", output , numTasks);"},{"lineNumber":86,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":88,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"AhQuanz"},"content":"     * Shows success messages upon marking a task done"},{"lineNumber":90,"author":{"gitId":"AhQuanz"},"content":"     * @param task String representation of a task"},{"lineNumber":91,"author":{"gitId":"AhQuanz"},"content":"     * @param numTasks number of task in the taskList"},{"lineNumber":92,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"AhQuanz"},"content":"    public static String showSuccessMarkDone(String task, int numTasks) {"},{"lineNumber":94,"author":{"gitId":"AhQuanz"},"content":"        return printExecuteResult(SUCCESS_MARK_DONE, task, numTasks, \"\");"},{"lineNumber":95,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":97,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"AhQuanz"},"content":"     * Shows success message upon deleting a task"},{"lineNumber":99,"author":{"gitId":"AhQuanz"},"content":"     * @param task String representation of a task"},{"lineNumber":100,"author":{"gitId":"AhQuanz"},"content":"     * @param numTasks number of task in the taskList"},{"lineNumber":101,"author":{"gitId":"AhQuanz"},"content":"     * @return String , message to be printed on GUI"},{"lineNumber":102,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"AhQuanz"},"content":"    public static String showSuccessDeleteTask(String task, int numTasks) {"},{"lineNumber":104,"author":{"gitId":"AhQuanz"},"content":"        return printExecuteResult(SUCCESS_DELETE_TASK, task, numTasks, \"\");"},{"lineNumber":105,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":107,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"AhQuanz"},"content":"     * Shows success message upon adding a task"},{"lineNumber":109,"author":{"gitId":"AhQuanz"},"content":"     * @param task String representation of a task"},{"lineNumber":110,"author":{"gitId":"AhQuanz"},"content":"     * @param numTasks number of task in the taskList"},{"lineNumber":111,"author":{"gitId":"AhQuanz"},"content":"     * @return String , message to be printed on GUI"},{"lineNumber":112,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"AhQuanz"},"content":"    public static String showSuccessAddTask(String task, int numTasks) {"},{"lineNumber":114,"author":{"gitId":"AhQuanz"},"content":"        return printExecuteResult(SUCCESS_ADD_TASK, task, numTasks, \"\");"},{"lineNumber":115,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":117,"author":{"gitId":"AhQuanz"},"content":"    public static String showSuccessSearch() {"},{"lineNumber":118,"author":{"gitId":"AhQuanz"},"content":"        return SUCCESS_SEARCH;"},{"lineNumber":119,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":121,"author":{"gitId":"AhQuanz"},"content":"    public static String showFailSearch(String searchTerm) {"},{"lineNumber":122,"author":{"gitId":"AhQuanz"},"content":"        return FAILURE_SEARCH + searchTerm;"},{"lineNumber":123,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":125,"author":{"gitId":"AhQuanz"},"content":"    public static String showSuccessUpdate() {"},{"lineNumber":126,"author":{"gitId":"AhQuanz"},"content":"        return SUCCESS_UPDATE;"},{"lineNumber":127,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":129,"author":{"gitId":"AhQuanz"},"content":"    public static String showFailUpdate() {"},{"lineNumber":130,"author":{"gitId":"AhQuanz"},"content":"        return FAILURE_UPDATE;"},{"lineNumber":131,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":133,"author":{"gitId":"AhQuanz"},"content":"    public void save() {"},{"lineNumber":134,"author":{"gitId":"AhQuanz"},"content":"        storage.save(tasks.getTaskList());"},{"lineNumber":135,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":137,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"AhQuanz"},"content":"     * Main logic for Duke program."},{"lineNumber":139,"author":{"gitId":"AhQuanz"},"content":"     * @param fullCommand , command to be executed"},{"lineNumber":140,"author":{"gitId":"AhQuanz"},"content":"     * @return display message for command received"},{"lineNumber":141,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"AhQuanz"},"content":"    public String parseAndPrint(String fullCommand) {"},{"lineNumber":143,"author":{"gitId":"AhQuanz"},"content":"        try {"},{"lineNumber":144,"author":{"gitId":"AhQuanz"},"content":"            Command command \u003d Parser.parse(fullCommand);"},{"lineNumber":145,"author":{"gitId":"AhQuanz"},"content":"            //Ensure that command is not null so that execute will work"},{"lineNumber":146,"author":{"gitId":"AhQuanz"},"content":"            assert command !\u003d null;"},{"lineNumber":147,"author":{"gitId":"AhQuanz"},"content":"            return command.execute(tasks, this);"},{"lineNumber":148,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeException e) {"},{"lineNumber":149,"author":{"gitId":"AhQuanz"},"content":"            return showError(e.getMessage());"},{"lineNumber":150,"author":{"gitId":"AhQuanz"},"content":"        } catch (DukeDeadlineException e) {"},{"lineNumber":151,"author":{"gitId":"AhQuanz"},"content":"            return showError(e.getMessage());"},{"lineNumber":152,"author":{"gitId":"AhQuanz"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":154}},{"path":"src/main/java/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"    private int option;"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"    private String field;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"    private String value;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"     * Creates a update command."},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"     * @param option , a number indicating which task to update."},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"     * @param field , field of task to update."},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"     * @param value , value to update to."},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    public UpdateCommand(int option, String field, String value) {"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"        this.option \u003d option;"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"        this.field \u003d field;"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"        this.value \u003d value;"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    public String execute(TaskList taskList, Ui ui) {"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"        return taskList.update(option, field, value);"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":22}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"AhQuanz":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"AhQuanz":19}},{"path":"src/test/Java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"    private DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM d yyyy Hmm\");"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"    public void init_currentDateTime_success() {"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"        Deadline task \u003d new Deadline(\"SampleTask\", LocalDateTime.now());"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"        String expectedOutput \u003d \"[D] [ ] SampleTask (by: \" + LocalDateTime.now()"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"                                        .format(formatter) + \")\";"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"        assertEquals(expectedOutput, task.toString());"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"    public void format_currentDateTime_success() {"},{"lineNumber":23,"author":{"gitId":"AhQuanz"},"content":"        Deadline task \u003d new Deadline(\"SampleTask\", LocalDateTime.now());"},{"lineNumber":24,"author":{"gitId":"AhQuanz"},"content":"        assertEquals(LocalDateTime.now().format(formatter), task.format(LocalDateTime.now()));"},{"lineNumber":25,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":26}},{"path":"src/test/Java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"public class TaskListTest {"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":""},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"    public void checkValidOption_lessThanZero_returnTrue() {"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"        TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"        assertTrue(taskList.checkValidOption(-1));"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"}"}],"authorContributionMap":{"AhQuanz":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AhQuanz"},"content":"duke.txt"},{"lineNumber":2,"author":{"gitId":"AhQuanz"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"AhQuanz"},"content":"deadline return book /by 2020-2-10 1800"},{"lineNumber":4,"author":{"gitId":"AhQuanz"},"content":"event project meeting /at 2020-5-10 1400-1600"},{"lineNumber":5,"author":{"gitId":"AhQuanz"},"content":"list"},{"lineNumber":6,"author":{"gitId":"AhQuanz"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"AhQuanz"},"content":"done 4"},{"lineNumber":8,"author":{"gitId":"AhQuanz"},"content":"list"},{"lineNumber":9,"author":{"gitId":"AhQuanz"},"content":"todo join sports club"},{"lineNumber":10,"author":{"gitId":"AhQuanz"},"content":"list"},{"lineNumber":11,"author":{"gitId":"AhQuanz"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"AhQuanz"},"content":"list"},{"lineNumber":13,"author":{"gitId":"AhQuanz"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"AhQuanz"},"content":"blah"},{"lineNumber":15,"author":{"gitId":"AhQuanz"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"AhQuanz"},"content":"deadline buy book"},{"lineNumber":17,"author":{"gitId":"AhQuanz"},"content":"event"},{"lineNumber":18,"author":{"gitId":"AhQuanz"},"content":"event buy book"},{"lineNumber":19,"author":{"gitId":"AhQuanz"},"content":"deadline buy book /by 2020-02"},{"lineNumber":20,"author":{"gitId":"AhQuanz"},"content":"deadline buy book /by 1800"},{"lineNumber":21,"author":{"gitId":"AhQuanz"},"content":"event project meeting /at 2020-10-10 1400"},{"lineNumber":22,"author":{"gitId":"AhQuanz"},"content":"bye"}],"authorContributionMap":{"AhQuanz":22}}]
