[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"# Antonio project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"This is a project template for a greenfield Java project. It follows an itallian personality. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"1. After that, locate the `src/main/java/Antonio.java` file, right-click it, and choose `Run Antonio.main()`."}],"authorContributionMap":{"chewterence":3,"-":12}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    mainClassName \u003d \"antonio.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"    archiveBaseName \u003d \"antonio\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chewterence":16,"-":44}},{"path":"data/TaskListData.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"D | 0 | tesign | 1231-12-12 | 12"}],"authorContributionMap":{"chewterence":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"# Antonio User Guide"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":"Antonio is a chat bot that is able to keep track of three types of tasks: todos, deadlines and events."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"## Quick Start"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"1. Ensure you have Java 11 or above installed on your Computer."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"2. Download the latest Antonio.jar from [here](https://github.com/chewterence/ip/releases/tag/A-Jar-v0.2)."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"3. Double-click on the file to run the application. Upon starting the application, you should encounter the screen below:"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"Ciao, buongiorno! My name Antonio"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"Come posso aiutarla?"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"What can I do you for?"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"4. Type in a command in the chat box and press Enter or send to execute it. "},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    Here are some example commands you could try:"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    "},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    `list`"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"   "},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    `todo [DESCRIPTION]`"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"   "},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    `delete 2`"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    "},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    `help`"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    "},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"   `bye`"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"5. Refer to [Features](#features) below for more information and details about each command."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"---"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"### Display all tasks in the list"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"Format: `list`"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"Examples:"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"\u003e list"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"Capito! Here are the tasks in your list:"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"1. [T][] buy pasta"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"2. [T][X] cook pizza"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"3. [T][] eat lasagna"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"### Add todo task"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"Adds a new todo task to the list with a description."},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"Format: `todo [DESCRIPTION]`"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"Examples: "},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"\u003e todo make pizza"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"Tuto chiaro! I\u0027ve added this task:"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"[T][] make pizza"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"### Add deadline task"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"Adds a new deadline task to the list with a description, as well as by a specified date and time. "},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"Note that the time specified is in the 24 hour format."},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"Format: `deadline [DESCRIPTION] /by YYYY-MM-DD HHMM`"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"Examples: "},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"\u003e deadline visit uncle mario /by 2021-04-03 1430"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"Tuto chiaro! I\u0027ve added this task:"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"[D][] visit uncle mario"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"(by: 3 APRIL 2021 1430HRS)"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"### Add event task"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"Adds a new event task to the list with a description. Event tasks starts from a specific date"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"and time, and ends at a specific date and time."},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"Note that the time specified is in the 24 hour format."},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"Format: `event [DESCRIPTION] /at YYYY-MM-DD HHMM /to YYYY-MM-DD HHMM `"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"Examples:"},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"\u003e event Carnevale di Venezia /at 2021-02-06 1030 /to 2021-02-16 2300"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"Tuto chiaro! I\u0027ve added this task:"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"[E][] Carnevale di Venezia"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"(by: 6 FEBRUARY 2021 1030HRS to 16"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"FEBRUARY 2021 2300HRS)"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":"### Delete a task"},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"Delete a specified task that exists in the list."},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"Format: `delete [task ID]`"},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"Examples:"},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":"\u003e delete 3"},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"Cosa certa! I\u0027ve removed this task:"},{"lineNumber":101,"author":{"gitId":"chewterence"},"content":"[T][] eat lasagna"},{"lineNumber":102,"author":{"gitId":"chewterence"},"content":"Now you have 5 tasks in the list."},{"lineNumber":103,"author":{"gitId":"chewterence"},"content":"Prego"},{"lineNumber":104,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":105,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":106,"author":{"gitId":"chewterence"},"content":"### Mark a task as done"},{"lineNumber":107,"author":{"gitId":"chewterence"},"content":"Mark a specified task in the list as done."},{"lineNumber":108,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":109,"author":{"gitId":"chewterence"},"content":"Format: `done [task ID]`"},{"lineNumber":110,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":111,"author":{"gitId":"chewterence"},"content":"Examples:"},{"lineNumber":112,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":113,"author":{"gitId":"chewterence"},"content":"\u003e done 2"},{"lineNumber":114,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":115,"author":{"gitId":"chewterence"},"content":"Completato! I\u0027ve marked this task as done:"},{"lineNumber":116,"author":{"gitId":"chewterence"},"content":"[T][X] cook pizza"},{"lineNumber":117,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":118,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":119,"author":{"gitId":"chewterence"},"content":"### Find a task"},{"lineNumber":120,"author":{"gitId":"chewterence"},"content":"Find a task that exists in the list by its description."},{"lineNumber":121,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":122,"author":{"gitId":"chewterence"},"content":"Format: `find [DESCRIPTION]`"},{"lineNumber":123,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":124,"author":{"gitId":"chewterence"},"content":"Examples:"},{"lineNumber":125,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":126,"author":{"gitId":"chewterence"},"content":"\u003e find pas"},{"lineNumber":127,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":128,"author":{"gitId":"chewterence"},"content":"L\u0027ho trovata! Here are the matching tasks in"},{"lineNumber":129,"author":{"gitId":"chewterence"},"content":"your list:..."},{"lineNumber":130,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":131,"author":{"gitId":"chewterence"},"content":"1. [T][] buy pasta"},{"lineNumber":132,"author":{"gitId":"chewterence"},"content":"2. [T][] eat pasta"},{"lineNumber":133,"author":{"gitId":"chewterence"},"content":"```"},{"lineNumber":134,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":135,"author":{"gitId":"chewterence"},"content":"### Get help"},{"lineNumber":136,"author":{"gitId":"chewterence"},"content":"Get a list of commands that is can be run on the Antonio chat bot."},{"lineNumber":137,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":138,"author":{"gitId":"chewterence"},"content":"Format: `help`"},{"lineNumber":139,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":140,"author":{"gitId":"chewterence"},"content":"### Exit the program"},{"lineNumber":141,"author":{"gitId":"chewterence"},"content":"Exit the chat bot."},{"lineNumber":142,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":143,"author":{"gitId":"chewterence"},"content":"Format: `bye`"},{"lineNumber":144,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":145,"author":{"gitId":"chewterence"},"content":"---"},{"lineNumber":146,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":147,"author":{"gitId":"chewterence"},"content":"## FAQ"},{"lineNumber":148,"author":{"gitId":"chewterence"},"content":"Q: How do I transfer the data of my list of tasks to another computer?"},{"lineNumber":149,"author":{"gitId":"-"},"content":""},{"lineNumber":150,"author":{"gitId":"chewterence"},"content":"A: At the same directory which Antonio.jar exists, create a folder called data. Transfer "},{"lineNumber":151,"author":{"gitId":"chewterence"},"content":"TaskListData.txt from the source computer to the newly created folder, and run Antonio.jar."},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"chewterence"},"content":"---"},{"lineNumber":154,"author":{"gitId":"-"},"content":""},{"lineNumber":155,"author":{"gitId":"chewterence"},"content":"## Command Summary"},{"lineNumber":156,"author":{"gitId":"-"},"content":""},{"lineNumber":157,"author":{"gitId":"chewterence"},"content":"| Action       | Format and Examples          |"},{"lineNumber":158,"author":{"gitId":"chewterence"},"content":"| ------------- |:-------------|"},{"lineNumber":159,"author":{"gitId":"chewterence"},"content":"| list| `list`| "},{"lineNumber":160,"author":{"gitId":"chewterence"},"content":"| add todo|`todo [DESCRIPTION]` \u003cbr/\u003ee.g `todo make pasta`|"},{"lineNumber":161,"author":{"gitId":"chewterence"},"content":"| add deadline|`deadline [DESCRIPTION] /by YYYY-MM-DD HHMM` \u003cbr/\u003eeg. `deadline visit uncle mario /by 2021-04-03 1430`|"},{"lineNumber":162,"author":{"gitId":"chewterence"},"content":"| add event|`event [DESCRIPTION] /at YYYY-MM-DD HHMM /to YYYY-MM-DD HHMM` \u003cbr/\u003ee.g `event Carnevale di Venezia /at 2021-02-06 1030 /to 2021-02-16 2300`|"},{"lineNumber":163,"author":{"gitId":"chewterence"},"content":"|delete|`delete 2`|"},{"lineNumber":164,"author":{"gitId":"chewterence"},"content":"|done|`done 3`|"},{"lineNumber":165,"author":{"gitId":"chewterence"},"content":"|find|`find [DESCRIPTION]` \u003cbr/\u003ee.g `find pasta`|"},{"lineNumber":166,"author":{"gitId":"chewterence"},"content":"|help|`help`|"},{"lineNumber":167,"author":{"gitId":"chewterence"},"content":"|exit|`bye`|"},{"lineNumber":168,"author":{"gitId":"-"},"content":""},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"chewterence":157,"-":14}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"-"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":":end"},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"-"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"-"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":":omega"}],"authorContributionMap":{"chewterence":4,"-":85}},{"path":"src/main/java/antonio/Antonio.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import antonio.command.Command;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents the Antonio chat bot."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class Antonio {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private boolean isRunning;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private TaskList taskList;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    private final Storage storageHandler;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    private final Ui ui;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * Constructor for the Antonio chat bot."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    public Antonio() {"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        isRunning \u003d true;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        String path \u003d \"./data/TaskListData.txt\";"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        storageHandler \u003d new Storage(path);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"            taskList \u003d storageHandler.open();"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        } catch (AntonioException e) {"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"        ui.displayWelcomeMessage();"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * Checks if the bot is running."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     * @return A boolean value representing if the chat bot is running."},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    public boolean isRunning() {"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        return isRunning;"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * Gets a response from the chat bot based on an input string."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * @param input Input to the chat bot from a user."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public String getResponse(String input) {"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        Command command;"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"            command \u003d Parser.parse(input);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"            assert command !\u003d null : \"Parser.parse should return a command\";"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"            isRunning \u003d !command.shouldExit();"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"            taskList \u003d command.execute(taskList);"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            storageHandler.write(taskList);"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"            return command.getResponse();"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"        } catch (AntonioException | IOException e) {"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"            return e.getMessage();"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"    public Ui getUi() {"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        return ui;"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chewterence":63,"-":1}},{"path":"src/main/java/antonio/AntonioException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a Antonio exception that is thrown during an error."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class AntonioException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    public AntonioException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"        super(\"Mamma Mia!!!\\n\" + errorMessage + \"\\nCapisci?\");"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":10}},{"path":"src/main/java/antonio/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"import javafx.scene.text.Text;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    private Text dialog;"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":61}},{"path":"src/main/java/antonio/InvalidTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents an invalid format exception exception that is thrown during an error."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class InvalidTimeFormatException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    public InvalidTimeFormatException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":10}},{"path":"src/main/java/antonio/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":12}},{"path":"src/main/java/antonio/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"public class Main extends Application {"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private final Antonio antonio \u003d new Antonio();"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"            stage.setTitle(\"Antonio\");"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"            assert ap !\u003d null : \"java fx has failed to load\";"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setAntonio(antonio);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":30}},{"path":"src/main/java/antonio/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import javafx.util.Duration;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    private Antonio antonio;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Pizza.png\"));"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    private final Image antonioImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Antonio.png\"));"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    public void setAntonio(Antonio d) {"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        antonio \u003d d;"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"                DialogBox.getDukeDialog(antonio.getUi().displayWelcomeMessage(), antonioImage)"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"        );"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        String response \u003d antonio.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"                DialogBox.getDukeDialog(response, antonioImage)"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(2));"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"            delay.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"            delay.play();"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":63}},{"path":"src/main/java/antonio/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import antonio.command.AddDeadline;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import antonio.command.AddEvent;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import antonio.command.AddToDo;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import antonio.command.ByeCommand;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import antonio.command.Command;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import antonio.command.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import antonio.command.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"import antonio.command.FindCommand;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"import antonio.command.HelpCommand;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"import antonio.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":" * Represents a parser that handles input from a user."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    private static final int MAX_TIME_VALUE \u003d 2359;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    private static final int MIN_TIME_VALUE \u003d 0;"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     * Represents the types of commands available."},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    enum CommandType {"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        HELP,"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        LIST,"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"        BYE,"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        DONE,"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"        TODO,"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        EVENT,"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        DEADLINE,"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        DELETE,"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        FIND;"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * Parses the input provided and returns a command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @param input Input string to be parsed."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @return A command after parsing the input."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If invalid command is given."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public static Command parse(String input) throws AntonioException {"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        String description \u003d processDescription(processedInput);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        CommandType commandType \u003d identifyCommandType(processedInput);"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        assert commandType !\u003d null : \"commandType should not be null\";"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"        switch (commandType) {"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        case HELP:"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"            return new HelpCommand();"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"        case LIST:"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"            return new ListCommand();"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"        case BYE:"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"            return new ByeCommand();"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"        case DONE:"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"            if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"Please enter valid numerical input to mark done\");"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"            } else if (isValidNumericalValue(processedInput[1])) {"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"Please enter a valid task number to mark done\");"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"            return new DoneCommand(Integer.parseInt(processedInput[1]));"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"        case TODO:"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"            return new AddToDo(\"todo\", description.replaceAll(\"todo \", \"\"));"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"        case EVENT:"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"            try {"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"                return processEvent(input);"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"            } catch (InvalidTimeFormatException e) {"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"                e.printStackTrace();"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(e.getMessage() + \"\\nPlease enter a valid format\\n\u0027event \u003cdescription\u003e /at \""},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"                        + \"YYYY-MM-DD TIME /to YYYY-MM-DD TIME\u0027\");"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"            } catch (Exception e) {"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"                e.printStackTrace();"},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"\\nPlease enter a valid format\\n\u0027event \u003cdescription\u003e /at \""},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"                        + \"YYYY-MM-DD TIME /to YYYY-MM-DD TIME\u0027\");"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"        case DEADLINE:"},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"            try {"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"                return processDeadline(input);"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"            } catch (InvalidTimeFormatException e) {"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"                e.printStackTrace();"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(e.getMessage() + \"\\nA valid format is:\\n\u0027deadline \u003cdescription\u003e /by \""},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"                        + \"YYYY-MM-DD TIME\u0027\");"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"            } catch (Exception e) {"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"Please enter a valid format:\\n\u0027deadline \u003cdescription\u003e /by \""},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"                        + \"YYYY-MM-DD TIME\u0027\");"},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"        case DELETE:"},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"            if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"Please enter a task number to delete\");"},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":"            } else if (isValidNumericalValue(processedInput[1])) {"},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"                throw new AntonioException(\"Please enter a valid task number to delete\");"},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":"            return new DeleteCommand(Integer.parseInt(processedInput[1]));"},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"        case FIND:"},{"lineNumber":101,"author":{"gitId":"chewterence"},"content":"            return new FindCommand(processedInput[1]);"},{"lineNumber":102,"author":{"gitId":"chewterence"},"content":"        default:"},{"lineNumber":103,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"Invalid command. Please enter a valid one\");"},{"lineNumber":104,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":107,"author":{"gitId":"chewterence"},"content":"    private static boolean isValidNumericalValue(String s) {"},{"lineNumber":108,"author":{"gitId":"chewterence"},"content":"        return !s.matches(\"[0-9]+\");"},{"lineNumber":109,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":111,"author":{"gitId":"chewterence"},"content":"    private static AddDeadline processDeadline(String input) throws Exception {"},{"lineNumber":112,"author":{"gitId":"chewterence"},"content":"        String preProcessedData \u003d input.split(\" /by \")[1];"},{"lineNumber":113,"author":{"gitId":"chewterence"},"content":"        String[] dateTime \u003d preProcessedData.split(\" \");"},{"lineNumber":114,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":115,"author":{"gitId":"chewterence"},"content":"        assert dateTime[1] !\u003d null : \"dateTime[1] should have a value\";"},{"lineNumber":116,"author":{"gitId":"chewterence"},"content":"        int time \u003d Integer.parseInt(dateTime[1]);"},{"lineNumber":117,"author":{"gitId":"chewterence"},"content":"        boolean isValidTimeFormat \u003d (time \u003e\u003d MIN_TIME_VALUE) \u0026\u0026 (time \u003c\u003d MAX_TIME_VALUE);"},{"lineNumber":118,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":119,"author":{"gitId":"chewterence"},"content":"        if (!isValidTimeFormat) {"},{"lineNumber":120,"author":{"gitId":"chewterence"},"content":"            throw new InvalidTimeFormatException(\"You have entered the time in a wrong format,\""},{"lineNumber":121,"author":{"gitId":"chewterence"},"content":"                    + \" please ensure it is in 24hr format\");"},{"lineNumber":122,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"chewterence"},"content":"        LocalDate deadline \u003d LocalDate.parse(dateTime[0]);"},{"lineNumber":124,"author":{"gitId":"chewterence"},"content":"        String description \u003d input.split(\" /by \")[0].split(\"deadline \")[1];"},{"lineNumber":125,"author":{"gitId":"chewterence"},"content":"        return new AddDeadline(\"deadline\", description, deadline, Integer.toString(time));"},{"lineNumber":126,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":128,"author":{"gitId":"chewterence"},"content":"    private static AddEvent processEvent(String input) throws Exception {"},{"lineNumber":129,"author":{"gitId":"chewterence"},"content":"        String[] preProcessedData \u003d input.split(\" /at \");"},{"lineNumber":130,"author":{"gitId":"chewterence"},"content":"        String eventDuration \u003d preProcessedData[1];"},{"lineNumber":131,"author":{"gitId":"chewterence"},"content":"        String[] startData \u003d eventDuration.split(\" /to \")[0].split(\" \");"},{"lineNumber":132,"author":{"gitId":"chewterence"},"content":"        String[] endData \u003d eventDuration.split(\" /to \")[1].split(\" \");"},{"lineNumber":133,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":134,"author":{"gitId":"chewterence"},"content":"        LocalDate startDate \u003d LocalDate.parse(startData[0]);"},{"lineNumber":135,"author":{"gitId":"chewterence"},"content":"        LocalDate endDate \u003d LocalDate.parse(endData[0]);"},{"lineNumber":136,"author":{"gitId":"chewterence"},"content":"        String startTime \u003d startData[1];"},{"lineNumber":137,"author":{"gitId":"chewterence"},"content":"        String endTime \u003d endData[1];"},{"lineNumber":138,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":139,"author":{"gitId":"chewterence"},"content":"        int startTimeCheck \u003d Integer.parseInt(startTime);"},{"lineNumber":140,"author":{"gitId":"chewterence"},"content":"        int endTimeCheck \u003d Integer.parseInt(endTime);"},{"lineNumber":141,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":142,"author":{"gitId":"chewterence"},"content":"        boolean isStartTimeValid \u003d (startTimeCheck \u003e\u003d MIN_TIME_VALUE) \u0026\u0026 (startTimeCheck \u003c\u003d MAX_TIME_VALUE);"},{"lineNumber":143,"author":{"gitId":"chewterence"},"content":"        boolean isEndTimeValid \u003d (endTimeCheck \u003e\u003d MIN_TIME_VALUE) \u0026\u0026 (endTimeCheck \u003c\u003d MAX_TIME_VALUE);"},{"lineNumber":144,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":145,"author":{"gitId":"chewterence"},"content":"        if (!isStartTimeValid \u0026\u0026 !isEndTimeValid) {"},{"lineNumber":146,"author":{"gitId":"chewterence"},"content":"            throw new InvalidTimeFormatException(\"You have entered BOTH times in a wrong format,\""},{"lineNumber":147,"author":{"gitId":"chewterence"},"content":"                    + \" please ensure it is in 24hr format\");"},{"lineNumber":148,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"chewterence"},"content":"        if (!isStartTimeValid) {"},{"lineNumber":150,"author":{"gitId":"chewterence"},"content":"            throw new InvalidTimeFormatException(\"You have entered the STARTING time in a wrong format,\""},{"lineNumber":151,"author":{"gitId":"chewterence"},"content":"                    + \" please ensure it is in 24hr format\");"},{"lineNumber":152,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"chewterence"},"content":"        if (!isEndTimeValid) {"},{"lineNumber":154,"author":{"gitId":"chewterence"},"content":"            throw new InvalidTimeFormatException(\"You have entered the ENDING time in a wrong format,\""},{"lineNumber":155,"author":{"gitId":"chewterence"},"content":"                    + \" please ensure it is in 24hr format\");"},{"lineNumber":156,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":158,"author":{"gitId":"chewterence"},"content":"        String description \u003d input.split(\" /at \")[0].split(\"event \")[1];"},{"lineNumber":159,"author":{"gitId":"chewterence"},"content":"        return new AddEvent(\"event\", description, startDate, startTime, endDate, endTime);"},{"lineNumber":160,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":162,"author":{"gitId":"chewterence"},"content":"    private static String processDescription(String[] processedInput) {"},{"lineNumber":163,"author":{"gitId":"chewterence"},"content":"        assert processedInput.length \u003e\u003d 1 : \"input length must be at least 1\";"},{"lineNumber":164,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":165,"author":{"gitId":"chewterence"},"content":"        Arrays.stream(processedInput).forEach(inputLine -\u003e sb.append(inputLine).append(\" \"));"},{"lineNumber":166,"author":{"gitId":"chewterence"},"content":"        return sb.toString();"},{"lineNumber":167,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":169,"author":{"gitId":"chewterence"},"content":"    private static CommandType identifyCommandType(String[] processedInput) throws AntonioException {"},{"lineNumber":170,"author":{"gitId":"chewterence"},"content":"        String commandString \u003d processedInput[0];"},{"lineNumber":171,"author":{"gitId":"chewterence"},"content":"        switch (commandString) {"},{"lineNumber":172,"author":{"gitId":"chewterence"},"content":"        case \"help\":"},{"lineNumber":173,"author":{"gitId":"chewterence"},"content":"            return CommandType.HELP;"},{"lineNumber":174,"author":{"gitId":"chewterence"},"content":"        case \"list\":"},{"lineNumber":175,"author":{"gitId":"chewterence"},"content":"            return CommandType.LIST;"},{"lineNumber":176,"author":{"gitId":"chewterence"},"content":"        case \"bye\":"},{"lineNumber":177,"author":{"gitId":"chewterence"},"content":"            return CommandType.BYE;"},{"lineNumber":178,"author":{"gitId":"chewterence"},"content":"        case \"done\":"},{"lineNumber":179,"author":{"gitId":"chewterence"},"content":"            return CommandType.DONE;"},{"lineNumber":180,"author":{"gitId":"chewterence"},"content":"        case \"todo\":"},{"lineNumber":181,"author":{"gitId":"chewterence"},"content":"            return CommandType.TODO;"},{"lineNumber":182,"author":{"gitId":"chewterence"},"content":"        case \"event\":"},{"lineNumber":183,"author":{"gitId":"chewterence"},"content":"            return CommandType.EVENT;"},{"lineNumber":184,"author":{"gitId":"chewterence"},"content":"        case \"deadline\":"},{"lineNumber":185,"author":{"gitId":"chewterence"},"content":"            return CommandType.DEADLINE;"},{"lineNumber":186,"author":{"gitId":"chewterence"},"content":"        case \"delete\":"},{"lineNumber":187,"author":{"gitId":"chewterence"},"content":"            return CommandType.DELETE;"},{"lineNumber":188,"author":{"gitId":"chewterence"},"content":"        case \"find\":"},{"lineNumber":189,"author":{"gitId":"chewterence"},"content":"            return CommandType.FIND;"},{"lineNumber":190,"author":{"gitId":"chewterence"},"content":"        default:"},{"lineNumber":191,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"There is no such command, enter a correcto one per favore?\""},{"lineNumber":192,"author":{"gitId":"chewterence"},"content":"                    + \"\\nIf you need help, enter \u0027help\u0027.\");"},{"lineNumber":193,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":196,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":196}},{"path":"src/main/java/antonio/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import antonio.task.DeadlineTask;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import antonio.task.EventTask;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import antonio.task.Task;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"import antonio.task.ToDoTask;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":" * Encapsulates the methods for handling local storage."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    private final String path;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * Constructs a storage handler object."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @param path A string containing the path to the file."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    Storage(String path) {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        this.path \u003d path;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Opens and returns a task list from local storage if present."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return A task list after opening from path."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If a file is not already present."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public TaskList open() throws AntonioException {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        File file \u003d new File(path);"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"        if (!file.exists()) {"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"            createFile(file);"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"            while (sc.hasNext()) {"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"                String newLine \u003d sc.nextLine();"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"                Task task \u003d formatStringToTask(newLine, taskID);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"                taskList.addTask(task);"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"File not found or is in a wrong format\");"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"     * Writes the task list provided to local storage."},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"     * @param taskList Task list to be written to local storage."},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"     * @throws IOException If an error occurs during writing to file."},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If unable to build file contents."},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"    public void write(TaskList taskList) throws IOException, AntonioException {"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"        assert taskList !\u003d null : \"taskList has not been initialized\";"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"        FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"        createStringFormat(taskList, sb);"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"        fw.write(sb.toString());"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"        fw.close();"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"     * Creates the string to be written as file contents."},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"     * @param taskList Task list to be written to local storage."},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"     * @param sb StringBuilder object to hold the formatted strings."},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If unable to format file contents."},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"    private void createStringFormat(TaskList taskList, StringBuilder sb) throws AntonioException {"},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"            Task task \u003d taskList.getTask(i);"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"            sb.append(formatTaskToString(task));"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"            sb.append(\"\\n\");"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"     * Creates a file."},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"     * @param file File object to be created from."},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If unable to create new file."},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"    private void createFile(File file) throws AntonioException {"},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"            file.createNewFile();"},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"Unable to create new file.\");"},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":102,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"chewterence"},"content":"     * Formats the task into a string to be stored on local storage."},{"lineNumber":104,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be formatted into a string."},{"lineNumber":105,"author":{"gitId":"chewterence"},"content":"     * @return Task that has been formatted into a string."},{"lineNumber":106,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If unknown task type."},{"lineNumber":107,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"chewterence"},"content":"    private String formatTaskToString(Task task) throws AntonioException {"},{"lineNumber":109,"author":{"gitId":"chewterence"},"content":"        assert task !\u003d null : \"task should not be null\";"},{"lineNumber":110,"author":{"gitId":"chewterence"},"content":"        String format;"},{"lineNumber":111,"author":{"gitId":"chewterence"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":112,"author":{"gitId":"chewterence"},"content":"        int status \u003d task.isDone() ? 1 : 0;"},{"lineNumber":113,"author":{"gitId":"chewterence"},"content":"        format \u003d serializeTask(task, description, status);"},{"lineNumber":114,"author":{"gitId":"chewterence"},"content":"        return format;"},{"lineNumber":115,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":117,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"chewterence"},"content":"     * Serializes the format of the task depending on its type."},{"lineNumber":119,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be formatted into a string."},{"lineNumber":120,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":121,"author":{"gitId":"chewterence"},"content":"     * @param status Status of the task completion."},{"lineNumber":122,"author":{"gitId":"chewterence"},"content":"     * @return Format of the task provided."},{"lineNumber":123,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If task type is unknown."},{"lineNumber":124,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"chewterence"},"content":"    private String serializeTask(Task task, String description, int status) throws AntonioException {"},{"lineNumber":126,"author":{"gitId":"chewterence"},"content":"        String format;"},{"lineNumber":127,"author":{"gitId":"chewterence"},"content":"        if (task instanceof ToDoTask) {"},{"lineNumber":128,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"T | %d | %s\", status, description);"},{"lineNumber":129,"author":{"gitId":"chewterence"},"content":"        } else if (task instanceof DeadlineTask) {"},{"lineNumber":130,"author":{"gitId":"chewterence"},"content":"            String deadline \u003d ((DeadlineTask) task).serializeDeadline();"},{"lineNumber":131,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"D | %d | %s | %s\", status, description, deadline);"},{"lineNumber":132,"author":{"gitId":"chewterence"},"content":"        } else if (task instanceof EventTask) {"},{"lineNumber":133,"author":{"gitId":"chewterence"},"content":"            String eventDateTime \u003d ((EventTask) task).serializeEvent();"},{"lineNumber":134,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"E | %d | %s | %s\", status, description, eventDateTime);"},{"lineNumber":135,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":136,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"There is an error in file writing: Unknown task type\");"},{"lineNumber":137,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"chewterence"},"content":"        return format;"},{"lineNumber":139,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":141,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"chewterence"},"content":"     * Formats a line of string from a file into a Task object."},{"lineNumber":143,"author":{"gitId":"chewterence"},"content":"     * @param newLine New line from string read from file to be converted to a task."},{"lineNumber":144,"author":{"gitId":"chewterence"},"content":"     * @param taskID ID of task to be created."},{"lineNumber":145,"author":{"gitId":"chewterence"},"content":"     * @return Task converted from string read from file."},{"lineNumber":146,"author":{"gitId":"chewterence"},"content":"     * @throws AntonioException If task type is unknown."},{"lineNumber":147,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"chewterence"},"content":"    private Task formatStringToTask(String newLine, int taskID) throws AntonioException {"},{"lineNumber":149,"author":{"gitId":"chewterence"},"content":"        String[] lineContents \u003d newLine.split(\" \\\\| \");"},{"lineNumber":150,"author":{"gitId":"chewterence"},"content":"        String taskType \u003d lineContents[0];"},{"lineNumber":151,"author":{"gitId":"chewterence"},"content":"        int status \u003d Integer.parseInt(lineContents[1]);"},{"lineNumber":152,"author":{"gitId":"chewterence"},"content":"        String description \u003d lineContents[2];"},{"lineNumber":153,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":154,"author":{"gitId":"chewterence"},"content":"        switch (taskType) {"},{"lineNumber":155,"author":{"gitId":"chewterence"},"content":"        case \"T\":"},{"lineNumber":156,"author":{"gitId":"chewterence"},"content":"            return new ToDoTask(description, taskID, status);"},{"lineNumber":157,"author":{"gitId":"chewterence"},"content":"        case \"D\":"},{"lineNumber":158,"author":{"gitId":"chewterence"},"content":"            String time \u003d lineContents[4];"},{"lineNumber":159,"author":{"gitId":"chewterence"},"content":"            LocalDate deadline \u003d LocalDate.parse(lineContents[3]);"},{"lineNumber":160,"author":{"gitId":"chewterence"},"content":"            return new DeadlineTask(description, taskID, status, deadline, time);"},{"lineNumber":161,"author":{"gitId":"chewterence"},"content":"        case \"E\":"},{"lineNumber":162,"author":{"gitId":"chewterence"},"content":"            LocalDate startDate \u003d LocalDate.parse(lineContents[3]);"},{"lineNumber":163,"author":{"gitId":"chewterence"},"content":"            String startTime \u003d lineContents[4];"},{"lineNumber":164,"author":{"gitId":"chewterence"},"content":"            LocalDate endDate \u003d LocalDate.parse(lineContents[5]);"},{"lineNumber":165,"author":{"gitId":"chewterence"},"content":"            String endTime \u003d lineContents[6];"},{"lineNumber":166,"author":{"gitId":"chewterence"},"content":"            return new EventTask(description, taskID, status, startDate, startTime, endDate, endTime);"},{"lineNumber":167,"author":{"gitId":"chewterence"},"content":"        default:"},{"lineNumber":168,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"There is an error in file reading: Unknown task type\");"},{"lineNumber":169,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":172,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":172}},{"path":"src/main/java/antonio/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import antonio.task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import antonio.task.Task;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructs a task list."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    private TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * Obtains a task based on ID specified."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be obtained."},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     * @return Task to be retrieved."},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    public Task getTask(int id) {"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        int index \u003d id - 1;"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        return tasks.get(index);"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     * Obtains the size of the task list."},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * @return Size of the task list."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    public int getSize() {"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        return tasks.size();"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * Adds a task to the task list."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be added to the task list."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public void addTask(Task task) {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        tasks.add(task);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"     * Removes a task from the task list based on ID specified."},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be removed."},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"    public void removeTask(int id) {"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        tasks.remove(id - 1);"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"     * Marks the ID of the task specified as done."},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"     * @param id ID of the task to be marked done."},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"    public void markDone(int id) {"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"        int index \u003d id - 1;"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"        Task task \u003d tasks.remove(index);"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"        task.markDone();"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"        tasks.add(index, task);"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"     * Finds a key word within task list and returns a new list containing tasks with keyword."},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"     * @param key Keyword to be matched with."},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"     * @return A new list containing tasks with the keyword specified."},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"    public TaskList findKeyWord(String key) {"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"        tasks.stream().filter(task -\u003e task.toString().contains(key)).forEach(temp::add);"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"        return new TaskList(temp);"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"            sb.append(\"\\n\");"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"            sb.append(i + 1).append(\". \");"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"            sb.append(tasks.get(i).toString());"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"        return sb.toString();"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":"     * Checks if the task list contains any clashing deadline tasks."},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"     * @return True if there are clashing deadline tasks."},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"    public boolean isAnomalyPresent() {"},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":"        ArrayList\u003cTask\u003e deadlineTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"        for (Task task : tasks) {"},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"            if (task instanceof DeadlineTask) {"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":"                deadlineTasks.add(task);"},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 0; i \u003c deadlineTasks.size(); i++) {"},{"lineNumber":102,"author":{"gitId":"chewterence"},"content":"            for (int j \u003d 0; j \u003c deadlineTasks.size(); j++) {"},{"lineNumber":103,"author":{"gitId":"chewterence"},"content":"                DeadlineTask firstTask \u003d (DeadlineTask) deadlineTasks.get(i);"},{"lineNumber":104,"author":{"gitId":"chewterence"},"content":"                DeadlineTask secondTask \u003d (DeadlineTask) deadlineTasks.get(j);"},{"lineNumber":105,"author":{"gitId":"chewterence"},"content":"                boolean isNotTheSameTask \u003d i !\u003d j;"},{"lineNumber":106,"author":{"gitId":"chewterence"},"content":"                boolean isSameSchedule \u003d firstTask.isClashingSchedule(secondTask);"},{"lineNumber":107,"author":{"gitId":"chewterence"},"content":"                if (isNotTheSameTask \u0026\u0026 isSameSchedule) {"},{"lineNumber":108,"author":{"gitId":"chewterence"},"content":"                    return true;"},{"lineNumber":109,"author":{"gitId":"chewterence"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":113,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":115,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":115}},{"path":"src/main/java/antonio/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Handles the output from the chat bot."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"     * Displays a welcome message."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    public String displayWelcomeMessage() {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"        return \"    Ciao, buongiorno! My name is Antonio\\n    Come posso aiutarla?\\n    What can I do you for?\";"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":13}},{"path":"src/main/java/antonio/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import antonio.task.Task;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds tasks."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public abstract class AddCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    protected String commandType;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    protected Task newTask;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    protected int numTasks;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructs an AddCommand class command name and description."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param commandType Name of the command."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param description Description to add to command."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    public AddCommand(String commandType, String description) {"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     * Returns positive if command terminates chat bot."},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     * @return True if this command terminates chat bot."},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        return \"Tutto chiaro! I\u0027ve added this task:\\n  \";"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public abstract TaskList execute(TaskList taskList);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":47}},{"path":"src/main/java/antonio/command/AddDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import antonio.task.DeadlineTask;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds Deadline tasks."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class AddDeadline extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private LocalDate deadline;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private String time;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructs a commands that adds Deadline tasks."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param deadline Deadline of the task."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param time Deadline time of the task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    public AddDeadline(String commandType, String description, LocalDate deadline, String time) {"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        this.time \u003d time;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new DeadlineTask(description, taskID, 0, deadline, time);"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":50}},{"path":"src/main/java/antonio/command/AddEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import antonio.task.EventTask;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds Event tasks."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class AddEvent extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private final LocalDate startDate;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private final LocalDate endDate;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    private final String startTime;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    private final String endTime;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * Constructs a commands that adds Event tasks."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param eventDate Date of the event."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * @param startTime Start time of the event."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @param endTime End time of the event"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    public AddEvent(String commandType, String description, LocalDate startDate, String startTime,"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"                    LocalDate endDate, String endTime) {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new EventTask(description, taskID, 0, startDate, startTime, endDate, endTime);"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":56}},{"path":"src/main/java/antonio/command/AddToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import antonio.task.ToDoTask;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds to-do tasks."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class AddToDo extends AddCommand {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * Constructs a commands that adds to-do tasks."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    public AddToDo(String commandType, String description) {"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new ToDoTask(description, taskID);"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":42}},{"path":"src/main/java/antonio/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that exits the chat bot."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class ByeCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        return true;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        return \"Arrivederci,\\nHope to see you again soon.\\nCiao!\";"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":35}},{"path":"src/main/java/antonio/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.AntonioException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * An interface for commands that the user inputs."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public interface Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    boolean shouldExit();"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    String getResponse();"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    TaskList execute(TaskList taskList) throws AntonioException;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":28}},{"path":"src/main/java/antonio/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.AntonioException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import antonio.task.Task;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" * Represents a command that deletes task from the task list."},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private int deletedID;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private Task deletedTask;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private int numTasks;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructs a delete command."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param deletedID ID of the task to be deleted."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    public DeleteCommand(int deletedID) {"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        this.deletedID \u003d deletedID;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        return \"Cosa certa! I\u0027ve removed this task:\\n  \" + deletedTask"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"            + \"\\nNow you have \" + numTasks + \" tasks in the list.\\nPrego\";"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) throws AntonioException {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        if (deletedID \u003e taskList.getSize()) {"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"Please enter a valid number that is on the task list\");"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        deletedTask \u003d taskList.getTask(deletedID);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        taskList.removeTask(deletedID);"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":55}},{"path":"src/main/java/antonio/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.AntonioException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that marks tasks on the task list as done."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class DoneCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private final int id;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private String response;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * Constructs a done command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be marked as done."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    public DoneCommand(int id) {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        this.id \u003d id;"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * Returns positive if command terminates chat bot."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @return True if this command terminates chat bot."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        return \"Completato! I\u0027ve marked this task as done:\\n  \" + response;"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) throws AntonioException {"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        if (id \u003e taskList.getSize()) {"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"            throw new AntonioException(\"Please enter a valid number that is on the task list\");"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        taskList.markDone(id);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        response \u003d taskList.getTask(id).toString();"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":50}},{"path":"src/main/java/antonio/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a find command"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class FindCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private String key;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private TaskList findList;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * Constructs a find command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param key Key to be matched with finding."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    public FindCommand(String key) {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        this.key \u003d key;"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        return \"\\nL\u0027ho trovata! Here are the matching tasks in your list:...\\n\" + findList.toString();"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        findList \u003d taskList.findKeyWord(key);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":49}},{"path":"src/main/java/antonio/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a command that displays a string of text to help the user."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class HelpCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        return \"\\nEcco qui! Here are a list of commands you can tell me:\""},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\""},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027list\u0027\""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"                + \"\\nTo list the current tasks on your list\""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"                + \"\\n\\n\u0027todo \u003cdescription\u003e\u0027\""},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"                + \"\\nTo add a basic ToDo task to your list\""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"                + \"\\n\\n\u0027deadline \u003cdescription\u003e /by YYYY-MM-DD TIME\u0027\""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"                + \"\\nTo add a Deadline task with date specified\\n(Note that time is in 24hr format)\""},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"                + \"\\n\\n\u0027event \u003cdescription\u003e /at YYYY-MM-DD TIME /to YYYY-MM-DD TIME\u0027\""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"                + \"\\nTo add an Event task from a certain \\n(Note that time is in 24hr format)\""},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"                + \"\\n\\n\u0027delete \u003ctask number\u003e\u0027\""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"                + \"\\nTo delete a task from your list\""},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"                + \"\\n\\n\u0027bye\u0027\""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"                + \"\\nExits the program\";"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":50}},{"path":"src/main/java/antonio/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import antonio.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a command that lists all tasks on the task list."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class ListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private TaskList currentList;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private boolean isAnomalyPresent;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        sb.append(\"Capito! Here are the tasks in your list:\\n\");"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        sb.append(currentList.toString());"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        sb.append(\"\\n\\n\");"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        if (isAnomalyPresent) {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"            sb.append(\"Attenzione! There are tasks in your list that have clashing deadlines,\""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"                    + \" please check the list above. Capisci?\");"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"        return sb.toString();"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"        currentList \u003d taskList;"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        isAnomalyPresent \u003d taskList.isAnomalyPresent();"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":47}},{"path":"src/main/java/antonio/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a Deadline task."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private final LocalDate deadline;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private final String time;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructs a Deadline task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * @param status Status of task completion."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param deadline Date of deadline for the task."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param time Time of deadline for the task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    public DeadlineTask(String description, int id, int status, LocalDate deadline, String time) {"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     * Gets the deadline date of the task."},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * @return The deadline date of the task."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        return deadline;"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     * Gets the time of the task."},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     * @return The time of the task."},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    public String getTime() {"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"        return time;"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * Checks if the this task is clashing with another task."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be checked if clashing with."},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"     * @return True if the tasks are clashing."},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    public boolean isClashingSchedule(DeadlineTask task) {"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        boolean isSameDay \u003d this.deadline.equals(task.getDeadline());"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        boolean isSameTime \u003d Integer.parseInt(this.time) \u003d\u003d Integer.parseInt(task.getTime());"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        return isSameDay \u0026\u0026 isSameTime;"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"     * Serializes deadline into a string format for local storage."},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"     * @return The serialized deadline."},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"    public String serializeDeadline() {"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"        return deadline.toString() + \" | \" + time;"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"     * Pads the time string with zeroes to a 24 hour format."},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"     * @param time Time to be padded to a 24 hour format."},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"     * @return The padded time string."},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"    private String timeToString(String time) {"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"        String padding;"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"        if (time.length() \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%03d\", 0);"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"        } else if (time.length() \u003d\u003d 2) {"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%02d\", 0);"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"        } else if (time.length() \u003d\u003d 3) {"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%01d\", 0);"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"            padding \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"        return padding + time;"},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"        return \"[D]\" + super.checkBoxToString() + description + \"\\n(by: \" + deadline.getDayOfMonth()"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"                + \" \" + deadline.getMonth() + \" \" + deadline.getYear() + \" \" + timeToString(time) + \"HRS)\";"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":86}},{"path":"src/main/java/antonio/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents an event task."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class EventTask extends Task {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private final LocalDate startDate;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private final LocalDate endDate;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private final String startTime;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private final String endTime;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructs an event task."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the event."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param status Status of task completion."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param startDate Starting date of the event."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param startTime Starting time of the event."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * @param endDate Ending date of the event."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @param endTime Ending time of the event."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    public EventTask(String description, int id, int status, LocalDate startDate, String startTime,"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"                     LocalDate endDate, String endTime) {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     * Serializes event duration into a string format for local storage."},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     * @return Serialized event duration."},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    public String serializeEvent() {"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"        return startDate.toString() + \" | \" + startTime + \" | \" + endDate.toString() + \" | \" + endTime;"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * Pads the time string with zeroes to a 24 hour format."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     * @param time to be padded to 24 hour format"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"     * @return The padded time string."},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    private String padTimeFormat(String time) {"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        String padding;"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        if (time.length() \u003d\u003d 1) {"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%03d\", 0);"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        } else if (time.length() \u003d\u003d 2) {"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%02d\", 0);"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        } else if (time.length() \u003d\u003d 3) {"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"            padding \u003d String.format(\"%01d\", 0);"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"            padding \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"        return padding + time;"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"        return \"[E]\" + super.checkBoxToString() + description + \"\\n(at: \" + startDate.getDayOfMonth()"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"                + \" \" + startDate.getMonth() + \" \" + startDate.getYear() + \" \""},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"                + padTimeFormat(startTime) + \"HRS to \" + endDate.getDayOfMonth()"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"                + \" \" + endDate.getMonth() + \" \" + endDate.getYear() + \" \" + padTimeFormat(endTime) + \"HRS\" + \")\";"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":69}},{"path":"src/main/java/antonio/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a task."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    protected int id;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructor for task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    public Task(String description, int id) {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        this.id \u003d id;"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * Marks task as done."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public void markDone() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Gets the ID of the task."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return The ID of the task."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    public int getID() {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        return id;"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * Gets the description of the task."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * @return The description of the task."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    public String getDescription() {"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        return description;"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     * Checks if the task is complete."},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"     * @return A boolean value representing the completion status of the task."},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"    public boolean isDone() {"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        return isDone;"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"     * To string method for a check box based on task completion status."},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"     * @return A string representing a check box"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"    protected String checkBoxToString() {"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"        if (isDone) {"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"            return \"[X] \";"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"            return \"[] \";"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":66}},{"path":"src/main/java/antonio/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a to-do task."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class ToDoTask extends Task {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"     * Constructor for to-do task."},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    public ToDoTask(String description, int id) {"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * Constructor for to-do task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param status Completion status of the task."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public ToDoTask(String description, int id, int status) {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        return \"[T]\" + super.checkBoxToString() + description;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":32}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: #000000;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"      \u003cText fx:id\u003d\"dialog\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Label\" wrappingWidth\u003d\"256.0\"\u003e"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"            \u003cFont name\u003d\"Avenir Book\" size\u003d\"13.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"         \u003c/font\u003e"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"      \u003c/Text\u003e"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    \u003c/children\u003e"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"chewterence":21}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #696969;\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"antonio.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"291.0\" style\u003d\"-fx-background-color: #C2C2C2;\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"            \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"                \u003cFont name\u003d\"Avenir Book\" size\u003d\"13.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"            \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"295.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"98.0\" text\u003d\"Send\"\u003e"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"            \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"                \u003cFont name\u003d\"Avenir Book\" size\u003d\"14.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"            \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #696969;\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"            \u003ccontent\u003e"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: #888888;\" /\u003e"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"            \u003c/content\u003e"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    \u003c/children\u003e"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"chewterence":26}},{"path":"src/test/java/antonio/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import antonio.command.ByeCommand;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import antonio.command.Command;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import antonio.command.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import antonio.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public void testBasicCommandTypes() throws AntonioException {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        Command c1 \u003d Parser.parse(\"help\");"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        assertTrue(c1 instanceof HelpCommand);"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        Command c2 \u003d Parser.parse(\"list\");"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        assertTrue(c2 instanceof ListCommand);"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        Command c3 \u003d Parser.parse(\"bye\");"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        assertTrue(c3 instanceof ByeCommand);"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":22}},{"path":"src/test/java/antonio/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import antonio.task.Task;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import antonio.task.ToDoTask;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class TaskListTest {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    public void testAddToTaskList() {"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        Task dummyTask \u003d new ToDoTask(\"dummy task\", 1);"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(dummyTask);"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"\\n1. [T][] dummy task\", taskList.toString());"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        assertEquals(1, taskList.getSize());"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    public void testDeleteTaskFromList() {"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        Task dummyTask \u003d new ToDoTask(\"dummy task\", 1);"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(dummyTask);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        taskList.removeTask(1);"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        assertEquals(0, taskList.getSize());"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":28}},{"path":"src/test/java/antonio/task/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package antonio.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class ToDoTaskTest {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    public void testToStringOutput() {"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"        Task t1 \u003d new ToDoTask(\"read book\", 1, 1);"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"        Task t2 \u003d new ToDoTask(\"return book\", 2, 0);"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"[T][X] read book\", t1.toString());"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"[T][] return book\", t2.toString());"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"todo return book"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"list"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"list"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"list"}],"authorContributionMap":{"chewterence":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"REM run the program, feed antonio.command from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"java -classpath ..\\bin antonio.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"chewterence":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"chewterence":1,"-":37}}]
