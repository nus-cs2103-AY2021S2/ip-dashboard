[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"chewterence":2,"-":21}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents the duke chat bot."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private boolean isRunning;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private TaskList taskList;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    private final Storage storageHandler;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    private final String path \u003d \"./data/TaskListData.txt\";"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * Constructor for the duke chat bot."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    public Duke() {"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        isRunning \u003d true;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        storageHandler \u003d new Storage(path);"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"            taskList \u003d storageHandler.open();"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        ui.displayWelcomeMessage();"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     * Checks if the bot is running."},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * @return A boolean value representing if the chat bot is running."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    public boolean isRunning() {"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        return isRunning;"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * Gets a response from the chat bot based on an input string."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @param input Input to the chat bot from a user."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public void getResponse(String input) {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        Command command;"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        ui.printLine();"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"            command \u003d Parser.parse(input);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"            isRunning \u003d !command.shouldExit();"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"            taskList \u003d command.execute(taskList);"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"            storageHandler.write(taskList);"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            ui.printResponse(command.getResponse());"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"            ui.printLine();"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"            ui.printResponse(e.toString());"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chewterence":58,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a Duke exception that is thrown during an error."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    DukeException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"        super(\"â˜¹ Oopsie Doopsies!!! \" + errorMessage);"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":10}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"public class Main {"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"     * The main driver method."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"     * @param args Arguments to the main program."},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    public static void main(String[] args) {"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        String input;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        String output \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        while (duke.isRunning()) {"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"            duke.getResponse(input);"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        sc.close();"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":25}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.command.AddDeadline;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import duke.command.AddEvent;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import duke.command.AddToDo;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import duke.command.ByeCommand;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import duke.command.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"import duke.command.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":" * Represents a parser that handles input from a user."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * Parses the input provided and returns a command."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @param input Input string to be parsed."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @return A command after parsing the input."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If invalid command is given."},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    public static Command parse(String input) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        String command \u003d processedInput[0];"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"        String description \u003d processDescription(processedInput);"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"        switch (command) {"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        case \"help\":"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"            return new HelpCommand();"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        case \"list\":"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"            return new ListCommand();"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        case \"bye\":"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"            return new ByeCommand();"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"        case \"done\":"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"            if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"                throw new DukeException(\"Please enter a duke.task number to mark done\");"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"            return new DoneCommand(Integer.parseInt(processedInput[1]));"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        case \"todo\":"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"            return new AddToDo(command, description);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        case \"event\":"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"            try {"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"                return processEvent(input);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"            } catch (Exception e) {"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"                e.printStackTrace();"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"                throw new DukeException(\"\\nPlease enter a valid format \u0027/at YYYY-MM-DD XXXX-YYYY\u0027\");"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        case \"deadline\":"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"                return processDeadline(input);"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"            } catch (Exception e) {"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"                e.printStackTrace();"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"                throw new DukeException(\"\\nPlease enter a valid format \u0027/by YYYY-MM-DD TIME\u0027\");"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        case \"delete\":"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"            if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"                throw new DukeException(\"Please enter a duke.task number to delete\");"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"            return new DeleteCommand(Integer.parseInt(processedInput[1]));"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"        case \"find\":"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"            return new FindCommand(processedInput[1]);"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"        default:"},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"            throw new DukeException(\"Invalid duke.command. Please enter a valid one\");"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"    private static AddDeadline processDeadline(String input) throws Exception {"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"        String preProcessedData \u003d input.split(\" /by \")[1];"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"        String[] dateTime \u003d preProcessedData.split(\" \");"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"        String time \u003d dateTime[1];"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"        LocalDate deadline \u003d LocalDate.parse(dateTime[0]);"},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"        String description \u003d input.split(\" /by \")[0].split(\"deadline \")[1];"},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"        return new AddDeadline(\"deadline\", description, deadline, time);"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"    private static AddEvent processEvent(String input) throws Exception {"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"        String preProcessedData \u003d input.split(\" /at \")[1];"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"        String[] dateTime \u003d preProcessedData.split(\" \");"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"        LocalDate eventDate \u003d LocalDate.parse(dateTime[0]);"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"        String startTime \u003d dateTime[1].split(\"-\")[0];"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"        String endTime \u003d dateTime[1].split(\"-\")[1];"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"        String description \u003d input.split(\" /at \")[0].split(\"event \")[1];"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"        return new AddEvent(\"event\", description, eventDate, startTime, endTime);"},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"    private static String processDescription(String[] processedInput) {"},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 1; i \u003c processedInput.length; i++) {"},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":"            sb.append(processedInput[i] + \" \");"},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"        return sb.toString();"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":100}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"import duke.task.EventTask;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"import duke.task.ToDoTask;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":" * Encapsulates the methods for handling local storage."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    private final String path;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * Constructor for storage."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @param path A string containing the path to the file."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    Storage(String path) {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        this.path \u003d path;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Opens and returns a task list from local storage if present."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return A task list after opening from path."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If a file is not already present."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public TaskList open() throws DukeException {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        File file \u003d new File(path);"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"        if (!file.exists()) {"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"            createFile(file);"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"            while (sc.hasNext()) {"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"                String newLine \u003d sc.nextLine();"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"                Task task \u003d processFileContents(newLine, taskID);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"                taskList.addTask(task);"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"            throw new DukeException(\"File not found or is in a wrong format\");"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"     * Writes the task list provided to local storage."},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"     * @param taskList Task list to be written to local storage."},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"     * @throws IOException If an error occurs during writing to file."},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If unable to format file contents."},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"    public void write(TaskList taskList) throws IOException, DukeException {"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"        FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"            Task task \u003d taskList.getTask(i);"},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"            sb.append(formatFileContents(task));"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"            sb.append(\"\\n\");"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"        fw.write(sb.toString());"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"        fw.close();"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"     * Creates a file."},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"     * @param file File object to be created from."},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If unable to create new file."},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"    private void createFile(File file) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"            file.getParentFile().mkdirs();"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"            file.createNewFile();"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"        } catch (IOException e) {"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"            throw new DukeException(\"Unable to create new file.\");"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"     * Format task into a string to be stored on local storage."},{"lineNumber":94,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be formatted into a string."},{"lineNumber":95,"author":{"gitId":"chewterence"},"content":"     * @return Task that has been formatted into a string."},{"lineNumber":96,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If unknown task type."},{"lineNumber":97,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"chewterence"},"content":"    private String formatFileContents(Task task) throws DukeException {"},{"lineNumber":99,"author":{"gitId":"chewterence"},"content":"        String format;"},{"lineNumber":100,"author":{"gitId":"chewterence"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":101,"author":{"gitId":"chewterence"},"content":"        int status \u003d task.isDone() ? 1 : 0;"},{"lineNumber":102,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":103,"author":{"gitId":"chewterence"},"content":"        if (task instanceof ToDoTask) {"},{"lineNumber":104,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"T | %d | %s\", status, description);"},{"lineNumber":105,"author":{"gitId":"chewterence"},"content":"        } else if (task instanceof DeadlineTask) {"},{"lineNumber":106,"author":{"gitId":"chewterence"},"content":"            String deadline \u003d ((DeadlineTask) task).serializeDeadline();"},{"lineNumber":107,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"D | %d | %s | %s\", status, description, deadline);"},{"lineNumber":108,"author":{"gitId":"chewterence"},"content":"        } else if (task instanceof EventTask) {"},{"lineNumber":109,"author":{"gitId":"chewterence"},"content":"            String eventDateTime \u003d ((EventTask) task).serializeEvent();"},{"lineNumber":110,"author":{"gitId":"chewterence"},"content":"            format \u003d String.format(\"E | %d | %s | %s\", status, description, eventDateTime);"},{"lineNumber":111,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"chewterence"},"content":"            throw new DukeException(\"Error in file writing: Unknown task type\");"},{"lineNumber":113,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"chewterence"},"content":"        return format;"},{"lineNumber":115,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":117,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"chewterence"},"content":"     * Formats a line of string from a file into a Task object."},{"lineNumber":119,"author":{"gitId":"chewterence"},"content":"     * @param newLine Line from string read from file to be converted to a task."},{"lineNumber":120,"author":{"gitId":"chewterence"},"content":"     * @param taskID ID of task to be created."},{"lineNumber":121,"author":{"gitId":"chewterence"},"content":"     * @return Task converted from string read from file."},{"lineNumber":122,"author":{"gitId":"chewterence"},"content":"     * @throws DukeException If task type is unknown."},{"lineNumber":123,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"chewterence"},"content":"    private Task processFileContents(String newLine, int taskID) throws DukeException {"},{"lineNumber":125,"author":{"gitId":"chewterence"},"content":"        String[] lineContents \u003d newLine.split(\" \\\\| \");"},{"lineNumber":126,"author":{"gitId":"chewterence"},"content":"        String taskType \u003d lineContents[0];"},{"lineNumber":127,"author":{"gitId":"chewterence"},"content":"        int status \u003d Integer.parseInt(lineContents[1]);"},{"lineNumber":128,"author":{"gitId":"chewterence"},"content":"        String description \u003d lineContents[2];"},{"lineNumber":129,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":130,"author":{"gitId":"chewterence"},"content":"        switch (taskType) {"},{"lineNumber":131,"author":{"gitId":"chewterence"},"content":"        case \"T\":"},{"lineNumber":132,"author":{"gitId":"chewterence"},"content":"            return new ToDoTask(description, taskID, status);"},{"lineNumber":133,"author":{"gitId":"chewterence"},"content":"        case \"D\":"},{"lineNumber":134,"author":{"gitId":"chewterence"},"content":"            String time \u003d lineContents[4];"},{"lineNumber":135,"author":{"gitId":"chewterence"},"content":"            LocalDate deadline \u003d LocalDate.parse(lineContents[3]);"},{"lineNumber":136,"author":{"gitId":"chewterence"},"content":"            return new DeadlineTask(description, taskID, status, deadline, time);"},{"lineNumber":137,"author":{"gitId":"chewterence"},"content":"        case \"E\":"},{"lineNumber":138,"author":{"gitId":"chewterence"},"content":"            LocalDate eventDate \u003d LocalDate.parse(lineContents[3]);"},{"lineNumber":139,"author":{"gitId":"chewterence"},"content":"            String startTime \u003d lineContents[4];"},{"lineNumber":140,"author":{"gitId":"chewterence"},"content":"            String endTime \u003d lineContents[5];"},{"lineNumber":141,"author":{"gitId":"chewterence"},"content":"            return new EventTask(description, taskID, status, eventDate, startTime, endTime);"},{"lineNumber":142,"author":{"gitId":"chewterence"},"content":"        default:"},{"lineNumber":143,"author":{"gitId":"chewterence"},"content":"            throw new DukeException(\"Error in file reading: Unknown task type\");"},{"lineNumber":144,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":147,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":147}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * Constructor for task list."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    private TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * Obtains a task based on ID specified."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be obtained."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     * @return Task to be retrieved."},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    public Task getTask(int id) {"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        int index \u003d id - 1;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"        return tasks.get(index);"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * Obtains the size of the task list."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     * @return Size of the task list."},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    public int getSize() {"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        return tasks.size();"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * Adds a task to the task list."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @param task Task to be added to the task list."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    public void addTask(Task task) {"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        tasks.add(task);"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"     * Removes a task from the task list based on ID specified."},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be removed."},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    public void removeTask(int id) {"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"        tasks.remove(id - 1);"},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"     * Marks the ID of the task specified as done."},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"     * @param id ID of the task to be marked done."},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"    public void markDone(int id) {"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        int index \u003d id - 1;"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"        Task task \u003d tasks.remove(index);"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"        task.markDone();"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"        tasks.add(index, task);"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":67,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"chewterence"},"content":"     * Finds a key word within task list and returns a new list containing tasks with keyword."},{"lineNumber":69,"author":{"gitId":"chewterence"},"content":"     * @param key Keyword to be matched with."},{"lineNumber":70,"author":{"gitId":"chewterence"},"content":"     * @return A new list containing tasks with the keyword specified."},{"lineNumber":71,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"chewterence"},"content":"    public TaskList findKeyWord(String key) {"},{"lineNumber":73,"author":{"gitId":"chewterence"},"content":"        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"},{"lineNumber":74,"author":{"gitId":"chewterence"},"content":"        for (Task task : tasks) {"},{"lineNumber":75,"author":{"gitId":"chewterence"},"content":"            if (task.toString().contains(key)) {"},{"lineNumber":76,"author":{"gitId":"chewterence"},"content":"                temp.add(task);"},{"lineNumber":77,"author":{"gitId":"chewterence"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"chewterence"},"content":"        return new TaskList(temp);"},{"lineNumber":80,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":82,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":84,"author":{"gitId":"chewterence"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":85,"author":{"gitId":"chewterence"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":86,"author":{"gitId":"chewterence"},"content":"            sb.append(\"\\n\");"},{"lineNumber":87,"author":{"gitId":"chewterence"},"content":"            sb.append((i + 1) + \". \");"},{"lineNumber":88,"author":{"gitId":"chewterence"},"content":"            sb.append(tasks.get(i).toString());"},{"lineNumber":89,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"chewterence"},"content":"        return sb.toString();"},{"lineNumber":91,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":93,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":93}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Handles the output from the chat bot."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"     * Prints the response specified."},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * @param response"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    public void printResponse(String response) {"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        System.out.println(response);"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * Prints a line."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    public void printLine() {"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * Displays a welcome message."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public void displayWelcomeMessage() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        System.out.println(\"    Hello! I\u0027m duke.Duke\\n    What can I do for you?\");"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":29}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds tasks."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public abstract class AddCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    protected String commandType;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    protected Task newTask;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    protected int numTasks;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructor for AddCommand class command name and description."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param commandType Name of the command."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param description Description to add to command."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    public AddCommand(String commandType, String description) {"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"        this.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"     * Returns positive if command terminates chat bot."},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     * @return True if this command terminates chat bot."},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        return \"Got it. I\u0027ve added this duke.task:\\n  \";"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public abstract TaskList execute(TaskList taskList);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":47}},{"path":"src/main/java/duke/command/AddDeadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds Deadline tasks."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class AddDeadline extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private LocalDate deadline;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private String time;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Constructor for a commands that adds Deadline tasks."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param deadline Deadline of the task."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param time Deadline time of the task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    public AddDeadline(String commandType, String description, LocalDate deadline, String time) {"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        this.time \u003d time;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new DeadlineTask(description, taskID, 0, deadline, time);"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":50}},{"path":"src/main/java/duke/command/AddEvent.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import duke.task.EventTask;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds Event tasks."},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class AddEvent extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private LocalDate eventDate;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    private String startTime;"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    private String endTime;"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * Constructor for a commands that adds Event tasks."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param eventDate Date of the event."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param startTime Start time of the event."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * @param endTime End time of the event"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    public AddEvent(String commandType, String description, LocalDate eventDate, String startTime, String endTime) {"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new EventTask(description, taskID, 0, eventDate, startTime, endTime);"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":53}},{"path":"src/main/java/duke/command/AddToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import duke.task.ToDoTask;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that adds to-do tasks."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class AddToDo extends AddCommand {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * Constructor for a commands that adds to-do tasks."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * @param commandType Type of command."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * @param description Description of the task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    public AddToDo(String commandType, String description) {"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        super(commandType, description);"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        return super.getResponse() + super.newTask.toString();"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        int taskID \u003d taskList.getSize() + 1;"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        newTask \u003d new ToDoTask(description, taskID);"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(newTask);"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":42}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that exits the chat bot."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class ByeCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        return true;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * An interface for commands that the user inputs."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public interface Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    boolean shouldExit();"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    String getResponse();"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    TaskList execute(TaskList taskList);"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a command that deletes task from the task list."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private int deletedID;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private Task deletedTask;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private int numTasks;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * Constructor for delete command."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * @param deletedID ID of the task to be deleted."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    public DeleteCommand(int deletedID) {"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        this.deletedID \u003d deletedID;"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        return \"Noted. I\u0027ve removed this duke.task:\\n  \" + deletedTask"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"            + \"\\nNow you have \" + numTasks + \" tasks in the list.\\n\";"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"        deletedTask \u003d taskList.getTask(deletedID);"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        taskList.removeTask(deletedID);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        numTasks \u003d taskList.getSize();"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":51}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a command that marks tasks on the task list as done."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class DoneCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private final int id;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private String response;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructor for done command."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task to be marked as done."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    public DoneCommand(int id) {"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        this.id \u003d id;"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * Returns positive if command terminates chat bot."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * @return True if this command terminates chat bot."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"        return \"Nice! I\u0027ve marked this duke.task as done:\\n  \" + response;"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"        taskList.markDone(id);"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        response \u003d taskList.getTask(id).toString();"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":46}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents a find command"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class FindCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private String key;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private TaskList findList;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * Constructor for find command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param key Key to be matched with finding."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    public FindCommand(String key) {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        this.key \u003d key;"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        return \"\\nHere are the matching tasks in your list:...\\n\" + findList.toString();"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        findList \u003d taskList.findKeyWord(key);"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":49}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a command that displays a string of text to help the user."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class HelpCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        return \"\\nHere are a list of commands you can tell me:\\n\""},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027list\u0027\""},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"                + \"\\nto list the current tasks on your list\""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027todo \u003cdescription\u003e\u0027\""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"                + \"\\nto add a basic ToDo duke.task to your list\""},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027deadline \u003cdescription\u003e /by YYYY-MM-DD\u0027\""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"                + \"\\nto add a Deadline duke.task with date specified\""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027event \u003cdescription\u003e /at YYYY-MM-DD AAAA-BBBB\u0027\""},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"                + \"\\nto add an Event duke.task from time AAAA to BBBB\""},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027delete \u003cduke.task number\u003e\u0027\""},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"                + \"\\nto delete duke.task from your list\""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"                + \"\\n\u0027bye\u0027\""},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"                + \"\\nto exit the program\";"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":49}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a command that lists all tasks on the task list."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class ListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private TaskList currentList;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     * Returns a boolean value to signal the bot to exit."},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * @return True if command signals bot to be terminated."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    public boolean shouldExit() {"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * Gets the reply message."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @return The reply message for this command."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public String getResponse() {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        return \"Here are the tasks in your list:\\n\" + currentList.toString();"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     * Executes the command."},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * @param taskList List of tasks to be used for execution of the command."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     * @return List of tasks after the execution of the command."},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"    public TaskList execute(TaskList taskList) {"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"        currentList \u003d taskList;"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"        return taskList;"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":37}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" * Represents a Deadline task."},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    private LocalDate deadline;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private String time;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructor for Deadline task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * @param status Status of task completion."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param deadline Date of deadline for the task."},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param time Time of deadline for the task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    public DeadlineTask(String description, int id, int status, LocalDate deadline, String time) {"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        this.time \u003d time;"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"     * Serializes deadline into a string format for local storage."},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"     * @return Serialized deadline."},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    public String serializeDeadline() {"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"        return deadline.toString() + \" | \" + time;"},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"        return \"[D]\" + super.checkBoxToString() + description + \" (by: \" + deadline.getDayOfMonth()"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"                + \" \" + deadline.getMonth() + \" \" + deadline.getYear() + \" \" + time + \"HRS)\";"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":40}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":" * Represents an event task."},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"public class EventTask extends Task {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    private LocalDate eventDate;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    private String startTime;"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    private String endTime;"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * Constructor for event task."},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * @param status Status of task completion."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param eventDate Date of deadline for the task."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param startTime Start time of deadline for the task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param endTime End time of deadline for the task."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public EventTask(String description, int id, int status, LocalDate eventDate, String startTime, String endTime) {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        this.startTime \u003d startTime;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"        this.endTime \u003d endTime;"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * Serializes event duration into a string format for local storage."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     * @return Serialized event duration."},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"    public String serializeEvent() {"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"        return eventDate.toString() + \" | \" + startTime + \" | \" + endTime;"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"        return \"[E]\" + super.checkBoxToString() + description + \" (at: \" + eventDate.getDayOfMonth()"},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"                + \" \" + eventDate.getMonth() + \" \" + eventDate.getYear() + \" \""},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"                + startTime + \"HRS to \" + endTime + \"HRS\" + \")\";"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":44}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a task."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    protected int id;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"     * Constructor for task."},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    public Task(String description, int id) {"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"        this.id \u003d id;"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"     * Marks task as done."},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    public void markDone() {"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"     * Gets the ID of the task."},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"     * @return The ID of the task."},{"lineNumber":33,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewterence"},"content":"    public int getID() {"},{"lineNumber":35,"author":{"gitId":"chewterence"},"content":"        return id;"},{"lineNumber":36,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":38,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"chewterence"},"content":"     * Gets the description of the task."},{"lineNumber":40,"author":{"gitId":"chewterence"},"content":"     * @return The description of the task."},{"lineNumber":41,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"chewterence"},"content":"    public String getDescription() {"},{"lineNumber":43,"author":{"gitId":"chewterence"},"content":"        return description;"},{"lineNumber":44,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":46,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"chewterence"},"content":"     * Checks if the task is complete."},{"lineNumber":48,"author":{"gitId":"chewterence"},"content":"     * @return A boolean value representing the completion status of the task."},{"lineNumber":49,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"chewterence"},"content":"    public boolean isDone() {"},{"lineNumber":51,"author":{"gitId":"chewterence"},"content":"        return isDone;"},{"lineNumber":52,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":54,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"chewterence"},"content":"     * To string method for a check box based on task completion status."},{"lineNumber":56,"author":{"gitId":"chewterence"},"content":"     * @return A string representing a check box"},{"lineNumber":57,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"chewterence"},"content":"    protected String checkBoxToString() {"},{"lineNumber":59,"author":{"gitId":"chewterence"},"content":"        if (isDone) {"},{"lineNumber":60,"author":{"gitId":"chewterence"},"content":"            return \"[X] \";"},{"lineNumber":61,"author":{"gitId":"chewterence"},"content":"        } else {"},{"lineNumber":62,"author":{"gitId":"chewterence"},"content":"            return \"[] \";"},{"lineNumber":63,"author":{"gitId":"chewterence"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":66,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":66}},{"path":"src/main/java/duke/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":" * Represents a to-do task."},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class ToDoTask extends Task {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"     * Constructor for to-do task."},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task."},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    public ToDoTask(String description, int id) {"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"     * Constructor for to-do task."},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"     * @param description Name of the command."},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"     * @param id ID of task."},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"     * @param status Completion status of the task."},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"    public ToDoTask(String description, int id, int status) {"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        super(description, id);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        super.isDone \u003d status \u003e 0;"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"chewterence"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"chewterence"},"content":"        return \"[T]\" + super.checkBoxToString() + description;"},{"lineNumber":31,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":32}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import duke.command.HelpCommand;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.command.ListCommand;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"    public void testBasicCommandTypes() throws DukeException {"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        Command c1 \u003d Parser.parse(\"help\");"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        assertTrue(c1 instanceof HelpCommand);"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        Command c2 \u003d Parser.parse(\"list\");"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"        assertTrue(c2 instanceof ListCommand);"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        Command c3 \u003d Parser.parse(\"bye\");"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"        assertTrue(c3 instanceof ByeCommand);"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":20}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"import duke.task.ToDoTask;"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"    public void testAddToTaskList() {"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"        Task dummyTask \u003d new ToDoTask(\"dummy task\", 1);"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(dummyTask);"},{"lineNumber":15,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"Here are the tasks in your list:\\n\" +"},{"lineNumber":16,"author":{"gitId":"chewterence"},"content":"                \"1. [T][] dummy task\\n\", taskList.toString());"},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"        assertEquals(1, taskList.getSize());"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":20,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"chewterence"},"content":"    public void testDeleteTaskFromList() {"},{"lineNumber":22,"author":{"gitId":"chewterence"},"content":"        Task dummyTask \u003d new ToDoTask(\"dummy task\", 1);"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"chewterence"},"content":"        taskList.addTask(dummyTask);"},{"lineNumber":25,"author":{"gitId":"chewterence"},"content":"        taskList.removeTask(1);"},{"lineNumber":26,"author":{"gitId":"chewterence"},"content":"        assertEquals(0, taskList.getSize());"},{"lineNumber":27,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":28}},{"path":"src/test/java/duke/task/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"import static junit.framework.TestCase.assertEquals;"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":""},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"public class ToDoTaskTest {"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"    public void testToStringOutput() {"},{"lineNumber":9,"author":{"gitId":"chewterence"},"content":"        Task t1 \u003d new ToDoTask(\"read book\", 1, 1);"},{"lineNumber":10,"author":{"gitId":"chewterence"},"content":"        Task t2 \u003d new ToDoTask(\"return book\", 2, 0);"},{"lineNumber":11,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"[T][X] read book\", t1.toString());"},{"lineNumber":12,"author":{"gitId":"chewterence"},"content":"        assertEquals(\"[T][] return book\", t2.toString());"},{"lineNumber":13,"author":{"gitId":"chewterence"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"chewterence"},"content":"}"}],"authorContributionMap":{"chewterence":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chewterence"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"chewterence"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"chewterence"},"content":"todo return book"},{"lineNumber":4,"author":{"gitId":"chewterence"},"content":"list"},{"lineNumber":5,"author":{"gitId":"chewterence"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"chewterence"},"content":"list"},{"lineNumber":7,"author":{"gitId":"chewterence"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"chewterence"},"content":"list"}],"authorContributionMap":{"chewterence":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"chewterence"},"content":"REM run the program, feed duke.command from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"chewterence"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"chewterence":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"chewterence"},"content":"java -classpath ../bin Main \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"chewterence":1,"-":37}}]
