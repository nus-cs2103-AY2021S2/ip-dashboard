[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class Command {"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"    protected final int targetIndex;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    protected final IDuke duke;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"    protected Command(int targetIndex, IDuke duke) {"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"        this.duke \u003d duke;"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    public IDuke execute() {"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        throw new UnsupportedOperationException(\"This method is to\""},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"                + \" be implemented by child classes.\");"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        Command setDuke(Duke duke) {"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"        return new Command(targetIndex, duke);"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"}"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":""}],"authorContributionMap":{"Andrewzhang217":22}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class Deadline extends Task{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    protected String by;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"    public Deadline(String description, String by, boolean isDone) {"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"        super(description, isDone);"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"        this.by \u003d by;"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    public static Deadline getDeadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        return new Deadline(description, by, false);"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    public Task markDone(){"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        return new Deadline(description,by,true);"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"}"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":""}],"authorContributionMap":{"Andrewzhang217":24}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":" * Main Duke chatbot class."},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"public class Duke implements IDuke{"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    /** List of Tasks */"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"    private final ArrayList\u003cITask\u003e list;"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"    private Duke(ArrayList\u003cITask\u003e lst){"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        this.list \u003d new ArrayList\u003c\u003e(lst);"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"     * Returns a new Duke chatbot object."},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"     * @return New Duke chatbot object."},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    public static Duke getDuke(){"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"        return new Duke(new ArrayList\u003c\u003e());"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"    public void greeting(){"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"    public void bye(){"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Andrewzhang217"},"content":"    public IDuke processInput(String input) {"},{"lineNumber":48,"author":{"gitId":"Andrewzhang217"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Andrewzhang217"},"content":"            if (input.equals(\"list\")) {"},{"lineNumber":50,"author":{"gitId":"Andrewzhang217"},"content":"               display();"},{"lineNumber":51,"author":{"gitId":"Andrewzhang217"},"content":"                return this;"},{"lineNumber":52,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (input.matches(\"^done.*\")) {"},{"lineNumber":53,"author":{"gitId":"Andrewzhang217"},"content":"                // Handle done command"},{"lineNumber":54,"author":{"gitId":"Andrewzhang217"},"content":"                if (!input.matches(\"^done -?[0-9]+$\")) {"},{"lineNumber":55,"author":{"gitId":"Andrewzhang217"},"content":"                    throw new DukeIllegalArgumentException("},{"lineNumber":56,"author":{"gitId":"Andrewzhang217"},"content":"                            \"Wrong done command! Format: done \u003ctaskId\u003e\");"},{"lineNumber":57,"author":{"gitId":"Andrewzhang217"},"content":"                }"},{"lineNumber":58,"author":{"gitId":"Andrewzhang217"},"content":"                int index \u003d Integer.parseInt(input.split(\" \", 2)[1]);"},{"lineNumber":59,"author":{"gitId":"Andrewzhang217"},"content":"                return handleDone(index);"},{"lineNumber":60,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (input.matches(\"^todo.*\")) {"},{"lineNumber":61,"author":{"gitId":"Andrewzhang217"},"content":"                // Handle todo command"},{"lineNumber":62,"author":{"gitId":"Andrewzhang217"},"content":"                if (!input.matches(\"^todo .*\")) {"},{"lineNumber":63,"author":{"gitId":"Andrewzhang217"},"content":"                    throw new DukeIllegalArgumentException("},{"lineNumber":64,"author":{"gitId":"Andrewzhang217"},"content":"                            \"Wrong todo command! Format: todo \u003ctaskName\u003e\");"},{"lineNumber":65,"author":{"gitId":"Andrewzhang217"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"Andrewzhang217"},"content":"                String param \u003d input.split(\" \", 2)[1];"},{"lineNumber":67,"author":{"gitId":"Andrewzhang217"},"content":"                return handleToDo(param);"},{"lineNumber":68,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (input.matches(\"^deadline.*\")) {"},{"lineNumber":69,"author":{"gitId":"Andrewzhang217"},"content":"                // Handle deadline command"},{"lineNumber":70,"author":{"gitId":"Andrewzhang217"},"content":"                if (!input.matches(\"^deadline .* /by .*\")) {"},{"lineNumber":71,"author":{"gitId":"Andrewzhang217"},"content":"                    throw new DukeIllegalArgumentException("},{"lineNumber":72,"author":{"gitId":"Andrewzhang217"},"content":"                            \"Wrong deadline command!\\nFormat: deadline \u003ctaskName\u003e /by \u003ctime\u003e\");"},{"lineNumber":73,"author":{"gitId":"Andrewzhang217"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"Andrewzhang217"},"content":"                String[] params \u003d input.split(\" \", 2)[1].split(\" /by \");"},{"lineNumber":75,"author":{"gitId":"Andrewzhang217"},"content":"                return handleDeadline(params[0], params[1]);"},{"lineNumber":76,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (input.matches(\"^event.*\")) {"},{"lineNumber":77,"author":{"gitId":"Andrewzhang217"},"content":"                // Handle event command"},{"lineNumber":78,"author":{"gitId":"Andrewzhang217"},"content":"                if (!input.matches(\"^event .* /at .*\")) {"},{"lineNumber":79,"author":{"gitId":"Andrewzhang217"},"content":"                    throw new DukeIllegalArgumentException("},{"lineNumber":80,"author":{"gitId":"Andrewzhang217"},"content":"                            \"Wrong event command!\\nFormat: event \u003ctaskName\u003e /at \u003ctime\u003e\");"},{"lineNumber":81,"author":{"gitId":"Andrewzhang217"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"Andrewzhang217"},"content":"                String[] params \u003d input.split(\" \", 2)[1].split(\" /at \");"},{"lineNumber":83,"author":{"gitId":"Andrewzhang217"},"content":"                return handleEvent(params[0], params[1]);"},{"lineNumber":84,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (input.matches(\"^delete.*\")) {"},{"lineNumber":85,"author":{"gitId":"Andrewzhang217"},"content":"                // Handle delete command"},{"lineNumber":86,"author":{"gitId":"Andrewzhang217"},"content":"                if (!input.matches(\"^delete -?[0-9]+$\")) {"},{"lineNumber":87,"author":{"gitId":"Andrewzhang217"},"content":"                    throw new DukeIllegalArgumentException("},{"lineNumber":88,"author":{"gitId":"Andrewzhang217"},"content":"                            \"Wrong delete command! Format: delete \u003ctaskId\u003e\");"},{"lineNumber":89,"author":{"gitId":"Andrewzhang217"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"Andrewzhang217"},"content":"                int index \u003d Integer.parseInt(input.split(\" \")[1]);"},{"lineNumber":91,"author":{"gitId":"Andrewzhang217"},"content":"                return handleDelete(index);"},{"lineNumber":92,"author":{"gitId":"Andrewzhang217"},"content":"            } else {"},{"lineNumber":93,"author":{"gitId":"Andrewzhang217"},"content":"                throw new DukeUnrecognizedArgumentException(\"Unrecognizable command!\");"},{"lineNumber":94,"author":{"gitId":"Andrewzhang217"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"Andrewzhang217"},"content":"        } catch (DukeIllegalArgumentException e) {"},{"lineNumber":96,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(e);"},{"lineNumber":97,"author":{"gitId":"Andrewzhang217"},"content":"        } catch (DukeUnrecognizedArgumentException e) {"},{"lineNumber":98,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(\" Sorry I don\u0027t understand your command\");"},{"lineNumber":99,"author":{"gitId":"Andrewzhang217"},"content":"        } catch (Exception e) {"},{"lineNumber":100,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(e);"},{"lineNumber":101,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":103,"author":{"gitId":"Andrewzhang217"},"content":"        return this;"},{"lineNumber":104,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":105,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":107,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":109,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"Andrewzhang217"},"content":"    public IDuke addTask(ITask task) {"},{"lineNumber":112,"author":{"gitId":"Andrewzhang217"},"content":"        ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"},{"lineNumber":113,"author":{"gitId":"Andrewzhang217"},"content":"        newList.add(task);"},{"lineNumber":114,"author":{"gitId":"Andrewzhang217"},"content":"        return new Duke(newList);"},{"lineNumber":115,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":117,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":119,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":121,"author":{"gitId":"Andrewzhang217"},"content":"    public ITask getTask(int id) {"},{"lineNumber":122,"author":{"gitId":"Andrewzhang217"},"content":"        if (id - 1 \u003e list.size() || id \u003c 0) {"},{"lineNumber":123,"author":{"gitId":"Andrewzhang217"},"content":"            throw new IllegalArgumentException(\"Task id out of bound!\");"},{"lineNumber":124,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Andrewzhang217"},"content":"        return list.get(id - 1);"},{"lineNumber":126,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":128,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":129,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":131,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":133,"author":{"gitId":"Andrewzhang217"},"content":"    public void display(){"},{"lineNumber":134,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":135,"author":{"gitId":"Andrewzhang217"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":136,"author":{"gitId":"Andrewzhang217"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":137,"author":{"gitId":"Andrewzhang217"},"content":"            sb.append(\" \").append(i + 1).append(\". \")"},{"lineNumber":138,"author":{"gitId":"Andrewzhang217"},"content":"                    .append(list.get(i).toString()).append(\"\\n\");"},{"lineNumber":139,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(sb.toString());"},{"lineNumber":141,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":143,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":144,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":145,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"Andrewzhang217"},"content":"     * {@inheritDoc}"},{"lineNumber":147,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":149,"author":{"gitId":"Andrewzhang217"},"content":"    public int numOfTasks() {"},{"lineNumber":150,"author":{"gitId":"Andrewzhang217"},"content":"        return list.size();"},{"lineNumber":151,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":153,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":154,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":155,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":156,"author":{"gitId":"Andrewzhang217"},"content":"     * @param id task index"},{"lineNumber":157,"author":{"gitId":"Andrewzhang217"},"content":"     * @return IDuke object with task deleted"},{"lineNumber":158,"author":{"gitId":"Andrewzhang217"},"content":"     * @throws DukeIllegalArgumentException"},{"lineNumber":159,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":161,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke delete(int id) throws DukeIllegalArgumentException {"},{"lineNumber":162,"author":{"gitId":"Andrewzhang217"},"content":"        if (id - 1 \u003e list.size() || id \u003c 0) {"},{"lineNumber":163,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":164,"author":{"gitId":"Andrewzhang217"},"content":"                    \"Cannot delete task! Task id out of bound!\");"},{"lineNumber":165,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"Andrewzhang217"},"content":"        ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"},{"lineNumber":167,"author":{"gitId":"Andrewzhang217"},"content":"        newList.remove(id - 1);"},{"lineNumber":168,"author":{"gitId":"Andrewzhang217"},"content":"        return new Duke(newList);"},{"lineNumber":169,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":171,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":172,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke handleDelete(int index) {"},{"lineNumber":173,"author":{"gitId":"Andrewzhang217"},"content":"        if (index \u003c 1 || index \u003e numOfTasks()) {"},{"lineNumber":174,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"},{"lineNumber":175,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke newDuke \u003d delete(index);"},{"lineNumber":177,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println("},{"lineNumber":178,"author":{"gitId":"Andrewzhang217"},"content":"                \" I\u0027ve removed this task:\\n\\t\" + getTask(index)"},{"lineNumber":179,"author":{"gitId":"Andrewzhang217"},"content":"                        + \"\\n Now you have \" + newDuke.numOfTasks() + \" task(s) in the list.\");"},{"lineNumber":180,"author":{"gitId":"Andrewzhang217"},"content":"        return newDuke;"},{"lineNumber":181,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":183,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":184,"author":{"gitId":"Andrewzhang217"},"content":"    public IDuke done(int index){"},{"lineNumber":185,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":186,"author":{"gitId":"Andrewzhang217"},"content":"            if (index - 1 \u003e list.size() || index \u003c 0) {"},{"lineNumber":187,"author":{"gitId":"Andrewzhang217"},"content":"                throw new DukeIllegalArgumentException("},{"lineNumber":188,"author":{"gitId":"Andrewzhang217"},"content":"                        \"Cannot done task! Task id out of bound!\");"},{"lineNumber":189,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (list.get(index - 1).isDone()) {"},{"lineNumber":190,"author":{"gitId":"Andrewzhang217"},"content":"                throw new DukeIllegalArgumentException("},{"lineNumber":191,"author":{"gitId":"Andrewzhang217"},"content":"                        \"Cannot done task! Task is already done!\");"},{"lineNumber":192,"author":{"gitId":"Andrewzhang217"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"Andrewzhang217"},"content":"            ArrayList\u003cITask\u003e newList \u003d new ArrayList\u003c\u003e(this.list);"},{"lineNumber":194,"author":{"gitId":"Andrewzhang217"},"content":"            newList.set(index - 1, newList.get(index - 1).markDone());"},{"lineNumber":195,"author":{"gitId":"Andrewzhang217"},"content":"            return new Duke(newList);"},{"lineNumber":196,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":198,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":199,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke handleDone(int index) throws DukeIllegalArgumentException {"},{"lineNumber":200,"author":{"gitId":"Andrewzhang217"},"content":"        if (index \u003c 1 || index \u003e numOfTasks()) {"},{"lineNumber":201,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException(\"Task index out of bound!\");"},{"lineNumber":202,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke newDuke \u003d done(index);"},{"lineNumber":204,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println("},{"lineNumber":205,"author":{"gitId":"Andrewzhang217"},"content":"                \"Nice! I\u0027ve marked this task done!\\n\" + newDuke.getTask(index));"},{"lineNumber":206,"author":{"gitId":"Andrewzhang217"},"content":"        return newDuke;"},{"lineNumber":207,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":209,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":210,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke handleToDo(String description) throws DukeIllegalArgumentException {"},{"lineNumber":211,"author":{"gitId":"Andrewzhang217"},"content":"        if (description.matches(\"\\\\s*\")) {"},{"lineNumber":212,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":213,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The description of todo cannot be empty!\");"},{"lineNumber":214,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":215,"author":{"gitId":"Andrewzhang217"},"content":"        ITask task \u003d Todo.getTodo(description);"},{"lineNumber":216,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke newDuke \u003d addTask(task);"},{"lineNumber":217,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println("},{"lineNumber":218,"author":{"gitId":"Andrewzhang217"},"content":"                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"},{"lineNumber":219,"author":{"gitId":"Andrewzhang217"},"content":"                        + \"\\nNow you have \""},{"lineNumber":220,"author":{"gitId":"Andrewzhang217"},"content":"                        +  newDuke.numOfTasks() + \" task(s) in the list.\");"},{"lineNumber":221,"author":{"gitId":"Andrewzhang217"},"content":"        return newDuke;"},{"lineNumber":222,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":224,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":225,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke handleDeadline(String description, String by)"},{"lineNumber":226,"author":{"gitId":"Andrewzhang217"},"content":"            throws DukeIllegalArgumentException{"},{"lineNumber":227,"author":{"gitId":"Andrewzhang217"},"content":"        if (description.matches(\"\\\\s*\")) {"},{"lineNumber":228,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":229,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The description of deadline cannot be empty!\");"},{"lineNumber":230,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"Andrewzhang217"},"content":"        if (by.matches(\"\\\\s*\")) {"},{"lineNumber":232,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":233,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The time of deadline cannot be empty!\");"},{"lineNumber":234,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"Andrewzhang217"},"content":"        ITask task \u003d Deadline.getDeadline(description, by);"},{"lineNumber":236,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke newDuke \u003d addTask(task);"},{"lineNumber":237,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"},{"lineNumber":238,"author":{"gitId":"Andrewzhang217"},"content":"                        + \"\\nNow you have \" +  newDuke.numOfTasks()"},{"lineNumber":239,"author":{"gitId":"Andrewzhang217"},"content":"                        + \" task(s) in the list.\");"},{"lineNumber":240,"author":{"gitId":"Andrewzhang217"},"content":"        return newDuke;"},{"lineNumber":241,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":243,"author":{"gitId":"Andrewzhang217"},"content":"    private IDuke handleEvent(String description, String at)"},{"lineNumber":244,"author":{"gitId":"Andrewzhang217"},"content":"            throws DukeIllegalArgumentException {"},{"lineNumber":245,"author":{"gitId":"Andrewzhang217"},"content":"        if (description.matches(\"\\\\s*\")) {"},{"lineNumber":246,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":247,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The description of event cannot be empty!\");"},{"lineNumber":248,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"Andrewzhang217"},"content":"        if (at.matches(\"\\\\s*\")) {"},{"lineNumber":250,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":251,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The time of event cannot be empty!\");"},{"lineNumber":252,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"Andrewzhang217"},"content":"        ITask task \u003d Event.getEvent(description, at);"},{"lineNumber":254,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke newDuke \u003d addTask(task);"},{"lineNumber":255,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println("},{"lineNumber":256,"author":{"gitId":"Andrewzhang217"},"content":"                \"Got it. I\u0027ve added this task:\\n\\t\" + task.toString()"},{"lineNumber":257,"author":{"gitId":"Andrewzhang217"},"content":"                        + \"\\nNow you have \" +  newDuke.numOfTasks()"},{"lineNumber":258,"author":{"gitId":"Andrewzhang217"},"content":"                        + \" task(s) in the list.\");"},{"lineNumber":259,"author":{"gitId":"Andrewzhang217"},"content":"        return newDuke;"},{"lineNumber":260,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":262,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":263,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":264,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":265,"author":{"gitId":"Andrewzhang217"},"content":"        IDuke duke \u003d getDuke();"},{"lineNumber":266,"author":{"gitId":"Andrewzhang217"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":267,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":268,"author":{"gitId":"Andrewzhang217"},"content":"        // Greet user"},{"lineNumber":269,"author":{"gitId":"Andrewzhang217"},"content":"        duke.greeting();"},{"lineNumber":270,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":271,"author":{"gitId":"Andrewzhang217"},"content":"        // Handle commands until user types bye"},{"lineNumber":272,"author":{"gitId":"Andrewzhang217"},"content":"        while (sc.hasNext()) {"},{"lineNumber":273,"author":{"gitId":"Andrewzhang217"},"content":"            String s \u003d sc.nextLine();"},{"lineNumber":274,"author":{"gitId":"Andrewzhang217"},"content":"            if (s.equals(\"bye\")) {"},{"lineNumber":275,"author":{"gitId":"Andrewzhang217"},"content":"                break;"},{"lineNumber":276,"author":{"gitId":"Andrewzhang217"},"content":"            } else if (!s.matches(\"\\\\s*\")) {"},{"lineNumber":277,"author":{"gitId":"Andrewzhang217"},"content":"                // Ignore white spaces or empty lines"},{"lineNumber":278,"author":{"gitId":"Andrewzhang217"},"content":"                duke \u003d duke.processInput(s);"},{"lineNumber":279,"author":{"gitId":"Andrewzhang217"},"content":"            }"},{"lineNumber":280,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":281,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":282,"author":{"gitId":"Andrewzhang217"},"content":"        // Exit duke"},{"lineNumber":283,"author":{"gitId":"Andrewzhang217"},"content":"        duke.bye();"},{"lineNumber":284,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":285,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"Andrewzhang217":283}},{"path":"src/main/java/DukeEmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class DukeEmptyCommandException extends IllegalArgumentException{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"    public DukeEmptyCommandException(String s){"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":5}},{"path":"src/main/java/DukeIllegalArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class DukeIllegalArgumentException extends IllegalArgumentException{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"    public DukeIllegalArgumentException(String s){"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":5}},{"path":"src/main/java/DukeUnrecognizedArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class DukeUnrecognizedArgumentException extends IllegalArgumentException{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"    public DukeUnrecognizedArgumentException(String s){"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":5}},{"path":"src/main/java/DukeWrongCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class DukeWrongCommandException extends IllegalArgumentException{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"    public DukeWrongCommandException (String s){"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"        super(s);"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class Event extends Task{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    protected String at;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"    public Event(String description, String at, boolean isDone) {"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"        super(description, isDone);"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"        this.at \u003d at;"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    public static Event getEvent(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        return new Event(description, by, false);"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    public Task markDone(){"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        return new Event(description,at,true);"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at + \")\";"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":23}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.stream.IntStream;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":" * FindCommand class to encapsulate find operation."},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":" * Find takes in a search string and displays all matching descriptions."},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":" *"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":" * A Command must be initiated with a Duke object before executing."},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    private final String searchString;"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    private FindCommand(String searchString, IDuke duke) {"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        super(-1, duke);"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"        this.searchString \u003d searchString;"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"     * Returns a find command."},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"     * @param searchString Search string."},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"     * @return A FindCommand which is not yet initiate with Duke."},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"    public static FindCommand getFindCommand(String searchString) {"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"        return new FindCommand(searchString, null);"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"     * Executes find command."},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"     * @return Resultant duke object."},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":"    public IDuke execute() {"},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":"        if (duke \u003d\u003d null) {"},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"            throw new RuntimeException(Message.ERR_DUKE_NOT_INIT.toString());"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"        handleFind(searchString);"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":"        return duke;"},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"     * Prints the list of matching tasks."},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":"     * @param searchString Search string."},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Andrewzhang217"},"content":"    private void handleFind(String searchString) {"},{"lineNumber":47,"author":{"gitId":"Andrewzhang217"},"content":"        if (searchString.length() \u003d\u003d 0) {"},{"lineNumber":48,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeIllegalArgumentException("},{"lineNumber":49,"author":{"gitId":"Andrewzhang217"},"content":"                    \"The keyword of find cannot be empty!\");"},{"lineNumber":50,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Andrewzhang217"},"content":"//        TaskList list \u003d duke.getTasks();"},{"lineNumber":52,"author":{"gitId":"Andrewzhang217"},"content":"//        int[] indexes \u003d IntStream"},{"lineNumber":53,"author":{"gitId":"Andrewzhang217"},"content":"//                .range(0, list.size())"},{"lineNumber":54,"author":{"gitId":"Andrewzhang217"},"content":"//                .filter(x -\u003e list.get(x).getDescription().contains(searchString))"},{"lineNumber":55,"author":{"gitId":"Andrewzhang217"},"content":"//                .toArray();"},{"lineNumber":56,"author":{"gitId":"Andrewzhang217"},"content":"//        Ui.displayTasks(list, indexes);"},{"lineNumber":57,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":59,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":60,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":60}},{"path":"src/main/java/IDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"interface IDuke {"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"     * Prints greeting message."},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"    public void greeting();"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"     * Prints bye message."},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"    public void bye();"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"     * @param input User input"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"     * @return IDuke object"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"    IDuke processInput(String input);"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"     * @param task a task"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"     * @return new IDuke object with the adding task"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"    IDuke addTask(ITask task);"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"     * Prints the task list"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"    void display();"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":"     * @param id task index"},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"     * @return a specific ITask object"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"    ITask getTask(int id);"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"     * @return number of tasks in the list"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"    int numOfTasks();"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":45}},{"path":"src/main/java/ITask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public interface ITask {"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"     * @return ITask object with a true isDone status"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"    ITask markDone();"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"     * @return the status of the ITask object"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"    boolean isDone();"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":16}},{"path":"src/main/java/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public enum Message {"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"        WELCOME (\"Hi I\u0027m Cat Bot.\\nWhat can I do for you?\\n\"),"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"        FAREWELL (\"Bye! Hope to see you again!\\n\"),"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"        LIST (\"Here are the tasks in your list:\\n\"),"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"        MARKED_DONE (\"Naisu! I\u0027ve marked this task done!\\n\"),"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"        REMOVED_TASK (\"Hmmm~! I\u0027ve removed this task:\\n\"),"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_NO_TASK_IN_LIST (\"Oops! Looks like there\u0027s no task in the list!\\n\"),"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_NO_MATCHING_TASK (\"Oops! Looks like there\u0027s no matching task!\\n\"),"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_LIST_CMD (\"Wrong list command!\\nFormat: list Optional:\u003cdate\u003e\\n\"),"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_DONE_CMD (\"Wrong done command!\\nFormat: done \u003ctaskId\u003e\\n\"),"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_TODO_CMD (\"Wrong todo command!\\nFormat: todo \u003ctaskName\u003e\\n\"),"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_DEADLINE_CMD (\"Wrong deadline command!\\nFormat: deadline \u003ctaskName\u003e /by \u003ctime\u003e\\n\"),"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_EVENT_CMD (\"Wrong event command!\\nFormat: event \u003ctaskName\u003e /at \u003ctime\u003e\\n\"),"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_DELETE_CMD (\"Wrong delete command!\\nFormat: delete \u003ctaskId\u003e\\n\"),"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_WRONG_CMD (\"Unrecognizable command!\\n\"),"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"        ERR_DUKE_NOT_INIT(\"Duke not initialised yet in execute command\"),"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"        CAT_DOUBT (\"Meow? Sorry I don\u0027t know what you are talking about...\\n\"),"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"        CAT_CRY (\"Meow!!! Something terrible happened!\\n\");"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        private final String message;"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"        Message(String message) {"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"            this.message \u003d message;"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"        @Override"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"        public String toString() {"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"            return this.message;"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"}"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":""}],"authorContributionMap":{"Andrewzhang217":32}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class Task implements ITask{"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    protected String description;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"    protected boolean isDone;"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"    public Task(String description, boolean isDone){"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    public static Task getTask(String description){"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        return new Task(description, false);"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"    public boolean isDone() {"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"        return this.isDone;"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"    public ITask markDone(){"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"        return new Task(this.description,true);"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"    "},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"    public String toString(){"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"        return \"[\" + (isDone ? \"V\" : \"X\") + \"]\" + this.description;"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":32}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"public class TaskManager {"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    private final Path filePath;"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    public TaskManager(Path filePath){"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"    private void WriteFile(String fileContent) throws IOException {"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"        FileWriter fileWriter \u003d new FileWriter(String.valueOf(this.filePath));"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"        fileWriter.write(fileContent);"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        fileWriter.close();"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"    private ArrayList\u003cString\u003e ReadFile(String fileName) throws FileNotFoundException {"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"        Scanner scanner \u003d new Scanner(fileName);"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"        ArrayList\u003cString\u003e fileContent \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"        while(scanner.hasNext()){"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"            fileContent.add(scanner.nextLine());"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"        return fileContent;"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"    public void save(List\u003c? extends Task\u003e list) {"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"        list.forEach(x -\u003e sb.append(x).append(\"\\n\"));"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"            WriteFile(sb.toString());"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"        } catch (IOException e) {"},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(\"Unable to save to disk!\");"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":"            e.printStackTrace();"},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":47,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":49,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":50,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":51,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":51}},{"path":"src/main/java/TimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"public class TimeParser {"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"    // Accept YYYYMMDD, DDMMYYYY"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    private static final List\u003cPattern\u003e DATE_PATTERN_LIST \u003d new ArrayList\u003c\u003e("},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-.]?(?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cday\u003e\\\\d{1,2})\"),"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"                    Pattern.compile(\"(?\u003cday\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.]?(?\u003cyear\u003e\\\\d{4})\")));"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"    // Accept YYYY MM DD HHMM, DD MM YYYY HHMM"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    private static final List\u003cPattern\u003e DATETIME_PATTERN_LIST \u003d new ArrayList\u003c\u003e("},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"            List.of(Pattern.compile(\"(?\u003cyear\u003e\\\\d{4})[\\\\s\\\\-.](?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cday\u003e\\\\d{1,2})\""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"                            + \"[\\\\s\\\\-.T](?\u003chour\u003e\\\\d{1,2})[\\\\s\\\\-.:]?(?\u003cminute\u003e\\\\d{2})\"),"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"                    Pattern.compile(\"(?\u003cday\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cmonth\u003e\\\\d{1,2})[\\\\s\\\\-.](?\u003cyear\u003e\\\\d{4})\""},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"                            + \"[\\\\s\\\\-.T](?\u003chour\u003e\\\\d{1,2})[\\\\s\\\\-.:]?(?\u003cminute\u003e\\\\d{2})\")));"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    public static LocalDate parseDate(String string) {"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        if (!isDate(string)) {"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"            throw new RuntimeException(string +\" does not have a date time!\");"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"        Pattern pattern \u003d DATE_PATTERN_LIST"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"                .stream()"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"                .filter(x -\u003e x.matcher(string).find())"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"                .findFirst()"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"                .orElseThrow();"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"        Matcher matcher \u003d pattern.matcher(string);"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"        if (!matcher.matches()) {"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"            throw new RuntimeException(string +\" failed to match regex!\");"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":"        return LocalDate.of(Integer.parseInt(matcher.group(\"year\")),"},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"month\")),"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"day\")));"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"    public static LocalDateTime parseDateTime(String string) {"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"        if (!isDateTime(string)) {"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"            throw new RuntimeException(string +\" does not have a date time!\");"},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"        Pattern pattern \u003d DATETIME_PATTERN_LIST"},{"lineNumber":46,"author":{"gitId":"Andrewzhang217"},"content":"                .stream()"},{"lineNumber":47,"author":{"gitId":"Andrewzhang217"},"content":"                .filter(x -\u003e x.matcher(string).find())"},{"lineNumber":48,"author":{"gitId":"Andrewzhang217"},"content":"                .findFirst()"},{"lineNumber":49,"author":{"gitId":"Andrewzhang217"},"content":"                .orElseThrow();"},{"lineNumber":50,"author":{"gitId":"Andrewzhang217"},"content":"        Matcher matcher \u003d pattern.matcher(string);"},{"lineNumber":51,"author":{"gitId":"Andrewzhang217"},"content":"        if (!matcher.matches()) {"},{"lineNumber":52,"author":{"gitId":"Andrewzhang217"},"content":"            throw new RuntimeException(string +\" failed to match regex!\");"},{"lineNumber":53,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Andrewzhang217"},"content":"        return LocalDateTime.of(Integer.parseInt(matcher.group(\"year\")),"},{"lineNumber":55,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"month\")),"},{"lineNumber":56,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"day\")),"},{"lineNumber":57,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"hour\")),"},{"lineNumber":58,"author":{"gitId":"Andrewzhang217"},"content":"                Integer.parseInt(matcher.group(\"minute\")));"},{"lineNumber":59,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":61,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":62,"author":{"gitId":"Andrewzhang217"},"content":"    public static boolean isDateTime(String string) {"},{"lineNumber":63,"author":{"gitId":"Andrewzhang217"},"content":"        return DATETIME_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"},{"lineNumber":64,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":66,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":67,"author":{"gitId":"Andrewzhang217"},"content":"    public static boolean isDate(String string) {"},{"lineNumber":68,"author":{"gitId":"Andrewzhang217"},"content":"        return DATE_PATTERN_LIST.stream().anyMatch(x -\u003e x.matcher(string).matches());"},{"lineNumber":69,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":70}},{"path":"src/main/java/TimeWrapper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"public class TimeWrapper {"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"    private final LocalDate date;"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"    private final LocalDateTime dateTime;"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    private final String message;"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    private TimeWrapper(LocalDate date, LocalDateTime dateTime, String message) {"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        this.date \u003d date;"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"    public static TimeWrapper getTimeWrapper(String string) {"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"        if (TimeParser.isDateTime(string)) {"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"            LocalDateTime ldt \u003d TimeParser.parseDateTime(string);"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"            return new TimeWrapper(ldt.toLocalDate(), ldt, null);"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"        } else if (TimeParser.isDate(string)) {"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"            return new TimeWrapper(TimeParser.parseDate(string), null, null);"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"        return new TimeWrapper(null, null, string);"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"    "},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"            return false;"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"        } else if (obj \u003d\u003d this) {"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"            return true;"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"        } else if (!(obj instanceof TimeWrapper)) {"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":"            return false;"},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"        TimeWrapper tw \u003d (TimeWrapper) obj;"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"        if (this.dateTime !\u003d null \u0026\u0026 tw.dateTime !\u003d null) {"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"            return this.dateTime.equals(tw.dateTime);"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"        if (this.date !\u003d null \u0026\u0026 tw.date !\u003d null) {"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"            return this.date.equals(tw.date);"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"        if (this.message !\u003d null \u0026\u0026 tw.message !\u003d null) {"},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":"            return this.message.equals(tw.message);"},{"lineNumber":44,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Andrewzhang217"},"content":"        return false;"},{"lineNumber":46,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":48,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Andrewzhang217"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"Andrewzhang217"},"content":"        if (dateTime !\u003d null) {"},{"lineNumber":51,"author":{"gitId":"Andrewzhang217"},"content":"            return dateTime.toString();"},{"lineNumber":52,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Andrewzhang217"},"content":"        if (date !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"Andrewzhang217"},"content":"            return date.toString();"},{"lineNumber":55,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Andrewzhang217"},"content":"        if (message !\u003d null) {"},{"lineNumber":57,"author":{"gitId":"Andrewzhang217"},"content":"            return message;"},{"lineNumber":58,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Andrewzhang217"},"content":"        return \"No data found.\";"},{"lineNumber":60,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":61}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"    protected String by;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"        super(description, isDone);"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    public static Todo getTodo(String description) {"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"        return new Todo(description, false);"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    public Task markDone(){"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        return new Todo(description,true);"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":23}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"public class Ui {"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"    public static List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":"    public static void greeting() {"},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    public static void bye() {"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"    public static void addTasks(String input) {"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"        if(input.equals(\"todo\")){"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeEmptyCommandException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"        } else if (input.equals(\"deadline\")){"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeEmptyCommandException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"        } else if (input.equals(\"event\")){"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"            throw new DukeEmptyCommandException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"        } else {"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"            Task t \u003d new Task(input,false);"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"            list.add(t);"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(\"Got it. I\u0027ve added this task: \");"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"            System.out.println(t.toString());"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"}"}],"authorContributionMap":{"Andrewzhang217":31}},{"path":"src/main/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"import org.junit.After;"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"import org.junit.Before;"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"import java.io.PrintStream;"},{"lineNumber":6,"author":{"gitId":"Andrewzhang217"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":8,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":9,"author":{"gitId":"Andrewzhang217"},"content":"public class UiTest {"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":11,"author":{"gitId":"Andrewzhang217"},"content":"    private final ByteArrayOutputStream errContent \u003d new ByteArrayOutputStream();"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":13,"author":{"gitId":"Andrewzhang217"},"content":"    private final PrintStream originalErr \u003d System.err;"},{"lineNumber":14,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":15,"author":{"gitId":"Andrewzhang217"},"content":"    @Before"},{"lineNumber":16,"author":{"gitId":"Andrewzhang217"},"content":"        public void setUpStreams() {"},{"lineNumber":17,"author":{"gitId":"Andrewzhang217"},"content":"            System.setOut(new PrintStream(outContent));"},{"lineNumber":18,"author":{"gitId":"Andrewzhang217"},"content":"            System.setErr(new PrintStream(errContent));"},{"lineNumber":19,"author":{"gitId":"Andrewzhang217"},"content":"     }"},{"lineNumber":20,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":21,"author":{"gitId":"Andrewzhang217"},"content":"     @After"},{"lineNumber":22,"author":{"gitId":"Andrewzhang217"},"content":"         public void restoreStreams() {"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"            System.setOut(originalOut);"},{"lineNumber":24,"author":{"gitId":"Andrewzhang217"},"content":"            System.setErr(originalErr);"},{"lineNumber":25,"author":{"gitId":"Andrewzhang217"},"content":"     }"},{"lineNumber":26,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"     @Test"},{"lineNumber":28,"author":{"gitId":"Andrewzhang217"},"content":"        public void greeting_printed(){"},{"lineNumber":29,"author":{"gitId":"Andrewzhang217"},"content":"            Ui.greeting();"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"            String expectedOutput \u003d \"Hello! I\u0027m Duke \\n\" + \" What can I do for you?\";"},{"lineNumber":31,"author":{"gitId":"Andrewzhang217"},"content":"            assertEquals(expectedOutput, outContent.toString());"},{"lineNumber":32,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":34,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":35,"author":{"gitId":"Andrewzhang217"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Andrewzhang217"},"content":"        public void bye_printed(){"},{"lineNumber":37,"author":{"gitId":"Andrewzhang217"},"content":"        Ui.bye();"},{"lineNumber":38,"author":{"gitId":"Andrewzhang217"},"content":"        String expectedOutput \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":39,"author":{"gitId":"Andrewzhang217"},"content":"        assertEquals(expectedOutput, outContent.toString());"},{"lineNumber":40,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Andrewzhang217"},"content":""},{"lineNumber":42,"author":{"gitId":"Andrewzhang217"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Andrewzhang217"},"content":""}],"authorContributionMap":{"Andrewzhang217":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Andrewzhang217"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Andrewzhang217"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Andrewzhang217"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Andrewzhang217"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Andrewzhang217"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"Andrewzhang217":5}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"Andrewzhang217"},"content":"if [ -e \"./output.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"Andrewzhang217"},"content":"    rm output.txt"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Andrewzhang217"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e output.txt"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"Andrewzhang217"},"content":"dos2unix output.txt OUTPUT-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"Andrewzhang217"},"content":"diff output.txt EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":33,"Andrewzhang217":5}}]
