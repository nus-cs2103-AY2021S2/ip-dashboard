[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"repositories {"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"    mavenCentral()"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"}"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"dependencies {"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":25,"-":40}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"Duke is a desktop app for managing tasks. There are 3 types of task: todo, deadlines \u0026 events. It can perform simple"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"tasks such as add, delete and find for a task by providing keywords and mark as done. It also checked for user mistakes"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"such as providing a repeated task. User can easily view the tasks added conveniently with Duke. It is optimized for use"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"via Graphical User Interface (GUI)."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"### WARNING!"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"Please be careful when providing inputs as the program will terminate once an invalid input is given. The program fails"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"if it throws an error message after you typed the input and click enter. You are required to restart the program once the program"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"fails!!"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"## FEATURES"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"1. List"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"2. Add"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"3. Delete"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"4. Find"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"5. Mark as done"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"## USAGE"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"### Feature 1 (**List**)"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"List all the tasks (saved and recently added tasks) by typing \"list\""},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"`list`"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"`Here are the tasks in your list:`\u003c/br\u003e"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"`1.[T][ ] eat breakfast later`\u003c/br\u003e"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"`2.[D][ ] return book (by: 2019-12-02 23:59)`\u003c/br\u003e"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"### Feature 2 (Add)"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"Task can be inserted in the following manners:"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"### TODO"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"Insert a todo by simply providing a **DESCRIPTION** after the keyword todo. The description can have spaces in between,"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"and it can be of any length"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"`todo eat breakfast later`"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"`Got it. I\u0027ve added this task:`\u003c/br\u003e"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"`[T][ ] eat breakfast later`\u003c/br\u003e"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"`Now you have 1 tasks in the list.`\u003c/br\u003e"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"### DEADLINE"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"Insert a deadline by providing a **DESCRIPTION** after the keyword \"deadline\", followed by **\"/by\"** with a space after"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"the description. For deadlines, it is compulsory to add the **DUE DATE** and **TIME** of deadline. The date must be of"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"this form DD/MM/YYYY and it allows to have single digit for day and month"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"(eg. 1/1/2021) and the time must be in 24 hours time format (eg. 1800)"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"`deadline return book /by 2/12/2019 2359`"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"`Got it. I\u0027ve added this task:`\u003c/br\u003e"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"`[D][ ] return book (by: 2019-12-02 23:59)`\u003c/br\u003e"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"`Now you have 1 tasks in the list.`\u003c/br\u003e"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"### EVENT"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"Insert an event by providing a description after the keyword \"event\", followed by **\"/at\"** with a space after the"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"description. For events, it is compulsory to add the **DUE DATE**, **EVENT START TIME** and **EVENT END TIME**. The date"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"must be of the form DD/MM/YYYY and it allows to have single digit for day and month (eg. 1/1/2021) and the time must be"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"in 24 hours time format (eg. 1800)"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"`event project meeting /at 18/10/2015 1000-1200`"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"Expected outcome:"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"`Got it. I\u0027ve added this task:`\u003c/br\u003e"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"`[E][ ] project meeting (at: 2015-10-18 10:00-12:00)`\u003c/br\u003e"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"`Now you have 1 tasks in the list.`\u003c/br\u003e"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"### Feature 3 (Delete)"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"Task can be deleted by specifying the index of the task in the TaskList after the keyword \"delete\". It is recommended"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"for users to check the index of tasks using \"list\" before starting to delete task. The example below will delete the"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":"first task of the TaskList."},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"`delete 1`"},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"`Noted. I\u0027ve removed this task:`\u003c/br\u003e"},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"`[T][X] eat breakfast later`\u003c/br\u003e"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"`Now you have 0 tasks in the list.`\u003c/br\u003e"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"### Feature 4 (Find)"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"Find all the tasks related to the keyword provided by specifying the keyword after \"find\". The following example will"},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"return output task related to the keyword. The keyword provided should not contain any spaces."},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"This is an example of an invalid command: `find eat breakfast`. "},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"`find eat`"},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"Expected outcome:"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"`Task(s) related to the keyword :`\u003c/br\u003e"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"`1.[T][X] eat breakfast later`\u003c/br\u003e"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"### Feature 5 (Done)"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"Mark a task of the specified index as done. It is recommended for users to check the index of tasks using \"list\" before"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"starting to mark task. The example below will mark the first task of the TaskList as done represented as [X]."},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"Example of usage:"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"`done 1`"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":"`Nice! I\u0027ve marked this task as done:`\u003c/br\u003e"},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"`[T][X] eat breakfast later`\u003c/br\u003e"}],"authorContributionMap":{"CharlesLee01":117,"-":17}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. A Deadline object corresponds to a Task object which has a description"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" * deadline and time."},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    LocalDate by;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime time;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    public Deadline(String description, LocalDate by, LocalTime time) {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        this.time \u003d time;"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        new Object().toString();"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Deadline object."},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \" \" + time + \")\";"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":28}},{"path":"src/main/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Deadline class."},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"class DeadlineTest {"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Deadline class."},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[D][ ] read book (by: 2019-01-02 12:45)\","},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"                new Deadline(\"read book\", LocalDate.parse(\"2019-01-02\"), LocalTime.parse(\"12:45\")).toString());"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":20}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * Contains main driver class to run the Duke program"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"    Storage storage;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    Ui ui;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"    public static String respond;"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    public Duke(String filePath) {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"        ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        ui.greet();"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"            storage \u003d new Storage(filePath);"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"            tasks \u003d new TaskList(storage.check());"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException | DukeException e) {"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    public Duke() {"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        ui.greet();"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"            storage \u003d new Storage(\"data/duke.txt\");"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"            tasks \u003d new TaskList(storage.check());"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException | DukeException e) {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"     * Scan inputs from the user and then pass it to the parser so that it can be converted into the commands that"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"     * this program understands."},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"    public void run() throws DukeException, IOException {"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"            String command \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"            Parser.parse(command);"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"            if (command.equals(\"bye\")) {"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     * Main driver class of the Duke program."},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a directory rather than a regular file,"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"     *                       does not exist but cannot be created, or cannot be opened for any other reason."},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"    public static void main(String[] args) throws DukeException, IOException {"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"     * Return Duke\u0027s respond to user input."},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"     * @return Duke\u0027s respond."},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a directory rather than a regular file,"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"     *                       does not exist but cannot be created, or cannot be opened for any other reason."},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"    String getResponse(String input) throws IOException, DukeException {"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"            Parser.parse(input);"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"            return e.getMessage();"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"        return respond;"},{"lineNumber":83,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CharlesLee01":80,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * An exception that is thrown when there is any missing arguments and invalid inputs by the user."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    public DukeException(String s) {"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"        super(s);"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":8}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. An Event object corresponds to a Task object which has a description"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * event date and time."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":" * event date, start and end time."},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-9"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    LocalDate at;"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime start;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime end;"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    public Event(String description, LocalDate at, LocalTime start, LocalTime end) {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        this.at \u003d at;"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        this.start \u003d start;"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        this.end \u003d end;"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Event object."},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \" \" + start + \"-\" + end + \")\";"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":33}},{"path":"src/main/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Event class."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"class EventTest {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Event class."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[E][ ] read book (at: 2019-01-02 12:45-15:45)\","},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"                new Event(\"read book\", LocalDate.parse(\"2019-01-02\"),"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"                        LocalTime.parse(\"12:45\"), LocalTime.parse(\"15:45\")).toString());"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":22}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"} "}],"authorContributionMap":{"CharlesLee01":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"            stage.setTitle(\"Duke program\");"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    private boolean isFirst \u003d true;"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        if(isFirst) {"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"                    DialogBox.getDukeDialog(\"Hello! I am Duke :P\\nWhat can I do for you?\", dukeImage)"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"            );"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"            isFirst \u003d false;"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"        duke \u003d d;"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"     * and then appends them to the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"    private void handleUserInput() throws IOException, DukeException {"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":58}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that deals with making sense of the user command."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * Parses the user inputs into commands that the program understands and perform actions accordingly."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User inputs."},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * @return Formatted date eg. changes 1/1/2011 to 01/01/2011."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason."},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    public static void parse(String command) throws DukeException, IOException {"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"            ui.bye();"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"            list();"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"done\")) {"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"            done(command);"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"find\")) {"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"            find(command);"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"todo\")) {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"            addToDo(command);"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"event\")) {"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"            addEvent(command);"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"            delete(command);"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.startsWith(\"deadline\")) {"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"            addDeadline(command);"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"Error detected: Invalid command!\\n\" +"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\"));"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"     * List all the tasks in TaskList."},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"    public static void list() {"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.list();"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"     * Initiates find in TaskList."},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when index of task"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     *                       to be deleted is not provided."},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"    public static void find(String command) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"        if (command.length() \u003d\u003d 4) {"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: Keyword for search is missing!\\n\" +"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.find(command.substring(5));"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"     * Initiates done in TaskList."},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when index of task"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"     *                       to be deleted is not provided."},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"    public static void done(String command) throws DukeException {"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"        if (command.length() \u003d\u003d 4) {"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: Index for task done is missing!\" +"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"                    \"\\nThe program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.done(Integer.parseInt(command.substring(5)));"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"     * Initiates delete in TaskList."},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when index of task"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"     *                       to be deleted is not provided."},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"    public static void delete(String command) throws DukeException {"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"        if (command.length() \u003d\u003d 7) {"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: Index for task to be deleted is missing!\\n\" +"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.delete(Integer.parseInt(command.substring(7)));"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"     * Add toDo into TaskList."},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description."},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"    public static void addToDo(String command) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"        ToDo todo \u003d new ToDo(getDescription(command, \"T\"));"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"        if (TaskList.isDuplicate(todo)) {"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: This task is duplicated!\\n\" +"},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.addTask(todo);"},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"     * Add event into TaskList."},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"    public static void addEvent(String command) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"        String eventDescription \u003d Parser.getDescription(command, \"E\");"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"        String date \u003d Parser.getDate(command, \"E\", eventDescription.length() + 11);"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"        int currentIndexOfString \u003d eventDescription.length() + date.length();"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"        if (command.length() \u003c currentIndexOfString + 16) {"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: StartTime need to be included!\\n\" +"},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.length() \u003c currentIndexOfString + 21) {"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: EndTime need to be included!\\n\" +"},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"        String startTime \u003d command.substring(currentIndexOfString + 12, currentIndexOfString + 16);"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"        String endTime \u003d command.substring(currentIndexOfString + 17, currentIndexOfString + 21);"},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":"        String localStart \u003d startTime.substring(0, 2) + \":\" + startTime.substring(2, 4);"},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"        String localEnd \u003d endTime.substring(0, 2) + \":\" + endTime.substring(2, 4);"},{"lineNumber":135,"author":{"gitId":"CharlesLee01"},"content":"        Event event \u003d new Event(eventDescription, LocalDate.parse(format(date), formatter),"},{"lineNumber":136,"author":{"gitId":"CharlesLee01"},"content":"                LocalTime.parse(localStart), LocalTime.parse(localEnd));"},{"lineNumber":137,"author":{"gitId":"CharlesLee01"},"content":"        if (TaskList.isDuplicate(event)) {"},{"lineNumber":138,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: This task is duplicated!\\n\" +"},{"lineNumber":139,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":140,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.addTask(event);"},{"lineNumber":142,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":144,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"CharlesLee01"},"content":"     * Add Deadline into TaskList."},{"lineNumber":146,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":148,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":149,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":150,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"CharlesLee01"},"content":"    public static void addDeadline(String command) throws DukeException {"},{"lineNumber":152,"author":{"gitId":"CharlesLee01"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"},{"lineNumber":153,"author":{"gitId":"CharlesLee01"},"content":"        String deadlineDescription \u003d Parser.getDescription(command, \"D\");"},{"lineNumber":154,"author":{"gitId":"CharlesLee01"},"content":"        String date \u003d Parser.getDate(command, \"D\", deadlineDescription.length() + 14);"},{"lineNumber":155,"author":{"gitId":"CharlesLee01"},"content":"        int currentIndexOfString \u003d deadlineDescription.length() + date.length();"},{"lineNumber":156,"author":{"gitId":"CharlesLee01"},"content":"        if (command.length() \u003c currentIndexOfString + 15) {"},{"lineNumber":157,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: Time need to be included!\\n\" +"},{"lineNumber":158,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":159,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"CharlesLee01"},"content":"        String time \u003d command.substring(currentIndexOfString + 15);"},{"lineNumber":161,"author":{"gitId":"CharlesLee01"},"content":"        String localTime \u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"},{"lineNumber":162,"author":{"gitId":"CharlesLee01"},"content":"        Deadline deadline \u003d new Deadline(deadlineDescription,"},{"lineNumber":163,"author":{"gitId":"CharlesLee01"},"content":"                LocalDate.parse(format(date), formatter), LocalTime.parse(localTime));"},{"lineNumber":164,"author":{"gitId":"CharlesLee01"},"content":"        if (TaskList.isDuplicate(deadline)) {"},{"lineNumber":165,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: This task is duplicated!\\n\" +"},{"lineNumber":166,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":167,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.addTask(deadline);"},{"lineNumber":169,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":171,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"CharlesLee01"},"content":"     * Returns date from user command."},{"lineNumber":173,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":175,"author":{"gitId":"CharlesLee01"},"content":"     * @param type    Command type."},{"lineNumber":176,"author":{"gitId":"CharlesLee01"},"content":"     * @param start   First index of date."},{"lineNumber":177,"author":{"gitId":"CharlesLee01"},"content":"     * @return Return date from user command."},{"lineNumber":178,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"CharlesLee01"},"content":"    public static String getDate(String command, String type, int start) throws DukeException {"},{"lineNumber":180,"author":{"gitId":"CharlesLee01"},"content":"        String date \u003d \"\";"},{"lineNumber":181,"author":{"gitId":"CharlesLee01"},"content":"        if (type.equals(\"E\")) {"},{"lineNumber":182,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d start; i \u003c command.length(); i++) {"},{"lineNumber":183,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":184,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":185,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":186,"author":{"gitId":"CharlesLee01"},"content":"                date +\u003d command.charAt(i);"},{"lineNumber":187,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"CharlesLee01"},"content":"        } else if (type.equals(\"D\")) {"},{"lineNumber":189,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d start; i \u003c command.length(); i++) {"},{"lineNumber":190,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":191,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":192,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":193,"author":{"gitId":"CharlesLee01"},"content":"                date +\u003d command.charAt(i);"},{"lineNumber":194,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"CharlesLee01"},"content":"        if (date.length() \u003d\u003d 0) {"},{"lineNumber":197,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"Error detected: Date cannot be empty\\n\" +"},{"lineNumber":198,"author":{"gitId":"CharlesLee01"},"content":"                    \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":199,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"CharlesLee01"},"content":"        return date;"},{"lineNumber":201,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":203,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"CharlesLee01"},"content":"     * Returns the description of task from user command."},{"lineNumber":205,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User command."},{"lineNumber":207,"author":{"gitId":"CharlesLee01"},"content":"     * @param type    Command type."},{"lineNumber":208,"author":{"gitId":"CharlesLee01"},"content":"     * @return Description of task from user command."},{"lineNumber":209,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"CharlesLee01"},"content":"    public static String getDescription(String command, String type) throws DukeException {"},{"lineNumber":211,"author":{"gitId":"CharlesLee01"},"content":"        String description \u003d \"\";"},{"lineNumber":212,"author":{"gitId":"CharlesLee01"},"content":"        switch (type) {"},{"lineNumber":213,"author":{"gitId":"CharlesLee01"},"content":"            case \"T\":"},{"lineNumber":214,"author":{"gitId":"CharlesLee01"},"content":"                if (command.length() \u003d\u003d 4) {"},{"lineNumber":215,"author":{"gitId":"CharlesLee01"},"content":"                    throw new DukeException(\"Error detected: Description cannot be empty\\n\" +"},{"lineNumber":216,"author":{"gitId":"CharlesLee01"},"content":"                            \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":217,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":218,"author":{"gitId":"CharlesLee01"},"content":"                description \u003d command.substring(5);"},{"lineNumber":219,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":220,"author":{"gitId":"CharlesLee01"},"content":"            case \"E\":"},{"lineNumber":221,"author":{"gitId":"CharlesLee01"},"content":"                if (command.length() \u003d\u003d 5) {"},{"lineNumber":222,"author":{"gitId":"CharlesLee01"},"content":"                    throw new DukeException(\"Error detected: Description cannot be empty\\n\" +"},{"lineNumber":223,"author":{"gitId":"CharlesLee01"},"content":"                            \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":224,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":225,"author":{"gitId":"CharlesLee01"},"content":"                for (int i \u003d 6; i \u003c command.length(); i++) {"},{"lineNumber":226,"author":{"gitId":"CharlesLee01"},"content":"                    if (command.charAt(i) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.charAt(i + 1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":227,"author":{"gitId":"CharlesLee01"},"content":"                        break;"},{"lineNumber":228,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":229,"author":{"gitId":"CharlesLee01"},"content":"                    description +\u003d command.charAt(i);"},{"lineNumber":230,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":231,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":232,"author":{"gitId":"CharlesLee01"},"content":"            case \"D\":"},{"lineNumber":233,"author":{"gitId":"CharlesLee01"},"content":"                if (command.length() \u003d\u003d 8) {"},{"lineNumber":234,"author":{"gitId":"CharlesLee01"},"content":"                    throw new DukeException(\"Error detected: Description cannot be empty\\n\" +"},{"lineNumber":235,"author":{"gitId":"CharlesLee01"},"content":"                            \"The program has terminated.\\nPlease restart to continue using our service\");"},{"lineNumber":236,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":237,"author":{"gitId":"CharlesLee01"},"content":"                for (int i \u003d 9; i \u003c command.length(); i++) {"},{"lineNumber":238,"author":{"gitId":"CharlesLee01"},"content":"                    if (command.charAt(i) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.charAt(i + 1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":239,"author":{"gitId":"CharlesLee01"},"content":"                        break;"},{"lineNumber":240,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":241,"author":{"gitId":"CharlesLee01"},"content":"                    description +\u003d command.charAt(i);"},{"lineNumber":242,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":243,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":244,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":245,"author":{"gitId":"CharlesLee01"},"content":"        return description;"},{"lineNumber":246,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":247,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":248,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":249,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a formatted date of the given date string."},{"lineNumber":250,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":251,"author":{"gitId":"CharlesLee01"},"content":"     * @param date Date."},{"lineNumber":252,"author":{"gitId":"CharlesLee01"},"content":"     * @return Formatted date eg. changes 1/1/2011 to 01/01/2011."},{"lineNumber":253,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":254,"author":{"gitId":"CharlesLee01"},"content":"    public static String format(String date) {"},{"lineNumber":255,"author":{"gitId":"CharlesLee01"},"content":"        if (date.charAt(1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":256,"author":{"gitId":"CharlesLee01"},"content":"            date \u003d \"0\" + date;"},{"lineNumber":257,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":258,"author":{"gitId":"CharlesLee01"},"content":"        if (date.charAt(4) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":259,"author":{"gitId":"CharlesLee01"},"content":"            date \u003d date.substring(0, 3) + \"0\" + date.substring(3);"},{"lineNumber":260,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":261,"author":{"gitId":"CharlesLee01"},"content":"        return date;"},{"lineNumber":262,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":263}},{"path":"src/main/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Parser class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"class ParserTest {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the parse() method in Parse class."},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    void parse() throws IOException, DukeException {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"todo borrow book\");"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"event go project meeting /at 1/2/2019 1800\");"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"deadline return book /by 12/1/2018 1730\");"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new ToDo(\"borrow book\").toString(), TaskList.tasks.get(0).toString());"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Event(\"go project meeting\", LocalDate.parse(\"2019-02-01\"),"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"                LocalTime.parse(\"18:00\"), LocalTime.parse(\"19:00\")).toString(), TaskList.tasks.get(1).toString());"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Deadline(\"return book\", LocalDate.parse(\"2018-01-12\"),"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"                LocalTime.parse(\"17:30\")).toString(), TaskList.tasks.get(2).toString());"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the format() method in Parse class."},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"    void format() {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"01/02/2001\", Parser.format(\"1/2/2001\"));"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"11/12/2001\", Parser.format(\"11/12/2001\"));"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"11/02/2001\", Parser.format(\"11/2/2001\"));"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"01/12/2001\", Parser.format(\"1/12/2001\"));"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":39}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" * A class that deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    static File file;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    static Scanner fileScanner;"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assert filePath.length() \u003e 0;"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"            File directory \u003d new File(\"data\");"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"            directory.mkdirs();"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"            this.file \u003d new File(filePath);"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"            if (file.createNewFile()) {"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"Hard Disk created.\");"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"                Duke.respond \u003d \"Welcome! New user :)\\n\";"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"            } else {"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"Hard Disk loaded.\");"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"            throw new IOException(\"File not found.\");"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"     * Check if there\u0027s any saved tasks and returns a list of tasks saved in the previous login."},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"     * @return List of saved tasks."},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"    public List\u003cTask\u003e check() throws IOException, DukeException {"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"        scanFile();"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"        if (TaskList.tasks.size() \u003d\u003d 0) {"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"            Duke.respond \u003d \"You have no saved task!\\n\" + \"What can I do for you?\";"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"            Duke.respond \u003d \"You have \" + TaskList.tasks.size() + \" saved tasks!\\n\" + \"What can I do for you?\";"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"        return TaskList.tasks;"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"     * Scan the file to retrieve saved tasks from the previous login."},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"     * @throws FileNotFoundException If the attempt to open the file denoted by a specified pathname has failed."},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    public void scanFile() throws FileNotFoundException {"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"        fileScanner \u003d new Scanner(file);"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"        while (fileScanner.hasNextLine()) {"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"            String type \u003d fileScanner.next();"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"            fileScanner.next();"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"            String done \u003d fileScanner.next();"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"            fileScanner.next();"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"            scanTask(type, done);"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"     * Scan details of task based on type given."},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"    public void scanTask(String type, String done) {"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"        int index \u003d TaskList.tasks.size();"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.tasks.add(new ToDo(fileScanner.nextLine().substring(1)));"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"            if (done.equals(\"1\")) {"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"                TaskList.tasks.get(index).markAsDone();"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"            return;"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"        String description \u003d fileScanner.next();"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"        while (true) {"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"            String nextString \u003d fileScanner.next();"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"            if (nextString.equals(\"|\")) {"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"            description +\u003d \" \" + nextString;"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"        if (type.equals(\"D\")) {"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.tasks.add(new Deadline(description, LocalDate.parse(fileScanner.next()),"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"                    LocalTime.parse(fileScanner.next())));"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"        } else if (type.equals(\"E\")) {"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"            String at \u003d fileScanner.next();"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":"            String time \u003d fileScanner.next();"},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.tasks.add(new Event(description, LocalDate.parse(at), LocalTime.parse(time.substring(0, 5)),"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"                    LocalTime.parse(time.substring(6, 11))));"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"        if (done.equals(\"1\")) {"},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.tasks.get(index).markAsDone();"},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"     * Save current tasks in the taskList to the file after the user logout so that it can be retrieve in the"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"     * next login."},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"     *                     cannot be created, or cannot be opened for any other reason."},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"    public static void save() throws IOException {"},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":"        FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c TaskList.tasks.size(); i++) {"},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"            int isDone \u003d 0;"},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"            Task task \u003d TaskList.tasks.get(i);"},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"            if (task.isDone) {"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"                isDone \u003d 1;"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"T | \" + isDone + \" | \" + task.description);"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"E | \" + isDone + \" | \" + task.description + \" | \" + ((Event) task).at + \" \""},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"                        + ((Event) task).start + \"-\" + ((Event) task).end);"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"D | \" + isDone + \" | \" + task.description + \" | \" + ((Deadline) task).by + \" \""},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"                        + ((Deadline) task).time);"},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"            if (i !\u003d TaskList.tasks.size() - 1) {"},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"\\n\");"},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"        fw.close();"},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":134}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * A class which has description of the task and isDone tells whether a particular task has been completed."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    String description;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"    boolean isDone;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * Returns the status icon of a Deadline object. If the Task is done return \"X\", otherwise return \" \"."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     * @return Status icon of a Task object."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     * Mark a Task object as done when it is completed."},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    public void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Deadline object."},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":39}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class which maintains a list which stores the added tasks."},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"    static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * Deletes a task of the specified index from the taskList."},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     * @param num Index of the task in the taskList that needs to be deleted."},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    public static void delete(int num) {"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d \"Noted. I\u0027ve removed this task:\\n\" + tasks.get(num - 1) + \"\\nNow you have \""},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"                + (tasks.size() - 1) + \" tasks in the list.\";"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"        tasks.remove(num - 1);"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     * Finds task and print out the details of the tasks that is related to the keyword provided."},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"     * @param keyword Parts of the description of the task that a user wants to find."},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"    public static void find(String keyword) {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        String print \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        int num \u003d 1;"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c TaskList.tasks.size(); i++) {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"            Task task \u003d TaskList.tasks.get(i);"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"            String taskDescription \u003d task.description;"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"            String word \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"            for (int j \u003d 0; j \u003c taskDescription.length(); j++) {"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"                if (taskDescription.charAt(j) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"                    if (word.equals(keyword)) {"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"                        print +\u003d num + \".\" + task + \"\\n\";"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                        num++;"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"                    word \u003d \"\";"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"                    word +\u003d taskDescription.charAt(j);"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"                    if (j \u003d\u003d taskDescription.length() - 1) {"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"                        if (word.equals(keyword)) {"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"                            print +\u003d num + \".\" + task + \"\\n\";"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"                            num++;"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"                        }"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        print \u003d \"Task(s) related to the keyword :\\n\" + print;"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d print;"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"     * List all the tasks that is in the taskList."},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"    public static void list() {"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"        String s \u003d \"\";"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"            Duke.respond \u003d \"You have no task in your list!\";"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"                s +\u003d (i + 1) + \".\" + tasks.get(i) + \"\\n\";"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"            Duke.respond \u003d \"Here are the tasks in your list:\\n\" + s;"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"     * Add the task to the taskList. Prevent duplicated task that has already existed."},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"     * @param task Add the task given to the taskList."},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"    public static void addTask(Task task) {"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"        tasks.add(task);"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d \"Got it. I\u0027ve added this task:\\n\" + task + \"\\nNow you have \" + tasks.size()"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"                + \" tasks in the list.\";"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"     * Mark a task of the specified index in the taskList as done."},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"     * @param num Mark the task of the specified index as done."},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"    public static void done(int num) {"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d tasks.get(num - 1);"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task;"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"     * Check if the new task to be added to taskList is duplicated."},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"     * @param task Task that is to be added to taskList."},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"     * @return true if task has already existed. Otherwise return false."},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"    public static boolean isDuplicate(Task task) {"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"        boolean isDuplicate;"},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"            Task taskFromList \u003d tasks.get(i);"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"            if (taskFromList instanceof ToDo \u0026\u0026 task instanceof ToDo) {"},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"                isDuplicate \u003d taskFromList.description.equals(task.description);"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"                if (isDuplicate) {"},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"                    return true;"},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"            } else if (taskFromList instanceof Event \u0026\u0026 task instanceof Event) {"},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameDescription \u003d taskFromList.description.equals(task.description);"},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameDate \u003d ((Event) taskFromList).at.equals(((Event) task).at);"},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameStartTime \u003d ((Event) taskFromList).start.equals(((Event) task).start);"},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameEndTime \u003d ((Event) taskFromList).end.equals(((Event) task).end);"},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"                isDuplicate \u003d isSameDescription \u0026\u0026 isSameDate \u0026\u0026 isSameStartTime \u0026\u0026 isSameEndTime;"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"                if (isDuplicate) {"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"                    return true;"},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"            } else if (taskFromList instanceof Deadline \u0026\u0026 task instanceof Deadline) {"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameDescription \u003d taskFromList.description.equals(task.description);"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameDate \u003d ((Deadline) taskFromList).by.equals(((Deadline) task).by);"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"                boolean isSameTime \u003d ((Deadline) taskFromList).time.equals(((Deadline) task).time);"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"                isDuplicate \u003d isSameDescription \u0026\u0026 isSameDate \u0026\u0026 isSameTime;"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"                if (isDuplicate) {"},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"                    return true;"},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"        return false;"},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":132}},{"path":"src/main/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Task class."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"class TaskTest {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the getStatusIcon() method in Task class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    void getStatusIcon() {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d new Task(\"read book\");"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\" \", task.getStatusIcon());"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"X\", task.getStatusIcon());"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the markAsDone() method in Task class."},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d new Task(\"read book\");"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"X\", task.getStatusIcon());"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Task class."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[ ] read book\", new Task(\"read book\").toString());"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":38}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. An ToDo object corresponds to a Task object which has a description."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the ToDo object."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":18}},{"path":"src/main/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from ToDo class."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"class ToDoTest {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in ToDo class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[T][ ] read book\", new ToDo(\"read book\").toString());"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":17}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":" * A class which contains list of user interfaces."},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"     * Say bye when the user logouts."},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException Signals that an I/O exception of some sort has occurred. This class is the"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     *                     general class of exceptions produced by failed or interrupted I/O operations."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    public void bye() throws IOException {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d \"Bye. Hope to see you again soon!\\nYour data is saved!\\n\" +"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"                \"Click [X] to exit the program!\";"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"Program terminated!\");"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        Storage.save();"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"     * Welcome the user when login."},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"    public void greet() {"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"        Duke.respond \u003d \"Hello there, I am Duke :P+\" + \"\\n\" + \"How can I help you?\";"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":26}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"CharlesLee01":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"CharlesLee01":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"todo get book from Jack"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"event meet friends /at Aug 6th 2-4pm"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"deadline project /by June 6th"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"deadline homework /by Monday"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"done 5"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"bye"}],"authorContributionMap":{"CharlesLee01":12}},{"path":"text-ui-test/output.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"      ____        _        "},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"     |  _ \\ _   _| | _____ "},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"     | | | | | | | |/ / _ \\"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"     | |_| | |_| |   \u003c  __/"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"     |____/ \\__,_|_|\\_\\___|"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"     Hello! I\u0027m Duke"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"     What can I do for you?"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"todo get book from Jack"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"event meet friends /at Aug 6th 2-4pm"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"deadline project /by June 6th"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"deadline homework /by Monday"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"done 5"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"bye    ____________________________________________________________"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"       [T][ ] get book from Jack"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 1 tasks in the list."},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"       [E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 2 tasks in the list."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"       [E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 3 tasks in the list."},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"       [D][ ] project (by: June 6th)"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 4 tasks in the list."},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"       [D][ ] homework (by: Monday)"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 5 tasks in the list."},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][ ] homework (by: Monday)"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"     Nice! I\u0027ve marked this task as done: "},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"       [D][X] homework (by: Monday)"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][X] homework (by: Monday)"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"     Nice! I\u0027ve marked this task as done: "},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"       [T][X] get book from Jack"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][X] get book from Jack"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][X] homework (by: Monday)"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"     Bye. Hope to see you again soon!"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"}],"authorContributionMap":{"CharlesLee01":98}}]
