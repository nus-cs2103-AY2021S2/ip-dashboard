[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. A Deadline object corresponds to a Task object which has a description"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" * deadline and time."},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    LocalDate by;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime time;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    public Deadline(String description, LocalDate by, LocalTime time) {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        this.time \u003d time;"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        new Object().toString();"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Deadline object."},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \" \" + time + \")\";"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":28}},{"path":"src/main/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Deadline class."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"class DeadlineTest {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Deadline class."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[D][ ] read book (by: 2019-01-02 12:45)\""},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"                , new Deadline(\"read book\", LocalDate.parse(\"2019-01-02\"), LocalTime.parse(\"12:45\")).toString());"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":21}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" * Contains main driver class to run the Duke program"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    public Duke(String filePath) {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        ui \u003d new Ui();"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        ui.greet();"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"            tasks \u003d new TaskList(storage.check());"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        } catch (IOException | DukeException e) {"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     * Scan inputs from the user and then pass it to the parser so that it can be converted into the commands that"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"     * this program understands."},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    public void run() throws DukeException, IOException {"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"        //load file and scan from input"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"            String command \u003d sc.nextLine();"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"            Parser.parse(command);"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"            if (command.equals(\"bye\")) {"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"     * Main driver class of the Duke program."},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a directory rather than a regular file,"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"     *                       does not exist but cannot be created, or cannot be opened for any other reason."},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"    public static void main(String[] args) throws DukeException, IOException {"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CharlesLee01":54,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * An exception that is thrown when there is any missing arguments and invalid inputs by the user."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    public DukeException(String s) {"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"        super(s);"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":8}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. An Event object corresponds to a Task object which has a description"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * event date and time."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":" * event date, start and end time."},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e branch-Level-9"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    LocalDate at;"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime start;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    LocalTime end;"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    public Event(String description, LocalDate at, LocalTime start, LocalTime end) {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        this.at \u003d at;"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        this.start \u003d start;"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        this.end \u003d end;"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Event object."},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \" \" + start + \"-\" + end + \")\";"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":33}},{"path":"src/main/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Event class."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"class EventTest {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Event class."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[E][ ] read book (at: 2019-01-02 12:45-15:45)\","},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"                new Event(\"read book\", LocalDate.parse(\"2019-01-02\"),"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"                        LocalTime.parse(\"12:45\"), LocalTime.parse(\"15:45\")).toString());"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":22}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that deals with making sense of the user command."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * Parses the user inputs into commands that the program understands and perform actions accordingly."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     * @param command User inputs."},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * @return Formatted date eg. changes 1/1/2011 to 01/01/2011."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason."},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    public static void parse(String command) throws DukeException, IOException {"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"        boolean cond1 \u003d command.length() \u003d\u003d 4;"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"        boolean cond2 \u003d command.length() \u003d\u003d 5;"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"        boolean cond3 \u003d command.length() \u003d\u003d 6 \u0026\u0026 !command.substring(0, 6).equals(\"delete\")"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"                \u0026\u0026 !command.substring(0, 4).equals(\"find\") \u0026\u0026 !command.substring(0, 4).equals(\"done\");"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"        boolean cond4 \u003d command.length() \u003d\u003d 8 \u0026\u0026 !command.substring(0, 8).equals(\"deadline\")"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"                \u0026\u0026 !command.substring(0, 4).equals(\"find\") \u0026\u0026 !command.substring(0, 4).equals(\"done\")"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"                \u0026\u0026 !command.substring(0, 6).equals(\"delete\");"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/MM/yyyy\");"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"            ui.bye();"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.list();"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.length() \u003c\u003d 3) {"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"        } else if (cond1) {"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"        } else if (cond2) {"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"        } else if (cond3) {"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"        } else if (cond4) {"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 4).equals(\"done\")) {"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.done(Integer.parseInt(command.substring(5)));"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 4).equals(\"todo\")) {"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"            ui.todo(command.substring(5));"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 4).equals(\"find\")) {"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"            ui.find(command.substring(5));"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 5).equals(\"event\")) {"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"            String desc \u003d \"\";"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"            String date \u003d \"\";"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"            String start \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"            String end \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"            String localStart \u003d \"\";"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"            String localEnd \u003d \"\";"},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d 6; i \u003c command.length(); i++) {"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.charAt(i + 1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"                    desc +\u003d command.charAt(i);"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d desc.length() + 11; i \u003c command.length(); i++) {"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"                    date +\u003d command.charAt(i);"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"            start \u003d command.substring(desc.length() + 12 + date.length(), desc.length() + 16 + date.length());"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"            end \u003d command.substring(desc.length() + 17 + date.length(), desc.length() + 21 + date.length());"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"            if (desc.equals(\"\")) {"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"                ui.event(\"\", null, null, null);"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"            } else if (date.equals(\"\")) {"},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"                ui.event(desc, null, null, null);"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"            } else if (start.equals(\"\")) {"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"                ui.event(desc, LocalDate.parse(format(date), formatter), null, null);"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"            } else if (end.equals(\"\")) {"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"                ui.event(desc, LocalDate.parse(format(date), formatter), LocalTime.parse(localStart), null);"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"            localStart +\u003d start.substring(0, 2) + \":\" + start.substring(2, 4);"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"            localEnd +\u003d end.substring(0, 2) + \":\" + end.substring(2, 4);"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":"            ui.event(desc, LocalDate.parse(format(date), formatter), LocalTime.parse(localStart), LocalTime.parse(localEnd));"},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 6).equals(\"delete\")) {"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.delete(Integer.parseInt(command.substring(7)));"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"        } else if (command.substring(0, 8).equals(\"deadline\")) {"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"            String desc \u003d \"\";"},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"            String date \u003d \"\";"},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"            String time \u003d \"\";"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"            String localTime \u003d \"\";"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d 9; i \u003c command.length(); i++) {"},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027 \u0026\u0026 command.charAt(i + 1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"                    desc +\u003d command.charAt(i);"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"            for (int i \u003d desc.length() + 14; i \u003c command.length(); i++) {"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"                if (command.charAt(i) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":"                    break;"},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"                    date +\u003d command.charAt(i);"},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"            time \u003d command.substring(desc.length() + 15 + date.length());"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"            localTime +\u003d time.substring(0, 2) + \":\" + time.substring(2, 4);"},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"            if (desc.equals(\"\")) {"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"                ui.deadline(\"\", null, null);"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"            } else if (date.equals(\"\")) {"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"                ui.deadline(desc, null, null);"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"            } else if (time.equals(\"\")) {"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"                ui.deadline(desc, LocalDate.parse(format(date), formatter), null);"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"            ui.deadline(desc, LocalDate.parse(format(date), formatter), LocalTime.parse(localTime));"},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"            throw (new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\"));"},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a formatted date of the given date string."},{"lineNumber":136,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"CharlesLee01"},"content":"     * @param date Date."},{"lineNumber":138,"author":{"gitId":"CharlesLee01"},"content":"     * @return Formatted date eg. changes 1/1/2011 to 01/01/2011."},{"lineNumber":139,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"CharlesLee01"},"content":"    public static String format(String date) {"},{"lineNumber":141,"author":{"gitId":"CharlesLee01"},"content":"        if (date.charAt(1) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":142,"author":{"gitId":"CharlesLee01"},"content":"            date \u003d \"0\" + date;"},{"lineNumber":143,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"CharlesLee01"},"content":"        if (date.charAt(4) \u003d\u003d \u0027/\u0027) {"},{"lineNumber":145,"author":{"gitId":"CharlesLee01"},"content":"            date \u003d date.substring(0, 3) + \"0\" + date.substring(3);"},{"lineNumber":146,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"CharlesLee01"},"content":"        return date;"},{"lineNumber":148,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":149}},{"path":"src/main/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Parser class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"class ParserTest {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the parse() method in Parse class."},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    void parse() throws IOException, DukeException {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"todo borrow book\");"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"event go project meeting /at 1/2/2019 1800\");"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        Parser.parse(\"deadline return book /by 12/1/2018 1730\");"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new ToDo(\"borrow book\").toString(), TaskList.tasks.get(0).toString());"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Event(\"go project meeting\", LocalDate.parse(\"2019-02-01\"),"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"        LocalTime.parse(\"18:00\"), LocalTime.parse(\"19:00\")).toString(), TaskList.tasks.get(1).toString());"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Deadline(\"return book\", LocalDate.parse(\"2018-01-12\"),"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"                LocalTime.parse(\"17:30\")).toString(), TaskList.tasks.get(2).toString());"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the format() method in Parse class."},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"    void format() {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"01/02/2001\", Parser.format(\"1/2/2001\"));"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"11/12/2001\", Parser.format(\"11/12/2001\"));"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"11/02/2001\", Parser.format(\"11/2/2001\"));"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"01/12/2001\", Parser.format(\"1/12/2001\"));"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":39}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" * A class that deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    String filePath;"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    public Storage(String filePath) {"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"     * Check if there\u0027s any saved tasks and returns a list of tasks saved in the previous login."},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     * @return List of saved tasks."},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException   If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"     *                       cannot be created, or cannot be opened for any other reason"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    public List\u003cTask\u003e check() throws IOException, DukeException {"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"        if (!file.exists()) {"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"            File directory \u003d new File(\"data\");"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"            file.mkdirs();"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"            file.createNewFile();"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(\"     Welcome! New user :)\");"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(\"     What can I do for you?\");"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"            scanFile();"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"            if (TaskList.tasks.size() \u003d\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"     You have no saved task!\");"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"     What can I do for you?\");"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"            } else {"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"     You have \" + TaskList.tasks.size() + \" saved tasks!\");"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"     What can I do for you?\");"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"                System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"        return TaskList.tasks;"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"     * Scan the file to retrieve saved tasks from the previous login."},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException         If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"     *                               information when task is created such as no description, date and time."},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"     * @throws FileNotFoundException If the attempt to open the file denoted by a specified pathname has failed."},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"    public void scanFile() throws FileNotFoundException, DukeException {"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"        Scanner fileScanner \u003d new Scanner(file);"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"        int i \u003d 0;"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"        while (fileScanner.hasNextLine()) {"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"            String type \u003d fileScanner.next();"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"            fileScanner.next();"},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"            String done \u003d fileScanner.next();"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"            fileScanner.next();"},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"                String desc \u003d fileScanner.next() + fileScanner.nextLine();"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"                TaskList.tasks.add(new ToDo(desc));"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"                if (done.equals(\"1\")) {"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"                    TaskList.tasks.get(i).markAsDone();"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"            } else if (type.equals(\"D\")) {"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"                String desc \u003d fileScanner.next();"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"                while (true) {"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"                    String curr \u003d fileScanner.next();"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"                    if (curr.equals(\"|\")) {"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"                        break;"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"                    desc +\u003d \" \" + curr;"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"                String by \u003d fileScanner.next();"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"                String time \u003d fileScanner.next();"},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"                TaskList.tasks.add(new Deadline(desc, LocalDate.parse(by), LocalTime.parse(time)));"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"                if (done.equals(\"1\")) {"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"                    TaskList.tasks.get(i).markAsDone();"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"                String desc \u003d fileScanner.next();"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"                while (true) {"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"                    String curr \u003d fileScanner.next();"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":"                    if (curr.equals(\"|\")) {"},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"                        break;"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"                    desc +\u003d \" \" + curr;"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"                String at \u003d fileScanner.next();"},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"                String time \u003d fileScanner.next();"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"                String start \u003d time.substring(0, 5);"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"                String end \u003d time.substring(6, 11);"},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"                TaskList.tasks.add(new Event(desc, LocalDate.parse(at), LocalTime.parse(start), LocalTime.parse(end)));"},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"                if (done.equals(\"1\")) {"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"                    TaskList.tasks.get(i).markAsDone();"},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"            i++;"},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"     * Save current tasks in the tasklist to the file after the user logout so that it can be retrieve in the"},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"     * next login."},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"     * @throws IOException If the named file exists but is a rather than a regular file, does not exist but"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"     *                     cannot be created, or cannot be opened for any other reason."},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"    public static void save() throws IOException {"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"        FileWriter fw \u003d new FileWriter(\"data/duke.txt\");"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c TaskList.tasks.size(); i++) {"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"            Task task \u003d TaskList.tasks.get(i);"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"                int isDone \u003d 0;"},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"                if (task.isDone) {"},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"                    isDone \u003d 1;"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"T | \" + isDone + \" | \" + task.description);"},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"                int isDone \u003d 0;"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"                if (task.isDone) {"},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":"                    isDone \u003d 1;"},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":135,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"E | \" + isDone + \" | \" + task.description + \" | \" + ((Event) task).at + \" \""},{"lineNumber":136,"author":{"gitId":"CharlesLee01"},"content":"                        + ((Event) task).start + \"-\" + ((Event) task).end);"},{"lineNumber":137,"author":{"gitId":"CharlesLee01"},"content":"            } else {"},{"lineNumber":138,"author":{"gitId":"CharlesLee01"},"content":"                int isDone \u003d 0;"},{"lineNumber":139,"author":{"gitId":"CharlesLee01"},"content":"                if (task.isDone) {"},{"lineNumber":140,"author":{"gitId":"CharlesLee01"},"content":"                    isDone \u003d 1;"},{"lineNumber":141,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":142,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"D | \" + isDone + \" | \" + task.description + \" | \" + ((Deadline) task).by + \" \""},{"lineNumber":143,"author":{"gitId":"CharlesLee01"},"content":"                        + ((Deadline) task).time);"},{"lineNumber":144,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"CharlesLee01"},"content":"            if (i !\u003d TaskList.tasks.size() - 1) {"},{"lineNumber":146,"author":{"gitId":"CharlesLee01"},"content":"                fw.write(\"\\n\");"},{"lineNumber":147,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":148,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"CharlesLee01"},"content":"        fw.close();"},{"lineNumber":150,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":151}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * A class which has description of the task and isDone tells whether a particular task has been completed."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    String description;"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"    boolean isDone;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"     * Returns the status icon of a Deadline object. If the Task is done return \"X\", otherwise return \" \"."},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     * @return Status icon of a Task object."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    public String getStatusIcon() {"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     * Mark a Task object as done when it is completed."},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    public void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the Deadline object."},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":39}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":" * A class which maintains a list which stores the added tasks."},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"    static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e(tasks);"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"     * Deletes a task of the specified index from the taskList."},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     * @param num Index of the task in the taskList that needs to be deleted."},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    public static void delete(int num) {"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n\""},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"                + \"     Noted. I\u0027ve removed this task: \\n     \""},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"                + tasks.get(num - 1) + \"\\n\""},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"                + \"     Now you have \" + (tasks.size() - 1) + \" tasks in the list.\\n\""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"                + \"    ____________________________________________________________\");"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"        tasks.remove(num - 1);"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"     * List all the tasks that is in the taskList."},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"    public static void list() {"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"        String s \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"            System.out.println(\"    ____________________________________________________________\\n     \""},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"                    + \"Here are the tasks in your list:\\n    \""},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"                    + \"____________________________________________________________\\n\");"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"            return;"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"            s +\u003d (i + 1) + \".\" + tasks.get(i) + \"\\n\";"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"            if (i !\u003d tasks.size() - 1) {"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"                s +\u003d \"     \";"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n     \" +"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"                \"Here are the tasks in your list:\\n     \" + s +"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"                \"    ____________________________________________________________\\n\");"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"     * Add the task to the taskList."},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"     * @param task Add the task given to the taskList."},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"    public static void addTask(Task task) {"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"        tasks.add(task);"},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n\""},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"                + \"     Got it. I\u0027ve added this task: \\n\""},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"                + \"       \" + task + \"\\n\""},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"                + \"     Now you have \" + tasks.size() + \" tasks in the list.\\n\""},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"                + \"    ____________________________________________________________\\n\");"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"     * Mark a task of the specified index in the taskList as done."},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"     * @param num Mark the task of the specified index as done."},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"    public static void done(int num) {"},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d tasks.get(num - 1);"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n\""},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"                + \"     Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"                + \"       \" + task + \"\\n\""},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"                + \"    ____________________________________________________________\\n\");"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":77}},{"path":"src/main/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Task class."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"class TaskTest {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the getStatusIcon() method in Task class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    void getStatusIcon() {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d new Task(\"read book\");"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\" \", task.getStatusIcon());"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"X\", task.getStatusIcon());"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the markAsDone() method in Task class."},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"    void markAsDone() {"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"        Task task \u003d new Task(\"read book\");"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"        task.markAsDone();"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"X\", task.getStatusIcon());"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in Task class."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[ ] read book\", new Task(\"read book\").toString());"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":38}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":" * A class that extends the Task class. An ToDo object corresponds to a Task object which has a description."},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"    public ToDo(String description) {"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"        super(description);"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"     * Returns a string representation of the ToDo object."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     * @return String representation."},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":18}},{"path":"src/main/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from ToDo class."},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"class ToDoTest {"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the toString() method in ToDo class."},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    void testToString() {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(\"[T][ ] read book\", new ToDo(\"read book\").toString());"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":17}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":" * A class which contains list of user interfaces."},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"     * Finds task and print out the details of the tasks that is related to the keyword provided."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"     * @param keyword Parts of the description of the task that a user wants to find."},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"    public void find(String keyword) {"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"        String msg \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"        int num \u003d 1;"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"        for (int i \u003d 0; i \u003c TaskList.tasks.size(); i++) {"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"            Task task \u003d TaskList.tasks.get(i);"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"            String word \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"            for (int j \u003d 0; j \u003c task.description.length(); j++) {"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"                if (task.description.charAt(j) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"                    if (word.equals(keyword)) {"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"                        msg +\u003d \"     \" + num + \".\" + task + \"\\n\";"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"                        num++;"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"                    word \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"                    continue;"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"                } else {"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"                    word +\u003d task.description.charAt(j);"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"                    if (j \u003d\u003d task.description.length() - 1) {"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"                        if (word.equals(keyword)) {"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"                            msg +\u003d \"     \" + num + \".\" + task + \"\\n\";"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"                            num++;"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"                        }"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"                    }"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"                }"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"        if (num \u003d\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"            msg \u003d \"    ____________________________________________________________\\n\""},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     You have no matching tasks in your list :(\\n\""},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\";"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"            msg \u003d \"    ____________________________________________________________\\n\""},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     Here are the matching tasks in your list:\\n\""},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":"                    + msg + \"    ____________________________________________________________\";"},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(msg);"},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":"     * Say bye when the user logouts."},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"    public void bye() throws IOException {"},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n     \""},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"                + \"Bye. Hope to see you again soon!\\n\""},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"                + \"    ____________________________________________________________\");"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":"        Storage.save();"},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"     * Welcome the user when login."},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"    public void greet() {"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"        System.out.println(\"    ____________________________________________________________\\n     \""},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"                + \" ____        _        \\n\""},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":"                + \"     |  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"                + \"     | | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"                + \"     | |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"                + \"     |____/ \\\\__,_|_|\\\\_\\\\___|\\n\\n     \""},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"                + \"Hello! I\u0027m Duke :P\");"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"     * Add ToDo object of the given description to the list."},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"     * @param desc Description of what to be done."},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":"    public void todo(String desc) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"        if (desc.length() \u003e 0) {"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"            TaskList.addTask(new ToDo(desc));"},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The description of a todo cannot be empty.\\n\""},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"     * Add Event object of the given description to the list."},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"     * @param desc  Description of the event."},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":"     * @param at    Date of the event."},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"     * @param start Start time of the event."},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"     * @param end End time of the event."},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":99,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":100,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"CharlesLee01"},"content":"    public void event(String desc, LocalDate at, LocalTime start, LocalTime end) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"CharlesLee01"},"content":"        if (desc.equals(\"\")) {"},{"lineNumber":103,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":104,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The description, date, start and end time of an event cannot be empty.\\n\""},{"lineNumber":105,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":106,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"CharlesLee01"},"content":"        if (at \u003d\u003d null) {"},{"lineNumber":108,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":109,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The date \u0026 time of an event cannot be empty.\\n\""},{"lineNumber":110,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":111,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"CharlesLee01"},"content":"        if (start \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":114,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The start and end time of an event cannot be empty.\\n\""},{"lineNumber":115,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":116,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"CharlesLee01"},"content":"        if (end \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":119,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The end time of an event cannot be empty.\\n\""},{"lineNumber":120,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":121,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.addTask(new Event(desc, at, start, end));"},{"lineNumber":123,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":125,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"CharlesLee01"},"content":"     * Add DeadLine object of the given description to the list."},{"lineNumber":127,"author":{"gitId":"CharlesLee01"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"CharlesLee01"},"content":"     * @param desc Description of the deadline."},{"lineNumber":129,"author":{"gitId":"CharlesLee01"},"content":"     * @param by   Date of the deadline."},{"lineNumber":130,"author":{"gitId":"CharlesLee01"},"content":"     * @param time Time of the deadline."},{"lineNumber":131,"author":{"gitId":"CharlesLee01"},"content":"     * @throws DukeException If an invalid command is given by the user. It also happens when there\u0027s lack of"},{"lineNumber":132,"author":{"gitId":"CharlesLee01"},"content":"     *                       information when task is created such as no description, date and time."},{"lineNumber":133,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"CharlesLee01"},"content":"    public void deadline(String desc, LocalDate by, LocalTime time) throws DukeException {"},{"lineNumber":135,"author":{"gitId":"CharlesLee01"},"content":"        if (desc.equals(\"\")) {"},{"lineNumber":136,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":137,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The description, date \u0026 time of a deadline cannot be empty.\\n\""},{"lineNumber":138,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":139,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"CharlesLee01"},"content":"        if (by \u003d\u003d null) {"},{"lineNumber":141,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":142,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The date \u0026 time of a deadline cannot be empty.\\n\""},{"lineNumber":143,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":144,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"CharlesLee01"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":146,"author":{"gitId":"CharlesLee01"},"content":"            throw new DukeException(\"\\n    ____________________________________________________________\\n\""},{"lineNumber":147,"author":{"gitId":"CharlesLee01"},"content":"                    + \"     ☹ OOPS!!! The time of a deadline cannot be empty.\\n\""},{"lineNumber":148,"author":{"gitId":"CharlesLee01"},"content":"                    + \"    ____________________________________________________________\");"},{"lineNumber":149,"author":{"gitId":"CharlesLee01"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"CharlesLee01"},"content":"        TaskList.addTask(new Deadline(desc, by, time));"},{"lineNumber":151,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":152}},{"path":"src/main/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":" * A class that conducts JUnit test on the methods from Ui class."},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"public class UiTest {"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"    Ui ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the todo() method in Ui class."},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"    void todo() throws DukeException {"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"        ui.todo(\"read book\");"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new ToDo(\"read book\").toString(), TaskList.tasks.get(0).toString());"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the event() method in Ui class."},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":"    void event() throws DukeException {"},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"        ui.event(\"read book\", LocalDate.parse(\"2001-02-03\"), LocalTime.parse(\"11:11\"), LocalTime.parse(\"12:12\"));"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Event(\"read book\", LocalDate.parse(\"2001-02-03\"), LocalTime.parse(\"11:11\"),"},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"                LocalTime.parse(\"12:12\")).toString(), TaskList.tasks.get(1).toString());"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"     * A test for the deadline() method in Ui class."},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"    void deadline() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"        ui.deadline(\"read book\", LocalDate.parse(\"2001-02-03\"), LocalTime.parse(\"11:11\"));"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":"        assertEquals(new Deadline(\"read book\", LocalDate.parse(\"2001-02-03\"), LocalTime.parse(\"11:11\")).toString(),"},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"                TaskList.tasks.get(2).toString());"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"}"}],"authorContributionMap":{"CharlesLee01":43}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"todo get book from Jack"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"event meet friends /at Aug 6th 2-4pm"},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"deadline project /by June 6th"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"deadline homework /by Monday"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"done 5"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"bye"}],"authorContributionMap":{"CharlesLee01":12}},{"path":"text-ui-test/output.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"CharlesLee01"},"content":"      ____        _        "},{"lineNumber":3,"author":{"gitId":"CharlesLee01"},"content":"     |  _ \\ _   _| | _____ "},{"lineNumber":4,"author":{"gitId":"CharlesLee01"},"content":"     | | | | | | | |/ / _ \\"},{"lineNumber":5,"author":{"gitId":"CharlesLee01"},"content":"     | |_| | |_| |   \u003c  __/"},{"lineNumber":6,"author":{"gitId":"CharlesLee01"},"content":"     |____/ \\__,_|_|\\_\\___|"},{"lineNumber":7,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":8,"author":{"gitId":"CharlesLee01"},"content":"     Hello! I\u0027m Duke"},{"lineNumber":9,"author":{"gitId":"CharlesLee01"},"content":"     What can I do for you?"},{"lineNumber":10,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":11,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":12,"author":{"gitId":"CharlesLee01"},"content":"todo get book from Jack"},{"lineNumber":13,"author":{"gitId":"CharlesLee01"},"content":"event meet friends /at Aug 6th 2-4pm"},{"lineNumber":14,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":15,"author":{"gitId":"CharlesLee01"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":16,"author":{"gitId":"CharlesLee01"},"content":"deadline project /by June 6th"},{"lineNumber":17,"author":{"gitId":"CharlesLee01"},"content":"deadline homework /by Monday"},{"lineNumber":18,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":19,"author":{"gitId":"CharlesLee01"},"content":"done 5"},{"lineNumber":20,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":21,"author":{"gitId":"CharlesLee01"},"content":"done 1"},{"lineNumber":22,"author":{"gitId":"CharlesLee01"},"content":"list"},{"lineNumber":23,"author":{"gitId":"CharlesLee01"},"content":"bye    ____________________________________________________________"},{"lineNumber":24,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":25,"author":{"gitId":"CharlesLee01"},"content":"       [T][ ] get book from Jack"},{"lineNumber":26,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 1 tasks in the list."},{"lineNumber":27,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":28,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":29,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":31,"author":{"gitId":"CharlesLee01"},"content":"       [E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":32,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 2 tasks in the list."},{"lineNumber":33,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":34,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":35,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":36,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":37,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":38,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":39,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":40,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":41,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":42,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":43,"author":{"gitId":"CharlesLee01"},"content":"       [E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":44,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 3 tasks in the list."},{"lineNumber":45,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":46,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":47,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":48,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":49,"author":{"gitId":"CharlesLee01"},"content":"       [D][ ] project (by: June 6th)"},{"lineNumber":50,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 4 tasks in the list."},{"lineNumber":51,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":52,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":53,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":54,"author":{"gitId":"CharlesLee01"},"content":"     Got it. I\u0027ve added this task: "},{"lineNumber":55,"author":{"gitId":"CharlesLee01"},"content":"       [D][ ] homework (by: Monday)"},{"lineNumber":56,"author":{"gitId":"CharlesLee01"},"content":"     Now you have 5 tasks in the list."},{"lineNumber":57,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":58,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":59,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":60,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":61,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":62,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":63,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":64,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":65,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][ ] homework (by: Monday)"},{"lineNumber":66,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":67,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":68,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":69,"author":{"gitId":"CharlesLee01"},"content":"     Nice! I\u0027ve marked this task as done: "},{"lineNumber":70,"author":{"gitId":"CharlesLee01"},"content":"       [D][X] homework (by: Monday)"},{"lineNumber":71,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":72,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":73,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":74,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":75,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][ ] get book from Jack"},{"lineNumber":76,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":77,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":78,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":79,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][X] homework (by: Monday)"},{"lineNumber":80,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":81,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":82,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":83,"author":{"gitId":"CharlesLee01"},"content":"     Nice! I\u0027ve marked this task as done: "},{"lineNumber":84,"author":{"gitId":"CharlesLee01"},"content":"       [T][X] get book from Jack"},{"lineNumber":85,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":86,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":87,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":88,"author":{"gitId":"CharlesLee01"},"content":"          Here are the tasks in your list:"},{"lineNumber":89,"author":{"gitId":"CharlesLee01"},"content":"          1.[T][X] get book from Jack"},{"lineNumber":90,"author":{"gitId":"CharlesLee01"},"content":"          2.[E][ ] meet friends (at: Aug 6th 2-4pm)"},{"lineNumber":91,"author":{"gitId":"CharlesLee01"},"content":"          3.[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":92,"author":{"gitId":"CharlesLee01"},"content":"          4.[D][ ] project (by: June 6th)"},{"lineNumber":93,"author":{"gitId":"CharlesLee01"},"content":"          5.[D][X] homework (by: Monday)"},{"lineNumber":94,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":95,"author":{"gitId":"CharlesLee01"},"content":""},{"lineNumber":96,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"},{"lineNumber":97,"author":{"gitId":"CharlesLee01"},"content":"     Bye. Hope to see you again soon!"},{"lineNumber":98,"author":{"gitId":"CharlesLee01"},"content":"    ____________________________________________________________"}],"authorContributionMap":{"CharlesLee01":98}}]
