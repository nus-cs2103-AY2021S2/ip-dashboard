[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":46,"samuelfangjw":15}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"        Circle clip \u003d new Circle(50, 50, 50);"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a dialog box formatted for the user input."},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"     * @param text Command the user input."},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"     * @param img Display image."},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"     * @return A dialog box."},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"        return new DialogBox(text, img);"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a dialog box formatted for the response."},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"     * @param text Response."},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"     * @param img Display image."},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"     * @return A dialog box."},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"        db.flip();"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":74}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.IncompleteInputException;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":" * Main class of the application."},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    private final TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    private final Storage storage;"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * Creates a new instance of Duke."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @param filePath The save file path."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public Duke(String filePath) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        loadData();"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    protected String getResponse(String input) {"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            String[] tokens \u003d Parser.splitIntoSubstrings(input);"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"            Command command \u003d Parser.parseCommand(tokens);"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"            return runUserCommand(command, tokens);"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"            return e.getMessage();"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"     * Loads data from save file."},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"    public void loadData() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"            ArrayList\u003cTask\u003e tasks \u003d storage.load();"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"            taskList.setTaskList(tasks);"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"     * Saves data to save file."},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"    public void saveData() throws DukeException {"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"        storage.save(taskList.getTasks());"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"     * Processes input after it is parsed by the parser."},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"     * @param command Command that is to be executed."},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"     * @param tokens  Input String split into tokens."},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException If command cannot be executed."},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"    public String runUserCommand(Command command, String[] tokens) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"        String message;"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"        switch (command) {"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"        case BYE:"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d Ui.GOODBYE_MESSAGE;"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"            System.exit(0);"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"        case DONE:"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"                Task task \u003d taskList.markAsDone(Integer.parseInt(tokens[1]) - 1);"},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"                message \u003d Ui.getSuccessfullyDoneMessage(task);"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"                throw new IncompleteInputException(command);"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"        case DELETE:"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"                Task task \u003d taskList.delete(Integer.parseInt(tokens[1]) - 1);"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"                message \u003d Ui.getSuccessfullyDeletedMessage(taskList.getSize(), task);"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"            } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"                throw new IncompleteInputException(command);"},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":"        case FIND:"},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"            String[] searchParameters \u003d tokens[1].toLowerCase().split(\" \");"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d Ui.getFilteredTasksMessage(taskList.getFilteredTaskList(searchParameters));"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"        case LIST:"},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d Ui.getAllTasksMessage(taskList.getTasks());"},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"        default:"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"                Task task \u003d taskList.addTask(command, tokens[1].trim());"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":"                message \u003d Ui.getSuccessfullyAddedTaskMessage(taskList.getSize(), task);"},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"                throw new IncompleteInputException(command);"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"        saveData();"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":"        return message;"},{"lineNumber":108,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"samuelfangjw":106}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    private Duke duke;"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     * Constructor for Main class"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    public Main() {"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"            duke \u003d new Duke(\"data/tasks.txt\");"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"            e.printStackTrace();"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    public void start(Stage stage) {"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            stage.setScene(scene);"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":40}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import duke.ui.Ui;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaSquirrel.jpg\"));"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     * Initialize GUI from FXML."},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        displayDukeMessage(Ui.WELCOME_MESSAGE);"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    private void displayDukeMessage(String response) {"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(response, dukeImage));"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"        String input \u003d userInput.getText().trim();"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"        if (!input.isEmpty()) {"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"            );"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"            userInput.clear();"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":61}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exceptions thrown by duke."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":10}},{"path":"src/main/java/duke/exceptions/IncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when input is incomplete."},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"public class IncompleteInputException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    private String message;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"     * Creates an instance of exception thrown when input is incomplete."},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * @param command Command that was called."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    public IncompleteInputException(Command command) {"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"        super(\"\");"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        switch (command) {"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        case TODO:"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Todo requires a description :(\";"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"        case EVENT:"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Event requires a description and a date :(\";"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"        case DEADLINE:"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Deadline requires a description and a date :(\";"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        case DELETE:"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Please enter a valid number after delete :(\";"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        case DONE:"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Please enter a valid number after done :(\";"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        default:"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"I am not sure what happened. Please try again :(\";"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"    public String getMessage() {"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"        return message;"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":43}},{"path":"src/main/java/duke/exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when date is invalid."},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"public class InvalidDateException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidDateException(String invalidDate) {"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"        super(invalidDate + \" is not a valid date. Please try again :(\");"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":11}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when input is invalid."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class InvalidInputException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidInputException() {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Please enter a valid index :(\");"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidInputException(int maxIdx) {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Please enter a valid index between 1 and \" + maxIdx + \" :(\");"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":14}},{"path":"src/main/java/duke/exceptions/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when command is unknown."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class UnknownCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public UnknownCommandException (String command) {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Sorry I do not understand the command \\\"\" + command + \"\\\" :(\");"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":" * Parse input."},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"     * Splits input into substrings."},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"     * @param input User input."},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * @return String[] array of substrings."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    public static String[] splitIntoSubstrings(String input) {"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"        return input.split(\" \", 2);"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"     * Parse user input."},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * @param subStrings substrings of user input."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * @return Command that has been parsed."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @throws UnknownCommandException If input cannot be parsed."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public static Command parseCommand(String[] subStrings) throws UnknownCommandException {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"            return Command.valueOf(subStrings[0].trim().toUpperCase());"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"            throw new UnknownCommandException(subStrings[0].trim());"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":32}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Deadline;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Event;"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Todo;"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":" * Manages storage information for the program."},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * File path of save file"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"    private final String filePath;"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of Storage."},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     * @param filePath File path of save file."},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"     * Loads a list of tasks from the save file."},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     * @return List of tasks."},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     * @throws IOException   If file could not be read."},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException If save file is corrupted."},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"        if (!dir.exists()) {"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"            dir.mkdirs();"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"        f.createNewFile();"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"        while (sc.hasNext()) {"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"            String input \u003d sc.nextLine().trim();"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"            if (!input.equals(\"\")) {"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"                String[] tokens \u003d input.split(\"\\\\|\");"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"                Command taskType \u003d Command.valueOf(tokens[0]);"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"                Task task;"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"                String date;"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"                String time;"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"                switch (taskType) {"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"                case EVENT:"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"                    date \u003d tokens[3];"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"                    time \u003d tokens.length \u003c 5 ? \"\" : \" \" + tokens[4];"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Event(tokens[2], date + time);"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"                case DEADLINE:"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"                    date \u003d tokens[3];"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"                    time \u003d tokens.length \u003c 5 ? \"\" : \" \" + tokens[4];"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Deadline(tokens[2], date + time);"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"                case TODO:"},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Todo(tokens[2]);"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"                default:"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"                    throw new DukeException(\"Sorry something when wrong loading your safe file :(\");"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"                if (tokens[1].equals(\"true\")) {"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"                    task.markAsDone();"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"                tasks.add(task);"},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"        return tasks;"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"     * Saves a list of tasks to the save file."},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks List of tasks to be saved."},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException If unable to save to file."},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"            File f \u003d new File(filePath);"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"            f.createNewFile();"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":108,"author":{"gitId":"samuelfangjw"},"content":"            for (Task task : tasks) {"},{"lineNumber":109,"author":{"gitId":"samuelfangjw"},"content":"                sb.append(task.serialise()).append(\u0027\\n\u0027);"},{"lineNumber":110,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":112,"author":{"gitId":"samuelfangjw"},"content":"            fw.write(sb.toString());"},{"lineNumber":113,"author":{"gitId":"samuelfangjw"},"content":"            fw.close();"},{"lineNumber":114,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":115,"author":{"gitId":"samuelfangjw"},"content":"            throw new DukeException(\"Something went wrong trying to save your data :(\");"},{"lineNumber":116,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":118}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" * Deadline task."},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * Date the task is to be completed by."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalDate date;"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalTime time;"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of deadline."},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of deadline."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * @param dateTime Date and time the task is to be completed by."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    public Deadline(String description, String dateTime) {"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        date \u003d DateTime.parseDate(dateTime);"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        time \u003d DateTime.parseTime(dateTime);"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"DEADLINE\";"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027)"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"            .append(isDone).append(\u0027|\u0027)"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"            .append(description).append(\u0027|\u0027)"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"            .append(DateTime.serialiseDate(date)).append(\u0027|\u0027)"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"            .append(DateTime.getTimeAsString(time));"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"        String timeString \u003d time \u003d\u003d null ? \"\" : \" \" + time.toString();"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"        return String.format(\"[D] %s (by: %s%s)\", super.toString(), DateTime.getDateAsString(date), timeString);"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":48}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" * Event task."},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * Date of event"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalDate date;"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalTime time;"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of event."},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of event."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * @param dateTime Date and time of event."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    public Event(String description, String dateTime) {"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        date \u003d DateTime.parseDate(dateTime);"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        time \u003d DateTime.parseTime(dateTime);"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"EVENT\";"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027)"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"            .append(isDone).append(\u0027|\u0027)"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"            .append(description).append(\u0027|\u0027)"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"            .append(DateTime.serialiseDate(date)).append(\u0027|\u0027)"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"            .append(DateTime.getTimeAsString(time));;"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"        String timeString \u003d time \u003d\u003d null ? \"\" : \" \" + time.toString();"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"        return String.format(\"[E] %s (at: %s%s)\", super.toString(), DateTime.getDateAsString(date), timeString);"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":48}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Task represents a task that is to be done."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    /** Description of task. */"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    /** Status of task. */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of a task."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of task."},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a status icon depending on status of task."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @return status icon."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"     * Marks task as done."},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    public void markAsDone() {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of task to be saved to save file."},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of task."},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"    public abstract String serialise();"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"        return this.getStatusIcon() + \" \" + this.description;"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":46}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.InvalidDateException;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.InvalidInputException;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":" * Represents list of tasks."},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     * Lists of tasks."},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * Creates a new instance of TaskList."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"    public TaskList() {"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     * Updates tasks."},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks new tasks."},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    public void setTaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     * Returns list of tasks."},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"     * @return List of tasks."},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"        return tasks;"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"     * @param command Command to determine type of task to add."},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"     * @param input   Input string."},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task The task that was added."},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"     * @throws ArrayIndexOutOfBoundsException If input is not complete."},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidDateException           If date is invalid."},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"     * @throws UnknownCommandException        If command is invalid."},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"    public Task addTask(Command command, String input)"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"        throws ArrayIndexOutOfBoundsException, InvalidDateException, UnknownCommandException {"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"        String[] tokens;"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"        switch (command) {"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"        case TODO:"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d new Todo(input);"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"        case DEADLINE:"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"            tokens \u003d input.split(\" /by \", 2);"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"            input \u003d tokens[0];"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"                task \u003d new Deadline(input, tokens[1]);"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidDateException(tokens[1]);"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"        case EVENT:"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"            tokens \u003d input.split(\" /at \", 2);"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"            input \u003d tokens[0];"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"                task \u003d new Event(input, tokens[1]);"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidDateException(tokens[1]);"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"        default:"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"            throw new UnknownCommandException(command.name());"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"        tasks.add(task);"},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"     * Marks a task as done."},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"     * @param idx Index of task to mark as done."},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task that was marked as done."},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidInputException If index is not in valid range."},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"    public Task markAsDone(int idx) throws InvalidInputException {"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d tasks.get(idx);"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":"            throw new InvalidInputException(tasks.size());"},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"        task.markAsDone();"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":108,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":109,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":111,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"samuelfangjw"},"content":"     * Deletes a task."},{"lineNumber":113,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"samuelfangjw"},"content":"     * @param idx Index of task to be deleted."},{"lineNumber":115,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task that was deleted."},{"lineNumber":116,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidInputException If index is not in valid range."},{"lineNumber":117,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"samuelfangjw"},"content":"    public Task delete(int idx) throws InvalidInputException {"},{"lineNumber":119,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":120,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d tasks.get(idx);"},{"lineNumber":122,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":123,"author":{"gitId":"samuelfangjw"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidInputException();"},{"lineNumber":125,"author":{"gitId":"samuelfangjw"},"content":"            } else {"},{"lineNumber":126,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidInputException(tasks.size());"},{"lineNumber":127,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":130,"author":{"gitId":"samuelfangjw"},"content":"        tasks.remove(idx);"},{"lineNumber":131,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":132,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":133,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":135,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a list of tasks that matches any of the search parameters."},{"lineNumber":137,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"samuelfangjw"},"content":"     * @param searchParameters Strings to compare tasks with."},{"lineNumber":139,"author":{"gitId":"samuelfangjw"},"content":"     * @return List of tasks."},{"lineNumber":140,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e getFilteredTaskList(String... searchParameters) {"},{"lineNumber":142,"author":{"gitId":"samuelfangjw"},"content":"        ArrayList\u003cTask\u003e filteredArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":143,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":144,"author":{"gitId":"samuelfangjw"},"content":"        for (Task task : tasks) {"},{"lineNumber":145,"author":{"gitId":"samuelfangjw"},"content":"            String taskDescription \u003d task.description.toLowerCase();"},{"lineNumber":146,"author":{"gitId":"samuelfangjw"},"content":"            for (String s : searchParameters) {"},{"lineNumber":147,"author":{"gitId":"samuelfangjw"},"content":"                if (taskDescription.contains(s)) {"},{"lineNumber":148,"author":{"gitId":"samuelfangjw"},"content":"                    filteredArr.add(task);"},{"lineNumber":149,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":150,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":151,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":154,"author":{"gitId":"samuelfangjw"},"content":"        return filteredArr;"},{"lineNumber":155,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":157,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":158,"author":{"gitId":"samuelfangjw"},"content":"     * Returns size of list of tasks."},{"lineNumber":159,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"samuelfangjw"},"content":"     * @return size of list of tasks."},{"lineNumber":161,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":162,"author":{"gitId":"samuelfangjw"},"content":"    public int getSize() {"},{"lineNumber":163,"author":{"gitId":"samuelfangjw"},"content":"        return tasks.size();"},{"lineNumber":164,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":165}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Todo task."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"     * Creates an instance of the todo task."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"     * @param description"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public Todo(String description) {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"TODO\";"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027).append(isDone).append(\u0027|\u0027).append(description);"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":28}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" * Handles Ui related functions such as input and output."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"     * Message shown when user opens the application"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Chip the Squirrel! How can I help you today?\";"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     * Message shown when user closes the application"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    public static final String GOODBYE_MESSAGE \u003d \"Bye! Hope to see you again soon!\";"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    private static String joinStringsWithNewlines(String... strings) {"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        return String.join(\"\\n\", strings);"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a message to be shown after a task is successfully marked as done."},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     * @param task task to be marked as done."},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     * @return Message shown after task is successfully marked as done."},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    public static String getSuccessfullyDoneMessage(Task task) {"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        return joinStringsWithNewlines(\"Good Job! I\u0027ve marked this task as done!\","},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"            task.toString());"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a message to be shown after a task is successfully deleted."},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     * @param numTasks Number of tasks left in the list."},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"     * @param task     Task that was deleted."},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"     * @return Message shown after task is successfully deleted."},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"    public static String getSuccessfullyDeletedMessage(int numTasks, Task task) {"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"        String formattedTasksCount \u003d numTasks \u003e 1 ? String.format(\"%d tasks\", numTasks) : \"1 task\";"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"        return joinStringsWithNewlines(\"Got it! I\u0027ve removed this task:\","},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"            \"  \" + task.toString(),"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"            \"Now you have \" + formattedTasksCount + \" in the list.\");"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a string representation of list of tasks."},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"     * Tasks should already be filtered by search command."},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks List of tasks."},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"     * @return string representation of list of tasks."},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"    public static String getFilteredTasksMessage(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"            return \"No matching tasks were found.\";"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"            String[] outputArr \u003d new String[tasks.size() + 1];"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"            outputArr[0] \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"                outputArr[i + 1] \u003d (i + 1) + \".\" + tasks.get(i).toString();"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"            return joinStringsWithNewlines(outputArr);"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a string representation of list of all tasks."},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks List of tasks."},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"     * @return string representation of list of tasks."},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"    public static String getAllTasksMessage(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"            return \"You have not added any tasks.\";"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"            String[] tasksArr \u003d new String[tasks.size()];"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"                tasksArr[i] \u003d (i + 1) + \".\" + tasks.get(i).toString();"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"            return joinStringsWithNewlines(tasksArr);"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"    public static String getSuccessfullyAddedTaskMessage(int numTasks, Task task) {"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"        String formattedTasksCount \u003d numTasks \u003e 1 ? String.format(\"%d tasks\", numTasks) : \"1 task\";"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"        return joinStringsWithNewlines(\"Got it! I\u0027ve added this task:\","},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"            \"  \" + task.toString(),"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"            \"Now you have \" + formattedTasksCount + \" in the list.\");"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":99}},{"path":"src/main/java/duke/utils/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Commands to be executed."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    DONE,"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    EVENT,"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    FIND,"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    LIST,"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    TODO"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":15}},{"path":"src/main/java/duke/utils/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" * Format date and time."},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"public class DateTime {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of input date."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     * @param date Date to be converted to string."},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of date."},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    public static String getDateAsString(LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of input time."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"     * @param time Time to be converted to string."},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of time."},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    public static String getTimeAsString(LocalTime time) {"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"        return time \u003d\u003d null ? \"\" : time.toString();"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of date to be saved in safe file."},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"     * @param date Date to be saved."},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of date."},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"    public static String serialiseDate(LocalDate date) {"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a LocalDate from an input string."},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"     * The input string may have an optional time field."},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"     * @param input String representation of date and time."},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"     * @return LocalDate Date represented by the input string."},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"    public static LocalDate parseDate(String input) throws DateTimeParseException {"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"        String[] dateAndTime \u003d input.split(\" \");"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"        return LocalDate.parse(dateAndTime[0]);"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a LocalTime from an input string."},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"     * @param input String representation of date and time."},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"     * @return LocalTime Time represented by the input string or null if no time is found."},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"    public static LocalTime parseTime(String input) throws DateTimeParseException {"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"        String[] dateAndTime \u003d input.split(\" \");"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"        return dateAndTime.length \u003c 2 ? null : LocalTime.parse(dateAndTime[1]);"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":64}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"\u003cfx:root maxHeight\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: transparent;\" type\u003d\"HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"   \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"      \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" opacity\u003d\"0.65\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\" style\u003d\"-fx-border-color: #000000; -fx-border-radius: 15px; -fx-background-color: #000000; -fx-background-radius: 15px;\"\u003e"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"          \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"              \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"383.0\" text\u003d\"Label\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"          \u003c/children\u003e"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"          \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"              \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"          \u003c/padding\u003e"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"      \u003c/javafx.scene.layout.HBox\u003e"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"100.0\" fitWidth\u003d\"100.0\" pickOnBounds\u003d\"true\"\u003e"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"         \u003cimage\u003e"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"            \u003cImage url\u003d\"@../images/DaSquirrel.jpg\" /\u003e"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/image\u003e"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"      \u003c/ImageView\u003e"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"   \u003c/children\u003e"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"   \u003cpadding\u003e"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"      \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"   \u003c/padding\u003e"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"samuelfangjw":31}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.effect.BoxBlur?\u003e"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@MainStyle.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"      \u003cAnchorPane opacity\u003d\"0.95\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" styleClass\u003d\"anchorPane\"\u003e"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"         \u003ceffect\u003e"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"            \u003cBoxBlur height\u003d\"2.5\" width\u003d\"2.5\" /\u003e"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/effect\u003e"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"      \u003c/AnchorPane\u003e"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"      \u003cGridPane layoutY\u003d\"558.0\" style\u003d\"-fx-border-color: #000000; -fx-border-radius: 5px; -fx-border-width: 1px;\"\u003e"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"         \u003ccolumnConstraints\u003e"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/columnConstraints\u003e"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"         \u003crowConstraints\u003e"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"            \u003cRowConstraints minHeight\u003d\"10.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/rowConstraints\u003e"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"         \u003cchildren\u003e"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"              \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"How can I help you today?\" style\u003d\"-fx-background-color: transparent; -fx-text-fill: #FFFFFF;\" /\u003e"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"              \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" style\u003d\"-fx-background-color: transparent; -fx-text-fill: #FFFFFF;\" text\u003d\"Send\" GridPane.columnIndex\u003d\"1\" /\u003e"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"         \u003c/children\u003e"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"      \u003c/GridPane\u003e"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: transparent; -fx-background: transparent\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"            \u003ccontent\u003e"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"            \u003c/content\u003e"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"    \u003c/children\u003e"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"samuelfangjw":39}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public void parseCommand_validCommand_success() throws UnknownCommandException {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        String[] todo \u003d {\"todo\", \"\"};"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"        String[] deadline \u003d {\"deadline\", \"\"};"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"        String[] event \u003d {\"event\", \"\"};"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"        String[] delete \u003d {\"delete\", \"\"};"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"        String[] bye \u003d {\"bye\", \"\"};"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"        String[] done \u003d {\"done\", \"\"};"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        String[] list \u003d {\"list\", \"\"};"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.TODO, Parser.parseCommand(todo));"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DEADLINE, Parser.parseCommand(deadline));"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.EVENT, Parser.parseCommand(event));"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DELETE, Parser.parseCommand(delete));"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.BYE, Parser.parseCommand(bye));"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DONE, Parser.parseCommand(done));"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.LIST, Parser.parseCommand(list));"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":28}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public void serialise_isNotDone_success() {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        Deadline deadline \u003d new Deadline(\"Description\", \"2021-01-01 16:00\");"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(\"DEADLINE|false|Description|2021-01-01|16:00\", deadline.serialise());"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"todo todo one"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"event event /at 2020-12-01"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"event event one /at 2020-12-01"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"deadline deadline /by 2020-12-01"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"deadline deadline one /by 2020-12-01"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"done 5"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"delete 2"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"deadline"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"event"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"blah"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"done"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"delete"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"event no date"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"deadline no date"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"delete one"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"done one"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"bye"}],"authorContributionMap":{"samuelfangjw":26}}]
