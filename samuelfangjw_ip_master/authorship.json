[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.IncompleteInputException;"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.parser.Parser;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":" * Main class of the application."},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    private final TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"    private final Storage storage;"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    private final Ui ui;"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * Creates a new instance of Duke."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @param filePath The save file path."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public Duke(String filePath) {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"        loadData();"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     * Loads data from save file."},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    public void loadData() {"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"            ArrayList\u003cTask\u003e tasks \u003d storage.load();"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"            taskList.setTaskList(tasks);"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"            ui.showErrorMessage(\"Sorry something when wrong loading your safe file :(\");"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"            System.exit(0);"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"            ui.showErrorMessage(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"            System.exit(0);"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"     * Saves data to save file."},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"    public void saveData() {"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"            storage.save(taskList.getTasks());"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"        } catch (DukeException e) {"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"            ui.showErrorMessage(e.getMessage());"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"            System.exit(0);"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"     * Processes input after it is parsed by the parser."},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"     * @param command Command that is to be excecuted."},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"     * @param tokens Input String split into tokens."},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"    public void processInput(Command command, String[] tokens) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"        switch(command) {"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"            case SKIP:"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"            case BYE:"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"                ui.showGoodbyeMessage();"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"                System.exit(0);"},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"            case DONE:"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"                try {"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"                    Task task \u003d taskList.markAsDone(Integer.parseInt(tokens[1]) - 1);"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"                    ui.showSuccessfulDoneMessage(task);"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"                    throw new IncompleteInputException(command);"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"            case DELETE:"},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"                try {"},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"                    Task task \u003d taskList.delete(Integer.parseInt(tokens[1]) - 1);"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"                    ui.showSuccessfulDeleteMessage(taskList.getSize(), task);"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":"                } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"                    throw new IncompleteInputException(command);"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"            case FIND:"},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"                ui.showFilteredTasks(taskList.getFilteredTaskList(tokens[1]));"},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"            case LIST:"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"                ui.showTasks(taskList.getTasks());"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"                break;"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":"            default:"},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"                try {"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"                    Task task \u003d taskList.addTask(command, tokens[1].trim());"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":"                    ui.showAddTaskMessage(taskList.getSize(), task);"},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":"                    throw new IncompleteInputException(command);"},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":109,"author":{"gitId":"samuelfangjw"},"content":"        saveData();"},{"lineNumber":110,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":112,"author":{"gitId":"samuelfangjw"},"content":"    private void run() {"},{"lineNumber":113,"author":{"gitId":"samuelfangjw"},"content":"        ui.showWelcomeMessage();"},{"lineNumber":114,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":115,"author":{"gitId":"samuelfangjw"},"content":"        while (ui.hasMoreTokens()) {"},{"lineNumber":116,"author":{"gitId":"samuelfangjw"},"content":"            String input \u003d ui.getUserCommand();"},{"lineNumber":117,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":118,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":119,"author":{"gitId":"samuelfangjw"},"content":"                String[] tokens \u003d Parser.splitIntoSubstrings(input);"},{"lineNumber":120,"author":{"gitId":"samuelfangjw"},"content":"                Command command \u003d Parser.parseCommand(tokens);"},{"lineNumber":121,"author":{"gitId":"samuelfangjw"},"content":"                processInput(command, tokens);"},{"lineNumber":122,"author":{"gitId":"samuelfangjw"},"content":"            } catch (DukeException e) {"},{"lineNumber":123,"author":{"gitId":"samuelfangjw"},"content":"                ui.showErrorMessage(e.getMessage());"},{"lineNumber":124,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"samuelfangjw":123}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exceptions thrown by duke."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":10}},{"path":"src/main/java/duke/exceptions/IncompleteInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when input is incomplete."},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"public class IncompleteInputException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    String message;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public IncompleteInputException(Command command) {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        super(\"\");"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"        switch (command) {"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"        case TODO:"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Todo requires a description :(\";"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        case EVENT:"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Event requires a description and a date :(\";"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        case DEADLINE:"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Deadline requires a description and a date :(\";"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"        case DELETE:"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Please enter a valid number after delete :(\";"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        case DONE:"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"Please enter a valid number after done :(\";"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        default:"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"            message \u003d \"I am not sure what happened. Please try again :(\";"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    public String getMessage() {"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"        return message;"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":39}},{"path":"src/main/java/duke/exceptions/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when date is invalid."},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"public class InvalidDateException extends DukeException{"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidDateException(String invalidDate) {"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"        super(invalidDate + \" is not a valid date. Please try again :(\");"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":11}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when input is invalid."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class InvalidInputException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidInputException() {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Please enter a valid index :(\");"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public InvalidInputException(int maxIdx) {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Please enter a valid index between 1 and \" + maxIdx + \" :(\");"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":14}},{"path":"src/main/java/duke/exceptions/UnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Exception thrown when command is unknown."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class UnknownCommandException extends DukeException{"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    public UnknownCommandException (String command) {"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"        super(\"Sorry I do not understand the command \\\"\" + command + \"\\\" :(\");"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":" * Parse input."},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"     * Splits input into substrings."},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"     * @param input User input."},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * @return String[] array of substrings."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    public static String[] splitIntoSubstrings(String input) {"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"        return input.split(\" \", 2);"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"     * Parse user input."},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     * @param subStrings substrings of user input."},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * @return Command that has been parsed."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @throws UnknownCommandException If input cannot be parsed."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public static Command parseCommand(String[] subStrings) throws UnknownCommandException {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        if (subStrings[0].isEmpty()) {"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"            return Command.SKIP;"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"            return Command.valueOf(subStrings[0].trim().toUpperCase());"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IllegalArgumentException e){"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            throw new UnknownCommandException(subStrings[0].trim());"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":36}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":" * Manages storage information for the program."},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    /** File path of save file */"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    private final String filePath;"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of Storage."},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"     * @param filePath File path of save file."},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    public Storage(String filePath) {"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"     * Loads a list of tasks from the save file."},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"     * @return List of tasks."},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"     * @throws IOException If file could not be read."},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException If save file is corrupted."},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, DukeException {"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"        if (!dir.exists()) {"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"            dir.mkdirs();"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"        f.createNewFile();"},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"        Scanner sc \u003d new Scanner(f);"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"        while (sc.hasNext()) {"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"            String input \u003d sc.nextLine().trim();"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"            if (!input.equals(\"\")) {"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"                String[] tokens \u003d input.split(\"\\\\|\");"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"                Command taskType \u003d Command.valueOf(tokens[0]);"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"                Task task;"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"                switch (taskType) {"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"                case EVENT:"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Event(tokens[2], DateTime.parseDate(tokens[3]));"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"                case DEADLINE:"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Deadline(tokens[2], DateTime.parseDate(tokens[3]));"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"                case TODO:"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"                    task \u003d new Todo(tokens[2]);"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"                    break;"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"                default:"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"                    throw new DukeException(\"Sorry something when wrong loading your safe file :(\");"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"                if (tokens[1].equals(\"true\")) {"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"                    task.markAsDone();"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"                tasks.add(task);"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"        return tasks;"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"     * Saves a list of tasks to the save file."},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks List of tasks to be saved."},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DukeException If unable to save to file."},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"            File f \u003d new File(filePath);"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"            f.createNewFile();"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"            StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"            for (Task task : tasks) {"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"                sb.append(task.serialise()).append(\u0027\\n\u0027);"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"            fw.write(sb.toString());"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"            fw.close();"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"            throw new DukeException(\"Something went wrong trying to save your data :(\");"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":107}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" * Deadline task."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    /** Date the task is to be completed by. */"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalDate by;"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of deadline."},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of deadline."},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     * @param by Date the task is to be completed by."},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        this.by \u003d by;"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"DEADLINE\";"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027).append(isDone).append(\u0027|\u0027).append(description).append(\u0027|\u0027).append(DateTime.serialiseDate(by));"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + DateTime.getDate(by) + \")\";"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":37}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" * Event task."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    /** Date of event */"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    protected LocalDate at;"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of event."},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of event."},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"     * @param at Date of event."},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        this.at \u003d at;"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"EVENT\";"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027).append(isDone).append(\u0027|\u0027).append(description).append(\u0027|\u0027).append(DateTime.serialiseDate(at));"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + DateTime.getDate(at) + \")\";"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":37}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Task represents a task that is to be done."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    /** Description of task. */"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    protected String description;"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    /** Status of task. */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * Creates new instance of a task."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     * @param description Description of task."},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * Returns a status icon depending on status of task."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @return status icon."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"     * Marks task as done."},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    public void markAsDone() {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"        isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of task to be saved to save file."},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of task."},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"    public abstract String serialise();"},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"        return this.getStatusIcon() + \" \" + this.description;"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":46}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.InvalidDateException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.DateTime;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":" * Represents list of tasks."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    /** Lists of tasks. */"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"     * Creates a new instance of TaskList."},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     * Updates tasks."},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     * @param tasks new tasks."},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    public void setTaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"     * Returns list of tasks."},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"     * @return List of tasks."},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"        return tasks;"},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"     * @param command Command to determine type of task to add."},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"     * @param input Input string."},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task The task that was added."},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":"     * @throws ArrayIndexOutOfBoundsException If input is not complete."},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidDateException If date is invalid."},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"     * @throws UnknownCommandException If command is invalid."},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"    public Task addTask(Command command, String input) throws ArrayIndexOutOfBoundsException, InvalidDateException, UnknownCommandException {"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"        String[] tokens;"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":"        switch (command) {"},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"        case TODO:"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d new Todo(input);"},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"        case DEADLINE:"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"            tokens \u003d input.split(\" /by \", 2);"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"            input \u003d tokens[0];"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"                task \u003d new Deadline(input, DateTime.parseDate(tokens[1]));"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidDateException(tokens[1]);"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"        case EVENT:"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":"            tokens \u003d input.split(\" /at \", 2);"},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"            input \u003d tokens[0];"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"            try {"},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"                task \u003d new Event(input, DateTime.parseDate(tokens[1]));"},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidDateException(tokens[1]);"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":"        default:"},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"            throw new UnknownCommandException(command.name());"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"        tasks.add(task);"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":"     * Marks a task as done."},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"     * @param idx Index of task to mark as done."},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task that was marked as done."},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidInputException If index is not in valid range."},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"    public Task markAsDone(int idx) throws InvalidInputException {"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d tasks.get(idx);"},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"            throw new InvalidInputException(tasks.size());"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"        task.markAsDone();"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":"     * Deletes a task."},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"     * @param idx Index of task to be deleted."},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":"     * @return Task that was deleted."},{"lineNumber":108,"author":{"gitId":"samuelfangjw"},"content":"     * @throws InvalidInputException If index is not in valid range."},{"lineNumber":109,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"samuelfangjw"},"content":"    public Task delete(int idx) throws InvalidInputException {"},{"lineNumber":111,"author":{"gitId":"samuelfangjw"},"content":"        Task task;"},{"lineNumber":112,"author":{"gitId":"samuelfangjw"},"content":"        try {"},{"lineNumber":113,"author":{"gitId":"samuelfangjw"},"content":"            task \u003d tasks.get(idx);"},{"lineNumber":114,"author":{"gitId":"samuelfangjw"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":115,"author":{"gitId":"samuelfangjw"},"content":"            if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":116,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidInputException();"},{"lineNumber":117,"author":{"gitId":"samuelfangjw"},"content":"            } else {"},{"lineNumber":118,"author":{"gitId":"samuelfangjw"},"content":"                throw new InvalidInputException(tasks.size());"},{"lineNumber":119,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":122,"author":{"gitId":"samuelfangjw"},"content":"        tasks.remove(idx);"},{"lineNumber":123,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":124,"author":{"gitId":"samuelfangjw"},"content":"        return task;"},{"lineNumber":125,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":127,"author":{"gitId":"samuelfangjw"},"content":"    public ArrayList\u003cTask\u003e getFilteredTaskList(String searchString) {"},{"lineNumber":128,"author":{"gitId":"samuelfangjw"},"content":"        ArrayList\u003cTask\u003e filteredArr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":129,"author":{"gitId":"samuelfangjw"},"content":"        searchString \u003d searchString.toLowerCase();"},{"lineNumber":130,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":131,"author":{"gitId":"samuelfangjw"},"content":"        for (Task task : tasks) {"},{"lineNumber":132,"author":{"gitId":"samuelfangjw"},"content":"            if (task.description.toLowerCase().contains(searchString)) {"},{"lineNumber":133,"author":{"gitId":"samuelfangjw"},"content":"                filteredArr.add(task);"},{"lineNumber":134,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":137,"author":{"gitId":"samuelfangjw"},"content":"        return filteredArr;"},{"lineNumber":138,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":140,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"samuelfangjw"},"content":"     * Returns size of list of tasks."},{"lineNumber":142,"author":{"gitId":"samuelfangjw"},"content":"     * @return size of list of tasks."},{"lineNumber":143,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"samuelfangjw"},"content":"    public int getSize() {"},{"lineNumber":145,"author":{"gitId":"samuelfangjw"},"content":"        return tasks.size();"},{"lineNumber":146,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":147}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Todo task."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"     * Creates an instance of the todo task."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"     * @param description"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public Todo(String description) {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    public String serialise() {"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"        String type \u003d \"TODO\";"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        sb.append(type).append(\u0027|\u0027).append(isDone).append(\u0027|\u0027).append(description);"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        return sb.toString();"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":28}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" * Handles Ui related functions such as input and output."},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    private static final String BOT_NAME \u003d \"Chip the Squirrel\";"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    private static final String LINE_BREAK \u003d \"------------------------------------------------------------\";"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    private static final String INDENT \u003d \"    \";"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    private final Scanner sc;"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"     * Create new instance of Ui."},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"    public Ui() {"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"     * Prints input strings with indentation and top and bottom lines."},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"     * Each String is printed on a new line."},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"     * @param strings input strings."},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"    private static void printWithIndentation(String ... strings) {"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        System.out.println(INDENT + LINE_BREAK);"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        for (String s : strings) {"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"            System.out.println(INDENT + s);"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        System.out.println(INDENT + LINE_BREAK);"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":39,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"samuelfangjw"},"content":"     * Checks if there is any more user input to process."},{"lineNumber":41,"author":{"gitId":"samuelfangjw"},"content":"     * @return true if there is still user input, false otherwise."},{"lineNumber":42,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"samuelfangjw"},"content":"    public boolean hasMoreTokens() {"},{"lineNumber":44,"author":{"gitId":"samuelfangjw"},"content":"        return sc.hasNext();"},{"lineNumber":45,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":47,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"samuelfangjw"},"content":"     * Gets next line of user input."},{"lineNumber":49,"author":{"gitId":"samuelfangjw"},"content":"     * @return user input"},{"lineNumber":50,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"samuelfangjw"},"content":"    public String getUserCommand() {"},{"lineNumber":52,"author":{"gitId":"samuelfangjw"},"content":"        return sc.nextLine().trim();"},{"lineNumber":53,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":55,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"samuelfangjw"},"content":"     * Displays welcome message."},{"lineNumber":57,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"samuelfangjw"},"content":"    public void showWelcomeMessage() {"},{"lineNumber":59,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(\"Hello! I\u0027m \" + BOT_NAME + \"!\", \"What can I do for you today?\");"},{"lineNumber":60,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":62,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"samuelfangjw"},"content":"     * Displays goodbye message."},{"lineNumber":64,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"samuelfangjw"},"content":"    public void showGoodbyeMessage() {"},{"lineNumber":66,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(\"Bye! Hope to see you again soon!\");"},{"lineNumber":67,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":69,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"samuelfangjw"},"content":"     * Displays error message."},{"lineNumber":71,"author":{"gitId":"samuelfangjw"},"content":"     * @param errorMessage message to be displayed."},{"lineNumber":72,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samuelfangjw"},"content":"    public void showErrorMessage(String errorMessage) {"},{"lineNumber":74,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(errorMessage);"},{"lineNumber":75,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":77,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"samuelfangjw"},"content":"     * Displays list of current tasks."},{"lineNumber":79,"author":{"gitId":"samuelfangjw"},"content":"     * @param taskList list of current tasks."},{"lineNumber":80,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"samuelfangjw"},"content":"    public void showTasks(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":82,"author":{"gitId":"samuelfangjw"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":83,"author":{"gitId":"samuelfangjw"},"content":"            printWithIndentation(\"You have not added any tasks.\");"},{"lineNumber":84,"author":{"gitId":"samuelfangjw"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"samuelfangjw"},"content":"            String[] tasksArr \u003d new String[taskList.size()];"},{"lineNumber":86,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":87,"author":{"gitId":"samuelfangjw"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":88,"author":{"gitId":"samuelfangjw"},"content":"                tasksArr[i] \u003d (i + 1) + \".\" + taskList.get(i).toString();"},{"lineNumber":89,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":91,"author":{"gitId":"samuelfangjw"},"content":"            printWithIndentation(tasksArr);"},{"lineNumber":92,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":95,"author":{"gitId":"samuelfangjw"},"content":"    public void showFilteredTasks(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":96,"author":{"gitId":"samuelfangjw"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":97,"author":{"gitId":"samuelfangjw"},"content":"            printWithIndentation(\"No matching tasks were found.\");"},{"lineNumber":98,"author":{"gitId":"samuelfangjw"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"samuelfangjw"},"content":"            String[] outputArr \u003d new String[taskList.size() + 1];"},{"lineNumber":100,"author":{"gitId":"samuelfangjw"},"content":"            outputArr[0] \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":101,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":102,"author":{"gitId":"samuelfangjw"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":103,"author":{"gitId":"samuelfangjw"},"content":"                outputArr[i + 1] \u003d (i + 1) + \".\" + taskList.get(i).toString();"},{"lineNumber":104,"author":{"gitId":"samuelfangjw"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":106,"author":{"gitId":"samuelfangjw"},"content":"            printWithIndentation(outputArr);"},{"lineNumber":107,"author":{"gitId":"samuelfangjw"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":110,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"samuelfangjw"},"content":"     * Displays message after user successfully deletes a task."},{"lineNumber":112,"author":{"gitId":"samuelfangjw"},"content":"     * @param numTasks number of tasks left."},{"lineNumber":113,"author":{"gitId":"samuelfangjw"},"content":"     * @param task task that was deleted."},{"lineNumber":114,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"samuelfangjw"},"content":"    public void showSuccessfulDeleteMessage(int numTasks, Task task) {"},{"lineNumber":116,"author":{"gitId":"samuelfangjw"},"content":"        String formattedTasksCount \u003d numTasks \u003e 1 ? String.format(\"%d tasks\", numTasks) : \"1 task\";"},{"lineNumber":117,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":118,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(\"Got it! I\u0027ve removed this task:\","},{"lineNumber":119,"author":{"gitId":"samuelfangjw"},"content":"                \"  \" + task.toString(),"},{"lineNumber":120,"author":{"gitId":"samuelfangjw"},"content":"                \"Now you have \" + formattedTasksCount + \" in the list.\");"},{"lineNumber":121,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":123,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"samuelfangjw"},"content":"     * Displays message after user successfully marks a task as done."},{"lineNumber":125,"author":{"gitId":"samuelfangjw"},"content":"     * @param task task that was marked as done."},{"lineNumber":126,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"samuelfangjw"},"content":"    public void showSuccessfulDoneMessage(Task task) {"},{"lineNumber":128,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(\"Good Job! I\u0027ve marked this task as done!\", task.toString());"},{"lineNumber":129,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":131,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"samuelfangjw"},"content":"     * Displays message after user successfully adds a task."},{"lineNumber":133,"author":{"gitId":"samuelfangjw"},"content":"     * @param numTasks number of tasks left."},{"lineNumber":134,"author":{"gitId":"samuelfangjw"},"content":"     * @param task task that was added."},{"lineNumber":135,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"samuelfangjw"},"content":"    public void showAddTaskMessage(int numTasks, Task task) {"},{"lineNumber":137,"author":{"gitId":"samuelfangjw"},"content":"        String formattedTasksCount \u003d numTasks \u003e 1 ? String.format(\"%d tasks\", numTasks) : \"1 task\";"},{"lineNumber":138,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":139,"author":{"gitId":"samuelfangjw"},"content":"        printWithIndentation(\"Got it! I\u0027ve added this task:\","},{"lineNumber":140,"author":{"gitId":"samuelfangjw"},"content":"                \"  \" + task.toString(),"},{"lineNumber":141,"author":{"gitId":"samuelfangjw"},"content":"                \"Now you have \" + formattedTasksCount + \" in the list.\");"},{"lineNumber":142,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":143}},{"path":"src/main/java/duke/utils/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":" * Commands to be executed."},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"    BYE,"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    DONE,"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    EVENT,"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"    FIND,"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"    LIST,"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    TODO,"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"    SKIP"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":16}},{"path":"src/main/java/duke/utils/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":" * Format date and time."},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"public class DateTime {"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"     * Returns Date represented by input String."},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"     * @param date String representation of a date."},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"     * @return LocalDate Date represented by the input string."},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"     * @throws DateTimeParseException If date cannot be parsed."},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    public static LocalDate parseDate(String date) throws DateTimeParseException {"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        return LocalDate.parse(date);"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of input Date."},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"     * @param date Date to be converted."},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"     * @return String String representation of Date."},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"    public static String getDate(LocalDate date) {"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"     * Returns String representation of date to be saved in safe file."},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"     * @param date Date to be saved."},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"     * @return String representation of date."},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"samuelfangjw"},"content":"    public static String serialiseDate(LocalDate date) {"},{"lineNumber":36,"author":{"gitId":"samuelfangjw"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":37,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":38}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import duke.exceptions.UnknownCommandException;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"import duke.utils.Command;"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public void parseCommand_emptyCommand_success() throws UnknownCommandException {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        String[] tokens \u003d {\"\", \"\"};"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.SKIP, Parser.parseCommand(tokens));"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"    public void parseCommand_validCommand_success() throws UnknownCommandException {"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"        String[] todo \u003d {\"todo\", \"\"};"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"        String[] deadline \u003d {\"deadline\", \"\"};"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"        String[] event \u003d {\"event\", \"\"};"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"        String[] delete \u003d {\"delete\", \"\"};"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"        String[] bye \u003d {\"bye\", \"\"};"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"        String[] done \u003d {\"done\", \"\"};"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"        String[] list \u003d {\"list\", \"\"};"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.TODO, Parser.parseCommand(todo));"},{"lineNumber":27,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DEADLINE, Parser.parseCommand(deadline));"},{"lineNumber":28,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.EVENT, Parser.parseCommand(event));"},{"lineNumber":29,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DELETE, Parser.parseCommand(delete));"},{"lineNumber":30,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.BYE, Parser.parseCommand(bye));"},{"lineNumber":31,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.DONE, Parser.parseCommand(done));"},{"lineNumber":32,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(Command.LIST, Parser.parseCommand(list));"},{"lineNumber":33,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":34}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":""},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"    public void serialise_isNotDone_success() {"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"        Deadline deadline \u003d new Deadline(\"Description\", LocalDate.parse(\"2021-01-01\"));"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"        assertEquals(\"DEADLINE|false|Description|2021-01-01\", deadline.serialise());"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"}"}],"authorContributionMap":{"samuelfangjw":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samuelfangjw"},"content":"todo todo one"},{"lineNumber":2,"author":{"gitId":"samuelfangjw"},"content":"event event /at 2020-12-01"},{"lineNumber":3,"author":{"gitId":"samuelfangjw"},"content":"event event one /at 2020-12-01"},{"lineNumber":4,"author":{"gitId":"samuelfangjw"},"content":"deadline deadline /by 2020-12-01"},{"lineNumber":5,"author":{"gitId":"samuelfangjw"},"content":"deadline deadline one /by 2020-12-01"},{"lineNumber":6,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":7,"author":{"gitId":"samuelfangjw"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"samuelfangjw"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"samuelfangjw"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"samuelfangjw"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"samuelfangjw"},"content":"done 5"},{"lineNumber":12,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":13,"author":{"gitId":"samuelfangjw"},"content":"delete 2"},{"lineNumber":14,"author":{"gitId":"samuelfangjw"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"samuelfangjw"},"content":"list"},{"lineNumber":16,"author":{"gitId":"samuelfangjw"},"content":"todo"},{"lineNumber":17,"author":{"gitId":"samuelfangjw"},"content":"deadline"},{"lineNumber":18,"author":{"gitId":"samuelfangjw"},"content":"event"},{"lineNumber":19,"author":{"gitId":"samuelfangjw"},"content":"blah"},{"lineNumber":20,"author":{"gitId":"samuelfangjw"},"content":"done"},{"lineNumber":21,"author":{"gitId":"samuelfangjw"},"content":"delete"},{"lineNumber":22,"author":{"gitId":"samuelfangjw"},"content":"event no date"},{"lineNumber":23,"author":{"gitId":"samuelfangjw"},"content":"deadline no date"},{"lineNumber":24,"author":{"gitId":"samuelfangjw"},"content":"delete one"},{"lineNumber":25,"author":{"gitId":"samuelfangjw"},"content":"done one"},{"lineNumber":26,"author":{"gitId":"samuelfangjw"},"content":"bye"}],"authorContributionMap":{"samuelfangjw":26}}]
