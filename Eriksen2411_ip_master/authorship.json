[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    archiveBaseName \u003d \"ChaeLisa\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eriksen2411":18,"-":44}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"done"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"exit $ret"}],"authorContributionMap":{"Eriksen2411":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"\u0027"}],"authorContributionMap":{"Eriksen2411":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"\u0027"}],"authorContributionMap":{"Eriksen2411":26}},{"path":"config/travis/deploy_github_pages.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"set -o errexit # exit with nonzero exit code if any line fails"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"if [ -z \"$GITHUB_TOKEN\" ]; then"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"  exit 0"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"fi;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"set -o nounset # exit if variable is unset"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"cd build/docs/html5"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"git init"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"git config user.name \u0027Deployment Bot (Travis)\u0027"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"git config user.email \u0027deploy@travis-ci.org\u0027"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"git config credential.helper \u0027store --file\u003d.git/credentials\u0027"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"if git ls-remote --exit-code --heads upstream gh-pages; then"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    git fetch --depth\u003d1 upstream gh-pages"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    git reset upstream/gh-pages"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    git checkout --orphan gh-pages"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"else # error occurred"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    exit $?"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"fi"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"# Exit if there are no changes to gh-pages files."},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    echo \u0027No changes to GitHub Pages files; exiting.\u0027"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    exit 0"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"fi"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"git add -A ."},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"git push --quiet upstream HEAD:gh-pages"}],"authorContributionMap":{"Eriksen2411":42}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"done"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"exit $ret"}],"authorContributionMap":{"Eriksen2411":11}},{"path":"data/DanhDuke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"[T][X] do 2103 individual project"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"[D][X] 3230 assignment (by: 2021-03-03 00:00)"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"[T][X] cny relax"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"[D][X] gf\u0027s birthday  (by: 2021-02-02 00:00)"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"[T][  ] homework"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"[D][  ] ip  (by: 2021-02-18 23:59)"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"[D][  ] birthday  (by: 2021-02-18 00:00)"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"[T][  ] 234"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"[D][  ]  (by: 2022-12-02 00:00)"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"[E][X] birthday  (at: 2021-02-18 00:00)"}],"authorContributionMap":{"Eriksen2411":10}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"# User Guide for ChaeLisa"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"---"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"ChaeLisa is a **task management application** made for people who like command line interface to keep track of their tasks everyday. ChaeLisa allows people to execute task rapidly when they are familiar with the syntax of command line."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" "},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"## Quick start"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"1. Ensure Java `11` or above installed in your Computer"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"1. Download the `ChaeLisa.jar`."},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"1. Open cmd in the downloaded folder of `.jar` file and run the command `java -jar ChaeLisa.jar`."},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"1. Type command in the command box and press Enter or press Send button to execute it."},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"1. The [Features](#Features) below shows details of each command function and how to use it."},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"### Adding a ToDo: `todo`"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"Adds a ToDo to the list."},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"Format: `todo [TASKNAME]`"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"* `todo homework`"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"The returns will be like this:"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"![return of todo command](todoCommandOutput.png)"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"### Adding a Deadline: `deadline`"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"Adds a deadline to the list."},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"Format: `deadline [TASKNAME] /by YYYY-MM-DD HH:MM`"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"* `deadline ip /by 2021-02-18 23:59`"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"The returns will be like this:"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"![return of deadline command](deadlineCommandOutput.png)"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"### Adding an Event: `event`"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"Adds an event to the list."},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"Format: `event [TASKNAME] /at YYYY-MM-DD HH:MM`"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"* `event birthday /at 2021-02-18 00:00`"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"The returns will be like this:"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"![return of event command](eventCommandOutput.png)"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"### Listing all task: `list`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"Shows a list of all the task in the list."},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"Format: `list`"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"`Here are the task in your list, Lisa:`"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"Then come with all tasks in the list."},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"### Finding task using keywords: `find`"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"Finds all tasks that matches the given keywords."},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"Format: `find [KEYWORD]`"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"* `find ip`"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"`Here are the matching tasks, Lisa`"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"Then come with all tasks that contains the phrase **ip**."},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"### Marking a task as done: `done`"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"Marks a task in the list as done."},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"Format: `done [INDEX]`"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"* The index is based on the list when you command [list] (#Listing all task: `list`)"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"* `done 1` Marks the first task in the list as done. "},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"Expected Outcome:  "},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"`Nice! I\u0027ve marked this task as done for you, Lisa:`  "},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"Then come with the task that is marked as done."},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"### Deleting a task: `delete`"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"Deletes a task from the list."},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"Format: `delete [INDEX]`"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"* The index is based on the list when you command [list] (#Listing all task: `list`)"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"* `delete 1` Deletes the first task on the list."},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"Expected Outcome:"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"`Noted. I\u0027ve removed this task for you, Lisa:`"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"Then come with the task deleted."},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"### Showing all tasks of today: `myTaskToday`"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"Prints all tasks (Todo, Deadline, Event) you got in your list today."},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"Format: `myTaskToday`"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"`Here are the tasks today, Lisa:`"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"Then come with all the tasks today."},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"### Showing all tasks of today: `myTaskOn`"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"Prints all tasks (Deadline, Event) you got in your list on that day."},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"Format: `myTaskOn YYYY-MM-DD`"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"Examples:"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"* `myTaskOn 2021-02-18`"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"`Here are the tasks on 2021-02-18:`"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"Then come with all the tasks on that day."},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"### Showing all unfinished deadlines: `reminder`"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"Prints all deadlines that is upcoming and unfinished."},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":"Format `reminder`"},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"Expected outcome:"},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"`Here are the upcoming deadlines, Lisa:`"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"### Exiting the program : `bye`"},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"Exits the program."},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"Format: `bye`"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":180,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"Eriksen2411":162,"-":18}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * The Command class represents a command to be done by ChaeLisa. A command has 2 main components:"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * the command name: commandTitle"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" * the command body: commandContent"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"@SuppressWarnings(\"checkstyle:Regexp\")"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"class Command {"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    private final String commandTitle;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    private final String commandContent;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a command with the specified name and body"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandTitle   the command name"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandContent the command body"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    public Command(String commandTitle, String commandContent) {"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"        this.commandTitle \u003d commandTitle;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        this.commandContent \u003d commandContent;"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the content of a command."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     * @return the content of a command"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    public String getCommandContent() {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        return commandContent;"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the name (title) of the command."},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"     * @return the name (title) of the command"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"    public String getCommandTitle() {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        return commandTitle;"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":41}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * The Deadline represents a deadline, which is a type of task that ChaeLisa can take note."},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Deadline has 2 main components:"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline description: taskName"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline due date: dlTime"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    private final LocalDateTime deadlineTime;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Deadline with specified description (name) and due date."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName     the Deadline description"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param deadlineTime the Deadline due date"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    public Deadline(String taskName, LocalDateTime deadlineTime) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        this.deadlineTime \u003d deadlineTime;"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Deadline."},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     * @return Deadline expression"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][X] \" + this.getTaskName() + \" (by: \""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                    + this.deadlineTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        } else if (!this.isTaskDone()) {"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][  ] \" + this.getTaskName() + \" (by: \""},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                    + this.deadlineTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"Error\";"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        assert (!ans.equals(\"Error\")) : \"The task should be either done or not\";"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the deadline of this Deadline object in the correct format."},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     * @return the deadline of this Deadline object"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime getDeadlineTime() {"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"        return deadlineTime;"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":67}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":" * containing text from the speaker."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        displayPicture.setImage(img);"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a dialog box formatted for the user input."},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"     * @param text Command the user input."},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"     * @param img  Display image."},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"     * @return A dialog box."},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"        return new DialogBox(text, img);"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a dialog box formatted for the response."},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"     * @param text Response."},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"     * @param img  Display image."},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"     * @return A dialog box."},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"        db.flip();"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"        return db;"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"    private void flip() {"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"        Collections.reverse(tmp);"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":74}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * Class Duke represents ChaeLisa\u0027s main component, which is in charge of managing its attributes to"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * execute commands, store data, write data, and interact with user."},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" * Duke has 3 main components:"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":" * Ui: deals with interactions with the user"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":" * Storage: deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" * TaskList: contains the task list e.g., it has operations to add/delete tasks in the list"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"class Duke {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    private final Ui ui;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private final TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    private final Storage storage;"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Duke with Ui, Storage, TaskList initialized."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public Duke() throws IOException {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        this.storage \u003d new Storage(\"data/DanhDuke.txt\", \"data\");"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        this.storage.writeBack(this.taskList.getListUsed());"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"     * Illustrates full usage of ChaeLisa\u0027s main component before shutting it down"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"     * @param args by default"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException exception regarding open and access taskFile"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        Duke myDuke \u003d new Duke();"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        while (myDuke.ui.stillHaveCommand()) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            String commandLine \u003d myDuke.ui.readCommand();"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"            Command command \u003d Parser.parse(commandLine, myDuke.getTaskList().getListUsed());"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"            executeCommand(myDuke, command);"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * Performs 3 actions: mark a task in taskList as Done, show results with user and"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"    public static String markTaskDone(Duke duke, int index) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().doneTask(index);"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        return duke.ui.echoMarkTaskDone(task);"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     * Performs 3 actions: add new task to taskList, show results with user and change taskFile content correspondingly."},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke            The duke instance related to this action"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The desciption of the task that we want to add"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"    public static String addToList(Duke duke, String taskDescription) {"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().addTask(taskDescription);"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"        return duke.ui.echoAddToList(task, duke.getTaskList().getListUsed().size());"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"     * Performs 3 actions: delete a task in taskList, show results with user and"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"    public static String deleteTask(Duke duke, int index) {"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().getListUsed().get(index - 1);"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d duke.ui.echoDeleteTask(task);"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"        duke.getTaskList().deleteTask(index);"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"     * Tells Duke that this command format is wrong,"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"     * lets it execute the action of throwing an exception to catch and handle."},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"     * @param command The short syntax of the wrong format command"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     * @throws DukeException Special exception related to wrong format of command entered for ChaeLisa"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"    public static void executeFalseCommand(String command) throws DukeException {"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"        if (command.startsWith(\"list\")) {"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"List command should not have body, Lisa!\");"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"bye\")) {"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"Bye command should not have body, Lisa!\");"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"done\")) {"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body or wrong body format or invalid number for done command, Lisa!\");"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body or wrong body format or invalid number for delete command, Lisa!\");"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"todo\")) {"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body detected for todo command, Lisa!\");"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"deadline\")) {"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body detected or no dlTime detected for deadline command, Lisa!\");"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"event\")) {"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body detected or no eTime detected for Event command, Lisa!\");"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskToday\")) {"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"myTaskToday command should not have body, Lisa!\");"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskOn\")) {"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"No body or wrong body format for myTaskOn command, Lisa!\");"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"reminder\")) {"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"Reminder command should not have body, Lisa!\");"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"            //This is not the last case but everything else."},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"Invalid command format, Lisa!\");"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"     * Executes the command and produce the output of that command."},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"     * @param myDuke  Duke carrying out this command."},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"     * @param command The Command to be executed."},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"     * @return the output of that command."},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"    public static String executeCommand(Duke myDuke, Command command) {"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"        switch (command.getCommandTitle()) {"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"        case \"list\":"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoPrintList(myDuke.getTaskList().getListUsed());"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"        case \"bye\":"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoBye();"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"            assert ans.equals(\"Bye. Hope to see you again soon!\\n\") : \"Wrong bye ui output\";"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"        case \"done\":"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d markTaskDone(myDuke, Integer.parseInt(command.getCommandContent()));"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"        case \"delete\":"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d deleteTask(myDuke, Integer.parseInt(command.getCommandContent()));"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"        case \"todo\":"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"        case \"deadline\":"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"        case \"event\":"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d addToList(myDuke, command.getCommandContent());"},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"        case \"myTaskToday\":"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoTaskToday(myDuke.getTaskList().getListUsed());"},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"        case \"myTaskOn\":"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoTaskThisDay(myDuke.getTaskList().getListUsed(),"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(command.getCommandContent(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"        case \"find\":"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoPrintFindResult(myDuke.getTaskList().getListUsed(), command.getCommandContent());"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"        case \"reminder\":"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoReminder(myDuke.getTaskList().getListUsed());"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"        default:"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"            try {"},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"                executeFalseCommand(command.getCommandContent());"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":"            } catch (DukeException err) {"},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":"                ans \u003d myDuke.ui.echoErrMsg(err);"},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the task list of this Duke."},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"     * @return the taskList object of this Duke."},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":"    public TaskList getTaskList() {"},{"lineNumber":180,"author":{"gitId":"Eriksen2411"},"content":"        return taskList;"},{"lineNumber":181,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":183,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"Eriksen2411"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":185,"author":{"gitId":"Eriksen2411"},"content":"     * Replace this stub with your completed method."},{"lineNumber":186,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"Eriksen2411"},"content":"    public String getResponse(String input) {"},{"lineNumber":188,"author":{"gitId":"Eriksen2411"},"content":"        Command command \u003d Parser.parse(input, this.getTaskList().getListUsed());"},{"lineNumber":189,"author":{"gitId":"Eriksen2411"},"content":"        String response \u003d executeCommand(this, command);"},{"lineNumber":190,"author":{"gitId":"Eriksen2411"},"content":"        if (response.contains(\"Bye. Hope to see you again soon\")) {"},{"lineNumber":191,"author":{"gitId":"Eriksen2411"},"content":"            Platform.exit();"},{"lineNumber":192,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"Eriksen2411"},"content":"        return response;"},{"lineNumber":194,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":195}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class DukeException represents an exception resulted due to wrong format of command"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * entered into Danh\"s Duke"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Duke exception with specified error message."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * @param errorMessage the error message of this Duke\u0027s exception."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        super(errorMessage);"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * Class Event represents an event that will be taken note by Danh\u0027s Duke"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Event has 2 main components:"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * The event name (description): taskName"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * The time of event: eTime"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    private final LocalDateTime eventTime;"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an event with specified name and time"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName  The event name (description)"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     * @param eventTime The time of event"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    public Event(String taskName, LocalDateTime eventTime) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of an Event."},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     * @return Event expression."},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][X] \" + this.getTaskName() + \" (at: \""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eventTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        } else if (!this.isTaskDone()) {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][  ] \" + this.getTaskName() + \" (at: \""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eventTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"Error\";"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        assert (!ans.equals(\"Error\")) : \"The task should be either done or not\";"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the event time of this Event object in the correct format."},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"     * @return the time of this Event object"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime getEventTime() {"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"        return eventTime;"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"}"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":""}],"authorContributionMap":{"Eriksen2411":67}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" * Launcher class launch the whole program."},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"class Launcher {"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"     * Illustrates a using process of the application"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     * @param args by default"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":18}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Main object and throw exception if needed."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException exception related to IO"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    public Main() throws IOException {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public void start(Stage stage) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            stage.setScene(scene);"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            stage.setTitle(\"ChaeLisa\");"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":40}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Lisa.png\"));"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Rose.png\"));"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     * Initializes the MainWindow with its scrollPanel and dialogContainer."},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.WELCOME_MESSAGE, dukeImage));"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * Sets the Duke attribute of MainWindow."},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"     * @param d The duke related to the MainWindow."},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        duke \u003d d;"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    private void handleUserInput() {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"        userInput.clear();"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":59}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class Parser is the tool that helps Danh\u0027s Duke understand the command from user."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class Parser {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     * Is the main method of Parser, which takes in a command line"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * ans returns appropriate Command (object)."},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine The command line aentered by user."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList    The taskList of the Duke that wants to understand this command line"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @return the correct command for Duke to execute."},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    public static Command parse(String commandLine, ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.startsWith(\"list\")) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"            return getListCommand(commandLine);"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"bye\")) {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"            return getByeCommand(commandLine);"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"done \")) {"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"            return getDoneCommand(commandLine, taskList);"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"delete \")) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"            return getDeleteCommand(commandLine, taskList);"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"todo \")) {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            return getTodoCommand(commandLine);"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"deadline \")) {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            return getDeadlineCommand(commandLine);"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"event \")) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            return getEventCommand(commandLine);"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskToday\")) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            return getMyTaskTodayCommand(commandLine);"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskOn \")) {"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            return getMyTaskOnCommand(commandLine);"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"find \")) {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            return getFindCommand(commandLine);"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"reminder\")) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            return getReminderCommand(commandLine);"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"\");"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable list command."},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getListCommand(String commandLine) {"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() !\u003d 4) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"list\");"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"list\", \"\");"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable bye command."},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getByeCommand(String commandLine) {"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() !\u003d 3) {"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"bye\");"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"bye\", \"\");"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable done command."},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getDoneCommand(String commandLine, ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidForm \u003d commandLine.length() \u003d\u003d 5 || !isNumeric(commandLine.substring(5));"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidForm) {"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidIndex \u003d Integer.parseInt(commandLine.substring(5)) \u003e taskList.size();"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidIndex) {"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"done\", commandLine.substring(5));"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable delete command."},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getDeleteCommand(String commandLine, ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidForm \u003d commandLine.length() \u003d\u003d 7 || !isNumeric(commandLine.substring(7));"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidForm) {"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidIndex \u003d Integer.parseInt(commandLine.substring(7)) \u003e taskList.size();"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidIndex) {"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"delete\", commandLine.substring(7));"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable todo command."},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getTodoCommand(String commandLine) {"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"todo\");"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"todo\", commandLine.substring(5));"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable deadline command."},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getDeadlineCommand(String commandLine) {"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidForm \u003d commandLine.length() \u003d\u003d 9 || !commandLine.contains(\"/by \");"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidForm) {"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"        boolean isEmptyDeadlineTime \u003d commandLine.indexOf(\"/by \") + 4 \u003d\u003d commandLine.length();"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"        if (isEmptyDeadlineTime) {"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/by \") + 4),"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"        } catch (Exception e) {"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"deadline\", commandLine.substring(9));"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable event command."},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getEventCommand(String commandLine) {"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"        boolean isInvalidForm \u003d commandLine.length() \u003d\u003d 6 || !commandLine.contains(\"/at \");"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"        if (isInvalidForm) {"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.indexOf(\"/at \") + 4 \u003d\u003d commandLine.length()) {"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/at \") + 4),"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"        } catch (Exception e) {"},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"event\", commandLine.substring(6));"},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable myTaskToday command."},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getMyTaskTodayCommand(String commandLine) {"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() !\u003d 11) {"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"myTaskToday\");"},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"myTaskToday\", \"\");"},{"lineNumber":181,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":183,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable myTaskOn command."},{"lineNumber":185,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":186,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":187,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":188,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getMyTaskOnCommand(String commandLine) {"},{"lineNumber":190,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() \u003d\u003d 9) {"},{"lineNumber":191,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":192,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime.parse(commandLine.substring(9) + \" 00:00\","},{"lineNumber":195,"author":{"gitId":"Eriksen2411"},"content":"                    DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":196,"author":{"gitId":"Eriksen2411"},"content":"        } catch (Exception e) {"},{"lineNumber":197,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":198,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"myTaskOn\", commandLine.substring(9) + \" 00:00\");"},{"lineNumber":200,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":202,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable find command."},{"lineNumber":204,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":205,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the commandLine to read"},{"lineNumber":206,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":207,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getFindCommand(String commandLine) {"},{"lineNumber":209,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":210,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"find\");"},{"lineNumber":211,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":212,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"find\", commandLine.substring(5));"},{"lineNumber":213,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":215,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the suitable reminder command."},{"lineNumber":217,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":218,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine the command line of a reminder command"},{"lineNumber":219,"author":{"gitId":"Eriksen2411"},"content":"     * @return the suitable Command Object"},{"lineNumber":220,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"Eriksen2411"},"content":"    private static Command getReminderCommand(String commandLine) {"},{"lineNumber":222,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.length() !\u003d 8) {"},{"lineNumber":223,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"reminder\");"},{"lineNumber":224,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"Eriksen2411"},"content":"        return new Command(\"reminder\", \"\");"},{"lineNumber":226,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":228,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"Eriksen2411"},"content":"     * (Helper function) Checks if the index number format given by command line is correct or not."},{"lineNumber":230,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"Eriksen2411"},"content":"     * @param strNum the String that we want to check contains number or not."},{"lineNumber":232,"author":{"gitId":"Eriksen2411"},"content":"     * @return the answer in form of boolean."},{"lineNumber":233,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":234,"author":{"gitId":"Eriksen2411"},"content":"    public static boolean isNumeric(String strNum) {"},{"lineNumber":235,"author":{"gitId":"Eriksen2411"},"content":"        if (strNum \u003d\u003d null) {"},{"lineNumber":236,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":237,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":239,"author":{"gitId":"Eriksen2411"},"content":"            Double.parseDouble(strNum);"},{"lineNumber":240,"author":{"gitId":"Eriksen2411"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":241,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":242,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":243,"author":{"gitId":"Eriksen2411"},"content":"        return true;"},{"lineNumber":244,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":245}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" * Class Storage helps Danh\u0027s Duke keep the data in .txt file up to date,"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":" * and load it from that file when the Danh\u0027s Duke wakes up."},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"class Storage {"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private File taskFile;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Storage with specified path of txt file and the folder containing it."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @param txtPathname The pathname of the txt file."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     * @param dirPathname The pathname of the directory containing txt file."},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    public Storage(String txtPathname, String dirPathname) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            Path filePath \u003d Paths.get(txtPathname);"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            if (Files.exists(filePath)) {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Files.exists(Paths.get(dirPathname))) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                Files.createDirectories(Paths.get(dirPathname));"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     * Loads the data written in txt file back to Danh\u0027s Duke memory when it wakes up."},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList of Duke to load data to."},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException Exception related to open and access txt file."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public void writeBack(ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.taskFile));"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        String line \u003d reader.readLine();"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        while (line !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            switch (line.substring(1, 2)) {"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"            case \"T\":"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"                addTodo(taskList, line);"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"            case \"D\":"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"                addDeadline(taskList, line);"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"            default:"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"                addEvent(taskList, line);"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"            line \u003d reader.readLine();"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"        reader.close();"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"     * Adds a new Event into task list."},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the task list to add this new Event."},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"     * @param line     String description of this Event."},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"    private void addEvent(ArrayList\u003cTask\u003e taskList, String line) {"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"        int etIndex \u003d line.indexOf(\"(at: \");"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"        LocalDateTime eventTime \u003d LocalDateTime.parse(line.substring(etIndex + 5, line.length() - 1),"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"        if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(new Deadline(line.substring(7, etIndex - 1), eventTime));"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"            Deadline newDL \u003d new Deadline(line.substring(7, etIndex - 1), eventTime);"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"            newDL.markAsDone();"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(newDL);"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"     * Adds a new Deadline into task list."},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the task list to add this new Event."},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * @param line     String description of this Event."},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"    private void addDeadline(ArrayList\u003cTask\u003e taskList, String line) {"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"        int dlIndex \u003d line.indexOf(\"(by: \");"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"        LocalDateTime dlTime \u003d LocalDateTime.parse(line.substring(dlIndex + 5, line.length() - 1),"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"                DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"        if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(new Deadline(line.substring(7, dlIndex - 1), dlTime));"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"            Deadline newDL \u003d new Deadline(line.substring(7, dlIndex - 1), dlTime);"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"            newDL.markAsDone();"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(newDL);"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"     * Adds a new Todo into task list."},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the task list to add this new Event."},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     * @param line     String description of this Event."},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"    private void addTodo(ArrayList\u003cTask\u003e taskList, String line) {"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"        if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(new ToDo(line.substring(7)));"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"            ToDo newToDo \u003d new ToDo(line.substring(7));"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"            newToDo.markAsDone();"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"            taskList.add(newToDo);"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"     * Updates the task file (txt file) correspondingly when there are changes to taskList."},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the TaskList that have been changed."},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"    public void updateFile(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"            FileWriter fw \u003d new FileWriter(this.taskFile);"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"            StringBuilder toWrite \u003d new StringBuilder();"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"            for (Task task : taskList) {"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"                toWrite.append(task.printTask()).append(\"\\n\");"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"            fw.write(toWrite.toString());"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"            fw.close();"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":144}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class Task represents a task that can be taken note by Danh\u0027s Duke."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * Task has 3 types: ToDo, Deadline, Event."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    private final String taskName;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    private boolean isTaskDone;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Task with specified taskName, this task is not done yet."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName The name of the Task."},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    public Task(String taskName) {"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.isTaskDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Task."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @return Task expression."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        if (isTaskDone) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[X] \" + this.taskName;"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[ ] \" + this.taskName;"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * Marks a task as (Done)."},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    public void markAsDone() {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        this.isTaskDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the information whether a task is done or not."},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"     * @return a boolean containing this information."},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"        return isTaskDone;"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"     * Returns the name of the task."},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"     * @return The name of the task."},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        return taskName;"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":60}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class TaskList represents a taskList and provides operations to interact with that taskList."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Operations provided: addTask, doneTask, deleteTask."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"class TaskList {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    private final ArrayList\u003cTask\u003e listUsed;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a TaskList."},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Adds a task with specified description to TaskList."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The description of task."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @return The task that have been added."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public Task addTask(String taskDescription) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        Task task;"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDescription.contains(\"/at\")) {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/at\"));"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/at\") + 4);"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime eventTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Event(taskName, eventTime);"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        } else if (taskDescription.contains(\"/by\")) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/by\"));"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/by\") + 4);"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime dlTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Deadline(taskName, dlTime);"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        } else if (!(taskDescription.contains(\"/at\") || taskDescription.contains(\"/by\"))) {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new ToDo(taskDescription);"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d null;"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        assert task !\u003d null : \"Must be a type among those 3 types.\";"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.add(task);"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * Marks a task in TaskList as (Done)."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the done task in TaskList."},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"     * @return the Task that marked as (Done)."},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"    public Task doneTask(int index) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d this.listUsed.get(index - 1);"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"        task.markAsDone();"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     * Deletes a task from TaskList."},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the deleted task in TaskList."},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"    public void deleteTask(int index) {"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.remove(index - 1);"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"    public ArrayList\u003cTask\u003e getListUsed() {"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"        return listUsed;"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":73}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class ToDo represents a thing to do in the taskList that Duke can taken note."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * ToDo object only has it name specified without date and time."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDo extends Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a todo with the specified name (description)."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName name (description) of todo."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    public ToDo(String taskName) {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a todo."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     * @return todo expression."},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][X] \" + this.getTaskName();"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        } else if (!this.isTaskDone()) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][  ] \" + this.getTaskName();"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"Error\";"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        assert (!ans.equals(\"Error\")) : \"The task should be either done or not\";"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class Ui helps Danh\u0027s Duke interact with user by calling suitable method."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Ui has 2 main functions: read input and return output."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"class Ui {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    public static final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Park Chaeyoung\\nWhat can I do for you, Lalisa Manoban?\\n\";"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    private final Scanner input;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an Ui with integrated Scanner."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    public Ui() {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"        this.input \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Reads a command line entered by user and return it."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @return the command line entered by user."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public String readCommand() {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        return input.nextLine();"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"     * Checks if user still enter command line or not."},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    public boolean stillHaveCommand() {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        return input.hasNextLine();"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"     * Says Bye"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    public String echoBye() {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        return \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     * Prints all the tasks in taskList."},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList TaskList related."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public String echoPrintList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        StringBuilder ans \u003d new StringBuilder(\"Here are the tasks in your list, Lisa:\\n\");"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            ans.append(String.format(\" %d. \" + task.printTask() + \"\\n\", index));"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"            index++;"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"        return ans.toString();"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     * Prints the results of adding a task to taskList."},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"     * @param task      The task added"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"     * @param noOfTasks Number of tasks in taskList after adding."},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"    public String echoAddToList(Task task, int noOfTasks) {"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Got it. I\u0027ve added this task for you, Lisa: \\n\" + \" \";"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"        ans +\u003d task.printTask() + \"\\n\" + String.format(\"Now you have %d tasks in the list.\\n\", noOfTasks);"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"     * Prints the results of marking a Task as done."},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task done."},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"    public String echoMarkTaskDone(Task task) {"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"        return \"Nice! I\u0027ve marked this task as done for you, Lisa: \\n\" + \" \" + task.printTask() + \"\\n\";"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"     * Prints the results of deleting a Task."},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task deleted."},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"    public String echoDeleteTask(Task task) {"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        return \"Noted. I\u0027ve removed this task for you, Lisa: \\n\" + \" \" + task.printTask() + \"\\n\";"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     * Prints the error message of a DukeException."},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * @param err DukeException object related."},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"    public String echoErrMsg(DukeException err) {"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"        return err.getMessage();"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"     * Prints all the tasks of a specific day."},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime The day that we want to search for."},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"    public String echoTaskThisDay(ArrayList\u003cTask\u003e taskList, LocalDateTime dateTime) {"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"        StringBuilder ans \u003d new StringBuilder(\"Here are the tasks on \" + dateTime.toString().substring(0, 10) + \":\\n\");"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"            boolean isDeadlineThatDay \u003d task instanceof Deadline"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"                    \u0026\u0026 sameDay(((Deadline) task).getDeadlineTime(), dateTime);"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"            boolean isEventThatDay \u003d task instanceof Event \u0026\u0026 sameDay(((Event) task).getEventTime(), dateTime);"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"            if (isDeadlineThatDay || isEventThatDay) {"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"                ans.append(String.format(\" %d. \" + task.printTask() + \"\\n\", index));"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        return ans.toString();"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"     * Prints all the tasks of Today."},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"     * @return output of this scho"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"    public String echoTaskToday(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"        StringBuilder ans \u003d new StringBuilder(\"Here are the tasks today, Lisa:\\n\");"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"            boolean isDeadlineToday \u003d task instanceof Deadline \u0026\u0026 sameDay"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"                    (((Deadline) task).getDeadlineTime(), LocalDateTime.now());"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"            boolean isEventToday \u003d task instanceof Event \u0026\u0026 sameDay(((Event) task).getEventTime(), LocalDateTime.now());"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"            boolean isToDoToday \u003d task instanceof ToDo \u0026\u0026 !task.isTaskDone();"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"            if (isDeadlineToday || isEventToday || isToDoToday) {"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"                ans.append(String.format(\" %d. \" + task.printTask() + \"\\n\", index));"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"        return ans.toString();"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"     * Prints all the tasks that match the pattern of a find command."},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList related."},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"     * @param pattern  The String pattern given by find command."},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"    public String echoPrintFindResult(ArrayList\u003cTask\u003e taskList, String pattern) {"},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"        StringBuilder ans \u003d new StringBuilder(\"Here are the matching tasks, Lisa:\\n\");"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"            if (task.getTaskName().contains(pattern)) {"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"                ans.append(String.format(\" %d. \" + task.printTask() + \"\\n\", index));"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"        return ans.toString();"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"     * Prints all the deadlines coming up."},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList related."},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":"     * @return output of this scho"},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":"    public String echoReminder(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"        StringBuilder ans \u003d new StringBuilder(\"Here are the upcoming deadlines, Lisa:\\n\");"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"        ArrayList\u003cDeadline\u003e deadlineList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"            boolean isDeadlineAvailable \u003d (task instanceof Deadline)"},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"                    \u0026\u0026 ((Deadline) task).getDeadlineTime().isAfter(LocalDateTime.now());"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"            if (isDeadlineAvailable \u0026\u0026 !task.isTaskDone()) {"},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"                addDeadline(deadlineList, (Deadline) task);"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":"        for (Deadline deadline : deadlineList) {"},{"lineNumber":180,"author":{"gitId":"Eriksen2411"},"content":"            ans.append(String.format(\" %d. \" + deadline.printTask() + \"\\n\", deadlineList.indexOf(deadline) + 1));"},{"lineNumber":181,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"Eriksen2411"},"content":"        return ans.toString();"},{"lineNumber":183,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":185,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"Eriksen2411"},"content":"     * (Helper function) Adds a deadline to a deadline list in the correct chronological order."},{"lineNumber":187,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"Eriksen2411"},"content":"     * @param deadlineList the deadline list related."},{"lineNumber":189,"author":{"gitId":"Eriksen2411"},"content":"     * @param deadline     the deadline to add."},{"lineNumber":190,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"Eriksen2411"},"content":"    private void addDeadline(ArrayList\u003cDeadline\u003e deadlineList, Deadline deadline) {"},{"lineNumber":192,"author":{"gitId":"Eriksen2411"},"content":"        int insertIndex \u003d 0;"},{"lineNumber":193,"author":{"gitId":"Eriksen2411"},"content":"        for (Deadline dl : deadlineList) {"},{"lineNumber":194,"author":{"gitId":"Eriksen2411"},"content":"            if (dl.getDeadlineTime().isBefore(deadline.getDeadlineTime())) {"},{"lineNumber":195,"author":{"gitId":"Eriksen2411"},"content":"                insertIndex++;"},{"lineNumber":196,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":197,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":198,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"Eriksen2411"},"content":"        deadlineList.add(insertIndex, deadline);"},{"lineNumber":201,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":203,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"Eriksen2411"},"content":"     * (Helper function) Checks if 2 dateTime refers to the same day or not."},{"lineNumber":205,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime1 First dateTime input"},{"lineNumber":207,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime2 Second dateTime input"},{"lineNumber":208,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean."},{"lineNumber":209,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"Eriksen2411"},"content":"    public boolean sameDay(LocalDateTime dateTime1, LocalDateTime dateTime2) {"},{"lineNumber":211,"author":{"gitId":"Eriksen2411"},"content":"        return ((dateTime1.getDayOfYear() \u003d\u003d dateTime2.getDayOfYear()) \u0026\u0026 (dateTime1.getYear() \u003d\u003d dateTime2.getYear()));"},{"lineNumber":212,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":213}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.Cursor?\u003e"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.image.Image?\u003e"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"\u003cfx:root xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"1.7976931348623157E308\" type\u003d\"HBox\""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"         xmlns\u003d\"http://javafx.com/javafx/8.0.171\"\u003e"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        \u003cjavafx.scene.layout.HBox alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"                                  maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"10.0\""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                                  style\u003d\"-fx-border-color: #000000; -fx-border-radius: 15px; -fx-background-color: black; -fx-background-radius: 15px;\"\u003e"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"            \u003cchildren\u003e"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"                \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"388.0\""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"                       text\u003d\"Label\" textFill\u003d\"#eb79da\" wrapText\u003d\"true\"\u003e"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"                    \u003cfont\u003e"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cFont name\u003d\"Microsoft Sans Serif\" size\u003d\"20.0\"/\u003e"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"                    \u003c/font\u003e"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"                \u003c/Label\u003e"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"            \u003cpadding\u003e"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"                \u003cInsets bottom\u003d\"0.0\" left\u003d\"10.0\" right\u003d\"0.0\" top\u003d\"0.0\"/\u003e"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/padding\u003e"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            \u003ccursor\u003e"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"                \u003cCursor fx:constant\u003d\"NONE\"/\u003e"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/cursor\u003e"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        \u003c/javafx.scene.layout.HBox\u003e"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"115.0\" fitWidth\u003d\"115.0\" pickOnBounds\u003d\"true\"\u003e"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            \u003cimage\u003e"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"                \u003cImage url\u003d\"@../images/DanhDuke.png\"/\u003e"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/image\u003e"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\"/\u003e"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    \u003c/children\u003e"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    \u003cpadding\u003e"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\"/\u003e"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    \u003c/padding\u003e"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Eriksen2411":43}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"\u003cAnchorPane xmlns:fx\u003d\"http://javafx.com/fxml/1\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"            prefHeight\u003d\"801.0\" prefWidth\u003d\"563.0\" stylesheets\u003d\"@MainStyle.css\""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"            xmlns\u003d\"http://javafx.com/javafx/8.0.171\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"        \u003cAnchorPane prefHeight\u003d\"805.0\" prefWidth\u003d\"563.0\" styleClass\u003d\"background\" stylesheets\u003d\"@MainStyle.css\"\u003e"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"            \u003cchildren\u003e"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"                \u003cGridPane layoutX\u003d\"3.0\" layoutY\u003d\"750.0\" prefHeight\u003d\"48.0\" prefWidth\u003d\"554.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"                    \u003ccolumnConstraints\u003e"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"502.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"475.0\"/\u003e"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"100.0\" minWidth\u003d\"0.0\" prefWidth\u003d\"79.0\"/\u003e"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"                    \u003c/columnConstraints\u003e"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"                    \u003crowConstraints\u003e"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\"/\u003e"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"                    \u003c/rowConstraints\u003e"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"                    \u003cchildren\u003e"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"47.0\" prefWidth\u003d\"508.0\""},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"                                   promptText\u003d\"Type your command here\""},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"                                   style\u003d\"-fx-background-color: transparent; -fx-border-color: #000000; -fx-border-width: 3px; -fx-border-radius: 10px;\"\u003e"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"                            \u003cfont\u003e"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"                                \u003cFont name\u003d\"Microsoft Sans Serif\" size\u003d\"18.0\"/\u003e"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"                            \u003c/font\u003e"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"                        \u003c/TextField\u003e"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"                        \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"48.0\" prefWidth\u003d\"92.0\""},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"                                style\u003d\"-fx-background-color: transparent; -fx-border-color: #000000; -fx-border-width: 3px; -fx-border-radius: 10px;\""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                                text\u003d\"Send\" GridPane.columnIndex\u003d\"1\"\u003e"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                            \u003cfont\u003e"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"                                \u003cFont name\u003d\"Microsoft Sans Serif\" size\u003d\"16.0\"/\u003e"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                            \u003c/font\u003e"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"                        \u003c/Button\u003e"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"                    \u003c/children\u003e"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"                \u003c/GridPane\u003e"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/children\u003e"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        \u003c/AnchorPane\u003e"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"750.0\" prefWidth\u003d\"563.0\""},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"                    style\u003d\"-fx-background-color: transparent; -fx-background: transparent;\" vbarPolicy\u003d\"ALWAYS\"\u003e"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"            \u003ccontent\u003e"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"743.0\" prefWidth\u003d\"546.0\"/\u003e"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"            \u003c/content\u003e"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    \u003c/children\u003e"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Eriksen2411":52}},{"path":"src/test/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[D][ ] Minha\u0027s birthday  (by: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Deadline(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[E][ ] Minha\u0027s birthday  (at: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Event(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[T][ ] 2103T iP\", new ToDo(\"2103T iP\").printTask());"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"todo myjob"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"deadline my another job /by 2021"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"event my test /at Today"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"bye"}],"authorContributionMap":{"Eriksen2411":8}}]
