[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Eriksen2411":16,"-":45}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"done"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"exit $ret"}],"authorContributionMap":{"Eriksen2411":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"\u0027"}],"authorContributionMap":{"Eriksen2411":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"\u0027"}],"authorContributionMap":{"Eriksen2411":26}},{"path":"config/travis/deploy_github_pages.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"set -o errexit # exit with nonzero exit code if any line fails"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"if [ -z \"$GITHUB_TOKEN\" ]; then"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"  exit 0"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"fi;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"set -o nounset # exit if variable is unset"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"cd build/docs/html5"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"git init"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"git config user.name \u0027Deployment Bot (Travis)\u0027"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"git config user.email \u0027deploy@travis-ci.org\u0027"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"git config credential.helper \u0027store --file\u003d.git/credentials\u0027"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"if git ls-remote --exit-code --heads upstream gh-pages; then"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    git fetch --depth\u003d1 upstream gh-pages"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    git reset upstream/gh-pages"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    git checkout --orphan gh-pages"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"else # error occurred"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    exit $?"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"fi"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"# Exit if there are no changes to gh-pages files."},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    echo \u0027No changes to GitHub Pages files; exiting.\u0027"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    exit 0"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"fi"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"git add -A ."},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"git push --quiet upstream HEAD:gh-pages"}],"authorContributionMap":{"Eriksen2411":42}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"done"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"exit $ret"}],"authorContributionMap":{"Eriksen2411":11}},{"path":"data/DanhDuke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"[T][X] 123"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"[D][X] 1234  (by: 2030-02-02 10:00)"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"[T][X] 456"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"[D][X] abc  (by: 2020-12-24 00:00)"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"[D][X] 234  (by: 2021-02-02 00:00)"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"[T][ ] 123"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"[T][ ] abc"}],"authorContributionMap":{"Eriksen2411":7}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * The Command class represents a command to be done by Danh\u0027s Duke. A command has 2 main components:"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * the command name: commandTitle"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" * the command body: commandContent"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"@SuppressWarnings(\"checkstyle:Regexp\")"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"class Command {"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    private String commandTitle;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    private String commandContent;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a command with the specified name and body"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandTitle   the command name"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandContent the command body"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    public Command(String commandTitle, String commandContent) {"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"        this.commandTitle \u003d commandTitle;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        this.commandContent \u003d commandContent;"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    public String getCommandContent() {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        return commandContent;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public String getCommandTitle() {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        return commandTitle;"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":30}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * The Deadline represents a deadline, which is a type of task that Danh\u0027s Duke can take note."},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Deadline has 2 main components:"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline description: taskName"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline due date: dlTime"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    private LocalDateTime dlTime;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Deadline with specified description (name) and due date."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName the Deadline description"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param dlTime   the Deadline due date"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    public Deadline(String taskName, LocalDateTime dlTime) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        this.dlTime \u003d dlTime;"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Deadline."},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     * @return Deadline expression"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][X] \" + this.getTaskName() + \" (by: \""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                    + this.dlTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][ ] \" + this.getTaskName() + \" (by: \""},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                    + this.dlTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime getDlTime() {"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        return dlTime;"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":57}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * Class Duke represents Danh\u0027s Duke, a powerful assistant that can take note of your task everyday and"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * help you control them easily."},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" * Duke has 3 main components:"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":" * Ui: deals with interactions with the user"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":" * Storage: deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" * TaskList: contains the task list e.g., it has operations to add/delete tasks in the list"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"class Duke {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    private final Ui ui;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private final TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    private final Storage storage;"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Duke with Ui, Storage, TaskList initialized."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public Duke() throws IOException {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        this.storage \u003d new Storage(\"data/DanhDuke.txt\", \"data\");"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        this.storage.writeBack(this.taskList.getListUsed());"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    public TaskList getTaskList() {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        return taskList;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     * The main method illustrates full usage of Danh\u0027s Duke before shutting it down"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"     * @param args by default"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException exception regarding open and access taskFile"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        Duke myDuke \u003d new Duke();"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        myDuke.ui.echoHi();"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"        boolean signalToExit \u003d false;"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"        while (!signalToExit \u0026\u0026 myDuke.ui.stillHaveCommand()) {"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"            String commandLine \u003d myDuke.ui.readCommand();"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"            Command command \u003d Parser.parse(commandLine, myDuke.getTaskList().getListUsed());"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"            executeCommand(myDuke, command);"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: mark a task in taskList as Done, show results with user and"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"    public static String markTaskDone(Duke duke, int index) {"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().doneTask(index);"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d duke.ui.echoMarkTaskDone(task);"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: add new task to taskList, show results with user and change taskFile content correspondingly."},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke            The duke instance related to this action"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The desciption of the task that we want to add"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"    public static String addToList(Duke duke, String taskDescription) {"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().addTask(taskDescription);"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d duke.ui.echoAddToList(task, duke.getTaskList().getListUsed().size());"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: delete a task in taskList, show results with user and"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"    public static String deleteTask(Duke duke, int index) {"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.getTaskList().getListUsed().get(index - 1);"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d duke.ui.echoDeleteTask(task);"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"        duke.getTaskList().deleteTask(index);"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.getTaskList().getListUsed());"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"     * Tell Duke that this command format is wrong,"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"     * let it execute the action of throwing an exception to catch and handle."},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"     * @param command The short syntax of the wrong format command"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"     * @throws DukeException Special exception related to wrong format of command entered into Danh\u0027s Duke"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"    public static void executeFalseCommand(String command) throws DukeException {"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"        if (command.startsWith(\"list\")) {"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     list command should not have body, Sir!\");"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"bye\")) {"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     bye command should not have body, Sir!\");"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"done\")) {"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format or invalid number for done command, Sir!\");"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format or invalid number for delete command, Sir!\");"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"todo\")) {"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body detected for todo command, Sir!\");"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"deadline\")) {"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     no body detected or no dlTime detected for deadline command, Sir!\");"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"event\")) {"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     no body detected or no eTime detected for Event command, Sir!\");"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskToday\")) {"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     myTaskToday command should not have body, Sir!\");"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskOn\")) {"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format for myTaskOn command, Sir!\");"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     Invalid command format\");"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"    public static String executeCommand(Duke myDuke, Command command) {"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"\";"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"        switch (command.getCommandTitle()) {"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"        case \"list\":"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoPrintList(myDuke.getTaskList().getListUsed());"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"        case \"bye\":"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoBye();"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"        case \"done\":"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d markTaskDone(myDuke, Integer.parseInt(command.getCommandContent()));"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"        case \"delete\":"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d deleteTask(myDuke, Integer.parseInt(command.getCommandContent()));"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"        case \"todo\":"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"        case \"deadline\":"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"        case \"event\":"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d addToList(myDuke, command.getCommandContent());"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"        case \"myTaskToday\":"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoTaskToday(myDuke.getTaskList().getListUsed());"},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"        case \"myTaskOn\":"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoTaskThisDay(myDuke.getTaskList().getListUsed(),"},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(command.getCommandContent(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"        case \"find\":"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d myDuke.ui.echoPrintFindResult(myDuke.getTaskList().getListUsed(), command.getCommandContent());"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"            break;"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"        default:"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"            try {"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"                executeFalseCommand(command.getCommandContent());"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"            } catch (DukeException err) {"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"                ans \u003d myDuke.ui.echoErrMsg(err);"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":"     * Replace this stub with your completed method."},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"    public String getResponse(String input) {"},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":"        Command command \u003d Parser.parse(input, this.getTaskList().getListUsed());"},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"        String response \u003d executeCommand(this, command);"},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"        if (response.contains(\"Bye. Hope to see you again soon\")) {"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"            Platform.exit();"},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"        return response;"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":179}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class DukeException represents an exception resulted due to wrong format of command"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * entered into Danh\"s Duke"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":11}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * Class Event represents an event that will be taken note by Danh\u0027s Duke"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Event has 2 main components:"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * The event name (description): taskName"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * The time of event: eTime"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    private LocalDateTime eTime;"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an event with specified name and time"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName The event name (description)"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     * @param eTime    The time of event"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    public Event(String taskName, LocalDateTime eTime) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        this.eTime \u003d eTime;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of an Event."},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     * @return Event expression."},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][X] \" + this.getTaskName() + \" (at: \""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][ ] \" + this.getTaskName() + \" (at: \""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime geteTime() {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        return eTime;"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"}"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":""}],"authorContributionMap":{"Eriksen2411":59}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"class Launcher {"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    public Main() throws IOException {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":35}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Me.jpg\"));"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DanhDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":51}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class Parser is the tool that helps Danh\u0027s Duke understand the command from user."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class Parser {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     * This method is the main method of Parser, which takes in a command line"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * ans returns appropriate Command (object)."},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine The command line aentered by user."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList    The taskList of the Duke that wants to understand this command line"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @return the correct command for Duke to execute."},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    public static Command parse(String commandLine, ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.startsWith(\"list\")) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 4) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"list\");"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"list\", \"\");"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 3) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"bye\");"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"bye\", \"\");"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"done \")) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5 || !isNumeric(commandLine.substring(5))) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Integer.parseInt(commandLine.substring(5)) \u003e taskList.size()) {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"done\", commandLine.substring(5));"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"delete \")) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 7 || !isNumeric(commandLine.substring(7))) {"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Integer.parseInt(commandLine.substring(7)) \u003e taskList.size()) {"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"delete\", commandLine.substring(7));"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"todo \")) {"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"todo\");"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"todo\", commandLine.substring(5));"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"deadline \")) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 9 || !commandLine.contains(\"/by \")) {"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"            } else if (commandLine.indexOf(\"/by \") + 4 \u003d\u003d commandLine.length()) {"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/by \") + 4),"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"deadline\", commandLine.substring(9));"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"event \")) {"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 6 || !commandLine.contains(\"/at \")) {"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"            } else if (commandLine.indexOf(\"/at \") + 4 \u003d\u003d commandLine.length()) {"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/at \") + 4),"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"event\", commandLine.substring(6));"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskToday\")) {"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 11) {"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"myTaskToday\");"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"myTaskToday\", \"\");"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskOn \")) {"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 9) {"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(9) + \" 00:00\","},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"                            DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"myTaskOn\", commandLine.substring(9) + \" 00:00\");"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"find \")) {"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"find\");"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"find\", commandLine.substring(5));"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"\");"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"     * This is helper function to help Parser checks if the index number format given by command line is correct or not."},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     * @param strNum the String that we want to check contains number or not."},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"     * @return the answer in form of boolean."},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"    public static boolean isNumeric(String strNum) {"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        if (strNum \u003d\u003d null) {"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"            Double.parseDouble(strNum);"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"        return true;"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":129}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" * Class Storage helps Danh\u0027s Duke keep the data in .txt file up to date,"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":" * and load it from that file when the Danh\u0027s Duke wakes up."},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"class Storage {"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private File taskFile;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Storage with specified path of txt file and the folder containing it."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @param txtPathname The pathname of the txt file."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     * @param dirPathname The pathname of the directory containing txt file."},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    public Storage(String txtPathname, String dirPathname) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            Path filePath \u003d Paths.get(txtPathname);"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            if (Files.exists(filePath)) {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Files.exists(Paths.get(dirPathname))) {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                Files.createDirectories(Paths.get(dirPathname));"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     * Load the data written in txt file back to Danh\u0027s Duke memory when it wakes up."},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList of Duke to load data to."},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException Exception related to open and access txt file."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public void writeBack(ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.taskFile));"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        String line \u003d reader.readLine();"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        while (line !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            switch (line.substring(1, 2)) {"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"            case \"T\":"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new ToDo(line.substring(7)));"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"                    ToDo newToDo \u003d new ToDo(line.substring(7));"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"                    newToDo.markAsDone();"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newToDo);"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"            case \"D\":"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"                int dlIndex \u003d line.indexOf(\"(by: \");"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"                LocalDateTime dlTime \u003d LocalDateTime.parse(line.substring(dlIndex + 5, line.length() - 1),"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new Deadline(line.substring(7, dlIndex - 1), dlTime));"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"                    Deadline newDL \u003d new Deadline(line.substring(7, dlIndex - 1), dlTime);"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"                    newDL.markAsDone();"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newDL);"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"            default:"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"                int etIndex \u003d line.indexOf(\"(at: \");"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"                LocalDateTime eventTime \u003d LocalDateTime.parse(line.substring(etIndex + 5, line.length() - 1),"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new Deadline(line.substring(7, etIndex - 1), eventTime));"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"                    Deadline newDL \u003d new Deadline(line.substring(7, etIndex - 1), eventTime);"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"                    newDL.markAsDone();"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newDL);"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"            line \u003d reader.readLine();"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"        reader.close();"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     * Update the taask file (txt file) correspondingly when there are changes to taskList."},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the TaskList that have been changed."},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"    public void updateFile(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"            FileWriter fw \u003d new FileWriter(this.taskFile);"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"            String toWrite \u003d \"\";"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"            for (Task task : taskList) {"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"                toWrite +\u003d task.printTask() + \"\\n\";"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"            fw.write(toWrite);"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"            fw.close();"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":113}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class Task represents a task that can be taken note by Danh\u0027s Duke."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * Task has 3 types: ToDo, Deadline, Event."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    private String taskName;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    private boolean taskDone;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * return a Task with specified taskName, this task is not done yet."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName The name of the Task."},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    public Task(String taskName) {"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.taskDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Task."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @return Task expression."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDone) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[X] \" + this.taskName;"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[ ] \" + this.taskName;"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * Mark a task as (Done)."},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    public void markAsDone() {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        this.taskDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        return taskDone;"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"        return taskName;"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":50}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class TaskList represents a taskList and provides operations to interact with that taskList."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Operations provided: addTask, doneTask, deleteTask."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"class TaskList {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    private ArrayList\u003cTask\u003e listUsed;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a TaskList."},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Add a task with specified description to TaskList."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The description of task."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @return The task that have been added."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public Task addTask(String taskDescription) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        Task task;"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDescription.contains(\"/at\")) {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/at\"));"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/at\") + 4);"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime eventTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Event(taskName, eventTime);"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        } else if (taskDescription.contains(\"/by\")) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/by\"));"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/by\") + 4);"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime dlTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Deadline(taskName, dlTime);"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new ToDo(taskDescription);"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.add(task);"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     * Mark a task in TaskList as (Done)."},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the done task in TaskList."},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * @return the Task that marked as (Done)."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public Task doneTask(int index) {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d this.listUsed.get(index - 1);"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        task.markAsDone();"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"     * Delete a task from TaskList."},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the deleted task in TaskList."},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"    public void deleteTask(int index) {"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.remove(index - 1);"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"    public ArrayList\u003cTask\u003e getListUsed() {"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"        return listUsed;"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":70}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class ToDo represents a thing to do in the taskList that Duke can taken note."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * ToDo object only has it name specified without date and time."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDo extends Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a todo with the specified name (description)."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName name (description) of todo."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    public ToDo(String taskName) {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a todo."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     * @return todo expression."},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"        if (this.isTaskDone()) {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][X] \" + this.getTaskName();"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][ ] \" + this.getTaskName();"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"    public String getTaskName() {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"        return super.getTaskName();"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    public boolean isTaskDone() {"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        return super.isTaskDone();"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":43}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Class Ui helps Danh\u0027s Duke interact with user by calling suitable method."},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Ui has 2 main functions: read input and return output with print."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"class Ui {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    private final Scanner input;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an Ui with integrated Scanner."},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"    public Ui() {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.input \u003d new Scanner(System.in);"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Read a command line entered by user and return it."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @return the command line entered by user."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public String readCommand() {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        return input.nextLine();"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"     * Check if user still enter command line or not."},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"    public boolean stillHaveCommand() {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"        return input.hasNextLine();"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"     * Say Bye"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    public String echoBye() {"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     * Say Hi!"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"    public String echoHi() {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \" Hello! I\u0027m Danh\u0027s Duke\\nWhat can I do for you, Mr Danh?\\n\";"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks in taskList."},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList TaskList related."},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"    public String echoPrintList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"            ans +\u003d String.format(\" %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"            index++;"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of adding a task to taskList."},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"     * @param task      The task added"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"     * @param noOfTasks Number of tasks in taskList after adding."},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"    public String echoAddToList(Task task, int noOfTasks) {"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Got it. I\u0027ve added this task: \\n\" + \" \";"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"        ans +\u003d task.printTask() + \"\\n\" + String.format(\"Now you have %d tasks in the list.\\n\", noOfTasks);"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of marking a Task as done."},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task done."},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"    public String echoMarkTaskDone(Task task) {"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Nice! I\u0027ve marked this task as done: \\n\" + \" \" + task.printTask() + \"\\n\";"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of deleting a Task."},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task deleted."},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"    public String echoDeleteTask(Task task) {"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Noted. I\u0027ve removed this task: \\n\" + \" \" + task.printTask() + \"\\n\";"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"     * Print the error message of a DukeException."},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"     * @param err DukeException object related."},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"    public String echoErrMsg(DukeException err) {"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d err.getMessage();"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks of a specific day."},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime The day that we want to search for."},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"    public String echoTaskThisDay(ArrayList\u003cTask\u003e taskList, LocalDateTime dateTime) {"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Here are the tasks on \" + dateTime.toString().substring(0, 10) + \":\\n\";"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"            if ((task instanceof Deadline \u0026\u0026 sameDay(((Deadline) task).getDlTime(), dateTime))"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"                    || (task instanceof Event \u0026\u0026 sameDay(((Event) task).geteTime(), dateTime))) {"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"                ans +\u003d String.format(\" %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"     * print all the tasks of Today."},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"    public String echoTaskToday(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Here are the tasks today:\\n\";"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"            if ((task instanceof Deadline \u0026\u0026 sameDay(((Deadline) task).getDlTime(), LocalDateTime.now()))"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"                    || (task instanceof Event \u0026\u0026 sameDay(((Event) task).geteTime(), LocalDateTime.now()))) {"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"                ans +\u003d String.format(\" %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks that match the pattern of a find command."},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList related."},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"     * @param pattern  The String pattern given by find command."},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"    public String echoPrintFindResult(ArrayList\u003cTask\u003e taskList, String pattern) {"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"        String ans \u003d \"Here are the matching tasks:\\n\";"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"            if (task.getTaskName().contains(pattern)) {"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"                ans +\u003d String.format(\" %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":"     * Helper function that checks if 2 dateTime refers to the same day or not."},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime1 First dateTime input"},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime2 Second dateTime input"},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean."},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"    public boolean sameDay(LocalDateTime dateTime1, LocalDateTime dateTime2) {"},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"        return ((dateTime1.getDayOfYear() \u003d\u003d dateTime2.getDayOfYear()) \u0026\u0026 (dateTime1.getYear() \u003d\u003d dateTime2.getYear()));"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":178}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Eriksen2411":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"  \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"      \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"      \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"      \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"  \u003c/children\u003e"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Eriksen2411":21}},{"path":"src/test/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[D][ ] Minha\u0027s birthday  (by: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Deadline(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[E][ ] Minha\u0027s birthday  (at: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Event(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[T][ ] 2103T iP\", new ToDo(\"2103T iP\").printTask());"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"todo myjob"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"deadline my another job /by 2021"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"event my test /at Today"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"bye"}],"authorContributionMap":{"Eriksen2411":8}}]
