[{"path":"data/DanhDuke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"[T][X] 123"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"[T][X] 123"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"[D][X] 1234  (by: 2030-02-02 10:00)"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"[T][ ] 456"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"[D][X] abc  (by: 2020-12-24 00:00)"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"[D][ ] 234  (by: 2021-02-02 00:00)"}],"authorContributionMap":{"Eriksen2411":6}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * The Command class represents a command to be done by Danh\u0027s Duke. A command has 2 main components:"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * the command name: commandTitle"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" * the command body: commandContent"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"class Command {"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    public String commandTitle;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    public String commandContent;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a command with the specified name and body"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandTitle   the command name"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandContent the command body"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    public Command(String commandTitle, String commandContent) {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"        this.commandTitle \u003d commandTitle;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"        this.commandContent \u003d commandContent;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":22}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * The Deadline represents a deadline, which is a type of task that Danh\u0027s Duke can take note."},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * Deadline has 2 main components:"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline description: taskName"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * the Deadline due date: dlTime"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime dlTime;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Deadline with specified description (name) and due date."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName the Deadline description"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param dlTime   the Deadline due date"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    public Deadline(String taskName, LocalDateTime dlTime) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        this.dlTime \u003d dlTime;"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Deadline."},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     * @return Deadline expression"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDone) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][X] \" + this.taskName + \" (by: \""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                    + this.dlTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[D][ ] \" + this.taskName + \" (by: \""},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"                    + this.dlTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":43}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Class Duke represents Danh\u0027s Duke, a powerful assistant that can take note of your task everyday and"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * help you control them easily."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" * Duke has 3 main components:"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":" * Ui: deals with interactions with the user"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":" * Storage: deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":" * TaskList: contains the task list e.g., it has operations to add/delete tasks in the list"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"class Duke {"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    private final Ui ui;"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    private final TaskList tasklist;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    private final Storage storage;"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Duke with Ui, Storage, TaskList initialized."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @param txtPathname The pathname of the taskFile stored in hard disk to remember tasks when shut down Duke."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     * @param dirPathname The pathname of the folder that stores taskFile."},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    private Duke(String txtPathname, String dirPathname) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        this.storage \u003d new Storage(txtPathname, dirPathname);"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        this.tasklist \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"     * The main method illustrates full usage of Danh\u0027s Duke before shutting it down"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * @param args by default"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException exception regarding open and access taskFile"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        Duke myDuke \u003d new Duke(\"data/DanhDuke.txt\", \"data\");"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        myDuke.ui.echoHi();"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        myDuke.storage.writeBack(myDuke.tasklist.listUsed);"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        boolean signalToExit \u003d false;"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        while (!signalToExit \u0026\u0026 myDuke.ui.stillHaveCommand()) {"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"            String commandLine \u003d myDuke.ui.readCommand();"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"            Command command \u003d Parser.parse(commandLine, myDuke.tasklist.listUsed);"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"            switch (command.commandTitle) {"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"            case \"list\":"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"                myDuke.ui.echoPrintList(myDuke.tasklist.listUsed);"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"            case \"bye\":"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"                myDuke.ui.echoBye();"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"                signalToExit \u003d true;"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            case \"done\":"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"                markTaskDone(myDuke, Integer.parseInt(command.commandContent));"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"            case \"delete\":"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"                deleteTask(myDuke, Integer.parseInt(command.commandContent));"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"            case \"todo\":"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"            case \"deadline\":"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"            case \"event\":"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"                addToList(myDuke, command.commandContent);"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"            case \"myTaskToday\":"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"                myDuke.ui.echoTaskToday(myDuke.tasklist.listUsed);"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"            case \"myTaskOn\":"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"                myDuke.ui.echoTaskThisDay(myDuke.tasklist.listUsed,"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"                        LocalDateTime.parse(command.commandContent, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"            case \"find\":"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"                myDuke.ui.echoPrintFindResult(myDuke.tasklist.listUsed, command.commandContent);"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"            default:"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"                    executeFalseCommand(command.commandContent);"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"                } catch (DukeException err) {"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"                    myDuke.ui.echoErrMsg(err);"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: add new task to taskList, show results with user and change taskFile content correspondingly."},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke            The duke instance related to this action"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The desciption of the task that we want to add"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"    public static void addToList(Duke duke, String taskDescription) {"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.tasklist.addTask(taskDescription);"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.tasklist.listUsed);"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"        duke.ui.echoAddToList(task, duke.tasklist.listUsed.size());"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: mark a task in taskList as Done, show results with user and"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"    public static void markTaskDone(Duke duke, int index) {"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.tasklist.doneTask(index);"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.tasklist.listUsed);"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"        duke.ui.echoMarkTaskDone(task);"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"     * Perform 3 actions: delete a task in taskList, show results with user and"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     * change taskFile content correspondingly."},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"     * @param duke  The duke instance related to this action"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"     * @param index The index of that task in taskList"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"    public static void deleteTask(Duke duke, int index) {"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d duke.tasklist.listUsed.get(index - 1);"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"        duke.ui.echoDeleteTask(task);"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"        duke.tasklist.deleteTask(index);"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"        duke.storage.updateFile(duke.tasklist.listUsed);"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"     * Tell Duke that this command format is wrong,"},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"     * let it execute the action of throwing an exception to catch and handle."},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"     * @param command The short syntax of the wrong format command"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"     * @throws DukeException Special exception related to wrong format of command entered into Danh\u0027s Duke"},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"    public static void executeFalseCommand(String command) throws DukeException {"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"        if (command.startsWith(\"list\")) {"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     list command should not have body, Sir!\");"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"bye\")) {"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     bye command should not have body, Sir!\");"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"done\")) {"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format or invalid number for done command, Sir!\");"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format or invalid number for delete command, Sir!\");"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"todo\")) {"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body detected for todo command, Sir!\");"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"deadline\")) {"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     no body detected or no dlTime detected for deadline command, Sir!\");"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"event\")) {"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     no body detected or no eTime detected for Event command, Sir!\");"},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskToday\")) {"},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     myTaskToday command should not have body, Sir!\");"},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"        } else if (command.startsWith(\"myTaskOn\")) {"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     No body or wrong body format for myTaskOn command, Sir!\");"},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"            throw new DukeException(\"     Invalid command format\");"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"}"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":""}],"authorContributionMap":{"Eriksen2411":157,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class DukeException represents an exception resulted due to wrong format of command"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * entered into Danh\"s Duke"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":11}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":" * Class Event represents an event that will be taken note by Danh\u0027s Duke"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":" * \u003cp\u003e"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Event has 2 main components:"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * The event name (description): taskName"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" * The time of event: eTime"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    public LocalDateTime eTime;"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an event with specified name and time"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName The event name (description)"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     * @param eTime    The time of event"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    public Event(String taskName, LocalDateTime eTime) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"        this.eTime \u003d eTime;"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of an Event."},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"     * @return Event expression."},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDone) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][X] \" + this.taskName + \" (at: \""},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[E][ ] \" + this.taskName + \" (at: \""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"                    + this.eTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"}"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":""}],"authorContributionMap":{"Eriksen2411":45}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Class Parser is the tool that helps Danh\u0027s Duke understand the command from user."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"class Parser {"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * This method is the main method of Parser, which takes in a command line"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     * ans returns appropriate Command (object)."},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     * @param commandLine The command line aentered by user."},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList    The taskList of the Duke that wants to understand this command line"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * @return the correct command for Duke to execute."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    public static Command parse(String commandLine, ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"        if (commandLine.startsWith(\"list\")) {"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 4) {"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"list\");"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"list\", \"\");"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"bye\")) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 3) {"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"bye\");"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"bye\", \"\");"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"done \")) {"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5 || !isNumeric(commandLine.substring(5))) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Integer.parseInt(commandLine.substring(5)) \u003e taskList.size()) {"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"done\");"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"done\", commandLine.substring(5));"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"delete \")) {"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 7 || !isNumeric(commandLine.substring(7))) {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Integer.parseInt(commandLine.substring(7)) \u003e taskList.size()) {"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"delete\");"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"delete\", commandLine.substring(7));"},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"todo \")) {"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"todo\");"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"todo\", commandLine.substring(5));"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"deadline \")) {"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 9 || !commandLine.contains(\"/by \")) {"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"            } else if (commandLine.indexOf(\"/by \") + 4 \u003d\u003d commandLine.length()) {"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"deadline\");"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/by \") + 4), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"deadline\", commandLine.substring(9));"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"event \")) {"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 6 || !commandLine.contains(\"/at \")) {"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"            } else if (commandLine.indexOf(\"/at \") + 4 \u003d\u003d commandLine.length()) {"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"event\");"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(commandLine.indexOf(\"/at \") + 4), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"event\", commandLine.substring(6));"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskToday\")) {"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() !\u003d 11) {"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"myTaskToday\");"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"myTaskToday\", \"\");"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"myTaskOn \")) {"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 9) {"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"                try {"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"                    LocalDateTime.parse(commandLine.substring(9) + \" 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"                } catch (Exception e) {"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"                    return new Command(\"executeFalseCommand\", \"myTaskOn\");"},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"myTaskOn\", commandLine.substring(9) + \" 00:00\");"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"        } else if (commandLine.startsWith(\"find \")) {"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"            if (commandLine.length() \u003d\u003d 5) {"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"executeFalseCommand\", \"find\");"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"                return new Command(\"find\", commandLine.substring(5));"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"            return new Command(\"executeFalseCommand\", \"\");"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"     * This is helper function to help Parser checks if the index number format given by command line is correct or not."},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"     * @param strNum the String that we want to check contains number or not."},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"     * @return the answer in form of boolean."},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"    public static boolean isNumeric(String strNum) {"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":"        if (strNum \u003d\u003d null) {"},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"            Double.parseDouble(strNum);"},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"        } catch (NumberFormatException nfe) {"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"            return false;"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"        return true;"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":127}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.io.*;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":" * Class Storage helps Danh\u0027s Duke keep the data in .txt file up to date,"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":" * and load it from that file when the Danh\u0027s Duke wakes up."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"class Storage {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    private File taskFile;"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a Storage with specified path of txt file and the folder containing it."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @param txtPathname The pathname of the txt file."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @param dirPathname The pathname of the directory containing txt file."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public Storage(String txtPathname, String dirPathname) {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            Path filePath \u003d Paths.get(txtPathname);"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"            if (Files.exists(filePath)) {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            } else if (Files.exists(Paths.get(dirPathname))) {"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"            } else {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"                Files.createDirectories(Paths.get(dirPathname));"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"                Files.createFile(Paths.get(txtPathname));"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"                this.taskFile \u003d filePath.toFile();"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"     * Load the data written in txt file back to Danh\u0027s Duke memory when it wakes up."},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList of Duke to load data to."},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     * @throws IOException Exception related to open and access txt file."},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"    public void writeBack(ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.taskFile));"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        String line \u003d reader.readLine();"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        while (line !\u003d null) {"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"            switch (line.substring(1, 2)) {"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"            case \"T\":"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new ToDo(line.substring(7)));"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"                    ToDo newToDo \u003d new ToDo(line.substring(7));"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"                    newToDo.markAsDone();"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newToDo);"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"            case \"D\":"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"                int dlIndex \u003d line.indexOf(\"(by: \");"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"                LocalDateTime dlTime \u003d LocalDateTime.parse(line.substring(dlIndex + 5, line.length() - 1), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new Deadline(line.substring(7, dlIndex - 1), dlTime));"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"                    Deadline newDL \u003d new Deadline(line.substring(7, dlIndex - 1), dlTime);"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"                    newDL.markAsDone();"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newDL);"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"                break;"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"            default:"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"                int etIndex \u003d line.indexOf(\"(at: \");"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"                LocalDateTime eventTime \u003d LocalDateTime.parse(line.substring(etIndex + 5, line.length() - 1), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":"                if (line.charAt(4) \u003d\u003d \u0027 \u0027) {"},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(new Deadline(line.substring(7, etIndex - 1), eventTime));"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"                } else {"},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"                    Deadline newDL \u003d new Deadline(line.substring(7, etIndex - 1), eventTime);"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"                    newDL.markAsDone();"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"                    taskList.add(newDL);"},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"            line \u003d reader.readLine();"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        reader.close();"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":"     * Update the taask file (txt file) correspondingly when there are changes to taskList."},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList the TaskList that have been changed."},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"    public void updateFile(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"            FileWriter fw \u003d new FileWriter(this.taskFile);"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"            String toWrite \u003d \"\";"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"            for (Task task : taskList) {"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"                toWrite +\u003d task.printTask() + \"\\n\";"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"            fw.write(toWrite);"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":"            fw.close();"},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"        } catch (IOException ie) {"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"            System.out.println(\"Something went wrong\" + ie.getMessage());"},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":110}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class Task represents a task that can be taken note by Danh\u0027s Duke."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * Task has 3 types: ToDo, Deadline, Event."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"    public String taskName;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    public boolean taskDone;"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * return a Task with specified taskName, this task is not done yet."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName The name of the Task."},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    public Task(String taskName) {"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"        this.taskDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a Task."},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     * @return Task expression."},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDone) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[X] \" + this.taskName;"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[ ] \" + this.taskName;"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"     * Mark a task as (Done)."},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"    public void markAsDone() {"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        this.taskDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":42}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Class TaskList represents a taskList and provides operations to interact with that taskList."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * Operations provided: addTask, doneTask, deleteTask."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"class TaskList {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public ArrayList\u003cTask\u003e listUsed;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a TaskList."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Add a task with specified description to TaskList."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskDescription The description of task."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     * @return The task that have been added."},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"    public Task addTask(String taskDescription) {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"        Task task;"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDescription.contains(\"/at\")) {"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/at\"));"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/at\") + 4);"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime eventTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Event(taskName, eventTime);"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"        } else if (taskDescription.contains(\"/by\")) {"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"            String taskName \u003d taskDescription.substring(0, taskDescription.indexOf(\"/by\"));"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"            String dateTime \u003d taskDescription.substring(taskDescription.indexOf(\"/by\") + 4);"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"            LocalDateTime dlTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new Deadline(taskName, dlTime);"},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"            task \u003d new ToDo(taskDescription);"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.add(task);"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":"     * Mark a task in TaskList as (Done)."},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the done task in TaskList."},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     * @return the Task that marked as (Done)."},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"    public Task doneTask(int index) {"},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"        Task task \u003d this.listUsed.get(index - 1);"},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"        task.markAsDone();"},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"        return task;"},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"     * Delete a task from TaskList."},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"     * @param index Index of the deleted task in TaskList."},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"    public void deleteTask(int index) {"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"        this.listUsed.remove(index - 1);"},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":67}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":" * Class ToDo represents a thing to do in the taskList that Duke can taken note."},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":" * ToDo object only has it name specified without date and time."},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDo extends Task {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a todo with the specified name (description)."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskName name (description) of todo."},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"    public ToDo(String taskName) {"},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"        super(taskName);"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"     * Returns a String, which is the expression of a todo."},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":"     * @return todo expression."},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"    public String printTask() {"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"        String ans;"},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"        if (taskDone) {"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][X] \" + this.taskName;"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"            ans \u003d \"[T][ ] \" + this.taskName;"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"        return ans;"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":33}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":" * Class Ui helps Danh\u0027s Duke interact with user by calling suitable method."},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":" * Ui has 2 main functions: read input and return output with print."},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"class Ui {"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    private final Scanner input;"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"     * Returns an Ui with integrated Scanner."},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Eriksen2411"},"content":"    public Ui() {"},{"lineNumber":19,"author":{"gitId":"Eriksen2411"},"content":"        this.input \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":22,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Eriksen2411"},"content":"     * Read a command line entered by user and return it."},{"lineNumber":24,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Eriksen2411"},"content":"     * @return the command line entered by user."},{"lineNumber":26,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Eriksen2411"},"content":"    public String readCommand() {"},{"lineNumber":28,"author":{"gitId":"Eriksen2411"},"content":"        return input.nextLine();"},{"lineNumber":29,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":31,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Eriksen2411"},"content":"     * Check if user still enter command line or not."},{"lineNumber":33,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean"},{"lineNumber":35,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Eriksen2411"},"content":"    public boolean stillHaveCommand() {"},{"lineNumber":37,"author":{"gitId":"Eriksen2411"},"content":"        return input.hasNextLine();"},{"lineNumber":38,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":40,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Eriksen2411"},"content":"     * Say Bye"},{"lineNumber":42,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Eriksen2411"},"content":"    public void echoBye() {"},{"lineNumber":44,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":45,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Bye. Hope to see you again soon!\");"},{"lineNumber":46,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":47,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":49,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Eriksen2411"},"content":"     * Say Hi!"},{"lineNumber":51,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Eriksen2411"},"content":"    public void echoHi() {"},{"lineNumber":53,"author":{"gitId":"Eriksen2411"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":54,"author":{"gitId":"Eriksen2411"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":55,"author":{"gitId":"Eriksen2411"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":56,"author":{"gitId":"Eriksen2411"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":57,"author":{"gitId":"Eriksen2411"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":58,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":59,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(logo);"},{"lineNumber":60,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"Hello! I\u0027m Danh\u0027s Duke\\nWhat can I do for you, Mr Danh?\");"},{"lineNumber":61,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":62,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":64,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks in taskList."},{"lineNumber":66,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList TaskList related."},{"lineNumber":68,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Eriksen2411"},"content":"    public void echoPrintList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":70,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":71,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":72,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Here are the tasks in your list:\");"},{"lineNumber":73,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":74,"author":{"gitId":"Eriksen2411"},"content":"            System.out.format(\"     %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":75,"author":{"gitId":"Eriksen2411"},"content":"            index++;"},{"lineNumber":76,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":78,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":80,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of adding a task to taskList."},{"lineNumber":82,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Eriksen2411"},"content":"     * @param task      The task added"},{"lineNumber":84,"author":{"gitId":"Eriksen2411"},"content":"     * @param noOfTasks Number of tasks in taskList after adding."},{"lineNumber":85,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Eriksen2411"},"content":"    public void echoAddToList(Task task, int noOfTasks) {"},{"lineNumber":87,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":88,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task: \");"},{"lineNumber":89,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"       \" + task.printTask());"},{"lineNumber":90,"author":{"gitId":"Eriksen2411"},"content":"        System.out.format(\"     Now you have %d tasks in the list.\\n\", noOfTasks);"},{"lineNumber":91,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":92,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":94,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of marking a Task as done."},{"lineNumber":96,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task done."},{"lineNumber":98,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Eriksen2411"},"content":"    public void echoMarkTaskDone(Task task) {"},{"lineNumber":100,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":101,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Nice! I\u0027ve marked this task as done: \");"},{"lineNumber":102,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"       \" + task.printTask());"},{"lineNumber":103,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":104,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":106,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"Eriksen2411"},"content":"     * Print the results of deleting a Task."},{"lineNumber":108,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"Eriksen2411"},"content":"     * @param task Task deleted."},{"lineNumber":110,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"Eriksen2411"},"content":"    public void echoDeleteTask(Task task) {"},{"lineNumber":112,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":113,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Noted. I\u0027ve removed this task: \");"},{"lineNumber":114,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"       \" + task.printTask());"},{"lineNumber":115,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":116,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":118,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Eriksen2411"},"content":"     * Print the error message of a DukeException."},{"lineNumber":120,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Eriksen2411"},"content":"     * @param err DukeException object related."},{"lineNumber":122,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Eriksen2411"},"content":"    public void echoErrMsg(DukeException err) {"},{"lineNumber":124,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\" + err.getMessage() +"},{"lineNumber":125,"author":{"gitId":"Eriksen2411"},"content":"                \"\\n\" + \"    ____________________________________________________________\\n\");"},{"lineNumber":126,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":128,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks of a specific day."},{"lineNumber":130,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":132,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime The day that we want to search for."},{"lineNumber":133,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"Eriksen2411"},"content":"    public void echoTaskThisDay(ArrayList\u003cTask\u003e taskList, LocalDateTime dateTime) {"},{"lineNumber":135,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":136,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Here are the tasks on \" + dateTime.toString().substring(0, 10) + \":\");"},{"lineNumber":137,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":138,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":139,"author":{"gitId":"Eriksen2411"},"content":"            if ((task instanceof Deadline \u0026\u0026 sameDay(((Deadline) task).dlTime, dateTime))"},{"lineNumber":140,"author":{"gitId":"Eriksen2411"},"content":"                    || (task instanceof Event \u0026\u0026 sameDay(((Event) task).eTime, dateTime))) {"},{"lineNumber":141,"author":{"gitId":"Eriksen2411"},"content":"                System.out.format(\"     %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":142,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":143,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":146,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":148,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"Eriksen2411"},"content":"     * print all the tasks of Today."},{"lineNumber":150,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The tasklist related."},{"lineNumber":152,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"Eriksen2411"},"content":"    public void echoTaskToday(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":154,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":155,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Here are the tasks today:\");"},{"lineNumber":156,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":157,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":158,"author":{"gitId":"Eriksen2411"},"content":"            if ((task instanceof Deadline \u0026\u0026 sameDay(((Deadline) task).dlTime, LocalDateTime.now()))"},{"lineNumber":159,"author":{"gitId":"Eriksen2411"},"content":"                    || (task instanceof Event \u0026\u0026 sameDay(((Event) task).eTime, LocalDateTime.now()))) {"},{"lineNumber":160,"author":{"gitId":"Eriksen2411"},"content":"                System.out.format(\"     %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":161,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":162,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":163,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":165,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":167,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Eriksen2411"},"content":"     * Print all the tasks that match the pattern of a find command."},{"lineNumber":169,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"Eriksen2411"},"content":"     * @param taskList The taskList related."},{"lineNumber":171,"author":{"gitId":"Eriksen2411"},"content":"     * @param pattern The String pattern given by find command."},{"lineNumber":172,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"Eriksen2411"},"content":"    public void echoPrintFindResult(ArrayList\u003cTask\u003e taskList, String pattern) {"},{"lineNumber":174,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\");"},{"lineNumber":175,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"     Here are the matching tasks:\");"},{"lineNumber":176,"author":{"gitId":"Eriksen2411"},"content":"        int index \u003d 1;"},{"lineNumber":177,"author":{"gitId":"Eriksen2411"},"content":"        for (Task task : taskList) {"},{"lineNumber":178,"author":{"gitId":"Eriksen2411"},"content":"            if (task.taskName.contains(pattern)) {"},{"lineNumber":179,"author":{"gitId":"Eriksen2411"},"content":"                System.out.format(\"     %d. \" + task.printTask() + \"\\n\", index);"},{"lineNumber":180,"author":{"gitId":"Eriksen2411"},"content":"                index++;"},{"lineNumber":181,"author":{"gitId":"Eriksen2411"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"Eriksen2411"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"Eriksen2411"},"content":"        System.out.println(\"    ____________________________________________________________\\n\");"},{"lineNumber":184,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":186,"author":{"gitId":"Eriksen2411"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"Eriksen2411"},"content":"     * Helper function that checks if 2 dateTime refers to the same day or not."},{"lineNumber":188,"author":{"gitId":"Eriksen2411"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime1 First dateTime input"},{"lineNumber":190,"author":{"gitId":"Eriksen2411"},"content":"     * @param dateTime2 Second dateTime input"},{"lineNumber":191,"author":{"gitId":"Eriksen2411"},"content":"     * @return answer in form of boolean."},{"lineNumber":192,"author":{"gitId":"Eriksen2411"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"Eriksen2411"},"content":"    public boolean sameDay(LocalDateTime dateTime1, LocalDateTime dateTime2) {"},{"lineNumber":194,"author":{"gitId":"Eriksen2411"},"content":"        return ((dateTime1.getDayOfYear() \u003d\u003d dateTime2.getDayOfYear()) \u0026\u0026 (dateTime1.getYear() \u003d\u003d dateTime2.getYear()));"},{"lineNumber":195,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":196}},{"path":"src/test/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[D][ ] Minha\u0027s birthday  (by: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Deadline(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"class EventTest {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":14,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[E][ ] Minha\u0027s birthday  (at: 2021-02-02 00:00)\","},{"lineNumber":15,"author":{"gitId":"Eriksen2411"},"content":"                new Event(\"Minha\u0027s birthday \", LocalDateTime.parse(\"2021-02-02 00:00\", DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"))).printTask());"},{"lineNumber":16,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":17}},{"path":"src/test/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":""},{"lineNumber":9,"author":{"gitId":"Eriksen2411"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Eriksen2411"},"content":"    public void testPrintTask() {"},{"lineNumber":11,"author":{"gitId":"Eriksen2411"},"content":"        assertEquals(\"[T][ ] 2103T iP\", new ToDo(\"2103T iP\").printTask());"},{"lineNumber":12,"author":{"gitId":"Eriksen2411"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Eriksen2411"},"content":"}"}],"authorContributionMap":{"Eriksen2411":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Eriksen2411"},"content":"todo myjob"},{"lineNumber":2,"author":{"gitId":"Eriksen2411"},"content":"deadline my another job /by 2021"},{"lineNumber":3,"author":{"gitId":"Eriksen2411"},"content":"event my test /at Today"},{"lineNumber":4,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":5,"author":{"gitId":"Eriksen2411"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"Eriksen2411"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Eriksen2411"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Eriksen2411"},"content":"bye"}],"authorContributionMap":{"Eriksen2411":8}}]
