[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"IceBear789":16}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"done"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"exit $ret"}],"authorContributionMap":{"IceBear789":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"\u0027"}],"authorContributionMap":{"IceBear789":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"\u0027"}],"authorContributionMap":{"IceBear789":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"done"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"exit $ret"}],"authorContributionMap":{"IceBear789":11}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents a deadline task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate date;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new deadline task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param deadline The date in which the deadline is due"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, LocalDate deadline) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d deadline;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a deadline task object. It accepts one extra argument"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the deadline is already done"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param deadline The date in which the deadline is due"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, boolean isDone, LocalDate deadline) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d deadline;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date in which the deadline is due."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return the date in which the deadline is due"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    public String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.date);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the deadline in a special format."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the deadline, such as the type, whether it is done and its due date."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"            return \"[D][X] \" + this.taskName + \" (by: \" + Task.printDate(date) + \")\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            return \"[D][ ] \" + this.taskName + \" (by: \" + Task.printDate(date) + \")\";"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":56}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * The main driver class for Duke. The tasklist contains the task list. The Ui deals"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" * with interactions with the user. The parser deals with making sense of the user"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" * commands."},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"class Duke {"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    private TaskList taskList;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    private Parser parser;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * Constructor for our Dukebot. The Dukebot will always start by first greeting the user"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * whenever it is instantiated."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public Duke() {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Hello! I\u0027m Icebear\");"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     * The main method of our program. The program terminates with the \"bye\" command."},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     * @param args"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     * @throws Exception"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    public static void main(String[] args) throws Exception {"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        Duke iceBear \u003d new Duke();"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        while (true) {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            String nextCommand \u003d scan.nextLine();"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            if (nextCommand.equals(\"bye\")) {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"                break;"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"                try {"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"                    String[] processedText \u003d iceBear.parser.processCommand(nextCommand);"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"                    iceBear.process(processedText);"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"                } catch (DukeException exception) {"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"                    System.out.println(exception);"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    public String[] processCommand(String input) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        return this.parser.processCommand(input);"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    public String process(String[] processedInput) {"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        return this.ui.processCommand(processedInput, this.taskList);"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"    public String getResponse(String input) {"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        Duke iceBear \u003d new Duke();"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"            String[] processedText \u003d iceBear.processCommand(input);"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"            return iceBear.process(processedText);"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException exception) {"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"            return exception.toString();"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"IceBear789":70,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * Customised exception for Dukebot."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    private final String errorMessage;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     * The constructor takes in an argument which corresponds to the message to be displayed"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * when an exception is created."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param error the error that causes the exception"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    public DukeException(String error) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        this.errorMessage \u003d error;"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     * When printed, the exception will return the error message."},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @return the error message."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        return this.errorMessage;"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":28}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents an event Task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate date;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new event task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param date The date of the event"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, LocalDate date) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d date;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create an event task object. It accepts one extra argument"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the event is already done"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param date The date of the event"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, boolean isDone, LocalDate date) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d date;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date in which the event is due."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return the date of the event"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    protected String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.date);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the event in a special format."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the event, such as the type, whether it is done and its date."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"            return \"[E][X] \" + this.taskName + \" (at: \" + Task.printDate(date) + \")\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            return \"[E][ ] \" + this.taskName + \" (at: \" + Task.printDate(date) + \")\";"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":56}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    private Button sendButton;"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/iceBear.png\"));"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/iceBear.png\"));"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        duke \u003d d;"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"    private void handleUserInput() {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        );"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        userInput.clear();"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"    private String getResponse(String input) {"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"        Duke iceBear \u003d new Duke();"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"            String[] processedText \u003d iceBear.processCommand(input);"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            return iceBear.process(processedText);"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException exception) {"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            return exception.toString();"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":58}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * The class that deals with making sense of the user command"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * The main method that reads the input from the user."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param input the input from the user"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @return a String[] data type that the other methods can process"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * @throws DukeException together with the error message"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public String[] processCommand (String input) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        String command \u003d input.split(\" \")[0];"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        if (command.equals(\"list\")) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"            return this.processList(input);"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"done\")) {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"            return this.processDone(input);"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"delete\")) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            return this.processDelete(input);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"todo\")) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            return this.processToDo(input);"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"deadline\")) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            return this.processDeadLine(input);"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"event\")) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            return this.processEvent(input);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"find\")) {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            return this.processFind(input);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid command\");"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"    private String[] processList(String input) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[1];"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003e 1) {"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"list\";"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    private String[] processDone(String input) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index is missing\");"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length \u003e 2) {"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(processedInput[1]);"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"done\";"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d String.valueOf(index);"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index must be an integer\");"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"    private String[] processDelete(String input) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index is missing\");"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length \u003e 2) {"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(processedInput[1]);"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"delete\";"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d String.valueOf(index);"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index must be an integer\");"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"    private String[] processToDo(String input) throws DukeException {"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 4) {"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of todo cannot be empty\");"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        } else if (input.charAt(4) !\u003d \u0027 \u0027) {"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of todo\");"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"        String processedInput \u003d input.substring(5);"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"        result[0] \u003d \"todo\";"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        result[1] \u003d processedInput;"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"    private String[] processDeadLine(String input) throws DukeException {"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[3];"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.substring(9).split(\"/by\");"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 0) {"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of deadline cannot be empty\");"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length !\u003d 2) {"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of deadline\");"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"            LocalDate date \u003d LocalDate.parse(processedInput[1].substring(1));"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"deadline\";"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput[0];"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"            result[2] \u003d processedInput[1].substring(1);"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid date\");"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"    private String[] processEvent(String input) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[3];"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.substring(6).split(\"/at\");"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 0) {"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of event cannot be empty\");"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length !\u003d 2) {"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of event\");"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"            LocalDate date \u003d LocalDate.parse(processedInput[1].substring(1));"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"event\";"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput[0];"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"            result[2] \u003d processedInput[1].substring(1);"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid date\");"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"    private String[] processFind(String input) throws DukeException {"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 5) {"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, no keyword found\");"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"            String processedInput \u003d input.substring(5);"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"find\";"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput;"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":147}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" * The class that deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"class Storage {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * Creates a new text file so that the list of tasks can be saved on the hard disk."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public static void createFile() throws java.io.IOException {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        File textFile \u003d new File(\"./data/duke.txt\");"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        new File(\"./data\").mkdirs();"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        textFile.delete();"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        textFile.createNewFile();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * Updates the text file whenever the task list changes."},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param taskList the corresponding task list in which the text file is based on"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public static void update(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        File textFile \u003d new File(\"./data/duke.txt\");"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            createFile();"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            FileWriter fileWriter \u003d new FileWriter(textFile);"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            for (Task t : taskList) {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"T | \");"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"D | \");"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"E | \");"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"                if (t.isComplete()) {"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"1 | \" + t.taskName);"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"                } else {"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"0 | \" + t.taskName);"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof Deadline) {"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\" | \" + ((Deadline) t).getDate());"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof Event) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\" | \" + ((Event) t).getDate());"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"                fileWriter.write(\"\\n\");"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            fileWriter.close();"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException exception) {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            System.out.println(exception);"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"     * Method to read an existing text file and convert it into a corresponding task list within"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"     * the Dukebot."},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"     * @param file the text file in which the task list is created from"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"     * @param taskList the corresponding task list to copy the text file over"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"     * @throws IOException whenever an issue with reading the file arises"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"    public static void convert(File file, ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        Scanner scan \u003d new Scanner(file);"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        while (scan.hasNext()) {"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"            String[] parsed \u003d splitter(scan.nextLine());"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"            String type \u003d parsed[0];"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"            boolean isDone \u003d parsed[1].equals(\"1\");"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"            String taskName;"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"                taskName \u003d parsed[2].substring(1);"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"                taskList.add(new ToDo(taskName, isDone));"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"                taskName \u003d parsed[2].substring(1);"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"                LocalDate date \u003d dateConverter(parsed[3].substring(1));"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"                if (type.equals(\"D\")) {"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"                    taskList.add(new Deadline(taskName, isDone, date));"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"                } else if (type.equals(\"E\")) {"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"                    taskList.add(new Event(taskName, isDone, date));"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        scan.close();"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"    private static String[] splitter(String input) {"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[4];"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        int counter \u003d 0;"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        result[0] \u003d \"\";"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c input.length(); i++) {"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"            if (input.charAt(i) \u003d\u003d \u0027|\u0027) {"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"                counter++;"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"                result[counter] \u003d \"\";"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"            } else if (input.charAt(i) !\u003d \u0027 \u0027 || counter \u003e\u003d 2) {"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"                result[counter] +\u003d input.charAt(i);"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"    private static LocalDate dateConverter(String date) {"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"        String month \u003d date.substring(0, 3);"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"        String day \u003d date.split(\" \")[1];"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"        String year \u003d date.split(\" \")[2];"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"        String numericalMonth \u003d \" \";"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"        if (month.equals(\"Jan\")) {"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"01\";"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Feb\")) {"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"02\";"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Mar\")) {"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"03\";"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Apr\")) {"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"04\";"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"May\")) {"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"05\";"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Jun\")) {"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"06\";"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Jul\")) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"07\";"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Aug\")) {"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"08\";"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Sep\")) {"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"09\";"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Oct\")) {"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"10\";"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Nov\")) {"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"11\";"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Dec\")) {"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"12\";"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        return LocalDate.parse(year + \"-\" + numericalMonth + \"-\" + day);"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":139}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * The class in which Deadline, Event and ToDo inherits from."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * It contains several common methods shared by all subclasses."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    public final String taskName;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    public boolean isDone;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName, boolean isDone) {"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    public void completeTask() {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    public String getTaskName() {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        return this.taskName;"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     * Takes in a LocalDate object and returns the date of the object in a special format."},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"     * @param date the LocalDate object to print the date of."},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * @return the string representation of the date of the object in the special format."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"    public static String printDate(LocalDate date) {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        String month \u003d date.getMonth().toString().substring(0, 3);"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        String[] splitDate \u003d date.toString().split(\"-\");"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        String year \u003d splitDate[0];"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        String day \u003d splitDate[2];"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        return month.substring(0, 1) + month.substring(1, 3).toLowerCase()"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"                + \" \" + day + \" \" + year;"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    public boolean isComplete() {"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"        return this.isDone;"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":48}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" * The class that contains the task list. It has operations to add/delete"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":" * tasks in the list."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"class TaskList {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * If there is no existing data on the local hard disk, Dukebot will startup with an"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * empty task list. If there is an existing text file, then Dukebok will copy over the"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * text file into the task list."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        File file \u003d new File(\"./data/duke.txt\");"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            if (file.exists()) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"                Storage.convert(file, this.taskList);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException exception) {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            System.out.println(exception);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     * Iterates over the task list and prints out all the tasks."},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public String listTask() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"Here are the tasks in your list:\";"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            Task currTask \u003d taskList.get(i);"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"\\n\";"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            result +\u003d i + 1 + \".\" + currTask;"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * Set the task at the particular index as done."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"     * @param index the index of the task which is completed"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     * @throws DukeException is thrown when the index given is invalid"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    protected String doneTask(int index) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003e\u003d index) {"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            Task currTask \u003d this.taskList.get(index - 1);"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            currTask.completeTask();"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"  \" + currTask;"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"Task not found\";"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"     * Deletes the task at the particular index."},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"     * @param index the index of the task to be deleted"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"    public String delete(int index) {"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"        int deleteIndex \u003d index;"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003e\u003d deleteIndex) {"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"Noted. I\u0027ve removed this task:\\n\";"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"  \" + this.taskList.remove(deleteIndex - 1);"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            result +\u003d this;"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"            result +\u003d \"Task not found\";"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"     * Adds a new todo task to the task list."},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the todo task"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"    public String addToDo(String taskName) {"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":"        ToDo newTask \u003d new ToDo(taskName);"},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"  \" + newTask + \"\\n\";"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        result +\u003d this;"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"     * Adds a new event task to the task list."},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the event task"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"     * @param date the date in which the event takes place"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"    public String addEvent(String taskName, LocalDate date) {"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"        Event newTask \u003d new Event(taskName, date);"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"  \" + newTask + \"\\n\";"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"        result +\u003d this;"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"     * Adds a new deadline task to the task list."},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the deadline task"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"     * @param date the date in which the deadline is due"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"    public String addDeadline(String taskName, LocalDate date) {"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"        Deadline newTask \u003d new Deadline(taskName, date);"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        result +\u003d \"  \" + newTask + \"\\n\";"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"        result +\u003d this;"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"    public String find(String keyWord) {"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"        String result \u003d \"\";"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        for (Task t : taskList) {"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"            if (t.getTaskName().toString().contains(keyWord)) {"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"                if (isFirst) {"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"                    isFirst \u003d false;"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"                } else {"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"                    result +\u003d \"\\n\";"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"                result +\u003d t;"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":148,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":150,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"IceBear789"},"content":"     * Displays the number of tasks in the list in a special format."},{"lineNumber":152,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"IceBear789"},"content":"     * @return a string that shows the number of tasks in the list"},{"lineNumber":154,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":155,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":157,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003d\u003d 1) {"},{"lineNumber":158,"author":{"gitId":"IceBear789"},"content":"            return \"Now you have \" + this.taskList.size() + \" task in the list\";"},{"lineNumber":159,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":160,"author":{"gitId":"IceBear789"},"content":"            return \"Now you have \" + this.taskList.size() + \" tasks in the list\";"},{"lineNumber":161,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":163}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * This class represents a todo task."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"     * Creates a new todo task object."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the todo task"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a todo task object. It accepts one extra argument"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the task."},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the task is already done."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the task in a special format."},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the task, such as the type, whether it is done and its date."},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"            return \"[T][X] \" + this.taskName;"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            return \"[T][ ] \" + this.taskName;"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":41}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * Class that deals with interactions with the user."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Ui {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     * This method will process the command and call other methods"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     * @param input the processed data input"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskList the taskList which stores the task"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    protected String processCommand(String[] input, TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"            if (input[0].equals(\"list\")) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"                return taskList.listTask();"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"done\")) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"                return taskList.doneTask(Integer.valueOf(input[1]));"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"delete\")) {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"                return taskList.delete(Integer.valueOf(input[1]));"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"todo\")) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"                return taskList.addToDo(input[1]);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"deadline\")) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"                return taskList.addDeadline(input[1], LocalDate.parse(input[2]));"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"event\")) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"                return taskList.addEvent(input[1], LocalDate.parse(input[2]));"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"find\")) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"                return taskList.find(input[1]);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            System.out.println(dukeException);"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        return null;"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":37}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"IceBear789":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.59\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"IceBear789":19}},{"path":"src/test/java/main/javatest/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.javatest;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import duke.Parser;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    public void parserEvent() {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        String[] actual \u003d {\"event\", \"Dinner\", \"2019-12-11\"};"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            assertEquals(actual[0], parser.processCommand(\"event Dinner /at 2019-12-11\")[0]);"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"            System.out.println(e);"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    public void parserDeadline() {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.processCommand(\"deadline Dinner 2019-12-11\"));"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid description of deadline\").toString(),e.toString());"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public void parserToDo() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.processCommand(\"todo\"));"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid input, description \""},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                    + \"of todo cannot be empty\").toString(), e.toString());"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":44}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"bye"}],"authorContributionMap":{"IceBear789":13}}]
