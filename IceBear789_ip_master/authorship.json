[{"path":"src/main/java/main/java/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents a deadline task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate date;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new deadline task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param deadline The date in which the deadline is due"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, LocalDate deadline) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d deadline;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a deadline task object. It accepts one extra argument"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the deadline is already done"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param deadline The date in which the deadline is due"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, boolean isDone, LocalDate deadline) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d deadline;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date in which the deadline is due."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return the date in which the deadline is due"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    public String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.date);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the deadline in a special format."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the deadline, such as the type, whether it is done and its due date."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"            return \"[D][X] \" + this.taskName + \" (by: \" + Task.printDate(date) + \")\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            return \"[D][ ] \" + this.taskName + \" (by: \" + Task.printDate(date) + \")\";"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":56}},{"path":"src/main/java/main/java/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":" * The main driver class for Duke. The tasklist contains the task list. The Ui deals"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":" * with interactions with the user. The parser deals with making sense of the user"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":" * commands."},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    private TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    private Parser parser;"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    private Ui ui;"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     * The main method of our program. The program terminates with the \"bye\" command."},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param args"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @throws Exception"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public static void main(String[] args) throws Exception {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        Duke iceBear \u003d new Duke();"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"        while (true) {"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            String nextCommand \u003d scan.nextLine();"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            if (nextCommand.equals(\"bye\")) {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"                   try {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"                       String[] processedText \u003d iceBear.parser.processCommand(nextCommand);"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"                       iceBear.process(processedText);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                   } catch (DukeException exception) {"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"                       System.out.println(exception);"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"                   }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     * Constructor for our Dukebot. The Dukebot will always start by first greeting the user"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"     * whenever it is instantiated."},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"    public Duke() {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Hello! I\u0027m Icebear\");"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"    private void process(String[] processedInput) {"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"        this.ui.processCommand(processedInput, this.taskList);"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"IceBear789":61,"-":2}},{"path":"src/main/java/main/java/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * Customised exception for Dukebot."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    private final String errorMessage;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     * The constructor takes in an argument which corresponds to the message to be displayed"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * when an exception is created."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param error the error that causes the exception"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    public DukeException(String error) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        this.errorMessage \u003d error;"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     * When printed, the exception will return the error message."},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @return the error that causes the exception"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        return this.errorMessage;"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":28}},{"path":"src/main/java/main/java/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents an event Task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate date;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new event task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param date The date of the event"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, LocalDate date) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d date;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create an event task object. It accepts one extra argument"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the event is already done"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param date The date of the event"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, boolean isDone, LocalDate date) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.date \u003d date;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date in which the event is due."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return the date of the event"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    protected String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.date);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the event in a special format."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the event, such as the type, whether it is done and its date."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"            return \"[E][X] \" + this.taskName + \" (at: \" + Task.printDate(date) + \")\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            return \"[E][ ] \" + this.taskName + \" (at: \" + Task.printDate(date) + \")\";"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":56}},{"path":"src/main/java/main/java/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.text.ParseException;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" * The class that deals with making sense of the user command"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"public class Parser{"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * The main method that reads the input from the user."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * @param input the input from the user"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * @return a String[] data type that the other methods can process"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * @throws DukeException together with the error message"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public String[] processCommand (String input) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        String command \u003d input.split(\" \")[0];"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        if (command.equals(\"list\")) {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"            return this.processList(input);"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"done\")) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            return this.processDone(input);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"delete\")) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            return this.processDelete(input);"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            return this.processToDo(input);"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"deadline\")) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            return this.processDeadLine(input);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"event\")) {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            return this.processEvent(input);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        } else if (command.equals(\"find\")) {"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            return this.processFind(input);"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid command\");"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    private String[] processList(String input) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[1];"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003e 1) {"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"list\";"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    private String[] processDone(String input) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index is missing\");"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length \u003e 2) {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(processedInput[1]);"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"done\";"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d String.valueOf(index);"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index must be an integer\");"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"    private String[] processDelete(String input) throws DukeException {"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.split(\" \");"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index is missing\");"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length \u003e 2) {"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input\");"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(processedInput[1]);"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"delete\";"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d String.valueOf(index);"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, index must be an integer\");"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"    private String[] processToDo(String input) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        String processedInput \u003d input.substring(5);"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 4) {"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of todo cannot be empty\");"},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"        } else if (input.charAt(4) !\u003d \u0027 \u0027) {"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of todo\");"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        result[0] \u003d \"todo\";"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"        result[1] \u003d processedInput;"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"    private String[] processDeadLine(String input) throws DukeException {"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[3];"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.substring(9).split(\"/by\");"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 0) {"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of deadline cannot be empty\");"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length !\u003d 2) {"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of deadline\");"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"            LocalDate date \u003d LocalDate.parse(processedInput[1].substring(1));"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"deadline\";"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput[0];"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"            result[2] \u003d processedInput[1].substring(1);"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid date\");"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"    private String[] processEvent(String input) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[3];"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"        String[] processedInput \u003d input.substring(6).split(\"/at\");"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        if (processedInput.length \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, description of event cannot be empty\");"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        } else if (processedInput.length !\u003d 2) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid description of event\");"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"            LocalDate date \u003d LocalDate.parse(processedInput[1].substring(1));"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"event\";"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput[0];"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"            result[2] \u003d processedInput[1].substring(1);"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid date\");"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"    private String[] processFind(String input) throws DukeException {"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 5) {"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid input, no keyword found\");"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"            String processedInput \u003d input.substring(5);"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"            result[0] \u003d \"find\";"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":"            result[1] \u003d processedInput;"},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"            return result;"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":149}},{"path":"src/main/java/main/java/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" * The class that deals with loading tasks from the file and saving tasks in the file."},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"class Storage {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * Creates a new text file so that the list of tasks can be saved on the hard disk."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public static void createFile() throws java.io.IOException  {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        new File(\"./data\").mkdirs();"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        File textFile \u003d new File(\"./data/duke.txt\");"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        textFile.delete();"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        textFile.createNewFile();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * Updates the text file whenever the task list changes."},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param taskList the corresponding task list in which the text file is based on"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public static void update(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        File textFile \u003d new File(\"./data/duke.txt\");"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            createFile();"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            FileWriter fileWriter \u003d new FileWriter(textFile);"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            for (Task t : taskList) {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"T | \");"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"D | \");"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"                } else if (t instanceof Event) {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"E | \");"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"                if (t.isComplete()) {"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"1 | \" + t.taskName);"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"                } else {"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\"0 | \" + t.taskName);"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof Deadline) {"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\" | \" + ((Deadline) t).getDate());"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"                if (t instanceof Event) {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"                    fileWriter.write(\" | \" + ((Event) t).getDate());"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"                fileWriter.write(\"\\n\");"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            fileWriter.close();"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException exception) {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            System.out.println(exception);"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"     * Method to read an existing text file and convert it into a corresponding task list within"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"     * the Dukebot."},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"     * @param file the text file in which the task list is created from"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"     * @param taskList the corresponding task list to copy the text file over"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"     * @throws IOException"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"    public static void convert(File file, ArrayList\u003cTask\u003e taskList) throws IOException{"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        Scanner scan \u003d new Scanner(file);"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        while (scan.hasNext()) {"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"            String[] parsed \u003d splitter(scan.nextLine());"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"            String type \u003d parsed[0];"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"            boolean isDone \u003d parsed[1].equals(\"1\");"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"            String taskName;"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            if (type.equals(\"T\")) {"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"                taskName \u003d parsed[2].substring(1);"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"                taskList.add(new ToDo(taskName, isDone));"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"                taskName \u003d parsed[2].substring(1);"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"                LocalDate date \u003d dateConverter(parsed[3].substring(1));"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"                if (type.equals(\"D\")) {"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"                    taskList.add(new Deadline(taskName, isDone, date));"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"                } else if (type.equals(\"E\")) {"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"                    taskList.add(new Event(taskName, isDone, date));"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        scan.close();"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"    private static String[] splitter(String input) {"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"        String[] result \u003d new String[4];"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        int counter \u003d 0;"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        result[0] \u003d \"\";"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c input.length(); i++) {"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"            if (input.charAt(i) \u003d\u003d \u0027|\u0027) {"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"                counter++;"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"                result[counter] \u003d \"\";"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"            } else if (input.charAt(i) !\u003d \u0027 \u0027 || counter \u003e\u003d 2) {"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"                result[counter] +\u003d input.charAt(i);"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"        return result;"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"    private static LocalDate dateConverter(String date) {"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"        String month \u003d date.substring(0,3);"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"        String day \u003d date.split(\" \")[1];"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"        String year \u003d date.split(\" \")[2];"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"        String numericalMonth \u003d \" \";"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"        if (month.equals(\"Jan\")) {"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"01\";"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Feb\")) {"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"02\";"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Mar\")) {"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"03\";"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Apr\")) {"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"04\";"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"May\")) {"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"05\";"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Jun\")) {"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"06\";"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Jul\")) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"07\";"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Aug\")) {"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"08\";"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Sep\")) {"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"09\";"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Oct\")) {"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"10\";"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Nov\")) {"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"11\";"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"        } else if (month.equals(\"Dec\")) {"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"            numericalMonth \u003d \"12\";"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        return LocalDate.parse(year + \"-\" + numericalMonth + \"-\" + day);"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":139}},{"path":"src/main/java/main/java/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * The class in which Deadline, Event and ToDo inherits from."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * It contains several common methods shared by all subclasses."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"abstract class Task {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    protected final String taskName;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName, boolean isDone) {"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    public void completeTask() {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    public String getTaskName() {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        return this.taskName;"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    public static String printDate(LocalDate date) {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"        String month \u003d date.getMonth().toString().substring(0,3);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        String[] splitDate \u003d date.toString().split(\"-\");"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        String year \u003d splitDate[0];"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        String day \u003d splitDate[2];"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        return month.substring(0,1) + month.substring(1,3).toLowerCase() +"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"                \" \" + day + \" \" + year;"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    public boolean isComplete() {"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        return this.isDone;"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":43}},{"path":"src/main/java/main/java/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" * The class that contains the task list. It has operations to add/delete"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" * tasks in the list."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"class TaskList {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * If there is no existing data on the local hard disk, Dukebot will startup with an"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * empty task list. If there is an existing text file, then Dukebok will copy over the"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     * text file into the task list."},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        File file \u003d new File(\"./data/duke.txt\");"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            if (file.exists()) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"                Storage.convert(file, this.taskList);"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException exception) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"            System.out.println(exception);"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"     * Iterates over the task list and prints out all the tasks."},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"    public void listTask() {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"            main.java.Task currTask \u003d taskList.get(i);"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            System.out.println(i + 1 + \".\" + currTask);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     * Set the task at the particular index as done."},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     * @param index the index of the task which is completed"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"     * @throws DukeException is thrown when the index given is invalid"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"    protected void doneTask(int index) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003e\u003d index) {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"            Task currTask \u003d this.taskList.get(index - 1);"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"            currTask.completeTask();"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"  \" + currTask);"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"Task not found\");"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"     * Deletes the task at the particular index."},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"     * @param index the index of the task to be deleted"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"    public void delete(int index) {"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"        int deleteIndex \u003d index;"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003e\u003d deleteIndex) {"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"  \" + this.taskList.remove(deleteIndex - 1));"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"            System.out.println(this);"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"            System.out.println(\"Task not found\");"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"     * Adds a new todo task to the task list."},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the todo task"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"    public void addToDo(String taskName) {"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"        ToDo newTask \u003d new ToDo(taskName);"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"  \" + newTask);"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        System.out.println(this);"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"     * Adds a new event task to the task list."},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the event task"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"     * @param date the date in which the event takes place"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"    public void addEvent(String taskName, LocalDate date) {"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"        Event newTask \u003d new Event(taskName, date);"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"  \" + newTask);"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"        System.out.println(this);"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"     * Adds a new deadline task to the task list."},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"     * @param taskName the name of the deadline task"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"     * @param date the date in which the deadline is due"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"    public void addDeadline(String taskName, LocalDate date) {"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"        Deadline newTask \u003d new Deadline(taskName, date);"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"        this.taskList.add(newTask);"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"        System.out.println(\"  \" + newTask);"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"        System.out.println(this);"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        Storage.update(this.taskList);"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"    public void find(String keyWord) {"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        for (Task t : taskList) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            if (t.getTaskName().toString().contains(keyWord)) {"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"                System.out.println(t);"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"     * Displays the number of tasks in the list in a special format."},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"     * @return a string that shows the number of tasks in the list"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"        if (this.taskList.size() \u003d\u003d 1) {"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"            return \"Now you have \" + this.taskList.size() + \" task in the list\";"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"            return \"Now you have \" + this.taskList.size() + \" tasks in the list\";"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":144}},{"path":"src/main/java/main/java/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * This class represents a todo task."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"     * Creates a new todo task object."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the todo task"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a todo task object. It accepts one extra argument"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     * to determine if the task is already done."},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the task."},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the task is already done."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the task in a special format."},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     * @return the details of the task, such as the type, whether it is done and its date."},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"            return \"[T][X] \" + this.taskName;"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            return \"[T][ ] \" + this.taskName;"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":41}},{"path":"src/main/java/main/java/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.java;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * Class that deals with interactions with the user."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Ui {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    "},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    protected void processCommand(String[] input, TaskList taskList) {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"            if (input[0].equals(\"list\")) {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"                taskList.listTask();"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"done\")) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"                taskList.doneTask(Integer.valueOf(input[1]));"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"delete\")) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"                taskList.delete(Integer.valueOf(input[1]));"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"todo\")) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"                taskList.addToDo(input[1]);"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"deadline\")) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"                taskList.addDeadline(input[1], LocalDate.parse(input[2]));"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"event\")) {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"                taskList.addEvent(input[1], LocalDate.parse(input[2]));"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            } else if (input[0].equals(\"find\")) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"                taskList.find(input[1]);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            System.out.println(dukeException);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":30}},{"path":"src/test/java/main/javatest/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package main.javatest;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import main.java.DukeException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import main.java.Parser;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    public void ParserEvent() {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        String[] actual \u003d {\"event\",\"Dinner\",\"2019-12-11\"};"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            assertEquals(actual[0], parser.processCommand(\"event Dinner /at 2019-12-11\")[0]);"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"            System.out.println(e);"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    public void ParserDeadline() {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.processCommand(\"deadline Dinner 2019-12-11\"));"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid description of deadline\").toString(),e.toString());"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public void ParserToDo() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.processCommand(\"todo\"));"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid input, description \" +"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                    \"of todo cannot be empty\").toString(),e.toString());"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":44}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"bye"}],"authorContributionMap":{"IceBear789":13}}]
