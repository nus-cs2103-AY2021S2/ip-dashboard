[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"    mainClassName \u003d \"userinterface.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    archiveBaseName \u003d \"Spongebob Duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"IceBear789":18}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"done"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"exit $ret"}],"authorContributionMap":{"IceBear789":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"\u0027"}],"authorContributionMap":{"IceBear789":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"\u0027"}],"authorContributionMap":{"IceBear789":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"done"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"exit $ret"}],"authorContributionMap":{"IceBear789":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"# Spongebob Duke User Guide"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"Spongebob duke is a personal assistant chatbot that can"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"also help you keep track of your tasks."},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"The features offered by Spongebob duke are :"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"1. Add a task"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"2. List tasks"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"3. Mark a task as done"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"4. Delete a task "},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"5. Find a task"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"6. Sort tasks"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"7. Bye"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"### Add a task"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"Add a new task to the list. Spongebob duke supports 3 types of tasks :"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"1. ToDo, which are tasks that are not tied to a specific date."},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"2. Deadline, which are tasks that must be completed before a certain date."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"3. Event, which are tasks that occur on a certain date."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"The task list will also be automatically saved as a text file on the local hard disk. The"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"local text file will be automatically updated whenever there is a change in the task list."},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"### List tasks"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"Displays a list of all currently saved tasks."},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"### Mark a task as done"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"Mark the task at a particular index as completed."},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"### Delete a task"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"Remove the task at a particular index from the list."},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"### Find a task"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"Search for tasks containing a specific keyword."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"### Sort tasks"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"Sort the tasks in the list according to one of the following criteria :"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"1. By name alphabetically."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"2. By completed tasks first followed by incomplete tasks. "},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"3. By incomplete tasks first followed by completed tasks."},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"### Bye"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"Exits the program."},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"Note that there should be no vertical bars when inputting a command to Spongebob Duke."},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"### `todo` - Adds a todo task to the list"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"`todo [description]`"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"`todo Email professor`"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"![Todo](./Images/Todo.png)"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"### `deadline` - Adds a deadline task to the list"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"The year of the date must be larger than 0."},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"`deadline [description] /by [YYYY-MM-DD]`"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"`deadline CS2103 IP /by 2021-02-19`"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"![Deadline](./Images/Deadline.png)"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"### `event` - Adds an event task to the list"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"The year of the date must be larger than 0."},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"`event [description] /at [YYYY-MM-DD]`"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"`event Lunch with family /at 2021-02-20`"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"![Event](./Images/Event.png)"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"### `list` - Display all tasks in the list"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"`list`"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"`list`"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"![List](./Images/List.png)"},{"lineNumber":117,"author":{"gitId":"-"},"content":""},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"### `done` - Mark task as completed"},{"lineNumber":119,"author":{"gitId":"-"},"content":""},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":121,"author":{"gitId":"-"},"content":""},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"`done [index]`"},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"`done 4`"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":129,"author":{"gitId":"-"},"content":""},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"![Done](./Images/Done.png)"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"### `delete` - Delete a task from the list"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"`delete [index]`"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"`delete 3`"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"![Delete](./Images/Delete.png)"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"### `find` - Search for particular tasks in the list"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":148,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":149,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":150,"author":{"gitId":"IceBear789"},"content":"`find [keyword]`"},{"lineNumber":151,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":152,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":153,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":154,"author":{"gitId":"IceBear789"},"content":"`find CS`"},{"lineNumber":155,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":156,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":157,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":158,"author":{"gitId":"IceBear789"},"content":"![Find](./Images/Find.png)"},{"lineNumber":159,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":160,"author":{"gitId":"IceBear789"},"content":"### `sort name` - Sort by alphabetical order"},{"lineNumber":161,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":162,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":163,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":164,"author":{"gitId":"IceBear789"},"content":"`sort name`"},{"lineNumber":165,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":166,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":167,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":168,"author":{"gitId":"IceBear789"},"content":"`sort name`"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"IceBear789"},"content":"![Sortname](./Images/sort name.png)"},{"lineNumber":173,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":174,"author":{"gitId":"IceBear789"},"content":"### `sort donefirst` - Sort by completed tasks first"},{"lineNumber":175,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":176,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":177,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":178,"author":{"gitId":"IceBear789"},"content":"`sort donefirst`"},{"lineNumber":179,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":180,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":181,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":182,"author":{"gitId":"IceBear789"},"content":"`sort donefirst`"},{"lineNumber":183,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":184,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":185,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":186,"author":{"gitId":"IceBear789"},"content":"![Sortdonefirst](./Images/sort donefirst.png)"},{"lineNumber":187,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":188,"author":{"gitId":"IceBear789"},"content":"### `sort notdonefirst` - Sort by incomplete tasks first"},{"lineNumber":189,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":190,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":191,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":192,"author":{"gitId":"IceBear789"},"content":"`sort notdonefirst`"},{"lineNumber":193,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":194,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":195,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":196,"author":{"gitId":"IceBear789"},"content":"`sort notdonefirst`"},{"lineNumber":197,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":198,"author":{"gitId":"IceBear789"},"content":"Expected outcome:"},{"lineNumber":199,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":200,"author":{"gitId":"IceBear789"},"content":"![Sortnotdonefirst](./Images/sort notdonefirst.png)"},{"lineNumber":201,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":202,"author":{"gitId":"IceBear789"},"content":"### `bye` - Exits the program"},{"lineNumber":203,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":204,"author":{"gitId":"IceBear789"},"content":"Format:"},{"lineNumber":205,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":206,"author":{"gitId":"IceBear789"},"content":"`bye`"},{"lineNumber":207,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":208,"author":{"gitId":"IceBear789"},"content":"Example of usage:"},{"lineNumber":209,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":210,"author":{"gitId":"IceBear789"},"content":"`bye`"},{"lineNumber":211,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":212,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":213,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":214,"author":{"gitId":"IceBear789"},"content":""}],"authorContributionMap":{"IceBear789":195,"-":19}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents a deadline task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate dateOfDeadline;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new deadline task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline task."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param dateOfDeadline The date on which the deadline task is due."},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, LocalDate dateOfDeadline) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.dateOfDeadline \u003d dateOfDeadline;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a deadline task object. It accepts one extra"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * argument to determine if the task is already completed."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline task."},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the deadline task is already completed."},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param dateOfDeadline The date on which the deadline task is due."},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Deadline(String taskName, boolean isDone, LocalDate dateOfDeadline) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.dateOfDeadline \u003d dateOfDeadline;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date on which the deadline is due."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return The date in which the deadline is due."},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    public String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.dateOfDeadline);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the deadline task."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the details of the deadline task."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        assert (this.taskName.equals(\"\")) : \"Name of deadline cannot be empty\";"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        String typeOfTask \u003d \"[D]\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        String isCompleted;"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[X]\";"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[ ]\";"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        String message \u003d typeOfTask + isCompleted + \" \" + this.taskName;"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        message +\u003d \" (by: \" + Task.printDate(dateOfDeadline) + \")\";"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        return message;"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":62}},{"path":"src/main/java/duke/DoneFirstComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * Custom comparator to sort tasks by completed tasks first, then by"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" * alphabetical order."},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"class DoneFirstComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     * Tasks are sorted by completed tasks first before incomplete tasks, and"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * then they are sorted by ascending alphabetical order."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * @param firstTask The first task to be compared."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * @param secondTask The second task to be compared."},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * @return -1 if the first task has higher priority and 1 otherwise."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    public int compare(Task firstTask, Task secondTask) {"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        boolean isBothComplete \u003d firstTask.isComplete() \u0026\u0026 secondTask.isComplete();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        boolean isBothIncomplete \u003d !firstTask.isComplete() \u0026\u0026 !secondTask.isComplete();"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        if (isBothComplete || isBothIncomplete) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            NameComparator nameComparator \u003d new NameComparator();"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            return nameComparator.compare(firstTask, secondTask);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        if (firstTask.isComplete()) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            return -1;"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            return 1;"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":33}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * The main driver class for Dukebot."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    // Contains the task list, with operations to add/delete tasks."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    private final TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    // Deals with making sense of the user command."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    private final Parser parser;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    // Deals with interactions with the user."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    private final Ui ui;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * Constructor to initialise a new Dukebot."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public Duke() {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * The main driver method to test our program. The method terminates with"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * the \"bye\" command."},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     * @param args The system input."},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    public static void main(String[] args) {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        Duke spongebob \u003d new Duke();"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        System.out.println(spongebob.greet());"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        while (true) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"            String nextCommand \u003d scanner.nextLine();"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            if (nextCommand.equals(\"bye\")) {"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"                System.out.println(spongebob.exit());"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"            System.out.println(spongebob.process(nextCommand));"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * This method will return a message greeting the user."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the message greeting the user."},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"    public String greet() {"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        String greetingMessage \u003d \"Hello! I\u0027m Spongebob!\\n\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        greetingMessage +\u003d \"What can I do for you?\";"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        return greetingMessage;"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"     * This method will return a message bidding farewell to the user."},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the message bidding farewell to the"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"     * user."},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"    public String exit() {"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"        String farewellMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        return farewellMessage;"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"     * The main driver method to be used with our graphical interface."},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"     * @param input The text input from the user."},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"     * representing Duke\u0027s response."},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"    public String getResponse(String input) {"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            this.exit();"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"        return this.process(input);"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"    private String process(String input) {"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"            String[] parsedCommand \u003d this.parser.parseCommand(input);"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"            return this.ui.processParsedCommand(parsedCommand, this.taskList);"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"            return dukeException.toString();"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"IceBear789":87,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * Customised exception for Dukebot."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"    private final String errorMessage;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     * The constructor takes in an argument which corresponds to the message to be displayed"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * when an exception is created."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param errorMessage It contains details on why the exception was thrown."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        assert !errorMessage.equals(\"\") : \"error message should not be empty\";"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        this.errorMessage \u003d errorMessage;"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     * When printed, the exception will return the error message."},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * @return The error message."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        return this.errorMessage;"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":29}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * This class represents an event Task."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    private final LocalDate dateOfEvent;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Creates a new event task object."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event task."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @param dateOfEvent The date on which the event is held on."},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, LocalDate dateOfEvent) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        this.dateOfEvent \u003d dateOfEvent;"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create an event task object. It accepts one extra"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * argument to determine if the event is already over."},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event task."},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the event is already over."},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * @param dateOfEvent The date on which the event is held on."},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    public Event(String taskName, boolean isDone, LocalDate dateOfEvent) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        this.dateOfEvent \u003d dateOfEvent;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Getter method to get the date on which the event is held on."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @return The date on which the event is held on."},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"    public String getDate() {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        return Task.printDate(this.dateOfEvent);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the event task."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the details of the event task."},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        assert (this.taskName.equals(\"\")) : \"Name of event cannot be empty\";"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        String typeOfTask \u003d \"[E]\";"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        String isCompleted;"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[X]\";"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[ ]\";"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        String message \u003d typeOfTask + isCompleted + \" \" + this.taskName;"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        message +\u003d \" (at: \" + Task.printDate(dateOfEvent) + \")\";"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        return message;"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":62}},{"path":"src/main/java/duke/NameComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * Custom comparator to sort tasks by ascending alphabetical order."},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"class NameComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * Compare tasks according to ascending alphabetical order."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     * @param firstTask The first task to be compared."},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param secondTask The second task to compared."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @return -1 if the first task has higher priority and 1 otherwise."},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public int compare(Task firstTask, Task secondTask) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        return firstTask.getTaskName().compareTo(secondTask.getTaskName());"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":20}},{"path":"src/main/java/duke/NotDoneFirstComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * Custom comparator to sort tasks by incomplete tasks first, then by"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" * alphabetical order."},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"class NotDoneFirstComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     * Tasks are sorted by ncomplete tasks first before completed tasks, and"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * then they are sorted by ascending alphabetical order."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * @param firstTask The first task to compared."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * @param secondTask The second task to compared."},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * @return -1 if the first task has higher priority and 1 otherwise."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    public int compare(Task firstTask, Task secondTask) {"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        boolean isBothComplete \u003d firstTask.isComplete() \u0026\u0026 secondTask.isComplete();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        boolean isBothIncomplete \u003d !firstTask.isComplete() \u0026\u0026 !secondTask.isComplete();"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        if (isBothComplete || isBothIncomplete) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            NameComparator nameComparator \u003d new NameComparator();"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            return nameComparator.compare(firstTask, secondTask);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        if (firstTask.isComplete()) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            return 1;"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            return -1;"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":33}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * The class that deals with making sense of the user command"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * The main method that reads the input from the user."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param userInput The input from the user."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * @return A String[] data type that the other methods can process."},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * @throws DukeException If the format of the user input is incorrect."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public String[] parseCommand (String userInput) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        if (checkForVerticalBars(userInput)) {"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Input command should not contain vertical bars.\");"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        String typeOfCommand \u003d userInput.split(\" \")[0];"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        if (typeOfCommand.equals(\"list\")) {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            return this.processList(userInput);"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"done\")) {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            return this.processDone(userInput);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"delete\")) {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            return this.processDelete(userInput);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"todo\")) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"            return this.processToDo(userInput);"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"deadline\")) {"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"            return this.processDeadLine(userInput);"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"event\")) {"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            return this.processEvent(userInput);"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"find\")) {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"            return this.processFind(userInput);"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfCommand.equals(\"sort\")) {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            return this.processSort(userInput);"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(\"Invalid command\");"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    private boolean checkForVerticalBars(String input) {"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"        return input.contains(\"|\");"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"    private String[] processList(String input) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for list command\";"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[1];"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        String[] removeSpaces \u003d input.split(\" \");"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces.length \u003e 1) {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"list\";"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"    private String[] processDone(String input) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for done command\";"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[2];"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"        String[] removeSpaces \u003d input.split(\" \");"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", index is missing\");"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        } else if (removeSpaces.length \u003e 2) {"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(removeSpaces[1]);"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"            if (index \u003c\u003d 0) {"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"                throw new DukeException(errorMessage + \", invalid index\");"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"            parsedInput[0] \u003d \"done\";"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"            parsedInput[1] \u003d String.valueOf(index);"},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"            return parsedInput;"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", index must be an integer\");"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"    private String[] processDelete(String input) throws DukeException {"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for delete command\";"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[2];"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"        String[] removeSpaces \u003d input.split(\" \");"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces.length \u003d\u003d 1) {"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", index is missing\");"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        } else if (removeSpaces.length \u003e 2) {"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"            int index \u003d Integer.parseInt(removeSpaces[1]);"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":"            if (index \u003c\u003d 0) {"},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"                throw new DukeException(errorMessage + \", invalid index\");"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"            parsedInput[0] \u003d \"delete\";"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"            parsedInput[1] \u003d String.valueOf(index);"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"            return parsedInput;"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"        } catch (NumberFormatException exception) {"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", index must be an integer\");"},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"    private String[] processToDo(String input) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for todo command\";"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[2];"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"        String[] removeSpaces \u003d input.split(\" \");"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces.length \u003d\u003d 1) {"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"                    + \", description of todo cannot be empty\");"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"todo\";"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 1; i \u003c removeSpaces.length; i++) {"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"            if (i \u003d\u003d 1) {"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] \u003d removeSpaces[i];"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] +\u003d \" \" + removeSpaces[i];"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"    private String[] processDeadLine(String input) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for deadline command\";"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[3];"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 9) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"                    + \", description of deadline cannot be empty\");"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        String[] removeKeyword \u003d input.substring(9).split(\"/by\");"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"        if (removeKeyword.length !\u003d 2) {"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", invalid description of deadline\");"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"        String[] deadlineName \u003d removeKeyword[0].split(\" \");"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"        if (deadlineName[0].length() \u003d\u003d 0) {"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"                    + \", name of deadline task cannot be empty\");"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"            if (!isValidDate(removeKeyword[1].substring(1))) {"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"                throw new DukeException(errorMessage + \", invalid date format\");"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", invalid date format\");"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"deadline\";"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":"        parsedInput[2] \u003d removeKeyword[1].substring(1);"},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c deadlineName.length; i++) {"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":"            if (i \u003d\u003d 0) {"},{"lineNumber":148,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] \u003d deadlineName[0];"},{"lineNumber":149,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":150,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] +\u003d \" \" + deadlineName[i];"},{"lineNumber":151,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":154,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":156,"author":{"gitId":"IceBear789"},"content":"    private String[] processEvent(String input) throws DukeException {"},{"lineNumber":157,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for event command\";"},{"lineNumber":158,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[3];"},{"lineNumber":159,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 6) {"},{"lineNumber":160,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", description of event cannot be empty\");"},{"lineNumber":161,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"IceBear789"},"content":"        String[] removeKeyword \u003d input.substring(6).split(\"/at\");"},{"lineNumber":163,"author":{"gitId":"IceBear789"},"content":"        if (removeKeyword.length !\u003d 2) {"},{"lineNumber":164,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", invalid description of event\");"},{"lineNumber":165,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"IceBear789"},"content":"        String[] eventName \u003d removeKeyword[0].split(\" \");"},{"lineNumber":167,"author":{"gitId":"IceBear789"},"content":"        if (eventName[0].length() \u003d\u003d 0) {"},{"lineNumber":168,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", name of event task cannot be empty\");"},{"lineNumber":169,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"IceBear789"},"content":"            if (!isValidDate(removeKeyword[1].substring(1))) {"},{"lineNumber":172,"author":{"gitId":"IceBear789"},"content":"                throw new DukeException(errorMessage + \", invalid date format\");"},{"lineNumber":173,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"IceBear789"},"content":"        } catch (DateTimeParseException exception) {"},{"lineNumber":175,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", invalid date format\");"},{"lineNumber":176,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"event\";"},{"lineNumber":178,"author":{"gitId":"IceBear789"},"content":"        parsedInput[2] \u003d removeKeyword[1].substring(1);"},{"lineNumber":179,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c eventName.length; i++) {"},{"lineNumber":180,"author":{"gitId":"IceBear789"},"content":"            if (i \u003d\u003d 0) {"},{"lineNumber":181,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] \u003d eventName[0];"},{"lineNumber":182,"author":{"gitId":"IceBear789"},"content":"            } else {"},{"lineNumber":183,"author":{"gitId":"IceBear789"},"content":"                parsedInput[1] +\u003d \" \" + eventName[i];"},{"lineNumber":184,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":185,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":187,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":189,"author":{"gitId":"IceBear789"},"content":"    private String[] processFind(String input) throws DukeException {"},{"lineNumber":190,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for find command\";"},{"lineNumber":191,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[2];"},{"lineNumber":192,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 5) {"},{"lineNumber":193,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", no keyword found\");"},{"lineNumber":194,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"IceBear789"},"content":"        String[] removeSpaces \u003d input.substring(5).split(\" \");"},{"lineNumber":196,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces.length \u003d\u003d 0) {"},{"lineNumber":197,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", no keyword found\");"},{"lineNumber":198,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":199,"author":{"gitId":"IceBear789"},"content":"        if (removeSpaces[0].length() \u003d\u003d 0) {"},{"lineNumber":200,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage + \", no keyword found\");"},{"lineNumber":201,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"find\";"},{"lineNumber":203,"author":{"gitId":"IceBear789"},"content":"        parsedInput[1] \u003d input.substring(5);"},{"lineNumber":204,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":205,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":207,"author":{"gitId":"IceBear789"},"content":"    private String[] processSort(String input) throws DukeException {"},{"lineNumber":208,"author":{"gitId":"IceBear789"},"content":"        String[] parsedInput \u003d new String[2];"},{"lineNumber":209,"author":{"gitId":"IceBear789"},"content":"        String errorMessage \u003d \"Invalid input for sort. The commands for sort are:\\n\";"},{"lineNumber":210,"author":{"gitId":"IceBear789"},"content":"        errorMessage +\u003d \"sort name\";"},{"lineNumber":211,"author":{"gitId":"IceBear789"},"content":"        errorMessage +\u003d \"\\nsort donefirst\";"},{"lineNumber":212,"author":{"gitId":"IceBear789"},"content":"        errorMessage +\u003d \"\\nsort notdonefirst\";"},{"lineNumber":213,"author":{"gitId":"IceBear789"},"content":"        if (input.length() \u003c\u003d 5) {"},{"lineNumber":214,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":215,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"IceBear789"},"content":"        String removeSpaces \u003d input.substring(5);"},{"lineNumber":217,"author":{"gitId":"IceBear789"},"content":"        boolean isWrongInput \u003d !(removeSpaces.equals(\"name\") || removeSpaces.equals(\"donefirst\")"},{"lineNumber":218,"author":{"gitId":"IceBear789"},"content":"                || removeSpaces.equals(\"notdonefirst\"));"},{"lineNumber":219,"author":{"gitId":"IceBear789"},"content":"        if (isWrongInput) {"},{"lineNumber":220,"author":{"gitId":"IceBear789"},"content":"            throw new DukeException(errorMessage);"},{"lineNumber":221,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":222,"author":{"gitId":"IceBear789"},"content":"        parsedInput[0] \u003d \"sort\";"},{"lineNumber":223,"author":{"gitId":"IceBear789"},"content":"        parsedInput[1] \u003d removeSpaces;"},{"lineNumber":224,"author":{"gitId":"IceBear789"},"content":"        return parsedInput;"},{"lineNumber":225,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":226,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":227,"author":{"gitId":"IceBear789"},"content":"    private boolean isValidDate(String date) throws DukeException {"},{"lineNumber":228,"author":{"gitId":"IceBear789"},"content":"        if (!Character.isDigit(date.charAt(0))) {"},{"lineNumber":229,"author":{"gitId":"IceBear789"},"content":"            return false;"},{"lineNumber":230,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"IceBear789"},"content":"        if (date.substring(0, 4).equals(\"0000\")) {"},{"lineNumber":232,"author":{"gitId":"IceBear789"},"content":"            return false;"},{"lineNumber":233,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"IceBear789"},"content":"        LocalDate parsedDate \u003d LocalDate.parse(date);"},{"lineNumber":235,"author":{"gitId":"IceBear789"},"content":"        return true;"},{"lineNumber":236,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":237}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":" * Contains static methods that deal with loading tasks from the file and"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":" * saving tasks in the file."},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"class Storage {"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    private static final String FILE_NAME \u003d \"./data/duke.txt\";"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * If there is an existing text file on the local computer, this method"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     * will load the text file. Otherwise it will create a new text file so"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     * that the tasks can be saved on the local computer."},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @return The text file to save the tasks tn."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     * @throws IOException When there is an error in loading or creating the"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"     * text file."},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    public static File initialiseFile() throws IOException {"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        File storageTextFile \u003d new File(FILE_NAME);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"        // Creates the folder if it is not on the local hard disk."},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        new File(\"./data\").mkdirs();"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        storageTextFile.createNewFile();"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        return storageTextFile;"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"     * Updates the text file to match the input task list."},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"     * @param taskList The corresponding task list which the text file is based on."},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     * @throws IOException When there is an error in writing to the file."},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    public static void updateTextFile(ArrayList\u003cTask\u003e taskList) throws IOException {"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"        File storageTextFile \u003d new File(FILE_NAME);"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        FileWriter fileWriter \u003d new FileWriter(storageTextFile);"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        for (Task task : taskList) {"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"                fileWriter.write(toDoToText((ToDo) task));"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"            } else if (task instanceof Event) {"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"                fileWriter.write(eventToText((Event) task));"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"                fileWriter.write(deadlineToText((Deadline) task));"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"            fileWriter.write(\"\\n\");"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        fileWriter.close();"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"     * Method to read an existing text file and convert it into a corresponding task list within"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"     * the Dukebot."},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"     * @param storageTextFile The text file in which the task list is created from."},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"     * @param taskList The corresponding task list to copy the text file over."},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"     * @throws IOException When there is an error in reading the file."},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"    public static void convert(File storageTextFile, ArrayList\u003cTask\u003e taskList)"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"            throws IOException {"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"        Scanner scanner \u003d new Scanner(storageTextFile);"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"            String[] parsedString \u003d parseString(scanner.nextLine());"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"            taskList.add(parsedStringToTask(parsedString));"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        scanner.close();"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"    private static String taskToText (Task task) {"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"        String taskText \u003d \"\";"},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"        if (task.isComplete()) {"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"            taskText +\u003d \"1 | \";"},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"            taskText +\u003d \"0 | \";"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"        taskText +\u003d task.taskName;"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"        return taskText;"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"    private static String deadlineToText (Deadline deadline) {"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        String deadlineText \u003d \"D | \";"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"        deadlineText +\u003d taskToText(deadline);"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        deadlineText +\u003d \" | \" + deadline.getDate();"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        return deadlineText;"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"    private static String eventToText (Event event) {"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"        String eventText \u003d \"E | \";"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"        eventText +\u003d taskToText(event);"},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"        eventText +\u003d \" | \" + event.getDate();"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"        return eventText;"},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"    private static String toDoToText (ToDo toDo) {"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"        String toDoText \u003d \"T | \";"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"        toDoText +\u003d taskToText(toDo);"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"        return toDoText;"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"    private static String[] parseString(String inputString) {"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"        String[] parsedString \u003d new String[4];"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"        int counter \u003d 0;"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"        parsedString[0] \u003d \"\";"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c inputString.length(); i++) {"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"            if (inputString.charAt(i) \u003d\u003d \u0027|\u0027) {"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"                counter++;"},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"                parsedString[counter] \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"            } else if (inputString.charAt(i) !\u003d \u0027 \u0027 || counter \u003e\u003d 2) {"},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"                parsedString[counter] +\u003d inputString.charAt(i);"},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"        return parsedString;"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"    private static Task parsedStringToTask (String[] parsedString) throws IOException {"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"        String typeOfTask \u003d parsedString[0];"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        boolean isCompleted \u003d parsedString[1].equals(\"1\");"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"        String taskName \u003d parsedString[2].substring(1);"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        if (typeOfTask.equals(\"T\")) {"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"            return new ToDo(taskName, isCompleted);"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"        LocalDate date \u003d convertTextToDate(parsedString[3].substring(1));"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"        if (typeOfTask.equals(\"D\")) {"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"            return new Deadline(taskName, isCompleted, date);"},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"        } else if (typeOfTask.equals(\"E\")) {"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"            return new Event(taskName, isCompleted, date);"},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"            throw new IOException(\"File is not in a supported format\");"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"    private static LocalDate convertTextToDate(String date) {"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"        return LocalDate.parse(date, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":140}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" * The class in which Deadline, Event and ToDo inherits from. It contains"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":" * several common methods shared by all subclasses."},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"abstract class Task {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    protected final String taskName;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     * Constructor to initialise the name of the task. Also sets the task to"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"     * not done by default."},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the task."},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        assert (taskName.equals(\"\")) : \"Name of task cannot be empty\";"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a task object. It accepts one extra"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"     * argument to determine if the task is completed."},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the task."},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether is task is already completed."},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    public Task(String taskName, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"     * Getter method that returns true if the task has been completed, and false otherwise."},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"     * @return A boolean value that indicates if the task has been completed."},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"    public boolean isComplete() {"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        return this.isDone;"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     * Getter method that returns the name of the task."},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the name of the task."},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    public String getTaskName() {"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        return this.taskName;"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"     * Setter method to set a task as completed."},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"    public void completeTask() {"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        this.isDone \u003d true;"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"     * Takes in a LocalDate object and returns the date of the object as a string"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"     * in the format MMM DD YYYY."},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"     * @param date The LocalDate object to print the date of."},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the date in the format MMM DD YYYY."},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"    public static String printDate(LocalDate date) {"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"        return date.format(formatter);"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":73}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":" * The class that contains the task list. It has operations to add/delete"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":" * tasks in the list."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"class TaskList {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    private boolean canWriteToHardDisk \u003d true;"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"     * If there is no existing data on the local hard disk, Dukebot will startup with an"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"     * empty task list. If there is an existing text file, then Dukebot will copy over the"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * text file into the task list."},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            File storageTextFile \u003d Storage.initialiseFile();"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            Storage.convert(storageTextFile, this.tasks);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        } catch (Exception exception) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            this.canWriteToHardDisk \u003d false;"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     * Iterates over the task list and prints out all the tasks."},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of all the tasks in the list."},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"    public String listTask() {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        String stringRepresentation \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        stringRepresentation +\u003d \"Here are the tasks in your list:\";"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"            stringRepresentation +\u003d \"\\n\";"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            Task currentTask \u003d tasks.get(i);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"            stringRepresentation +\u003d (i + 1) + \".\" + currentTask;"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        return stringRepresentation;"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"     * Set the task at a particular index as done and also updates the local text file"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"     * if possible."},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"     * @param index The index of the completed task."},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message when a task"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"     * is completed."},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"    protected String doneTask(int index) {"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":"        if (this.tasks.size() \u003c index) {"},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"            dukeMessage +\u003d \"Invalid input for done command, invalid index\";"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"            return dukeMessage;"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        Task completedTask \u003d this.tasks.get(index - 1);"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"        if (completedTask.isComplete()) {"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"            dukeMessage +\u003d \"This task is already completed.\";"},{"lineNumber":63,"author":{"gitId":"IceBear789"},"content":"            return dukeMessage;"},{"lineNumber":64,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"IceBear789"},"content":"        completedTask.completeTask();"},{"lineNumber":66,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"Nice! I\u0027ve marked this task as done:\\n \" + completedTask;"},{"lineNumber":67,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":68,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":69,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":71,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"IceBear789"},"content":"     * Deletes the task at a particular index and also updates the local text"},{"lineNumber":73,"author":{"gitId":"IceBear789"},"content":"     * file if possible."},{"lineNumber":74,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"IceBear789"},"content":"     * @param index The index of the task to be deleted."},{"lineNumber":76,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message when a"},{"lineNumber":77,"author":{"gitId":"IceBear789"},"content":"     * task is deleted."},{"lineNumber":78,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"IceBear789"},"content":"    public String delete(int index) {"},{"lineNumber":80,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":81,"author":{"gitId":"IceBear789"},"content":"        int indexToDelete \u003d index;"},{"lineNumber":82,"author":{"gitId":"IceBear789"},"content":"        if (this.tasks.size() \u003c indexToDelete) {"},{"lineNumber":83,"author":{"gitId":"IceBear789"},"content":"            dukeMessage +\u003d \"Invalid input for delete command, invalid index\";"},{"lineNumber":84,"author":{"gitId":"IceBear789"},"content":"            return dukeMessage;"},{"lineNumber":85,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"Noted. I\u0027ve removed this task:\\n\" + \" \";"},{"lineNumber":87,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d this.tasks.remove(indexToDelete - 1) + \"\\n\" + this;"},{"lineNumber":88,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":89,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":90,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":92,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"IceBear789"},"content":"     * Adds a new ToDo task to the task list and also updates the local text"},{"lineNumber":94,"author":{"gitId":"IceBear789"},"content":"     * file if possible."},{"lineNumber":95,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the ToDo task."},{"lineNumber":97,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message when a"},{"lineNumber":98,"author":{"gitId":"IceBear789"},"content":"     * Todo task is created."},{"lineNumber":99,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"IceBear789"},"content":"    public String addToDo(String taskName) {"},{"lineNumber":101,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":102,"author":{"gitId":"IceBear789"},"content":"        ToDo newTask \u003d new ToDo(taskName);"},{"lineNumber":103,"author":{"gitId":"IceBear789"},"content":"        this.tasks.add(newTask);"},{"lineNumber":104,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":105,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"  \" + newTask + \"\\n\" + this;"},{"lineNumber":106,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":107,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":108,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"IceBear789"},"content":"     * Adds a new event task to the task list and also updates the local text"},{"lineNumber":111,"author":{"gitId":"IceBear789"},"content":"     * file if possible."},{"lineNumber":112,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the event task."},{"lineNumber":114,"author":{"gitId":"IceBear789"},"content":"     * @param date The date on which the event takes place."},{"lineNumber":115,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message when an"},{"lineNumber":116,"author":{"gitId":"IceBear789"},"content":"     * event task is created."},{"lineNumber":117,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"IceBear789"},"content":"    public String addEvent(String taskName, LocalDate date) {"},{"lineNumber":119,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":120,"author":{"gitId":"IceBear789"},"content":"        Event newTask \u003d new Event(taskName, date);"},{"lineNumber":121,"author":{"gitId":"IceBear789"},"content":"        this.tasks.add(newTask);"},{"lineNumber":122,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":123,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"  \" + newTask + \"\\n\" + this;"},{"lineNumber":124,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":125,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":126,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"IceBear789"},"content":"     * Adds a new deadline task to the task list and also updates the local"},{"lineNumber":129,"author":{"gitId":"IceBear789"},"content":"     * text file if possible."},{"lineNumber":130,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the deadline task."},{"lineNumber":132,"author":{"gitId":"IceBear789"},"content":"     * @param date The date on which the deadline is due."},{"lineNumber":133,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding message when a"},{"lineNumber":134,"author":{"gitId":"IceBear789"},"content":"     * deadline task is created."},{"lineNumber":135,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"IceBear789"},"content":"    public String addDeadline(String taskName, LocalDate date) {"},{"lineNumber":137,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":138,"author":{"gitId":"IceBear789"},"content":"        Deadline newTask \u003d new Deadline(taskName, date);"},{"lineNumber":139,"author":{"gitId":"IceBear789"},"content":"        this.tasks.add(newTask);"},{"lineNumber":140,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":141,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d \"  \" + newTask + \"\\n\" + this;"},{"lineNumber":142,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":143,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":144,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":146,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"IceBear789"},"content":"     * Returns a string representing a list of tasks that contains the specified"},{"lineNumber":148,"author":{"gitId":"IceBear789"},"content":"     * input keyword."},{"lineNumber":149,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"IceBear789"},"content":"     * @param keyword The keyword to filter the tasks."},{"lineNumber":151,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the corresponding list of tasks that"},{"lineNumber":152,"author":{"gitId":"IceBear789"},"content":"     * contain the specified keyword."},{"lineNumber":153,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"IceBear789"},"content":"    public String find(String keyword) {"},{"lineNumber":155,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"\";"},{"lineNumber":156,"author":{"gitId":"IceBear789"},"content":"        boolean isFirst \u003d true;"},{"lineNumber":157,"author":{"gitId":"IceBear789"},"content":"        for (Task currentTask : tasks) {"},{"lineNumber":158,"author":{"gitId":"IceBear789"},"content":"            if (currentTask.getTaskName().contains(keyword)) {"},{"lineNumber":159,"author":{"gitId":"IceBear789"},"content":"                if (isFirst) {"},{"lineNumber":160,"author":{"gitId":"IceBear789"},"content":"                    isFirst \u003d false;"},{"lineNumber":161,"author":{"gitId":"IceBear789"},"content":"                } else {"},{"lineNumber":162,"author":{"gitId":"IceBear789"},"content":"                    dukeMessage +\u003d \"\\n\";"},{"lineNumber":163,"author":{"gitId":"IceBear789"},"content":"                }"},{"lineNumber":164,"author":{"gitId":"IceBear789"},"content":"                dukeMessage +\u003d currentTask;"},{"lineNumber":165,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"IceBear789"},"content":"        if (dukeMessage.length() \u003d\u003d 0) {"},{"lineNumber":168,"author":{"gitId":"IceBear789"},"content":"            dukeMessage +\u003d \"No task with that keyword has been found\";"},{"lineNumber":169,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":171,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":173,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":174,"author":{"gitId":"IceBear789"},"content":"     * Sorts the list of tasks according to the criteria specified by the input"},{"lineNumber":175,"author":{"gitId":"IceBear789"},"content":"     * @param sortCriteria The criteria to sort the tasks by."},{"lineNumber":176,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the list of tasks after being sorted."},{"lineNumber":177,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"IceBear789"},"content":"    public String sort(String sortCriteria) {"},{"lineNumber":179,"author":{"gitId":"IceBear789"},"content":"        if (sortCriteria.equals(\"name\")) {"},{"lineNumber":180,"author":{"gitId":"IceBear789"},"content":"            return sortByName();"},{"lineNumber":181,"author":{"gitId":"IceBear789"},"content":"        } else if (sortCriteria.equals(\"donefirst\")) {"},{"lineNumber":182,"author":{"gitId":"IceBear789"},"content":"            return sortByDoneFirst();"},{"lineNumber":183,"author":{"gitId":"IceBear789"},"content":"        } else if (sortCriteria.equals(\"notdonefirst\")) {"},{"lineNumber":184,"author":{"gitId":"IceBear789"},"content":"            return sortByNotDoneFirst();"},{"lineNumber":185,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":186,"author":{"gitId":"IceBear789"},"content":"            return \"Invalid sorting criteria.\";"},{"lineNumber":187,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":189,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":190,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":191,"author":{"gitId":"IceBear789"},"content":"     * Displays the number of tasks in the list."},{"lineNumber":192,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":193,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation that shows the number of tasks in the"},{"lineNumber":194,"author":{"gitId":"IceBear789"},"content":"     * list."},{"lineNumber":195,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":196,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":197,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":198,"author":{"gitId":"IceBear789"},"content":"        String taskSingularOrPlural \u003d \"\";"},{"lineNumber":199,"author":{"gitId":"IceBear789"},"content":"        if (this.tasks.size() \u003d\u003d 1) {"},{"lineNumber":200,"author":{"gitId":"IceBear789"},"content":"            taskSingularOrPlural \u003d \"task\";"},{"lineNumber":201,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":202,"author":{"gitId":"IceBear789"},"content":"            taskSingularOrPlural \u003d \"tasks\";"},{"lineNumber":203,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"IceBear789"},"content":"        String message \u003d \"Now you have \" + this.tasks.size() + \" \";"},{"lineNumber":205,"author":{"gitId":"IceBear789"},"content":"        message +\u003d taskSingularOrPlural + \" in the list\";"},{"lineNumber":206,"author":{"gitId":"IceBear789"},"content":"        return message;"},{"lineNumber":207,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":209,"author":{"gitId":"IceBear789"},"content":"    private String sortByName() {"},{"lineNumber":210,"author":{"gitId":"IceBear789"},"content":"        tasks.sort(new NameComparator());"},{"lineNumber":211,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":212,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"The list is now sorted by name\\n\";"},{"lineNumber":213,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d this.listTask();"},{"lineNumber":214,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":215,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":217,"author":{"gitId":"IceBear789"},"content":"    private String sortByDoneFirst() {"},{"lineNumber":218,"author":{"gitId":"IceBear789"},"content":"        tasks.sort(new DoneFirstComparator());"},{"lineNumber":219,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":220,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"The list is now sorted with the completed tasks \""},{"lineNumber":221,"author":{"gitId":"IceBear789"},"content":"                + \"being listed first\\n\";"},{"lineNumber":222,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d this.listTask();"},{"lineNumber":223,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":224,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":226,"author":{"gitId":"IceBear789"},"content":"    private String sortByNotDoneFirst() {"},{"lineNumber":227,"author":{"gitId":"IceBear789"},"content":"        tasks.sort(new NotDoneFirstComparator());"},{"lineNumber":228,"author":{"gitId":"IceBear789"},"content":"        writeToHardDisk();"},{"lineNumber":229,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d \"The list is now sorted with the incomplete tasks\""},{"lineNumber":230,"author":{"gitId":"IceBear789"},"content":"                + \" being listed first\\n\";"},{"lineNumber":231,"author":{"gitId":"IceBear789"},"content":"        dukeMessage +\u003d this.listTask();"},{"lineNumber":232,"author":{"gitId":"IceBear789"},"content":"        return dukeMessage;"},{"lineNumber":233,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":234,"author":{"gitId":"IceBear789"},"content":"    private void writeToHardDisk () {"},{"lineNumber":235,"author":{"gitId":"IceBear789"},"content":"        if (canWriteToHardDisk) {"},{"lineNumber":236,"author":{"gitId":"IceBear789"},"content":"            try {"},{"lineNumber":237,"author":{"gitId":"IceBear789"},"content":"                Storage.updateTextFile(this.tasks);"},{"lineNumber":238,"author":{"gitId":"IceBear789"},"content":"            } catch (IOException exception) {"},{"lineNumber":239,"author":{"gitId":"IceBear789"},"content":"                canWriteToHardDisk \u003d false;"},{"lineNumber":240,"author":{"gitId":"IceBear789"},"content":"            }"},{"lineNumber":241,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":243,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":243}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":" * This class represents a Todo task."},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"     * Creates a new Todo task object."},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the Todo task."},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"     * Overloaded constructor to create a Todo task object. It accepts one extra"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"     * argument to determine if the Todo task is already done."},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"     * @param taskName The name of the Todo task."},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"     * @param isDone Whether the task is already done."},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    public ToDo(String taskName, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        super(taskName, isDone);"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"     * Prints the details of the Todo task."},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"     * @return A string representation of the details of the Todo task."},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        assert (this.taskName.equals(\"\")) : \"Name of todo cannot be empty\";"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        String typeOfTask \u003d \"[T]\";"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        String isCompleted;"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"        if (this.isDone) {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[X] \";"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"            isCompleted \u003d \"[ ] \";"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        String message \u003d typeOfTask + isCompleted + this.taskName;"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"        return message;"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":" * Class that deals with interactions with the user."},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class Ui {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"     * This method will process the command and then call the suitable method."},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"     * @param parsedInput The parsed input string."},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"     * @param taskList The taskList which stores the list of tasks."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"    protected String processParsedCommand(String[] parsedInput, TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        String inputCommand \u003d parsedInput[0];"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        if (parsedInput[0].equals(\"list\")) {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"            return taskList.listTask();"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"done\")) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"            return taskList.doneTask(Integer.valueOf(parsedInput[1]));"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"delete\")) {"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"            return taskList.delete(Integer.valueOf(parsedInput[1]));"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"todo\")) {"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            return taskList.addToDo(parsedInput[1]);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"deadline\")) {"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            return taskList.addDeadline(parsedInput[1], LocalDate.parse(parsedInput[2]));"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"event\")) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            return taskList.addEvent(parsedInput[1], LocalDate.parse(parsedInput[2]));"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"find\")) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            return taskList.find(parsedInput[1]);"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        } else if (parsedInput[0].equals(\"sort\")) {"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            return taskList.sort(parsedInput[1]);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        return \"Invalid command.\";"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":36}},{"path":"src/main/java/userinterface/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package userinterface;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":" * An example of a custom control using FXML. This control represents a dialog"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":" * box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"                    .getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        Collections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"        return new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":57,"author":{"gitId":"IceBear789"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"IceBear789"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"IceBear789"},"content":"        db.flip();"},{"lineNumber":60,"author":{"gitId":"IceBear789"},"content":"        return db;"},{"lineNumber":61,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":62}},{"path":"src/main/java/userinterface/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package userinterface;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":9}},{"path":"src/main/java/userinterface/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package userinterface;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import duke.Duke;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"                    .getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            stage.setTitle(\"Spongebob Duke\");"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":33}},{"path":"src/main/java/userinterface/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package userinterface;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":" */"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"    private Image userImage \u003d new Image(this.getClass()"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            .getResourceAsStream(\"/images/Patrick.jpg\"));"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"    private Image dukeImage \u003d new Image(this.getClass()"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"            .getResourceAsStream(\"/images/Spongebob.png\"));"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    private void initialize() {"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(duke.greet(), dukeImage));"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        duke \u003d duke;"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"            Platform.exit();"},{"lineNumber":46,"author":{"gitId":"IceBear789"},"content":"            return;"},{"lineNumber":47,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"IceBear789"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"IceBear789"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"IceBear789"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"IceBear789"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"IceBear789"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"IceBear789"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":55}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.Cursor?\u003e"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" depthTest\u003d\"ENABLE\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"299.0\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" minWidth\u003d\"270.0\" style\u003d\"-fx-border-style: dashed dashed dashed dashed; -fx-background-color: rgba(0,255,255);\" text\u003d\"Label\" translateX\u003d\"10.0\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"            \u003cFont size\u003d\"13.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" translateX\u003d\"10.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    \u003c/children\u003e"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"    \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"   \u003ccursor\u003e"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"      \u003cCursor fx:constant\u003d\"V_RESIZE\" /\u003e"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"   \u003c/cursor\u003e"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"IceBear789":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"userinterface.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.59\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"559.0\" prefWidth\u003d\"403.0\" style\u003d\"-fx-padding: 10; -fx-background-color: rgba(255,170,0);\" /\u003e"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"IceBear789":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"class DukeTest {"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"    public void greetTest() {"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"        String greetingMessage \u003d \"Hello! I\u0027m Spongebob!\\n\";"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        greetingMessage +\u003d \"What can I do for you?\";"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        assertEquals(greetingMessage, duke.greet());"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"    public void exitTest() {"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"        String greetingMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"        assertEquals(greetingMessage, duke.exit());"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"    public void testGetResponse() {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"        String dukeMessage \u003d duke.getResponse(\"list 2\");"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        assertEquals(\"Invalid input for list command\", dukeMessage);"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":30}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"    public void parseEvent() {"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"        String[] actual \u003d {\"event\", \"Dinner\", \"2019-12-11\"};"},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"            assertEquals(actual[0], parser.parseCommand(\"event Dinner /at 2019-12-11\")[0]);"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"            System.out.println(e);"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"    public void parseDeadline() {"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.parseCommand(\"deadline Dinner 2019-12-11\"));"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid input for deadline command, \""},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"                    + \"invalid description of deadline\").toString(), e.toString());"},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"    public void parseToDo() {"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"            assertEquals(null, parser.parseCommand(\"todo\"));"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"            fail();"},{"lineNumber":39,"author":{"gitId":"IceBear789"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"IceBear789"},"content":"            assertEquals(new DukeException(\"Invalid input for todo command, \""},{"lineNumber":41,"author":{"gitId":"IceBear789"},"content":"                    + \"description of todo cannot be empty\").toString(), e.toString());"},{"lineNumber":42,"author":{"gitId":"IceBear789"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IceBear789"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IceBear789"},"content":""},{"lineNumber":45,"author":{"gitId":"IceBear789"},"content":"}"}],"authorContributionMap":{"IceBear789":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IceBear789"},"content":"todo dinner "},{"lineNumber":2,"author":{"gitId":"IceBear789"},"content":"todo go out and play"},{"lineNumber":3,"author":{"gitId":"IceBear789"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":5,"author":{"gitId":"IceBear789"},"content":"list one"},{"lineNumber":6,"author":{"gitId":"IceBear789"},"content":"list one two three four"},{"lineNumber":7,"author":{"gitId":"IceBear789"},"content":"deadline homework /by 2021-02-20"},{"lineNumber":8,"author":{"gitId":"IceBear789"},"content":"deadline finish personal project /by 2021-12-12"},{"lineNumber":9,"author":{"gitId":"IceBear789"},"content":"deadline"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"deadline /by 2020-04-05"},{"lineNumber":11,"author":{"gitId":"IceBear789"},"content":"event party /at 2019-03-31"},{"lineNumber":12,"author":{"gitId":"IceBear789"},"content":"event freshman orientation camp /at 2022-07-21"},{"lineNumber":13,"author":{"gitId":"IceBear789"},"content":"event            "},{"lineNumber":14,"author":{"gitId":"IceBear789"},"content":"event /at 2011-12-11"},{"lineNumber":15,"author":{"gitId":"IceBear789"},"content":"event lunch /at 2045-13-11"},{"lineNumber":16,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":17,"author":{"gitId":"IceBear789"},"content":"done 2"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"done 4"},{"lineNumber":19,"author":{"gitId":"IceBear789"},"content":"list"},{"lineNumber":20,"author":{"gitId":"IceBear789"},"content":"done -3"},{"lineNumber":21,"author":{"gitId":"IceBear789"},"content":"done 0"},{"lineNumber":22,"author":{"gitId":"IceBear789"},"content":"done 8"},{"lineNumber":23,"author":{"gitId":"IceBear789"},"content":"done test"},{"lineNumber":24,"author":{"gitId":"IceBear789"},"content":"done 4 5 3"},{"lineNumber":25,"author":{"gitId":"IceBear789"},"content":"find ho"},{"lineNumber":26,"author":{"gitId":"IceBear789"},"content":"find finish"},{"lineNumber":27,"author":{"gitId":"IceBear789"},"content":"find"},{"lineNumber":28,"author":{"gitId":"IceBear789"},"content":"find       "},{"lineNumber":29,"author":{"gitId":"IceBear789"},"content":"find test "},{"lineNumber":30,"author":{"gitId":"IceBear789"},"content":"sort"},{"lineNumber":31,"author":{"gitId":"IceBear789"},"content":"sort name"},{"lineNumber":32,"author":{"gitId":"IceBear789"},"content":"sort donefirst"},{"lineNumber":33,"author":{"gitId":"IceBear789"},"content":"sort notdonefirst"},{"lineNumber":34,"author":{"gitId":"IceBear789"},"content":"delete 0"},{"lineNumber":35,"author":{"gitId":"IceBear789"},"content":"delete -2"},{"lineNumber":36,"author":{"gitId":"IceBear789"},"content":"delete 8"},{"lineNumber":37,"author":{"gitId":"IceBear789"},"content":"delete 5"},{"lineNumber":38,"author":{"gitId":"IceBear789"},"content":"bye"}],"authorContributionMap":{"IceBear789":38}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"IceBear789"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"IceBear789"},"content":"java -classpath ..\\bin\\ duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"IceBear789":2}}]
