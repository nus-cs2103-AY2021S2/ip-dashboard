[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"    archiveBaseName \u003d \"olly\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"samleewy":16,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"Olly Chat Bot (OCB) is a Command Line Interface (CLI) task management application which keeps track of your task and"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"their respective deadlines so you\u0027ll never miss them!"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"## Quick Start"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"1. Ensure you have `Java 11` or above installed in your Computer"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"2. Download the latest `olly.jar` from Github Release"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"3. Copy the file to the folder you want to use as home folder for Olly"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"4. Double-click the file to start the app."},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"If you do not have Java 11, download it [here](https://www.oracle.com/sg/java/technologies/javase-jdk11-downloads.html). "},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"### Listing all tasks: `list`"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"Shows a list of all tasks that have been added in OCB."},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"Format: `list`"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"\u003chr/\u003e"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"### Adding a task: `todo, deadline, event`"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"Adds a task (todo, deadline, event) into OCB"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"#### Todo Task"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"Format: `todo TODO_NAME`"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"- `todo CS2103T Quiz`"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"- `todo CS2101 Presentation Slides`"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"#### Deadline Task"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"Format: `todo DEADLINE_NAME /by DEADLINE_DATE [YYYY-MM-DD]`"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"- `deadline CS2103T tp1 2021-03-12`"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"- `deadline CS2101 OP2 Presentation 2021-02-18`"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"#### Event Task"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"Format: `todo EVENT_NAME /at EVENT_DATE [YYYY-MM-DD]`"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"- `event AGM Meeting /at 2021-04-04`"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"- `event GetGo launch /at 2021-03-01`"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"\u003chr\u003e"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"### Updating a task: `update`"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"Format: `update INDEX UPDATE_TYPE UPDATE_VALUE`"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"- `update 1 name CS3230 Assignment`"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"- `update 1 date 2021-04-30`"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"\u003chr\u003e"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"### Deleting a task: `delete`"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"Format: `delete INDEX`"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"- `delete 1`"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"\u003chr\u003e"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"### Find a task: `find`"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"Format: `find SEARCH_CRITERIA`"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"- `find CS2103T`"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"- `find CS2101`"},{"lineNumber":71,"author":{"gitId":"-"},"content":""},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"\u003chr\u003e"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"### Complete task: `done`"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"Format: `done INDEX`"},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"Examples:"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"- `done 1`"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"- `done 2`"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"\u003chr\u003e"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"### Exit application: `bye`"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"Format: `bye`"}],"authorContributionMap":{"samleewy":70,"-":14}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import javafx.scene.Scene;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"import javafx.stage.Stage;"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"import javafx.util.Callback;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"public class Duke extends Application {"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    private static final String FILE_PATH \u003d \"data/task.txt\";"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    private TaskList tasks;"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    private Parser parser;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    private Ui ui;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    private static final String DEFAULT_CONTROL_INNER_BACKGROUND \u003d \"derive(-fx-base,80%)\";"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    private static final String OLLY_BACKGROUND_COLOR \u003d \"#53edd3\";"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    private static final String ME_BACKGROUND_COLOR \u003d \"#fcac62\";"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    public Duke() {}"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"     * Creates a new instance of \u0027Duke\u0027 bot"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"     * @param filePath path to file containing saved tasks"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"    public Duke(String filePath) {"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new TaskList(this.storage.load(), this.storage);"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"        this.ui \u003d new Ui(\"Olly\");"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"    public void start(Stage stage) {"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        stage.setTitle(\"Olly Chatbot\");"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"        Label label1 \u003d new Label(\"Welcome to Olly Chatbot, chat away!\");"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"        // Setup storage, parser, tasks, ui"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d new Storage(FILE_PATH);"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new TaskList(this.storage.load(), this.storage);"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"        this.ui \u003d new Ui(\"Olly\");"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"        // Setup GUI"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"        TextField textField \u003d new TextField();"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"        ListView\u003cString\u003e listView \u003d new ListView\u003cString\u003e();"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"        // List View Methods"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        listView.setCellFactory(new Callback\u003cListView\u003cString\u003e, ListCell\u003cString\u003e\u003e() {"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"            @Override"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"            public ListCell\u003cString\u003e call(ListView\u003cString\u003e stringListView) {"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"                return new ListCell\u003cString\u003e() {"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"                    @Override"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"                    protected void updateItem(String item, boolean empty) {"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"                        super.updateItem(item, empty);"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"                        if (item \u003d\u003d null || empty) {"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"                            setText(null);"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"                            setStyle(\"-fx-control-inner-background: \" + DEFAULT_CONTROL_INNER_BACKGROUND + \";\");"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"                        } else {"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"                            setText(item);"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"                            if (item.startsWith(\"Me\")) {"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"                                setStyle(\"-fx-control-inner-background: \" + ME_BACKGROUND_COLOR);"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"                                // setAlignment(Pos.BASELINE_RIGHT);"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"                                // setStyle(\"-fx-alignment: right\");"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"                            } else if (item.startsWith(\"Olly: ALAMAK\")) {"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"                                setStyle(\"-fx-control-inner-background: #ed6853\");"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"                            } else {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"                                setStyle(\"-fx-control-inner-background: \" + OLLY_BACKGROUND_COLOR);"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"                            }"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"                        }"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"                        setPadding(new Insets(10));"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"                };"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"        // List View"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"        listView.getItems().add(\"Olly: Welcome! Talk to me, i\u0027m bored!\");"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"        // Text Field"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"        textField.setOnKeyPressed(ke -\u003e {"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"            if (ke.getCode().equals(KeyCode.ENTER) \u0026\u0026 !textField.getText().equals(\"\")) {"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"                listView.getItems().add(\"Me: \" + textField.getText());"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"                try {"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"                    Command c \u003d this.parser.parse(textField.getText());"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"                    ArrayList\u003cString\u003e responses \u003d c.execute(tasks, ui, storage);"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"                    for (String response : responses) {"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"                        listView.getItems().add(response);"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"                    }"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"                } catch (DukeException dukeEx) {"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"                    // fall through"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"                    listView.getItems().add(ui.speak(dukeEx.toString()));"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"                textField.setText(\"\");"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"        VBox layout1 \u003d new VBox(20);"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"        layout1.setPadding(new Insets(5));"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"        layout1.getChildren().addAll(label1, listView, textField);"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"        Scene scene1 \u003d new Scene(layout1, 600, 500);"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"        stage.setScene(scene1);"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"        textField.requestFocus();"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"        stage.show();"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"samleewy":121,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":10}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import duke.command.AddTaskCommand;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import duke.command.ByeCommand;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import duke.command.Command;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"import duke.command.DeleteTaskCommand;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import duke.command.DoneTaskCommand;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"import duke.command.FindCommand;"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"import duke.command.ShowTaskCommand;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"import duke.command.UpdateCommand;"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeValidationException;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"import duke.task.Deadline;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"import duke.task.Event;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"import duke.task.Todo;"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    private String input;"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    private String command;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public Parser() {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * Returns a Command after parsing the input that is received from the user."},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     * Invalid input would result in DukeException being thrown."},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"     * @param input Input receives from the user"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"     * @return Command specific Command relating to the input which requires execution"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"     * @throws DukeException Exception is thrown when an invalid command is given"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    public Command parse(String input) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        String[] args \u003d input.split(\" \");"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"        this.input \u003d input;"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        this.command \u003d args[0];"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"        switch (this.command) {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"        case \"list\":"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"            String[] listParams \u003d input.split(\"list \");"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"            if (listParams.length \u003d\u003d 1) {"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"                return new ShowTaskCommand();"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"            } else if (listParams[1].equals(\"today\")) {"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"                return new ShowTaskCommand(LocalDate.now());"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"            } else if (listParams[1].equals(\"tomorrow\")) {"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"                return new ShowTaskCommand(LocalDate.now().plus(1, ChronoUnit.DAYS));"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"                return new ShowTaskCommand(listParams[1]);"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"        case \"todo\":"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"            String todoName \u003d validateOneField(\"There\\\u0027s no task name specified!\");"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"            Todo todo \u003d new Todo(todoName);"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"            return new AddTaskCommand(todo);"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"        case \"deadline\":"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"            String[] deadlineDetails \u003d validateTwoFieldWithDivider(\" /by \","},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"                        \"Task name\","},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"                        \"There\\\u0027s no task name specified!\","},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"                        \"Date\","},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"                        \"\\\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"                Deadline deadline \u003d new Deadline(deadlineDetails[0], LocalDate.parse(deadlineDetails[1]));"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"                return new AddTaskCommand(deadline);"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"            } catch (DateTimeParseException dtEx) {"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"                throw new DukeException(\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"        case \"event\":"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"            String[] eventDetails \u003d validateTwoFieldWithDivider(\" /at \","},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"                    \"Event name\","},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"                    \"There\\\u0027s no event name specified!\","},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"                    \"Date\","},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"                    \"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"                Event event \u003d new Event(eventDetails[0], LocalDate.parse(eventDetails[1]));"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"                return new AddTaskCommand(event);"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"            } catch (DateTimeParseException dtEx) {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"                throw new DukeException(\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"        case \"done\":"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"            String doneIndex \u003d validateOneField(\"There\\\u0027s no task index specified!\");"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"            return new DoneTaskCommand(Integer.parseInt(doneIndex));"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"        case \"find\":"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"            String findCriteria \u003d validateOneField(\"There\\\u0027s no criteria specified!\");"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"            return new FindCommand(findCriteria);"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"        case \"delete\":"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"            String deleteIndex \u003d validateOneField(\"There\\\u0027s no task index specified!\");"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"            return new DeleteTaskCommand(Integer.parseInt(deleteIndex));"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"        case \"bye\":"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"            return new ByeCommand();"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"        case \"update\": // update \u003cindex\u003e \u003ctype\u003e \u003cvalue\u003e"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"            Pattern namePattern \u003d Pattern.compile(\"update (\\\\d) name (.+)\");"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"            Matcher nameMatcher \u003d namePattern.matcher(this.input);"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"            Pattern datePattern \u003d Pattern.compile(\"update (\\\\d) date (.+)\");"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"            Matcher dateMatcher \u003d datePattern.matcher(this.input);"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"                if (nameMatcher.matches()) {"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"                    int index \u003d Integer.parseInt(nameMatcher.group(1));"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"                    String newName \u003dnameMatcher.group(2);"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"                    return new UpdateCommand(index, newName);"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"                } else if (dateMatcher.matches()) {"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"                    int index \u003d Integer.parseInt(dateMatcher.group(1));"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"                    LocalDate newDate \u003d LocalDate.parse(dateMatcher.group(2));"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"                    return new UpdateCommand(index, newDate);"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"                } else {"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"                    throw new DukeException(\"Your update command is invalid! Make sure it\u0027s in this format:\" +"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":"                            \"update \u003cindex\u003e \u003ctype (name|date)\u003e \u003cvalue\u003e\");"},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"            } catch (DateTimeParseException dtEx) {"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"                throw new DukeException(\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"        default:"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"There\\\u0027s no such command! Try todo?\");"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"samleewy"},"content":"     * This method was abstracted out to perform validation for commands requiring one input."},{"lineNumber":125,"author":{"gitId":"samleewy"},"content":"     * For example, /todo \u0026lt; task name \u0026gt;"},{"lineNumber":126,"author":{"gitId":"samleewy"},"content":"     * @param exceptionDesc Exception description to throw upon validation failure"},{"lineNumber":127,"author":{"gitId":"samleewy"},"content":"     * @return First argument for the command, in the example given above, it\u0027ll be \u0026lt;task name\u0026gt;"},{"lineNumber":128,"author":{"gitId":"samleewy"},"content":"     * @throws DukeException exception thrown for invalid input"},{"lineNumber":129,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"samleewy"},"content":"    private String validateOneField(String exceptionDesc) throws DukeException {"},{"lineNumber":131,"author":{"gitId":"samleewy"},"content":"        String[] params \u003d this.input.split(this.command + \" \");"},{"lineNumber":132,"author":{"gitId":"samleewy"},"content":"        if (params.length \u003d\u003d 2) {"},{"lineNumber":133,"author":{"gitId":"samleewy"},"content":"            return params[1];"},{"lineNumber":134,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":135,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(exceptionDesc);"},{"lineNumber":136,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":139,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"samleewy"},"content":"     * Similar to validateOneField method, this method was abstracted out to perform validation for commands"},{"lineNumber":141,"author":{"gitId":"samleewy"},"content":"     * requiring two inputs."},{"lineNumber":142,"author":{"gitId":"samleewy"},"content":"     * For example, /deadline \u0026lt;task name\u0026gt; \u0026lt;date\u0026gt; or /event \u0026lt;task name\u0026gt;"},{"lineNumber":143,"author":{"gitId":"samleewy"},"content":"     * @param divider String that divides the first input and the second input, for example: /at or /by"},{"lineNumber":144,"author":{"gitId":"samleewy"},"content":"     * @param exceptionOneDesc Exception description that is thrown when first input is missing"},{"lineNumber":145,"author":{"gitId":"samleewy"},"content":"     * @param exceptionTwoDesc Exception description that is thrown when second input is missing"},{"lineNumber":146,"author":{"gitId":"samleewy"},"content":"     * @return Array of argument for the command, in the example given above, it returns task name and date"},{"lineNumber":147,"author":{"gitId":"samleewy"},"content":"     * @throws DukeValidationException exception thrown for invalid input"},{"lineNumber":148,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"samleewy"},"content":"    private String[] validateTwoFieldWithDivider(String divider, String exceptionOneField, String exceptionOneDesc,"},{"lineNumber":150,"author":{"gitId":"samleewy"},"content":"                                                 String exceptionTwoField, String exceptionTwoDesc)"},{"lineNumber":151,"author":{"gitId":"samleewy"},"content":"            throws DukeValidationException {"},{"lineNumber":152,"author":{"gitId":"samleewy"},"content":"        String[] params \u003d input.split(this.command + \" \");"},{"lineNumber":153,"author":{"gitId":"samleewy"},"content":"        if (params.length \u003d\u003d 2) {"},{"lineNumber":154,"author":{"gitId":"samleewy"},"content":"            String[] details \u003d params[1].split(divider);"},{"lineNumber":155,"author":{"gitId":"samleewy"},"content":"            if (details.length \u003d\u003d 2) {"},{"lineNumber":156,"author":{"gitId":"samleewy"},"content":"                return details;"},{"lineNumber":157,"author":{"gitId":"samleewy"},"content":"            } else {"},{"lineNumber":158,"author":{"gitId":"samleewy"},"content":"                throw new DukeValidationException(exceptionTwoField, exceptionTwoDesc);"},{"lineNumber":159,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":161,"author":{"gitId":"samleewy"},"content":"            throw new DukeValidationException(exceptionOneField, exceptionOneDesc);"},{"lineNumber":162,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":164}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"import duke.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"import duke.task.Event;"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"import duke.task.Todo;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * Creates a new Storage object with the specified file path"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     * @param filePath Path to the storage file, for example: data/tasks.txt"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public Storage(String filePath) {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"     * Loads the txt file specified previously, and parses it nicely into List of Tasks."},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"     * @return Tasks tasks that are parsed from the txt file will be returned"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e load() {"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"            String taskFileContent \u003d fileHandler();"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"            return parseTaskFileContent(taskFileContent);"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        } catch (FileNotFoundException ex) {"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"            // create new file for task data"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"                createFile();"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"                return parseTaskFileContent(\"\");"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"            } catch (IOException ioEx) {"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"                ioEx.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"        } catch (ArrayIndexOutOfBoundsException arrayEx) {"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"            // nothing to catch, empty file"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"            arrayEx.printStackTrace();"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"        return null;"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"     * Method for tasks to write to .txt files."},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"     * The codes below parses task -\u003e task string format, and writes into file path specified."},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"     * @param tasks Tasks that want to be written into txt file"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    public void writeToFile(TaskList tasks) {"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"            String content \u003d parseTasksToString(tasks.get());"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"            File file \u003d new File(this.filePath);"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"            bw.write(content);"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"            bw.close();"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"        } catch (IOException ioEx) {"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"            ioEx.printStackTrace();"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"     * This method deletes the file specified at the file path."},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"    public void clearFile() {"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"        file.delete();"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"    private String fileHandler() throws FileNotFoundException {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"        // example file: T,1,read book|D,0,return book,June 6th|"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"        String fileContent \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"        while (s.hasNext()) {"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"            fileContent +\u003d s.nextLine();"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"        return fileContent;"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"    private void createFile() throws IOException {"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"        Files.createDirectories(Paths.get(this.filePath).getParent());"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"        Boolean success \u003d f.createNewFile();"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"    private List\u003cTask\u003e parseTaskFileContent(String fileContent) {"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"        // convert to tasks array"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"        if (fileContent.isEmpty()) {"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"            return new ArrayList\u003cTask\u003e();"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"        String[] tasks \u003d fileContent.split(\"\\\\|\");"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"        for (String task: tasks) {"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"            String[] taskInfo \u003d task.split(\",\");"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"            String taskType \u003d taskInfo[0];"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"            Boolean taskStatus \u003d taskInfo[1].equals(\"1\");"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"            String taskName \u003d taskInfo[2];"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"            Task newTask \u003d new Task(taskName);"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"            switch (taskType) {"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"            case \"T\":"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"                newTask \u003d new Todo(taskName, taskStatus);"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"                break;"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":"            case \"E\":"},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":"                newTask \u003d new Event("},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"                        taskInfo[2],"},{"lineNumber":124,"author":{"gitId":"samleewy"},"content":"                        LocalDate.parse(taskInfo[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),"},{"lineNumber":125,"author":{"gitId":"samleewy"},"content":"                        taskStatus);"},{"lineNumber":126,"author":{"gitId":"samleewy"},"content":"                break;"},{"lineNumber":127,"author":{"gitId":"samleewy"},"content":"            case \"D\":"},{"lineNumber":128,"author":{"gitId":"samleewy"},"content":"                newTask \u003d new Deadline("},{"lineNumber":129,"author":{"gitId":"samleewy"},"content":"                        taskInfo[2],"},{"lineNumber":130,"author":{"gitId":"samleewy"},"content":"                        LocalDate.parse(taskInfo[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),"},{"lineNumber":131,"author":{"gitId":"samleewy"},"content":"                        taskStatus);"},{"lineNumber":132,"author":{"gitId":"samleewy"},"content":"                break;"},{"lineNumber":133,"author":{"gitId":"samleewy"},"content":"            default:"},{"lineNumber":134,"author":{"gitId":"samleewy"},"content":"                break;"},{"lineNumber":135,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"samleewy"},"content":"            tempTask.add(newTask);"},{"lineNumber":137,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":139,"author":{"gitId":"samleewy"},"content":"        return tempTask;"},{"lineNumber":140,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":142,"author":{"gitId":"samleewy"},"content":"    private String parseTasksToString(List\u003cTask\u003e tasks) {"},{"lineNumber":143,"author":{"gitId":"samleewy"},"content":"        String content \u003d \"\";"},{"lineNumber":144,"author":{"gitId":"samleewy"},"content":"        for (Task task : tasks) {"},{"lineNumber":145,"author":{"gitId":"samleewy"},"content":"            content +\u003d task.toFileString() + \"|\";"},{"lineNumber":146,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"samleewy"},"content":"        return content;"},{"lineNumber":148,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":149}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * TaskList provides an abstraction for a list of Tasks."},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * Additionally, it provides other helpful Task-related functions which would be a hassle without the abstraction."},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage of the tasks\u0027 .txt file"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    TaskList(Storage storage) {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d storage;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * This method overloads TaskList(Storage storage), with an additional List\u0026lt;Task\u0026gt; parameter."},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * It is used over TaskList(Storage storage) when the user already has existing tasks."},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param tasks List of Tasks to insert into TaskList"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage of the tasks\u0027 .txt file"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public TaskList(List\u003cTask\u003e tasks, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this(storage);"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"     * Returns List of Tasks, avoiding access to tasks variable directly."},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"     * @return List of Tasks"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e get() {"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        return this.tasks;"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"     * Adds a new task to List of Tasks"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"     * @param task Task to be added"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"    public void add(Task task) {"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        tasks.add(task);"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"     * Deletes a task from the List of Tasks"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"     * @param task Task to be deleted"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"    public void delete(Task task) {"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"        tasks.remove(task);"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"     * Deletes all task from List of Tasks"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"    public void deleteAll() {"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        tasks.clear();"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"     * Retrieve task from List of Task based on index (0-based)"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"     * @param i index of Task"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"     * @return Task with index i"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    public Task find(int i) {"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"        return tasks.get(i);"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"     * Retrieves all tasks relating to the given criteria (search)"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"     * @param criteria keyword given to search task"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"     * @return Tasks relating to the given keyworrd"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"    public TaskList findAll(String criteria) {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"        for (Task task: tasks) {"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"            if (task.getName().contains(criteria)) {"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"                tempTask.add(task);"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"        return new TaskList(tempTask, this.storage);"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"     * Filters the current list of Tasks and returns a new list of tasks with the specified date."},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"     * @param date Filter date in LocalDate"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"     * @return List of Tasks with specified date"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e getByDate(LocalDate date) {"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"        for (Task task: tasks) {"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"            if (task.getDate() !\u003d null \u0026\u0026 task.getDate().isEqual(date)) {"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"                tempTask.add(task);"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"        return tempTask;"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"     * Returns the number of tasks in the list"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"     * @return number of tasks in list"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"    public int size() {"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"        return this.tasks.size();"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"        String tasksContent \u003d \"\";"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"            tasksContent +\u003d (i + 1 + \". \" + tasks.get(i) + \"\\n\");"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":"        return tasksContent.trim();"},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":123}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    private String botName;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    private Scanner scanner;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * Creates a UI \"engine\" which is responsible for everything related to bot\u0027s user interface (UI)"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     * @param botName Bot will reply with this bot name in this future"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    public Ui(String botName) {"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.botName \u003d botName;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * Appends the bot name to the intended message. This results in the message looking similar to speech."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param message Message that bot wants to tell user"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    public String speak(String message) {"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"        return (botName + \": \" + message);"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     * Receive input from standard input"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"     * @return Input from standard input"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    public String readCommand() {"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        return this.scanner.nextLine();"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":34}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private Task task;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027adding task\u0027"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * @param task Task to be added"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.task \u003d task;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * Execute action to add a new task to existing lists of task"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        int currentTasksSize \u003d tasks.size();"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        tasks.add(task);"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        assert(tasks.size() \u003d\u003d currentTasksSize + 1) : \"New task has not been added, count not updated\";"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(task.getAddMessage() + (task.getAddMessage() \u003d\u003d null ? \"\" : \" \")"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"                + \"I\u0027ve added: \" + task));"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(\"You now have \" + tasks.size() + \" tasks at hand.\"));"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":39}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     * Creates a command for exiting the bot"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    public ByeCommand() {"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * Execute the action to exit bot"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        System.exit(0);"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(\"Goodbye for now, we will meet again.\"));"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        return true;"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":35}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     * Method to execute initialized command object"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * @throws DukeException DukeException thrown when error occurs in command execution"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    public abstract ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Returns a boolean indicating whether the command is meant for exiting the bot"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @return exit status"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":28}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    private int index;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027deleting task\u0027"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param index index of task to be deleted"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    public DeleteTaskCommand(int index) {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * Execute action to delete a task from existing lists of task"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        int currentTasksSize \u003d tasks.size();"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"The task number does not exist, try again?\");"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        Task deleteTask \u003d tasks.find(index);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        tasks.delete(deleteTask);"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"        assert(tasks.size() \u003d\u003d currentTasksSize - 1) : \"Task has not been deleted, count is not updated\";"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(\"Aww yes! I\u0027ve removed this task: \" + deleteTask));"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(\"Now you have \" + tasks.size() + \" tasks left.\"));"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(tasks);"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":44}},{"path":"src/main/java/duke/command/DoneTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"public class DoneTaskCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    private int index;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027done task\u0027"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * @param index index of task to be deleted"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    public DoneTaskCommand(int index) {"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * Execute action to mark a task as done from existing lists of task"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"The task number does not work, try again?\");"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        Task doneTask \u003d tasks.find(index);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        doneTask.setDone();"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"        returnMsg.add(ui.speak(\"Swee! This task is done: \" + doneTask));"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(tasks);"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class FindCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    private String input;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027finding task\u0027"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * @param input The input criteria for the task, for example: if the input criteria is \u0027book\u0027, you are finding"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     *               all tasks with book"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    public FindCommand(String input) {"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"        this.input \u003d input;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        TaskList findTasks \u003d tasks.findAll(this.input);"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        if (findTasks.size() \u003e 0) {"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"Here are the matching tasks in your list:\"));"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(findTasks.toString());"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"We did not find any matching tasks with the criteria: \" + this.input + \" :(\"));"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":34}},{"path":"src/main/java/duke/command/ShowTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"public class ShowTaskCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    public enum ShowTaskType {"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"        SHOW_TASK_ALL, SHOW_TASK_ONE"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    private LocalDate date;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    private ShowTaskType taskType;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * Creates a command for listing tasks"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand() {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ALL;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * Overloads ShowTaskCommand() method with specified date"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * @param date show tasks with specific date"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand(LocalDate date) {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ONE;"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"     * Overloads ShowTaskCommand() method with date in string"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"     * @param date show tasks with specific date in string, format: yyyy-mm-dd"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand(String date) {"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ONE;"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"            this.date \u003d LocalDate.parse(date);"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"        } catch (DateTimeParseException dtEx) {"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"            System.out.println(\"Date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"     * Execute action to list tasks"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"You currently have no tasks! Use todo, deadline or event.\"));"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"        } else if (this.taskType \u003d\u003d ShowTaskType.SHOW_TASK_ALL) {"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"Here you go! Your list of items:\"));"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(tasks.toString());"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"            List\u003cTask\u003e tempTask \u003d tasks.getByDate(date);"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"Here you go! Your list of items:\"));"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(tempTask.toString());"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":77}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    private int index;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    private String taskName;"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    private LocalDate taskDate;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     * Creates a update command object for updating task name"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * @param index"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * @param taskName"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    public UpdateCommand(int index, String taskName) {"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"     * Creates a update command object for updating task date"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     * @param index Index for task needed to be updated"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * @param taskDate New task date to be updated"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    public UpdateCommand(int index, LocalDate taskDate) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        this.taskDate \u003d taskDate;"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"     * Creates a update command object for updating both task name and task date"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"     * @param index Index for task needed to be updated"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"     * @param taskName New task name to be updated"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"     * @param taskDate New task date to be updated"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"    public UpdateCommand(int index, String taskName, LocalDate taskDate) {"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"        this.taskDate \u003d taskDate;"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"     * Execute action to update a task based on index and condition (name or date)"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"     * @param tasks list of tasks"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"     * @param ui UI required for conversation"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"     * @param storage Storage required for .txt file"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"    public ArrayList\u003cString\u003e execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"        ArrayList\u003cString\u003e returnMsg \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"The task number does not exist, try again?\");"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        Task updateTask \u003d tasks.find(index);"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        if (this.taskName !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"            updateTask.updateName(this.taskName);"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"I\u0027ve updated your task name to: \" + this.taskName + \".\"));"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"        if (this.taskDate !\u003d null) {"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"            if (updateTask.getDate() \u003d\u003d null) throw new DukeException(\"Your task does not support dates!\");"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"            updateTask.updateDate(this.taskDate);"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"            returnMsg.add(ui.speak(\"I\u0027ve updated your task date to: \" + this.taskDate + \".\"));"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(tasks);"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"        return returnMsg;"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":78}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"    public DukeException(String message) {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"        return \"ALAMAK! \" + getMessage();"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":13}},{"path":"src/main/java/duke/exception/DukeValidationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"public class DukeValidationException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"    private String field;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    public DukeValidationException(String field, String message) {"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"        this.field \u003d field;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"        return \"ALAMAK! You\u0027ve given the wrong input for: \" + field + \", \" + getMessage();"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":16}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"     * Creates a new deadline task"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"     * @param name deadline name"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * @param date deadline due date"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    public Deadline(String name, LocalDate date) {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"        super(name, \"Make sure you meet this deadline!\");"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * Overloads the Deadline(String name, LocalDate date) method, with new status parameter."},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param name deadline name"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param date deadline date"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param status deadline status (done, not done)"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public Deadline(String name, LocalDate date, Boolean status) {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this(name, date);"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Deadline task to .txt file"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        return \"D,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name + \",\""},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":44}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"     * Creates a new event task"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"     * @param name event name"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * @param date event due date"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    public Event(String name, LocalDate date) {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"        super(name, \"Event coming right up!\");"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * Overloads the Event(String name, LocalDate date) method, with new status parameter."},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param name event name"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param date event date"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param status event status (done, not done)"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public Event(String name, LocalDate date, Boolean status) {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this(name, date);"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Event task to .txt file"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        return \"E,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name + \",\""},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"    protected String name;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    protected Boolean status;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    protected String addMessage;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    protected LocalDate date;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private final static String SYMBOL_TICK \u003d \"\\u2713\";"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    private final static String SYMBOL_CROSS \u003d \"\\u2718\";"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * Creates a new task based on the given name"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param name name of task"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    public Task(String name) {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.name \u003d name;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this.status \u003d false;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    Task(String name, String addMessage) {"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"        this(name);"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        this.addMessage \u003d addMessage;"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"     * This method marks the task as done"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    public void setDone() {"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        this.status \u003d true;"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    public String getName() {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        return this.name;"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"     * Retrieves date of task"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"     * @return LocalDate date of task"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    public LocalDate getDate() {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"        return this.date;"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"     * Retrieves status of task"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"     * @return boolean true (done), false (not done)"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"    public boolean getStatus() {"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        return this.status;"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"     * Retrieves additional message of task"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"     * @return additional message of task"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"    public String getAddMessage() {"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"        return this.addMessage;"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        return \"\";"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"    public void updateName(String newName) {"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"        this.name \u003d newName;"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"    public void updateDate(LocalDate newDate) {"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"        this.date \u003d newDate;"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"        String statusText;"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"        statusText \u003d status ? SYMBOL_TICK : SYMBOL_CROSS;"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"        return statusText + \" \" + name;"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":81}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"     * Creates a new todo task"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"     * @param name todo name"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    public Todo(String name) {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"        super(name, \"Make sure you do this task!\");"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * Overloads the Todo(String name) method, with new status parameter."},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param name event name"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * @param status event status (done, not done)"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    public Todo(String name, Boolean status) {"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this(name);"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Todo task to .txt file"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        return \"T,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name;"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":37}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import duke.command.Command;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"public class DukeTest {"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    private static final String FILE_PATH \u003d \"data/task.txt\";"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    private TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    private Parser parser;"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    private Ui ui;"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public void init() {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d new Storage(FILE_PATH);"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"        this.storage.clearFile();"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new TaskList(this.storage.load(), this.storage);"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this.ui \u003d new Ui(\"Olly\");"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    public void addTodo_todoTest_success() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.size());"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"        assertEquals(\"[T]✘ test\", tasks.find(0).toString());"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        assertFalse(tasks.find(0).getStatus());"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    public void emptyCommand_blankInput_exceptionThrown() {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"\");"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"    public void deleteTodo_todoTest_success() throws DukeException {"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"delete 1\");"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"        assertEquals(0, tasks.size());"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"        assertEquals(\"\", tasks.toString());"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"    public void doneTodo_todoTest_success() throws DukeException {"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"done 1\");"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.size());"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"        assertTrue(tasks.find(0).getStatus());"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    public void todo_noName_exceptionThrown() {"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"todo\");"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"    public void deadline_noName_exceptionThrown() {"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline\");"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"    public void deadline_noDate_exceptionThrown() {"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0\");"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /by\");"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"    public void deadline_wrongSyntax_exceptionThrown() {"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0\");"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /at\");"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"    public void deadline_wrongDateFormat_exceptionThrown() {"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /by 01-25-2021\");"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"    public void event_noName_exceptionThrown() {"},{"lineNumber":124,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":125,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event\");"},{"lineNumber":126,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":127,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":128,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":130,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"samleewy"},"content":"    public void event_noDate_exceptionThrown() {"},{"lineNumber":132,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":133,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon\");"},{"lineNumber":134,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":135,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":136,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":137,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":138,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /at\");"},{"lineNumber":139,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":140,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":141,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":143,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"samleewy"},"content":"    public void event_wrongSyntax_exceptionThrown() {"},{"lineNumber":145,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":146,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon\");"},{"lineNumber":147,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":148,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":149,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":150,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":151,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /by\");"},{"lineNumber":152,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":153,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":154,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":156,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"samleewy"},"content":"    public void event_wrongDateFormat_exceptionThrown() {"},{"lineNumber":158,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":159,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /at 01-25-2021\");"},{"lineNumber":160,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":161,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":162,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":164,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"samleewy"},"content":"    public void find_findTask_success() throws DukeException {"},{"lineNumber":166,"author":{"gitId":"samleewy"},"content":"        Command c;"},{"lineNumber":167,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":168,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow book\");"},{"lineNumber":169,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":170,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":171,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow nus book\");"},{"lineNumber":172,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":173,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":174,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow bicycle\");"},{"lineNumber":175,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":176,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":177,"author":{"gitId":"samleewy"},"content":"        assertEquals(2, tasks.findAll(\"book\").size());"},{"lineNumber":178,"author":{"gitId":"samleewy"},"content":"        assertEquals(0, tasks.findAll(\"random\").size());"},{"lineNumber":179,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.findAll(\"bicycle\").size());"},{"lineNumber":180,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.findAll(\"nus book\").size());"},{"lineNumber":181,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":183,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"samleewy"},"content":"    public void find_noCriteria_exceptionThrown() {"},{"lineNumber":185,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":186,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"find\");"},{"lineNumber":187,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":188,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":189,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":191,"author":{"gitId":"samleewy"},"content":"    @AfterEach"},{"lineNumber":192,"author":{"gitId":"samleewy"},"content":"    public void teardown() {"},{"lineNumber":193,"author":{"gitId":"samleewy"},"content":"        tasks.deleteAll();"},{"lineNumber":194,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":195}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":"list"},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"samleewy":4}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"java -classpath ../bin main.java.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"samleewy":2,"-":36}}]
