[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private Parser parser;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * Initiates a new Duke chatbot with the specified storage file"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param filePath: file path to .txt file used to store tasks"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    public Duke(String filePath) {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new TaskList(this.storage.load(), this.storage);"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"        this.ui \u003d new Ui(\"Olly\");"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * Runs Duke chatbot, allowing user to interact with it via commands"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public void run() {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"Hey! Welcome to the chatbot. What can I do for you today?\");"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        boolean isExit \u003d false;"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        while (!isExit) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"            String input \u003d ui.readCommand();"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"                Command c \u003d this.parser.parse(input);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"            } catch (DukeException dukeEx) {"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"                dukeEx.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"    public static void main(String[] args) {"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"        new Duke(\"data/task.txt\").run();"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"samleewy":45,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"        return \"ALAMAK! \" + getMessage();"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":12}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.command.*;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import java.util.Optional;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    private String input;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    private String command;"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    public Parser() {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Returns a Command after parsing the input that is received from the user."},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * Invalid input would result in DukeException being thrown."},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * @param input: Input receives from the user"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * @return Command: specific Command relating to the input which requires execution"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @throws DukeException: Exception is thrown when an invalid command is given"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public Command parse(String input) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        String[] args \u003d input.split(\" \");"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this.input \u003d input;"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        this.command \u003d args[0];"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        switch (this.command) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"            case \"list\":"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"                String[] listParams \u003d input.split(\"list \");"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"                if (listParams.length \u003d\u003d 1) {"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                    return new ShowTaskCommand();"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"                } else if (listParams[1].equals(\"today\")) {"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"                    return new ShowTaskCommand(LocalDate.now());"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"                } else if (listParams[1].equals(\"tomorrow\")) {"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"                    return new ShowTaskCommand(LocalDate.now().plus(1, ChronoUnit.DAYS));"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"                } else {"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"                    return new ShowTaskCommand(listParams[1]);"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"            case \"todo\":"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"                String todoName \u003d validateOneField(\"There\\\u0027s no task name specified!\");"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"                Todo todo \u003d new Todo(todoName);"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"                return new AddTaskCommand(todo);"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"            case \"deadline\":"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"                String[] deadlineDetails \u003d validateTwoFieldWithDivider(\"/by\","},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"                            \"There\\\u0027s no date specified!\","},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"                            \"\\\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"                try {"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"                    Deadline deadline \u003d new Deadline(deadlineDetails[0], LocalDate.parse(deadlineDetails[1]));"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"                    return new AddTaskCommand(deadline);"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"                } catch (DateTimeParseException dtEx) {"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"                    throw new DukeException(\"\\\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"            case \"event\":"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"                String[] eventDetails \u003d validateTwoFieldWithDivider(\"/at\","},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"                        \"There\\\u0027s no date specified!\","},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"                        \"\\\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"                try {"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"                    Event event \u003d new Event(eventDetails[0], LocalDate.parse(eventDetails[1]));"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"                    return new AddTaskCommand(event);"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"                } catch (DateTimeParseException dtEx) {"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"                    throw new DukeException(\"\\\"Your date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"            case \"done\":"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"                String doneIndex \u003d validateOneField(\"There\\\u0027s no task index specified!\");"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"                return new DoneTaskCommand(Integer.parseInt(doneIndex));"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"            case \"find\":"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"                String findCriteria \u003d validateOneField(\"There\\\u0027s no criteria specified!\");"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"                return new FindCommand(findCriteria);"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"            case \"delete\":"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"                String deleteIndex \u003d validateOneField(\"There\\\u0027s no task index specified!\");"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"                return new DeleteTaskCommand(Integer.parseInt(deleteIndex));"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"            case \"bye\":"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"                return new ByeCommand();"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"            default:"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"                throw new DukeException(\"There\\\u0027s no such command! Try todo?\");"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"    private String validateOneField(String exceptionDesc) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"        String[] params \u003d this.input.split(this.command + \" \");"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"        if (params.length \u003d\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"            return params[1];"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(exceptionDesc);"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"    private String[] validateTwoFieldWithDivider(String divider, String exceptionOneDesc, String exceptionTwoDesc) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"        String[] params \u003d input.split( this.command + \" \");"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        if (params.length \u003d\u003d 2) {"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"            String[] details \u003d params[1].split(divider);"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"            if (details.length \u003d\u003d 2) {"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"                return details;"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"            } else {"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"                throw new DukeException(exceptionTwoDesc);"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(exceptionOneDesc);"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":109}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import java.io.*;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    private String filePath;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Creates a new Storage object with the specified file path"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param filePath: Path to the storage file, for example: data/tasks.txt"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     * Loads the txt file specified previously, and parses it nicely into List of Tasks."},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * @return Tasks: tasks that are parsed from the txt file will be returned"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e load() {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"            String taskFileContent \u003d fileHandler();"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"            return parseTaskFileContent(taskFileContent);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        } catch (FileNotFoundException ex) {"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"            // create new file for task data"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"                createFile();"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"                return parseTaskFileContent(\"\");"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"            } catch (IOException ioEx) {"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"                ioEx.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"        } catch (ArrayIndexOutOfBoundsException arrayEx) {"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"            // nothing to catch, empty file"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"            arrayEx.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"        return null;"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"     * Method for tasks to write to .txt files."},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"     * The codes below parses task -\u003e task string format, and writes into file path specified."},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"     * @param tasks: Tasks that want to be written into txt file"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"    public void writeToFile(TaskList tasks) {"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"            String content \u003d parseTasksToString(tasks.get());"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"            File file \u003d new File(this.filePath);"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"            FileWriter fw \u003d new FileWriter(file.getAbsoluteFile());"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"            bw.write(content);"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"            bw.close();"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        } catch (IOException ioEx) {"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"            ioEx.printStackTrace();"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"     * This method deletes the file specified at the file path."},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    public void clearFile() {"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"        file.delete();"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"    private String fileHandler() throws FileNotFoundException {"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"        // example file: T,1,read book|D,0,return book,June 6th|"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"        String fileContent \u003d \"\";"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"        while (s.hasNext()) {"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"            fileContent +\u003d s.nextLine();"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"        return fileContent;"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"    private void createFile() throws IOException {"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"        File f \u003d new File(this.filePath);"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"        Files.createDirectories(Paths.get(this.filePath).getParent());"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"        Boolean success \u003d f.createNewFile();"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"    private List\u003cTask\u003e parseTaskFileContent(String fileContent) {"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"        // convert to tasks array"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        if (fileContent.isEmpty()) {"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"            return new ArrayList\u003cTask\u003e();"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"        String[] tasks \u003d fileContent.split(\"\\\\|\");"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"        for (String task: tasks) {"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"            String[] taskInfo \u003d task.split(\",\");"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"            String taskType \u003d taskInfo[0];"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"            Boolean taskStatus \u003d taskInfo[1].equals(\"1\");"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"            String taskName \u003d taskInfo[2];"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"            Task newTask \u003d new Task(taskName);"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":"            switch (taskType) {"},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"                case \"T\":"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"                    newTask \u003d new Todo(taskName, taskStatus);"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"                    break;"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"                case \"E\":"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"                    newTask \u003d new Event("},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"                            taskInfo[2],"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"                            LocalDate.parse(taskInfo[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":"                            taskStatus);"},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":"                    break;"},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"                case \"D\":"},{"lineNumber":124,"author":{"gitId":"samleewy"},"content":"                    newTask \u003d new Deadline("},{"lineNumber":125,"author":{"gitId":"samleewy"},"content":"                            taskInfo[2],"},{"lineNumber":126,"author":{"gitId":"samleewy"},"content":"                            LocalDate.parse(taskInfo[3], DateTimeFormatter.ofPattern(\"MMM dd yyyy\")),"},{"lineNumber":127,"author":{"gitId":"samleewy"},"content":"                            taskStatus);"},{"lineNumber":128,"author":{"gitId":"samleewy"},"content":"                    break;"},{"lineNumber":129,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"samleewy"},"content":"            tempTask.add(newTask);"},{"lineNumber":131,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":133,"author":{"gitId":"samleewy"},"content":"        return tempTask;"},{"lineNumber":134,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":136,"author":{"gitId":"samleewy"},"content":"    private String parseTasksToString(List\u003cTask\u003e tasks) {"},{"lineNumber":137,"author":{"gitId":"samleewy"},"content":"        String content \u003d \"\";"},{"lineNumber":138,"author":{"gitId":"samleewy"},"content":"        for (Task task : tasks) {"},{"lineNumber":139,"author":{"gitId":"samleewy"},"content":"            content +\u003d task.toFileString() + \"|\";"},{"lineNumber":140,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"samleewy"},"content":"        return content;"},{"lineNumber":142,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":143}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * TaskList provides an abstraction for a list of Tasks."},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * Additionally, it provides other helpful Task-related functions which would be a hassle without the abstraction."},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage of the tasks\u0027 .txt file"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    TaskList(Storage storage) {"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d storage;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * This method overloads TaskList(Storage storage), with an additional List\u003cTask\u003e parameter."},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * It is used over TaskList(Storage storage) when the user already has existing tasks."},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param tasks: List of Tasks to insert into TaskList"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage of the tasks\u0027 .txt file"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public TaskList(List\u003cTask\u003e tasks, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this(storage);"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"     * Returns List of Tasks, avoiding access to tasks variable directly."},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"     * @return List of Tasks"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e get() {"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        return this.tasks;"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"     * Adds a new task to List of Tasks"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"     * @param task: Task to be added"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"    public void add(Task task) {"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        tasks.add(task);"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"     * Deletes a task from the List of Tasks"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"     * @param task: Task to be deleted"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"    public void delete(Task task) {"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"        tasks.remove(task);"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"     * Deletes all task from List of Tasks"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"    public void deleteAll() {"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        tasks.clear();"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(this);"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"     * Retrieve task from List of Task based on index (0-based)"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"     * @param i: index of Task"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"     * @return Task with index i"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    public Task find(int i) {"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"        return tasks.get(i);"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"    public TaskList findAll(String criteria) {"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":"        for (Task task: tasks) {"},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"            if (task.getName().contains(criteria)) {"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"                tempTask.add(task);"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"        return new TaskList(tempTask, this.storage);"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"     * Filters the current list of Tasks and returns a new list of tasks with the specified date."},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"     * @param date: Filter date in LocalDate"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"     * @return List of Tasks with specified date"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"    public List\u003cTask\u003e getByDate(LocalDate date) {"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"        List\u003cTask\u003e tempTask \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":"        for (Task task: tasks) {"},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"            if (task.getDate() !\u003d null \u0026\u0026 task.getDate().isEqual(date)) {"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"                tempTask.add(task);"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"        return tempTask;"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"     * Returns the number of tasks in the list"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"     * @return number of tasks in list"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"    public int size() {"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":"        return this.tasks.size();"},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"        String tasksContent \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"            tasksContent +\u003d (i+1 + \". \" + tasks.get(i) + \"\\n\");"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"        return tasksContent.trim();"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":118}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    private String botName;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    private Scanner scanner;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * Creates a UI \"engine\" which is responsible for everything related to bot\u0027s user interface (UI)"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     * @param botName: Bot will reply with this bot name in this future"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    public Ui(String botName) {"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.botName \u003d botName;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * Appends the bot name to the intended message. This results in the message looking similar to speech."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param message: Message that bot wants to tell user"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"    public void speak(String message) {"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"        System.out.println(botName + \": \" + message);"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"     * Receive input from standard input"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"     * @return Input from standard input"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    public String readCommand() {"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        return this.scanner.nextLine();"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":34}},{"path":"src/main/java/duke/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    private Task task;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027adding task\u0027"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     * @param task: Task to be added"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    public AddTaskCommand(Task task) {"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * Execute action to add a new task to existing lists of task"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"        tasks.add(task);"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        ui.speak(task.getAddMessage() + (task.getAddMessage() \u003d\u003d null ? \"\" : \" \") + \"I\u0027ve added:\");"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        System.out.println(task);"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"You now have \" + tasks.size() + \" tasks at hand.\");"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":33}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"public class ByeCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"     * Creates a command for exiting the bot"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    public ByeCommand() {"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * Execute the action to exit bot"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"Goodbye for now, we will meet again.\");"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"        System.exit(0);"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        return true;"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"public class Command {"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    public Command() { }"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     * Method to execute initialized command object"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * @throws DukeException: DukeException thrown when error occurs in command execution"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {}"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Returns a boolean indicating whether the command is meant for exiting the bot"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @return exit status"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":28}},{"path":"src/main/java/duke/command/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    private int index;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027deleting task\u0027"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * @param index: index of task to be deleted"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    public DeleteTaskCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Execute action to delete a task from existing lists of task"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"The task number does not work, try again?\");"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        Task deleteTask \u003d tasks.find(index);"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        tasks.delete(deleteTask);"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"Aww yes! I\u0027ve removed this task:\");"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        System.out.println(deleteTask);"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"Now you have \" + tasks.size() + \" tasks left.\");"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(tasks);"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":39}},{"path":"src/main/java/duke/command/DoneTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"public class DoneTaskCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    private int index;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027done task\u0027"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * @param index: index of task to be deleted"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    public DoneTaskCommand(int index) {"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"        this.index \u003d index - 1;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * Execute action to mark a task as done from existing lists of task"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"            throw new DukeException(\"The task number does not work, try again?\");"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"        Task doneTask \u003d tasks.find(index);"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        doneTask.setDone();"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        ui.speak(\"Swee! This task is done:\");"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        System.out.println(doneTask);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        storage.writeToFile(tasks);"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":39}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"public class FindCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    private String input;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * Creates a command for \u0027finding task\u0027"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     * @param input: The input criteria for the task, for example: if the input criteria is \u0027book\u0027, you are finding"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"     *               all tasks with book"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"    public FindCommand(String input) {"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"        this.input \u003d input;"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"        TaskList findTasks \u003d tasks.findAll(this.input);"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"        if (findTasks.size() \u003e 0) {"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"            ui.speak(\"Here are the matching tasks in your list:\");"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"            System.out.println(findTasks.toString());"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"            ui.speak(\"We did not find any matching tasks with the criteria: \" + this.input + \" :(\");"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":29}},{"path":"src/main/java/duke/command/ShowTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Storage;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"import main.java.duke.Ui;"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import main.java.duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"public class ShowTaskCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    public enum ShowTaskType {"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        SHOW_TASK_ALL, SHOW_TASK_ONE"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    private LocalDate date;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    private ShowTaskType taskType;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * Creates a command for listing tasks"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand() {"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ALL;"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"     * Overloads ShowTaskCommand() method with specified date"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * @param date: show tasks with specific date"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand(LocalDate date) {"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ONE;"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"     * Overloads ShowTaskCommand() method with date in string"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"     * @param date: show tasks with specific date in string, format: yyyy-mm-dd"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    public ShowTaskCommand(String date) {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"        super();"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"        this.taskType \u003d ShowTaskType.SHOW_TASK_ONE;"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"            this.date \u003d LocalDate.parse(date);"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"        } catch (DateTimeParseException dtEx) {"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"            System.out.println(\"Date/time must be in the yyyy-mm-dd format. Please try again!\");"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"     * Execute action to list tasks"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"     * @param tasks: list of tasks"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"     * @param ui: UI required for conversation"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"     * @param storage: Storage required for .txt file"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"            ui.speak(\"You currently have no tasks! Use todo, deadline or event.\");"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        } else if (this.taskType \u003d\u003d ShowTaskType.SHOW_TASK_ALL) {"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"            ui.speak(\"Here you go! Your list of items:\");"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"            System.out.println(tasks.toString());"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"            List\u003cTask\u003e tempTask \u003d tasks.getByDate(date);"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"            ui.speak(\"Here you go! Your list of items:\");"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"            System.out.println(tempTask.toString());"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":73}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"     * Creates a new deadline task"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"     * @param name: deadline name"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * @param date: deadline due date"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    public Deadline(String name, LocalDate date) {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"        super(name, \"Make sure you meet this deadline!\");"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * Overloads the Deadline(String name, LocalDate date) method, with new status parameter."},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param name: deadline name"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param date: deadline date"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param status: deadline status (done, not done)"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public Deadline(String name, LocalDate date, Boolean status) {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this(name, date);"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Deadline task to .txt file"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        return \"D,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name + \",\""},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":44}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"     * Creates a new event task"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"     * @param name: event name"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"     * @param date: event due date"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    public Event(String name, LocalDate date) {"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"        super(name, \"Event coming right up!\");"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"        this.date \u003d date;"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"     * Overloads the Event(String name, LocalDate date) method, with new status parameter."},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"     * @param name: event name"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * @param date: event date"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     * @param status: event status (done, not done)"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public Event(String name, LocalDate date, Boolean status) {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this(name, date);"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Event task to .txt file"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        return \"E,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name + \",\""},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"    String name;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"    Boolean status;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"    String addMessage;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    LocalDate date;"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    public Task(String name) {"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":"        this.name \u003d name;"},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"        this.status \u003d false;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"    Task(String name, String addMessage) {"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"        this(name);"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"        this.addMessage \u003d addMessage;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"     * This method marks the task as done"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    public void setDone() {"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"        this.status \u003d true;"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    public String getName() {"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        return this.name;"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"     * Retrieves date of task"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"     * @return LocalDate: date of task"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"    public LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        return this.date;"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":"     * Retrieves status of task"},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"     * @return boolean: true (done), false (not done)"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"    public boolean getStatus() {"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"        return this.status;"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":"     * Retrieves additional message of task"},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"     * @return additional message of task"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"    public String getAddMessage() {"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"        return this.addMessage;"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"        return \"\";"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"        String statusText;"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        statusText \u003d status ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        return statusText + \" \" + name;"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":66}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"     * Creates a new todo task"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"     * @param name: todo name"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":"    public Todo(String name) {"},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"        super(name, \"Make sure you do this task!\");"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":"     * Overloads the Todo(String name) method, with new status parameter."},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"     * This can be used if status is required to be defined."},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"     * @param name: event name"},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"     * @param status: event status (done, not done)"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    public Todo(String name, Boolean status) {"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"        this(name);"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":"        this.status \u003d status;"},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"     * Returns a formatted string required for storing Todo task to .txt file"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"     * @return formatted string of Task for file"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"    public String toFileString() {"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        return \"T,\" + (this.status ? \"1\" : \"0\") + \",\" + this.name;"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":37}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"import main.java.duke.*;"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"import main.java.duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":6,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":7,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"samleewy"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":9,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":10,"author":{"gitId":"samleewy"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":11,"author":{"gitId":"samleewy"},"content":"import java.io.PrintStream;"},{"lineNumber":12,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":13,"author":{"gitId":"samleewy"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":14,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":15,"author":{"gitId":"samleewy"},"content":"public class DukeTest {"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":17,"author":{"gitId":"samleewy"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"samleewy"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"samleewy"},"content":"    private Parser parser;"},{"lineNumber":20,"author":{"gitId":"samleewy"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":22,"author":{"gitId":"samleewy"},"content":"    private static final String filePath \u003d \"data/task.txt\";"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":24,"author":{"gitId":"samleewy"},"content":"    @BeforeEach"},{"lineNumber":25,"author":{"gitId":"samleewy"},"content":"    public void init() {"},{"lineNumber":26,"author":{"gitId":"samleewy"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":27,"author":{"gitId":"samleewy"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":28,"author":{"gitId":"samleewy"},"content":"        this.storage.clearFile();"},{"lineNumber":29,"author":{"gitId":"samleewy"},"content":"        this.tasks \u003d new TaskList(this.storage.load(), this.storage);"},{"lineNumber":30,"author":{"gitId":"samleewy"},"content":"        this.ui \u003d new Ui(\"Olly\");"},{"lineNumber":31,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":33,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"samleewy"},"content":"    public void addTodo_todoTest_success() throws DukeException {"},{"lineNumber":35,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":36,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":37,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.size());"},{"lineNumber":38,"author":{"gitId":"samleewy"},"content":"        assertEquals(\"[T]✘ test\", tasks.find(0).toString());"},{"lineNumber":39,"author":{"gitId":"samleewy"},"content":"        assertFalse(tasks.find(0).getStatus());"},{"lineNumber":40,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":42,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"samleewy"},"content":"    public void emptyCommand_blankInput_exceptionThrown() {"},{"lineNumber":44,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":45,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"\");"},{"lineNumber":46,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":47,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":48,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":50,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"samleewy"},"content":"    public void deleteTodo_todoTest_success() throws DukeException {"},{"lineNumber":52,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":53,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":54,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"delete 1\");"},{"lineNumber":55,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":56,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":57,"author":{"gitId":"samleewy"},"content":"        assertEquals(0, tasks.size());"},{"lineNumber":58,"author":{"gitId":"samleewy"},"content":"        assertEquals(\"\", tasks.toString());"},{"lineNumber":59,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":61,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"samleewy"},"content":"    public void doneTodo_todoTest_success() throws DukeException {"},{"lineNumber":63,"author":{"gitId":"samleewy"},"content":"        Command c \u003d this.parser.parse(\"todo test\");"},{"lineNumber":64,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":65,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"done 1\");"},{"lineNumber":66,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":67,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":68,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.size());"},{"lineNumber":69,"author":{"gitId":"samleewy"},"content":"        assertTrue(tasks.find(0).getStatus());"},{"lineNumber":70,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":72,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"samleewy"},"content":"    public void todo_noName_exceptionThrown() {"},{"lineNumber":74,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":75,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"todo\");"},{"lineNumber":76,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":77,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":78,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":80,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":81,"author":{"gitId":"samleewy"},"content":"    public void deadline_noName_exceptionThrown() {"},{"lineNumber":82,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":83,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline\");"},{"lineNumber":84,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":85,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":86,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":88,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"samleewy"},"content":"    public void deadline_noDate_exceptionThrown() {"},{"lineNumber":90,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":91,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0\");"},{"lineNumber":92,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":93,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":94,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":95,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":96,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /by\");"},{"lineNumber":97,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":98,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":99,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":101,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"samleewy"},"content":"    public void deadline_wrongSyntax_exceptionThrown() {"},{"lineNumber":103,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":104,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0\");"},{"lineNumber":105,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":106,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":107,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":108,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":109,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /at\");"},{"lineNumber":110,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":111,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":112,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":114,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"samleewy"},"content":"    public void deadline_wrongDateFormat_exceptionThrown() {"},{"lineNumber":116,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":117,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"deadline assignment0 /by 01-25-2021\");"},{"lineNumber":118,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":119,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":120,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":122,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":123,"author":{"gitId":"samleewy"},"content":"    public void event_noName_exceptionThrown() {"},{"lineNumber":124,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":125,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event\");"},{"lineNumber":126,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":127,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":128,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":130,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"samleewy"},"content":"    public void event_noDate_exceptionThrown() {"},{"lineNumber":132,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":133,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon\");"},{"lineNumber":134,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":135,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":136,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":137,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":138,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /at\");"},{"lineNumber":139,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":140,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":141,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":143,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":144,"author":{"gitId":"samleewy"},"content":"    public void event_wrongSyntax_exceptionThrown() {"},{"lineNumber":145,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":146,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon\");"},{"lineNumber":147,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":148,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":149,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":150,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":151,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /by\");"},{"lineNumber":152,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":153,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":154,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":156,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"samleewy"},"content":"    public void event_wrongDateFormat_exceptionThrown() {"},{"lineNumber":158,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":159,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"event nus hackathon /at 01-25-2021\");"},{"lineNumber":160,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":161,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":162,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":164,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"samleewy"},"content":"    public void find_findTask_success() throws DukeException {"},{"lineNumber":166,"author":{"gitId":"samleewy"},"content":"        Command c;"},{"lineNumber":167,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":168,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow book\");"},{"lineNumber":169,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":170,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":171,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow nus book\");"},{"lineNumber":172,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":173,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":174,"author":{"gitId":"samleewy"},"content":"        c \u003d this.parser.parse(\"todo borrow bicycle\");"},{"lineNumber":175,"author":{"gitId":"samleewy"},"content":"        c.execute(tasks, ui, storage);"},{"lineNumber":176,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":177,"author":{"gitId":"samleewy"},"content":"        assertEquals(2, tasks.findAll(\"book\").size());"},{"lineNumber":178,"author":{"gitId":"samleewy"},"content":"        assertEquals(0, tasks.findAll(\"random\").size());"},{"lineNumber":179,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.findAll(\"bicycle\").size());"},{"lineNumber":180,"author":{"gitId":"samleewy"},"content":"        assertEquals(1, tasks.findAll(\"nus book\").size());"},{"lineNumber":181,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":183,"author":{"gitId":"samleewy"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"samleewy"},"content":"    public void find_noCriteria_exceptionThrown() {"},{"lineNumber":185,"author":{"gitId":"samleewy"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":186,"author":{"gitId":"samleewy"},"content":"            Command c \u003d this.parser.parse(\"find\");"},{"lineNumber":187,"author":{"gitId":"samleewy"},"content":"            c.execute(tasks, ui, storage);"},{"lineNumber":188,"author":{"gitId":"samleewy"},"content":"        });"},{"lineNumber":189,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"samleewy"},"content":""},{"lineNumber":191,"author":{"gitId":"samleewy"},"content":"    @AfterEach"},{"lineNumber":192,"author":{"gitId":"samleewy"},"content":"    public void teardown() {"},{"lineNumber":193,"author":{"gitId":"samleewy"},"content":"        tasks.deleteAll();"},{"lineNumber":194,"author":{"gitId":"samleewy"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"samleewy"},"content":"}"}],"authorContributionMap":{"samleewy":195}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samleewy"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"samleewy"},"content":"list"},{"lineNumber":3,"author":{"gitId":"samleewy"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"samleewy"},"content":"event project meeting /at Mon 2-4pm"}],"authorContributionMap":{"samleewy":4}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"samleewy"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"samleewy"},"content":"java -classpath ../bin main.java.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"samleewy":2,"-":36}}]
