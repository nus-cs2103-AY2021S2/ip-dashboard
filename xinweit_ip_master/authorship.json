[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"xinweit":15,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"D ; 1 ; return book ; 2019-10-15"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":"E ; 0 ; project meeting ; 2020-10-15"},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"T ; 1 ; eat lunch"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"T ; 1 ; walk the dog"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"T ; 0 ; watch movie with friends"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"T ; 1 ; run 5km"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"T ; 1 ; sleep"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"T ; 0 ; eat icecream"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"T ; 0 ; play valorant with friends"}],"authorContributionMap":{"xinweit":9}},{"path":"src/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"T ; 0 ; dog"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":"E ; 0 ; project meeting ; 2019-10-15"},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"T ; 0 ; bath"}],"authorContributionMap":{"xinweit":3}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" * Deadline class for deadline tasks"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    protected String by;"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    protected LocalDate localBy;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"     * Constructor for deadline class."},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"     * Initializes a deadline with specified description."},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * @param description description of the deadline task"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"        this.by \u003d by;"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"        this.localBy \u003d LocalDate.parse(by);"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        this.type \u003d \u0027D\u0027;"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    public String getBy() {"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"        return this.by;"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"    public String getFormattedBy() {"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"        return localBy.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getFormattedBy() + \")\";"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":39}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":" * Duke is a Personal Assistant Chatbot that helps a person to keep track of various tasks."},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" * The types of tasks the user can add are: todo, deadline, event."},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":" * The user can also delete, check as done, and list tasks."},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    private Storage storage;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    private Parser parser;"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * Constructor for Duke class."},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     * Initializes Ui, Parser, Storage and TaskList objects."},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"     * @param filePath file path to file where user wants his task list saved and loaded."},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    public Duke(String filePath) {"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"        parser \u003d new Parser();"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"        tasks \u003d new TaskList(storage.loadTasks());"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"     * Processes user input and interacts with Ui and TaskList objects."},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"    public String getResponse(String input) {"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"        String response \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"        String[] inputArr \u003d parser.getInputArr(input);"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"        String cmd \u003d inputArr[0];"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"        switch (cmd) {"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"        case \"bye\":"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"            response +\u003d ui.exit();"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"        case \"list\":"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"            response +\u003d ui.listAllTasks(tasks.getList());"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"        case \"done\":"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"            int numDone \u003d Integer.parseInt(inputArr[1]);"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"            Task task \u003d tasks.getList().get(numDone - 1);"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"            tasks.checkAsDone(task);"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"            response +\u003d ui.checkAsDoneMessage(task);"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":"        case \"delete\":"},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"            int numDelete \u003d Integer.parseInt(inputArr[1]);"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"            Task deletedTask \u003d tasks.deleteTask(numDelete);"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"            response +\u003d ui.deleteTaskMessage(tasks.getList(), deletedTask);"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"        case \"find\":"},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"            String keyword \u003d inputArr[1];"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"            response +\u003d ui.findTask(keyword, tasks.getList());"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":"        case \"todo\":"},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":"            try {"},{"lineNumber":62,"author":{"gitId":"xinweit"},"content":"                parser.isEmptyDescription(inputArr);"},{"lineNumber":63,"author":{"gitId":"xinweit"},"content":"                String details \u003d inputArr[1];"},{"lineNumber":64,"author":{"gitId":"xinweit"},"content":"                Task todo \u003d new Todo(details);"},{"lineNumber":65,"author":{"gitId":"xinweit"},"content":"                tasks.addTask(todo);"},{"lineNumber":66,"author":{"gitId":"xinweit"},"content":"                response +\u003d ui.addTaskMessage(tasks.getList(), todo);"},{"lineNumber":67,"author":{"gitId":"xinweit"},"content":"            } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"xinweit"},"content":"                response +\u003d \"OOPS!!! The description of a todo cannot be empty.\\n\";"},{"lineNumber":69,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":71,"author":{"gitId":"xinweit"},"content":"        case \"deadline\":"},{"lineNumber":72,"author":{"gitId":"xinweit"},"content":"            try {"},{"lineNumber":73,"author":{"gitId":"xinweit"},"content":"                parser.isEmptyDescription(inputArr);"},{"lineNumber":74,"author":{"gitId":"xinweit"},"content":"                String details \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"},{"lineNumber":75,"author":{"gitId":"xinweit"},"content":"                String date \u003d input.substring(input.indexOf(\"/\") + 4);"},{"lineNumber":76,"author":{"gitId":"xinweit"},"content":"                Task deadline \u003d new Deadline(details, date);"},{"lineNumber":77,"author":{"gitId":"xinweit"},"content":"                tasks.addTask(deadline);"},{"lineNumber":78,"author":{"gitId":"xinweit"},"content":"                response +\u003d ui.addTaskMessage(tasks.getList(), deadline);"},{"lineNumber":79,"author":{"gitId":"xinweit"},"content":"            } catch (DukeException e) {"},{"lineNumber":80,"author":{"gitId":"xinweit"},"content":"                response +\u003d \"OOPS!!! The description of a deadline cannot be empty.\\n\";"},{"lineNumber":81,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":83,"author":{"gitId":"xinweit"},"content":"        case \"event\":"},{"lineNumber":84,"author":{"gitId":"xinweit"},"content":"            try {"},{"lineNumber":85,"author":{"gitId":"xinweit"},"content":"                parser.isEmptyDescription(inputArr);"},{"lineNumber":86,"author":{"gitId":"xinweit"},"content":"                String details \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"},{"lineNumber":87,"author":{"gitId":"xinweit"},"content":"                String date \u003d input.substring(input.indexOf(\"/\") + 4);"},{"lineNumber":88,"author":{"gitId":"xinweit"},"content":"                Task event \u003d new Event(details, date);"},{"lineNumber":89,"author":{"gitId":"xinweit"},"content":"                tasks.addTask(event);"},{"lineNumber":90,"author":{"gitId":"xinweit"},"content":"                response +\u003d ui.addTaskMessage(tasks.getList(), event);"},{"lineNumber":91,"author":{"gitId":"xinweit"},"content":"            } catch (DukeException e) {"},{"lineNumber":92,"author":{"gitId":"xinweit"},"content":"                response +\u003d \"OOPS!!! The description of an event cannot be empty.\\n\";"},{"lineNumber":93,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"xinweit"},"content":"            break;"},{"lineNumber":95,"author":{"gitId":"xinweit"},"content":"        default:"},{"lineNumber":96,"author":{"gitId":"xinweit"},"content":"            try {"},{"lineNumber":97,"author":{"gitId":"xinweit"},"content":"                throw new DukeException();"},{"lineNumber":98,"author":{"gitId":"xinweit"},"content":"            } catch (DukeException e) {"},{"lineNumber":99,"author":{"gitId":"xinweit"},"content":"                response +\u003d \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\";"},{"lineNumber":100,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"xinweit"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"xinweit"},"content":"            storage.saveTasks(tasks.getList());"},{"lineNumber":104,"author":{"gitId":"xinweit"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitId":"xinweit"},"content":"            e.printStackTrace();"},{"lineNumber":106,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"xinweit"},"content":"        return response;"},{"lineNumber":108,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":110,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":110}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":" * Custom exception class for custom exceptions specific to Duke application."},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"     * Constructor for DukeException class."},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    public DukeException() {"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":13}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" * Event class for event tasks"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    protected String at;"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    protected LocalDate localAt;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"     * Constructor for event class."},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"     * Initializes a event with specified description."},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * @param description description of the event task"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    public Event(String description, String at) {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"        this.at \u003d at;"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"        this.localAt \u003d LocalDate.parse(at);"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        this.type \u003d \u0027E\u0027;"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    public String getAt() {"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"        return this.at;"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    public String getFormattedAt() {"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"        return localAt.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.getFormattedAt() + \")\";"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":38}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    private Duke duke \u003d new Duke(\"src/data/duke.txt\");"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    public void start(Stage stage) {    "},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.util.Timer;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import java.util.TimerTask;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/WhitePersianCat.jpg\"));"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/WhitePomDog.jpg\"));"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"     * Creates a window and greets user"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"                DialogBox.getDukeDialog(Ui.greetings(), dukeImage)"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"        );"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"        duke \u003d d;"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":"            TimerTask closeApp \u003d new TimerTask() {"},{"lineNumber":62,"author":{"gitId":"xinweit"},"content":"                public void run() {"},{"lineNumber":63,"author":{"gitId":"xinweit"},"content":"                    System.exit(0);"},{"lineNumber":64,"author":{"gitId":"xinweit"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"xinweit"},"content":"            };"},{"lineNumber":66,"author":{"gitId":"xinweit"},"content":"            Timer timer \u003d new Timer();"},{"lineNumber":67,"author":{"gitId":"xinweit"},"content":"            timer.schedule(closeApp, 2000);"},{"lineNumber":68,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":70}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":" * Parser class to make sense of user input."},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"     * Constructor for Parser class."},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"     * Initializes a Parser object."},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    public Parser() {"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"     * Checks whether input task description is missing."},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"     * @param inputArr user input array."},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * @throws DukeException if input task description is missing."},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    public void isEmptyDescription(String[] inputArr) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"        if (inputArr.length \u003d\u003d 1) {"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"            throw new DukeException();"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"     * Returns an input array of String objects given an input String."},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"     * @param input user input."},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"     * @return an array of String objects."},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"    public String[] getInputArr(String input) {"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"        return input.split(\" \", 2);"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":34}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":" * Storage class to save tasks to and load tasks from file on local machine."},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    protected String filePath;"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"     * Constructor for Storage class."},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * Initializes a Storage object that contains filePath"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     * @param filePath file path to file where user wants his task list saved and loaded."},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"    public Storage(String filePath) {"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"     * Saves tasks to file locally."},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"     * @param list list of Task objects."},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"     * @throws IOException if file path cannot be found"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"    public void saveTasks(ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"        String fileContent \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"        for (Task task: list) {"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"            int num;"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"            String description \u003d task.getDescription();"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"            char type \u003d task.getType();"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"            if (!task.getDoneStatus()) {"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"                num \u003d 0;"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"            else {"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"                num \u003d 1;"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"            if (type \u003d\u003d \u0027T\u0027) {"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"                fileContent +\u003d type + \" ; \" + num + \" ; \" + description + \"\\n\";"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"            else if (type \u003d\u003d \u0027D\u0027) {"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"                Deadline deadline \u003d (Deadline) task;"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"                fileContent +\u003d type + \" ; \" + num + \" ; \" + description +  \" ; \" + deadline.getBy() + \"\\n\";"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":"            else { //type \u0027E\u0027"},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"                Event event \u003d (Event) task;"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"                fileContent +\u003d type + \" ; \" + num + \" ; \" + description +  \" ; \" + event.getAt() + \"\\n\";"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"        fw.write(fileContent);"},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"        fw.close();"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":"     * Loads tasks from file locally"},{"lineNumber":62,"author":{"gitId":"xinweit"},"content":"     * @return an ArrayList of Task objects"},{"lineNumber":63,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"xinweit"},"content":"    public ArrayList\u003cTask\u003e loadTasks() {"},{"lineNumber":65,"author":{"gitId":"xinweit"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"xinweit"},"content":"        File savedTasksFile \u003d null;"},{"lineNumber":67,"author":{"gitId":"xinweit"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"xinweit"},"content":"            savedTasksFile \u003d new File(this.filePath);"},{"lineNumber":69,"author":{"gitId":"xinweit"},"content":"            if (!savedTasksFile.exists()) {"},{"lineNumber":70,"author":{"gitId":"xinweit"},"content":"                if (!savedTasksFile.getParentFile().exists()) {"},{"lineNumber":71,"author":{"gitId":"xinweit"},"content":"                    File parentDir \u003d savedTasksFile.getParentFile();"},{"lineNumber":72,"author":{"gitId":"xinweit"},"content":"                    parentDir.mkdir();"},{"lineNumber":73,"author":{"gitId":"xinweit"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"xinweit"},"content":"                savedTasksFile.createNewFile();"},{"lineNumber":75,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"xinweit"},"content":"            Scanner s \u003d new Scanner(savedTasksFile);"},{"lineNumber":77,"author":{"gitId":"xinweit"},"content":"            while (s.hasNextLine()) {"},{"lineNumber":78,"author":{"gitId":"xinweit"},"content":"                String line \u003d s.nextLine();"},{"lineNumber":79,"author":{"gitId":"xinweit"},"content":"                String[] taskArr \u003d line.split(\" ; \", 4);"},{"lineNumber":80,"author":{"gitId":"xinweit"},"content":"                char type \u003d taskArr[0].charAt(0);"},{"lineNumber":81,"author":{"gitId":"xinweit"},"content":"                String num \u003d taskArr[1];"},{"lineNumber":82,"author":{"gitId":"xinweit"},"content":"                String description \u003d taskArr[2];"},{"lineNumber":83,"author":{"gitId":"xinweit"},"content":"                if (type \u003d\u003d \u0027T\u0027) {"},{"lineNumber":84,"author":{"gitId":"xinweit"},"content":"                    Todo todo \u003d new Todo(description);"},{"lineNumber":85,"author":{"gitId":"xinweit"},"content":"                    if (num.equals(\"1\")) {"},{"lineNumber":86,"author":{"gitId":"xinweit"},"content":"                        todo.done();"},{"lineNumber":87,"author":{"gitId":"xinweit"},"content":"                    }"},{"lineNumber":88,"author":{"gitId":"xinweit"},"content":"                    list.add(todo);"},{"lineNumber":89,"author":{"gitId":"xinweit"},"content":"                } else if (type \u003d\u003d \u0027D\u0027) {"},{"lineNumber":90,"author":{"gitId":"xinweit"},"content":"                    String when \u003d taskArr[3];"},{"lineNumber":91,"author":{"gitId":"xinweit"},"content":"                    Deadline deadline \u003d new Deadline(description, when);"},{"lineNumber":92,"author":{"gitId":"xinweit"},"content":"                    if (num.equals(\"1\")) {"},{"lineNumber":93,"author":{"gitId":"xinweit"},"content":"                        deadline.done();"},{"lineNumber":94,"author":{"gitId":"xinweit"},"content":"                    }"},{"lineNumber":95,"author":{"gitId":"xinweit"},"content":"                    list.add(deadline);"},{"lineNumber":96,"author":{"gitId":"xinweit"},"content":"                } else { //type \u0027E\u0027"},{"lineNumber":97,"author":{"gitId":"xinweit"},"content":"                    String when \u003d taskArr[3];"},{"lineNumber":98,"author":{"gitId":"xinweit"},"content":"                    Event event \u003d new Event(description, when);"},{"lineNumber":99,"author":{"gitId":"xinweit"},"content":"                    if (num.equals(\"1\")) {"},{"lineNumber":100,"author":{"gitId":"xinweit"},"content":"                        event.done();"},{"lineNumber":101,"author":{"gitId":"xinweit"},"content":"                    }"},{"lineNumber":102,"author":{"gitId":"xinweit"},"content":"                    list.add(event);"},{"lineNumber":103,"author":{"gitId":"xinweit"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"xinweit"},"content":"            s.close();"},{"lineNumber":106,"author":{"gitId":"xinweit"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitId":"xinweit"},"content":"            e.printStackTrace();"},{"lineNumber":108,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"xinweit"},"content":"        return list;"},{"lineNumber":110,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"xinweit"},"content":"}"},{"lineNumber":112,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":113,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":114,"author":{"gitId":"xinweit"},"content":""}],"authorContributionMap":{"xinweit":114}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":" * Task class to represent a task, which is a todo, deadline or event."},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"    protected char type;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"     * Constructor for Task class."},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"     * Initializes a Task object with given description and marks it as not done."},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"     * @param description task description"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    public Task(String description) {"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"        this.description \u003d description;"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"        this.isDone \u003d false;"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"     * Returns an icon depending on whether this task is done."},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"     * @return X if done or blank if not done."},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"        return (isDone ? \"X\" : \" \"); //return X or blank space, X means done"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"     * Marks this task as done"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"    public void done() {"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"        this.isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"     * Returns the type of this task"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"     * @return Type of this task as char"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"    public char getType() {"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"        return this.type;"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"     * Returns the description of this task"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"     * @return A String description of this task"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"        return this.description;"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"     * Returns a boolean depending on whether this task is done"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":"     * @return Boolean depending on whether this task is done"},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"    public boolean getDoneStatus() {"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"        return this.isDone;"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"xinweit"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"xinweit"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.getDescription());"},{"lineNumber":64,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":65}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":" * TaskList class to store the list of tasks"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"        list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"     * Constructor for TaskList class"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"     * Initializes a TaskList object with list of tasks specified"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"     * @param list list of tasks"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"        this.list \u003d list;"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"     * Adds a task to list"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"     * @param task task to be added"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"    public void addTask(Task task) {"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"        list.add(task);"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"     * Deletes a task from list"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"     * @param num number of task to be deleted"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":"    public Task deleteTask(int num) {"},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"        return list.remove(num - 1);"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"     * Checks a task as done"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"     * @param task task to be checked as done"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"    public void checkAsDone(Task task) {"},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"        task.done();"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"        return this.list;"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":52}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":" * Todo class for todo tasks"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"     * Constructor for todo class."},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"     * Initializes a todo with specified description."},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"     * @param description description of the todo task"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    public Todo(String description) {"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"        this.type \u003d \u0027T\u0027;"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":23}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":" * User interface class for Duke\u0027s interaction with users, send messages etc."},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":" */"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    protected static final String HORIZONTAL_RULE \u003d \"____________________________________________________________\";"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"     * Constructor for Ui class."},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    public Ui() {"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"     * Prints greetings message at the start when user runs the Duke app."},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"    public static String greetings() {"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Hello! I\u0027m your personal assistant Fluffy\\n\""},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"                + \"How can I assist you?\";"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"     * Prints exit message when user inputs \"bye\"."},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"    public String exit() {"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Bye. Till next time!\";"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":37,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"xinweit"},"content":"     * Prints message when user adds a task to list"},{"lineNumber":39,"author":{"gitId":"xinweit"},"content":"     * @param list list of tasks"},{"lineNumber":40,"author":{"gitId":"xinweit"},"content":"     * @param addedTask task that is added"},{"lineNumber":41,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"xinweit"},"content":"    public String addTaskMessage(ArrayList\u003cTask\u003e list, Task addedTask) {"},{"lineNumber":43,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":44,"author":{"gitId":"xinweit"},"content":"                + addedTask + \"\\n\""},{"lineNumber":45,"author":{"gitId":"xinweit"},"content":"                + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":46,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":47,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":49,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"xinweit"},"content":"     * Prints message when user deletes a task from list"},{"lineNumber":51,"author":{"gitId":"xinweit"},"content":"     * @param list list of tasks"},{"lineNumber":52,"author":{"gitId":"xinweit"},"content":"     * @param deletedTask task that is deleted"},{"lineNumber":53,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"xinweit"},"content":"    public String deleteTaskMessage(ArrayList\u003cTask\u003e list, Task deletedTask) {"},{"lineNumber":55,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":56,"author":{"gitId":"xinweit"},"content":"                + deletedTask + \"\\n\""},{"lineNumber":57,"author":{"gitId":"xinweit"},"content":"                + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":58,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":59,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":61,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":62,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"xinweit"},"content":"     * Prints message when user checks a task as done"},{"lineNumber":64,"author":{"gitId":"xinweit"},"content":"     * @param task task that is checked as done"},{"lineNumber":65,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"xinweit"},"content":"    public String checkAsDoneMessage(Task task) {"},{"lineNumber":67,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + task;"},{"lineNumber":68,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":69,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":71,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"xinweit"},"content":"     * Prints message when user requests for tasks in list"},{"lineNumber":73,"author":{"gitId":"xinweit"},"content":"     * @param list list of tasks"},{"lineNumber":74,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"xinweit"},"content":"    public String listAllTasks(ArrayList\u003cTask\u003e list) {"},{"lineNumber":76,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":77,"author":{"gitId":"xinweit"},"content":"        int num \u003d 1;"},{"lineNumber":78,"author":{"gitId":"xinweit"},"content":"        for (Task task : list) {"},{"lineNumber":79,"author":{"gitId":"xinweit"},"content":"            message +\u003d String.format(\"%d. %s\", num, task) + \"\\n\";"},{"lineNumber":80,"author":{"gitId":"xinweit"},"content":"            num++;"},{"lineNumber":81,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":83,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":85,"author":{"gitId":"xinweit"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"xinweit"},"content":"     * Prints matching tasks in list"},{"lineNumber":87,"author":{"gitId":"xinweit"},"content":"     * @param keyword keyword to search for in list"},{"lineNumber":88,"author":{"gitId":"xinweit"},"content":"     * @param list list of tasks"},{"lineNumber":89,"author":{"gitId":"xinweit"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"xinweit"},"content":"    public String findTask(String keyword, ArrayList\u003cTask\u003e list) {"},{"lineNumber":91,"author":{"gitId":"xinweit"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":92,"author":{"gitId":"xinweit"},"content":"        String message \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":93,"author":{"gitId":"xinweit"},"content":"        for (Task task : list) {"},{"lineNumber":94,"author":{"gitId":"xinweit"},"content":"            if (task.getDescription().contains(keyword)) {"},{"lineNumber":95,"author":{"gitId":"xinweit"},"content":"                newList.add(task);"},{"lineNumber":96,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"xinweit"},"content":"        if (newList.size() \u003d\u003d 0) {"},{"lineNumber":99,"author":{"gitId":"xinweit"},"content":"            message +\u003d \"No matching tasks found. :^S\";"},{"lineNumber":100,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"xinweit"},"content":"        else {"},{"lineNumber":102,"author":{"gitId":"xinweit"},"content":"            for (Task task : newList) {"},{"lineNumber":103,"author":{"gitId":"xinweit"},"content":"                if (task.getDescription().contains(keyword)) {"},{"lineNumber":104,"author":{"gitId":"xinweit"},"content":"                    message +\u003d task + \"\\n\";"},{"lineNumber":105,"author":{"gitId":"xinweit"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"xinweit"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"xinweit"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"xinweit"},"content":"        return message;"},{"lineNumber":109,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":110}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"xinweit":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"xinweit":19}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"    Event event \u003d new Event(\"football competition\", \"2019-10-15\");"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"    public void getFormattedAtTest() {"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"        assertEquals(\"Oct 15 2019\", event.getFormattedAt());"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"    public void getStatusIconTest() {"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"        assertEquals(\" \", event.getStatusIcon());"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":20}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"public class UiTest {"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":14,"author":{"gitId":"xinweit"},"content":"    Ui ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":16,"author":{"gitId":"xinweit"},"content":"    @BeforeEach"},{"lineNumber":17,"author":{"gitId":"xinweit"},"content":"    public void setUp() {"},{"lineNumber":18,"author":{"gitId":"xinweit"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":19,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":21,"author":{"gitId":"xinweit"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"xinweit"},"content":"    public void greetingsTest() {"},{"lineNumber":23,"author":{"gitId":"xinweit"},"content":"        ui.greetings();"},{"lineNumber":24,"author":{"gitId":"xinweit"},"content":"        assertEquals(\"____________________________________________________________\\n\" +"},{"lineNumber":25,"author":{"gitId":"xinweit"},"content":"                \"Hello! I\u0027m your personal assistant Duke\\n\" +"},{"lineNumber":26,"author":{"gitId":"xinweit"},"content":"                \"How can I assist you?\\n\" +"},{"lineNumber":27,"author":{"gitId":"xinweit"},"content":"                \"____________________________________________________________\", outputStreamCaptor.toString().trim());"},{"lineNumber":28,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"xinweit"},"content":""},{"lineNumber":30,"author":{"gitId":"xinweit"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"xinweit"},"content":"    public void exitTest() {"},{"lineNumber":32,"author":{"gitId":"xinweit"},"content":"        ui.exit();"},{"lineNumber":33,"author":{"gitId":"xinweit"},"content":"        assertEquals(\"Bye. Till next time!\"+System.lineSeparator()+Ui.HORIZONTAL_RULE, outputStreamCaptor.toString().trim());"},{"lineNumber":34,"author":{"gitId":"xinweit"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"xinweit"},"content":"}"}],"authorContributionMap":{"xinweit":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"xinweit"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"xinweit"},"content":"deadline return book /by 2019-10-15"},{"lineNumber":3,"author":{"gitId":"xinweit"},"content":"event project meeting /at 2019-10-15"},{"lineNumber":4,"author":{"gitId":"xinweit"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"xinweit"},"content":"list"},{"lineNumber":6,"author":{"gitId":"xinweit"},"content":"event gathering /at 2019-10-15"},{"lineNumber":7,"author":{"gitId":"xinweit"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"xinweit"},"content":"list"},{"lineNumber":9,"author":{"gitId":"xinweit"},"content":"delete 2"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"delete 1"},{"lineNumber":11,"author":{"gitId":"xinweit"},"content":"list"},{"lineNumber":12,"author":{"gitId":"xinweit"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"xinweit"},"content":"bye"}],"authorContributionMap":{"xinweit":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"xinweit"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"xinweit":1,"-":20}}]
