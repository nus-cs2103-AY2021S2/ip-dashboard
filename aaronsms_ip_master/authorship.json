[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"    id \u0027java-library\u0027"},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"repositories {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"    jcenter()"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"checkstyle {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"dependencies {"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-engine:5.7.0\u0027"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"test {"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    useJUnitPlatform()"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    testLogging.showStandardStreams \u003d true"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    testLogging {"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    // listen to events in the test execution lifecycle"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    beforeTest { "},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"        descriptor -\u003e logger.lifecycle(\"Running test: \" + descriptor)"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    // listen to standard out and standard error of the test JVM(s)"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    onOutput { "},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        descriptor, event -\u003e logger.lifecycle(\"Test: \" + descriptor + \" produced standard out/err: \" + event.message)"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"archivesBaseName \u003d \u0027Duke\u0027"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"mainClassName \u003d \u0027duke.Duke\u0027"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"jar {"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    manifest {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        attributes \"Main-Class\": \"$mainClassName\""},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":48}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":":end"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":":omega"}],"authorContributionMap":{"aaronsms":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * The settings file is used to specify which projects to include in your build."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" * in the user manual at https://docs.gradle.org/6.8/userguide/multi_project_builds.html"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"rootProject.name \u003d \u0027ip\u0027"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"include(\u0027app\u0027)"}],"authorContributionMap":{"aaronsms":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.command.Parser;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * Encapsulates Duke, the chatbot application."},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    private final Ui ui;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    private final Storage storage;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    private final TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class Duke."},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"     * @param   filePath    the file path location at which Duke stores data."},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    public Duke(String filePath) {"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        TaskList loaded \u003d storage.loadFile();"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        if (loaded \u003d\u003d null) {"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"            storage.createDirectoryAndFile();"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"            tasks \u003d loaded;"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * Runs the program. This method is the starting point of the program."},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        ui.showWelcome();"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        boolean isExit \u003d false;"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        final Scanner scan \u003d new Scanner(System.in);"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"        while (!isExit \u0026\u0026 scan.hasNextLine()) {"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            final String input \u003d scan.nextLine().strip();"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"            ui.showLine();"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            if (input.equals(\"\")) {"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"                System.out.println(\"\\t...\");"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"                try {"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"                    final Command command \u003d Parser.parseCommand(input);"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"                    command.execute(tasks, ui, storage);"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"                    isExit \u003d command.isExit();"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"                } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"            ui.showLine();"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        scan.close();"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"     * Runs the program with the file path location of \"./data/task.txt\"."},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"     * @param   args    unused"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"    public static void main(final String[] args) {"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"        new Duke(\"./data/tasks.txt\").run();"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"aaronsms":71}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import duke.command.Parser;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":" * Encapsulates the storage domain that provides persistence to the Duke. This"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":" * class handles file and directory creation, file saving and loading."},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    private final String filePath;"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class Storage."},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"     * @param   filePath    the file path location this Storage instance is"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     *                      directed to"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    public Storage(String filePath) {"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     * Creates a directory at most 1 level deep and a file in the location"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * specified in the file path of this Storage instance."},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    public void createDirectoryAndFile() {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"            final int i \u003d filePath.lastIndexOf(\"/\");"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            String dirPath \u003d filePath.substring(0, i);"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"            Path dir \u003d Paths.get(dirPath);"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            Path path \u003d Paths.get(filePath);"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            if (!Files.exists(dir)) {"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"                Files.createDirectory(dir);"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            Files.createFile(path);"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Parent directory does not exist.\");"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     * Saves a file containing the data in the file path location of this"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * Storage instance."},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"     * @param   data    a list of String"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    public void saveFile(List\u003cString\u003e data) {"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"            createDirectoryAndFile();"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"            Files.write(path, data, StandardCharsets.UTF_8);"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Duke cannot save file.\");"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"     * Returns a TaskList object by loading and processing the file in file path"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"     * location of this Storage instance. This method will return null if the"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"     * file specified in the path location does not exist."},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     * @return          a TaskList instance decoded by the Parser class"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     * @see             duke.command.Parser"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    public TaskList loadFile() {"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"            List\u003cTask\u003e t \u003d lines.stream()"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"                    .map(str -\u003e Parser.parseAsTask(str))"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"                    .filter(task -\u003e task !\u003d null)"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"            return new TaskList(t);"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Duke cannot read the file.\");"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":100}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" * Represents a collection of Task instances."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class TaskList supplied with some Task instances."},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     * @param tasks a list of Tasks instances"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class TaskList."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    public TaskList() {"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded format of the list of tasks in this TaskList object."},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded format of the list of tasks"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    public List\u003cString\u003e encode() {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        return tasks.stream().map(task -\u003e task.encode()).filter(str -\u003e str !\u003d null).collect(Collectors.toList());"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"     * Returns the number of tasks present in this TaskList instance."},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"     * @return the number of tasks present in this TaskList instance"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"    public int size() {"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        return tasks.size();"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * Marks the status of a Task instance at a particular index as finished."},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     * @see duke.task.Task#markAsDone()"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"    public void markAsDone(int index) {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        tasks.get(index).markAsDone();"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"     * Returns the task description of a Task instance at a particular index."},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    public String getTaskDescription(int index) {"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"        return tasks.get(index).toString();"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"     * Returns the task description of all Task instances in this TaskList instance."},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    public void list() {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        int i \u003d 0;"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        for (final Task t : tasks) {"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\t%d. %s\\n\", ++i, t);"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     * Returns a list of string representation of Tasks instances that contains the"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     * keyword ignoring case."},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"     * @param keyword the keyword to be tested with"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"     * @return a list of tasks that matches the keyword"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"    public List\u003cString\u003e find(String keyword) {"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"        return tasks.stream().filter(task -\u003e task.isMatching(keyword)).map(task -\u003e task.toString())"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"                .collect(Collectors.toList());"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"     * Removes a Task instance at a particular index."},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"    public Task delete(int index) {"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"        return tasks.remove(index);"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * Appends a Task instance to the end of this TaskList instance."},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"     * @param task the Task instance to be added to the collection"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"    public boolean add(Task task) {"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"        return tasks.add(task);"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":111}},{"path":"src/main/java/duke/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":5}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * Encapsulates the Ui component of Duke."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    private static final String LINE \u003d \"────────────────────────────────────\""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"        + \"────────────────────────────────────────────\";"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"     * Prints the starting header logo and text to the command line."},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    public void showWelcome() {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        showLine();"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"     * Prints a horizontal line to the command line."},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    public void showLine() {"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        System.out.println(LINE);"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":29}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.TaskType;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"public class AddCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    private TaskType type;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    private String task;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    private String datetime;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class AddCommand on tasks without a datetime."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"     * @param   type    the task type"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * @param   task    the task description"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    public AddCommand(TaskType type, String task) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        this.task \u003d task;"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d null;"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class AddCommand on tasks with a datetime."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * @param   type        the task type"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     * @param   task        the task description"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * @param   datetime    the datetime"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    public AddCommand(TaskType type, String task, String datetime) {"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        this.type \u003d type;"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        this.task \u003d task;"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d datetime;"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        boolean isInsert \u003d false;"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        if (tasks.size() \u003e\u003d 100) {"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tSorry. The database is full!\");"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"            switch (type) {"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"            case TODO:"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"                tasks.add(new ToDo(task));"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"                isInsert \u003d true;"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"                break;"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"            case EVENT:"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"                Event event \u003d null;"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"                final String[] eventDeadline \u003d this.datetime.split(\" \", 2);"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"                if (eventDeadline.length \u003d\u003d 1) {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(task, eventDeadline[0].strip());"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"                } else if (eventDeadline.length \u003d\u003d 2) {"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(task, eventDeadline[0].strip(), eventDeadline[1].strip());"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"                if (event !\u003d null) {"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"                    tasks.add(event);"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"                    isInsert \u003d true;"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"            case DEADLINE:"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"                Deadline deadline \u003d null;"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"                final String[] deadlineDatetime \u003d this.datetime.split(\" \", 2);"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"                if (deadlineDatetime.length \u003d\u003d 1) {"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(task, deadlineDatetime[0].strip());"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"                } else if (deadlineDatetime.length \u003d\u003d 2) {"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(task, deadlineDatetime[0].strip(), deadlineDatetime[1].strip());"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"                if (deadline !\u003d null) {"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"                    tasks.add(deadline);"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"                    isInsert \u003d true;"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"            default:"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"                return;"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"        if (isInsert) {"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tGot it. I\u0027ve added this task: \");"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\tTask added: %s\\n\", tasks.getTaskDescription(tasks.size() - 1));"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\tNow you have %d task%s in the list.\\n\", tasks.size(), tasks.size() \u003d\u003d 1 ? \"\" : \"s\");"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":95}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public interface Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"    boolean isExit();"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    void execute(TaskList tasks, Ui ui, Storage storage);"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":10}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    private final int index;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"        this.index \u003d index;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"        if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"            final Task removed \u003d tasks.delete(index);"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tNoted. I\u0027ve removed this task: \");"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\t%s\\n\", removed);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\tNow you have %d task%s in the list.\\n\", tasks.size(), tasks.size() \u003d\u003d 1 ? \"\" : \"s\");"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tOops! The index is out of bound.\");"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":32}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public class DoneCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"    private final int index;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    public DoneCommand(int index) {"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"        this.index \u003d index;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"            tasks.markAsDone(index);"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tNice! I\u0027ve marked this task as done:\");"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\t%s\\n\", tasks.getTaskDescription(index));"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tOops! The index is out of bound.\");"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":30}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"public class ExitCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"        return true;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        final List\u003cString\u003e data \u003d tasks.encode();"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        storage.saveFile(data);"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        System.out.println(\"\\tBye. Hope to see you again soon!\");"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"public class FindCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    private final String keyword;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tHmm... You do not have any tasks!\");"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"            return;"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"        final List\u003cString\u003e matchingTasks \u003d tasks.find(keyword);"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tHmm... You do not have any matching tasks!\");"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"            return;"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        int i \u003d 0;"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"        for (String str : matchingTasks) {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"            System.out.printf(\"\\t%d. %s\\n\", ++i, str);"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":42}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public class ListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tHmm... You do not have any tasks!\");"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tHere are the tasks in your list:\");"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        tasks.list();"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":24}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.TaskType;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddDeadlineCommandParseException;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddEventCommandParseException;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddToDoCommandParseException;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.exception.DeleteCommandParseException;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.exception.DoneCommandParseException;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ExitCommandParseException;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import duke.exception.FindCommandParseException;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ListCommandParseException;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.exception.UnknownCommandParseException;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":" * Encapsulates a utility parser that parses task from the saved file and"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":" * commands inputted by the user."},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"public class Parser {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     * Returns a task decoded from the encoded string representation of task. This"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     * parser will return null on invalid encoded strings."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     * @param str the encoded string representation of task"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * @return the task corresponding to the encoded representation"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    public static Task parseAsTask(String str) {"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        final String[] tokens \u003d str.split(\" \\\\| \");"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        String[] datetime;"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"            switch (tokens[0]) {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"            case \"T\":"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"                final ToDo todo \u003d new ToDo(tokens[2]);"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"                    todo.markAsDone();"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"                return todo;"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            case \"D\":"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"                datetime \u003d tokens[3].split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"                Deadline deadline;"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"                if (datetime.length \u003d\u003d 2) {"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(tokens[2], datetime[0].strip(), datetime[1].strip());"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"                } else {"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(tokens[2], datetime[0].strip());"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"                    deadline.markAsDone();"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"                return deadline;"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"            case \"E\":"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"                datetime \u003d tokens[3].split(\" \", 2);"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"                Event event;"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"                if (datetime.length \u003d\u003d 2) {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(tokens[2], datetime[0].strip(), datetime[1].strip());"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(tokens[2], datetime[0].strip());"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"                    event.markAsDone();"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"                return event;"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"            default:"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"                return null;"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"     * Returns a command decoded from the string inputted by the users. This parser"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     * will throw Exceptions on invalid input strings."},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"     * @param fullCommand the encoded string representation of task"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"     * @return the task corresponding to the encoded representation"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"    public static Command parseCommand(String fullCommand) throws Exception {"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"        final String[] tokens \u003d fullCommand.strip().split(\"\\\\s+\", 2);"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"        final String command \u003d tokens[0];"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"        switch (command) {"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"        case \"bye\":"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 1) {"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"                throw new ExitCommandParseException();"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"            return new ExitCommand();"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"        case \"list\":"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 1) {"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"                throw new ListCommandParseException();"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"            return new ListCommand();"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"        case \"find\":"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"                throw new FindCommandParseException();"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"            return new FindCommand(tokens[1]);"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"        case \"delete\":"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"                throw new DeleteCommandParseException();"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"            try {"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"                final int deleteIndex \u003d Integer.parseInt(tokens[1]) - 1;"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"                return new DeleteCommand(deleteIndex);"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"            } catch (final NumberFormatException e) {"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"                throw new NumberFormatException(\"\\tOops! Please input a number.\");"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"        case \"done\":"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"                throw new DoneCommandParseException();"},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"            try {"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"                final int doneIndex \u003d Integer.parseInt(tokens[1]) - 1;"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"                return new DoneCommand(doneIndex);"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"                throw new NumberFormatException(\"\\tOops! Please input a number.\");"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        case \"todo\":"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"                throw new AddToDoCommandParseException();"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.TODO, tokens[1]);"},{"lineNumber":133,"author":{"gitId":"aaronsms"},"content":"        case \"deadline\":"},{"lineNumber":134,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":135,"author":{"gitId":"aaronsms"},"content":"                throw new AddDeadlineCommandParseException();"},{"lineNumber":136,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"aaronsms"},"content":"            final String[] splitOnBy \u003d tokens[1].split(\"\\\\s+/by\\\\s+\", 2);"},{"lineNumber":138,"author":{"gitId":"aaronsms"},"content":"            if (splitOnBy.length !\u003d 2) {"},{"lineNumber":139,"author":{"gitId":"aaronsms"},"content":"                throw new AddDeadlineCommandParseException();"},{"lineNumber":140,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":142,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.DEADLINE, splitOnBy[0], splitOnBy[1]);"},{"lineNumber":143,"author":{"gitId":"aaronsms"},"content":"        case \"event\":"},{"lineNumber":144,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":145,"author":{"gitId":"aaronsms"},"content":"                throw new AddEventCommandParseException();"},{"lineNumber":146,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"aaronsms"},"content":"            final String[] splitOnAt \u003d tokens[1].split(\"\\\\s+/at\\\\s+\", 2);"},{"lineNumber":148,"author":{"gitId":"aaronsms"},"content":"            if (splitOnAt.length !\u003d 2) {"},{"lineNumber":149,"author":{"gitId":"aaronsms"},"content":"                throw new AddEventCommandParseException();"},{"lineNumber":150,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":152,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.EVENT, splitOnAt[0], splitOnAt[1]);"},{"lineNumber":153,"author":{"gitId":"aaronsms"},"content":"        default:"},{"lineNumber":154,"author":{"gitId":"aaronsms"},"content":"            throw new UnknownCommandParseException();"},{"lineNumber":155,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":157}},{"path":"src/main/java/duke/exception/AddDeadlineCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddDeadlineCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddDeadlineCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"deadline \u003ctodo\u003e /by \u003cdatetime\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/AddEventCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddEventCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddEventCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"event \u003ctodo\u003e /at \u003cdatetime\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/AddToDoCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddToDoCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddToDoCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"todo \u003ctask\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/DeleteCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class DeleteCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public DeleteCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"delete \u003cindex\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/DoneCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class DoneCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public DoneCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"done \u003cindex\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/ExitCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class ExitCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public ExitCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"bye\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/FindCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class FindCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public FindCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"find \u003ckeyword\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/ListCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class ListCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public ListCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"list\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/UnknownCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class UnknownCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public UnknownCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * Represents a task item with a deadline specified by a due date and possibly a"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" * due time."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    public final LocalTime time;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    private Deadline(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d null;"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    private Deadline(String description, LocalDate date, LocalTime time) {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d time;"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Deadline with only the due date."},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Deadline instance"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * @return a Deadline instance with the description and the due date"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public static Deadline create(String description, String dateStr) {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"            return new Deadline(description, date);"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Deadline with both the due date and time."},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Deadline instance"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * @param timeStr     the string representation of time with the form"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *                    \"hh:mm:[ss]\""},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @return a deadline instance with the description, the due date and time"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    public static Deadline create(String description, String dateStr, String timeStr) {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            LocalTime time \u003d LocalTime.parse(timeStr, DateTimeFormatter.ISO_LOCAL_TIME);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"            return new Deadline(description, date, time);"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of the due date and time."},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of the due date and time"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    public String getDateTime() {"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"            return date.toString();"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"%s %s\", this.date, this.time);"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Deadline instance"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Deadline instance"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getStatusIcon(), this.description, this.getDateTime());"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this Deadline instance."},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this Deadline instance"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"D | %s | %s | %s\", this.isDone ? \"1\" : \"0\", this.description, this.getDateTime());"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two Deadline instances are equivalent."},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     * @return true if two Deadline instances are equivalent"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof Deadline)) {"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"        Deadline other \u003d (Deadline) o;"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone \u0026\u0026 this.date.equals(other.date)"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"                \u0026\u0026 (this.time \u003d\u003d null || this.time.equals(other.time));"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this Deadline instance."},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this Deadline instance"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 37;"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((date \u003d\u003d null) ? 0 : date.hashCode());"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((time \u003d\u003d null) ? 0 : time.hashCode());"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":132}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * Represents an event specified by a date and possibly a time."},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    public final LocalDate date;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public final LocalTime time;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    private Event(String description, LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d null;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    private Event(String description, LocalDate date, LocalTime time) {"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d time;"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Event with only the date."},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Event instance"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * @return an Event instance with a description and a date"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    public static Event create(String description, String dateStr) {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            return new Event(description, date);"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Event with both the date and time."},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Event instance"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"     * @param timeStr     the string representation of time with the form"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     *                    \"hh:mm:[ss]\""},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     * @return a deadline instance with a description, a due date and time"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"    public static Event create(String description, String dateStr, String timeStr) {"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"            LocalTime time \u003d LocalTime.parse(timeStr, DateTimeFormatter.ISO_LOCAL_TIME);"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            return new Event(description, date, time);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of the date and time."},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of the date and time"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"    public String getDateTime() {"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"            return date.toString();"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"%s %s\", this.date, this.time);"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Event instance"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Event instance"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getStatusIcon(), this.description, this.getDateTime());"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this Event instance."},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this Event instance"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"E | %s | %s | %s\", this.isDone ? \"1\" : \"0\", this.description, this.getDateTime());"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two Event instances are equivalent."},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * @return true if two Event instances are equivalent"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof Event)) {"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        Event other \u003d (Event) o;"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone \u0026\u0026 this.date.equals(other.date)"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"                \u0026\u0026 (this.time \u003d\u003d null || this.time.equals(other.time));"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this Event instance."},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this Event instance"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 31;"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((date \u003d\u003d null) ? 0 : date.hashCode());"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((time \u003d\u003d null) ? 0 : time.hashCode());"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":131}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * Represents a task item that can be added and listed in Duke."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    protected final String description;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"     * Default constructor for subclasses of Task."},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"     * @param isDone      the status of the task item"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"     * @param description the description for the task item"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    protected Task(final boolean isDone, final String description) {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    public abstract String encode();"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     * Returns a tick if this Task object is finished and a cross otherwise."},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * @return the status icon based on the status of this Task object."},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        return (this.isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * Marked the status of this Task object as finished."},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public void markAsDone() {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        this.isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"     * Returns true if this task description contains the keyword ignoring case."},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"     * @param keyword the keyword to be tested with"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"     * @return true if this task description matches the keyword"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"    public boolean isMatching(String keyword) {"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        return containsIgnoreCase(description, keyword);"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"    private static boolean containsIgnoreCase(String str, String searchStr) {"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"        if (str \u003d\u003d null || searchStr \u003d\u003d null) {"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"        final int length \u003d searchStr.length();"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"        if (length \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"            return true;"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        for (int i \u003d str.length() - length; i \u003e\u003d 0; i--) {"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"            if (str.regionMatches(true, i, searchStr, 0, length)) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"                return true;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Task instance"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Task instance"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":79}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * Represents a todo task item without a specific deadline."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class ToDo."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this ToDo instance"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of this ToDo instance."},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this ToDo instance"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[T][%s] %s\", this.getStatusIcon(), this.description);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this ToDo instance."},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this ToDo instance"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"T | %s | %s\", this.isDone ? \"1\" : \"0\", this.description);"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two ToDo items are equivalent."},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"     * @return true if two ToDo items are equivalent"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof ToDo)) {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        ToDo other \u003d (ToDo) o;"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone;"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this ToDo instance."},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this ToDo instance"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 31;"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":66}},{"path":"src/test/java/duke/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddToDoCommandParseException;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ListCommandParseException;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import duke.exception.UnknownCommandParseException;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"public class ParserTest {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_emptyString_returnNull() {"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), null);"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_invalidString_returnNull() {"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"K | 1 | asdf\";"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), null);"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_todoSuccess_returnTask() {"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"T | 1 | read book\";"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d new ToDo(\"read book\");"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        output.markAsDone();"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_deadlineSuccess_returnTask() {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"D | 0 | return book | 2000-12-20\";"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d Deadline.create(\"return book\", \"2000-12-20\");"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_eventSuccess_returnTask() {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"E | 1 | lend book | 2020-05-12 12:30:13\";"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d Event.create(\"lend book\", \"2020-05-12\", \"12:30:13\");"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        output.markAsDone();"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidAddCommand_exceptionThrow() {"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"todo\";"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(AddToDoCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tPlease follow this format \\\"todo \u003ctask\u003e\\\".\");"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidListCommand_exceptionThrow() {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"list asdf\";"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(ListCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tPlease follow this format \\\"list\\\".\");"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidDoneCommand_exceptionThrow() {"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"done asdf\";"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(NumberFormatException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Please input a number.\");"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_unknownCommand_exceptionThrow() {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"asfasdaasfd\";"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(UnknownCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_emptyCommand_exceptionThrow() {"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"\";"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(UnknownCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":87}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"deadline math assignment /by 2021-01-27 "},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"event project meeting /at    2021-01-29   10:30"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"delete 2"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"done 2"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"delete 4"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"deadline"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"event"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"todo todo"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"list list"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"bye bye"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"deadline physics homework"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"event dinner with Jen"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"deadline programming assignment /by"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"event class gathering /at"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"deadline         physics homework       /by     Monday      "},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"   event      dinner with Jen  /at      2021-01-28"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"deadline chemistry assignment /by /by /by 2021-02-25"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"event tea with Wilson /at /by /at 30 Jan"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"delete       4"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"done    4"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"   delete 6  "},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"done asdf"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"delete 13edewq11 2 r2"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"delete 7"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"done 8"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"list"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"bye"}],"authorContributionMap":{"aaronsms":38}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/duke/exception/*.java ../src/main/java/duke/command/*.java  ../src/main/java/duke/task/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    rm -r ACTUAL.TXT EXPECTED-UNIX.TXT ./data"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    rm -r ACTUAL.TXT EXPECTED-UNIX.TXT ./data"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":40,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"aaronsms":4}}]
