[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    jcenter()"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-engine:5.7.0\u0027"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"mainClassName \u003d \u0027duke.Launcher\u0027"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"checkstyle {"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"}"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"run {"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    standardInput \u003d System.in"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":54}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"Duke is a lightweight todo list app that helps to keep track of your todos,"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"deadlines and events."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"\u003cp align\u003d\"middle\"\u003e"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"  \u003cimg src\u003d\"https://aaronsms.github.io/ip/userGuide.png\" width\u003d\"200\" /\u003e "},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"  \u003cimg src\u003d\"https://aaronsms.github.io/ip/Ui.png\" width\u003d\"200\" /\u003e"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"  \u003cimg src\u003d\"https://aaronsms.github.io/ip/userGuide3.png\" width\u003d\"200\" /\u003e"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"\u003c/p\u003e"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"### Adding tasks"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"There are three types of tasks, a todo item, a deadline and an event. Both"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"the deadline and event are associated with a date time."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"### Deleting tasks"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"One task can be deleted at each time, specified by its index on the list."},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"The deleted task will not be recoverable."},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"### Marking tasks as complete"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"Every task can be marked as complete. This action is however not reversible. "},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"Additional information such as the number of tasks completed the past week "},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"is provided."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"### Listing the current tasks"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"All tasks available including those marked as done will be listed in the order"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"that they are added. Information such as whether the task is complete will be"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"displayed."},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"### Searching for tasks"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"All tasks that matches with specified keyword will be listed in the order that"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"they are added. Information such as whether the task is complete will be"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"displayed."},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"### Exiting the program"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"This will be the proper way to exit the program. An encoded file will be saved"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"in the directory \"/data/duke.txt\". If the file is present, the program will"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"load previous state when it is run."},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"### `todo` - Add todos"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"Create a new todo with the given name and adds it to the list of tasks."},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"`todo TASK_NAME`"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"Example of usage: "},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"`todo read book`"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"Task added: [T][X] read book"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"Now you have 1 task in the list."},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"### `deadline` - Add deadlines"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"Create a new deadline with the given name and date time and adds it to the list"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"of tasks."},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"`deadline TASK_NAME /by DATETIME`"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"DATETIME is in the format `yyyy-MM-dd HH:mm` or `yyyy-MM-dd`."},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"Example of usage: "},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"`deadline A-UserGuide /by 2020-02-19`"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"Task added: [D][X] A-UserGuide (by: 2020-02-19)"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"Now you have 2 tasks in the list."},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"### `event` - Add events"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"Create a new event with the given name and date time and adds it to the list"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"of tasks."},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"`event TASK_NAME /at DATETIME`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"DATETIME is in the format `yyyy-MM-dd HH:mm` or `yyyy-MM-dd`."},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"`event UNICON /at 2020-02-20`"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"Task added: [E][X] UNICON (at: 2020-02-20)"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"Now you have 3 tasks in the list."},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"### `delete` - Delete tasks"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"Removes the task with the given index from the list of tasks."},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"`delete INDEX`"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"INDEX should be in the range of the number of tasks available in the list."},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"Example of usage:"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"`delete 2`"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":133,"author":{"gitId":"aaronsms"},"content":"Nice! I\u0027ve removed this task:"},{"lineNumber":134,"author":{"gitId":"aaronsms"},"content":"    [D][X] A-UserGuide (by: 2020-02-19)"},{"lineNumber":135,"author":{"gitId":"aaronsms"},"content":"Now you have 2 task(s) in the list."},{"lineNumber":136,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":137,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":138,"author":{"gitId":"aaronsms"},"content":"### `done` - Mark tasks as done"},{"lineNumber":139,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":140,"author":{"gitId":"aaronsms"},"content":"Mark the task with the given index from the task list as done."},{"lineNumber":141,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":142,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":143,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":144,"author":{"gitId":"aaronsms"},"content":"`done INDEX`"},{"lineNumber":145,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":146,"author":{"gitId":"aaronsms"},"content":"Example of usage:"},{"lineNumber":147,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":148,"author":{"gitId":"aaronsms"},"content":"`done 1`"},{"lineNumber":149,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":150,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":151,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":152,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":153,"author":{"gitId":"aaronsms"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":154,"author":{"gitId":"aaronsms"},"content":"    [T][1] read book"},{"lineNumber":155,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":156,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":157,"author":{"gitId":"aaronsms"},"content":"### `list` - List all available tasks"},{"lineNumber":158,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":159,"author":{"gitId":"aaronsms"},"content":"List all available tasks including those marked as complete."},{"lineNumber":160,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":161,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":162,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":163,"author":{"gitId":"aaronsms"},"content":"`list`"},{"lineNumber":164,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":165,"author":{"gitId":"aaronsms"},"content":"Example of usage:"},{"lineNumber":166,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":167,"author":{"gitId":"aaronsms"},"content":"`list`"},{"lineNumber":168,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":169,"author":{"gitId":"aaronsms"},"content":"Expected outcome:"},{"lineNumber":170,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":171,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":172,"author":{"gitId":"aaronsms"},"content":"Here are the tasks in your list:"},{"lineNumber":173,"author":{"gitId":"aaronsms"},"content":"    [T][1] read book"},{"lineNumber":174,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":175,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":176,"author":{"gitId":"aaronsms"},"content":"### `bye` - Exit the program"},{"lineNumber":177,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":178,"author":{"gitId":"aaronsms"},"content":"Save the current state and exit the program."},{"lineNumber":179,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":180,"author":{"gitId":"aaronsms"},"content":"Format:"},{"lineNumber":181,"author":{"gitId":"-"},"content":""},{"lineNumber":182,"author":{"gitId":"aaronsms"},"content":"`bye`"},{"lineNumber":183,"author":{"gitId":"-"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":185,"author":{"gitId":"-"},"content":""},{"lineNumber":186,"author":{"gitId":"aaronsms"},"content":"`bye`"},{"lineNumber":187,"author":{"gitId":"-"},"content":""},{"lineNumber":188,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":189,"author":{"gitId":"-"},"content":""},{"lineNumber":190,"author":{"gitId":"aaronsms"},"content":"```"},{"lineNumber":191,"author":{"gitId":"aaronsms"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":192,"author":{"gitId":"aaronsms"},"content":"```"}],"authorContributionMap":{"-":18,"aaronsms":174}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":":end"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":":omega"}],"authorContributionMap":{"aaronsms":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * The settings file is used to specify which projects to include in your build."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" * in the user manual at https://docs.gradle.org/6.8/userguide/multi_project_builds.html"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"rootProject.name \u003d \u0027ip\u0027"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"include(\u0027app\u0027)"}],"authorContributionMap":{"aaronsms":11}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"public class DialogBox extends HBox {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    private Label dialog;"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    private ImageView displayPicture;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for the class DialogBox."},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"     * @param   text    the description of the dialog"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"     * @param   img     the image of the dialog"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    public DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"     * right."},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    private void flip() {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * Returns an instance of the class DialogBox from the user."},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @param   text    the description of the dialog"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     * @param   img     the image of the dialog"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"     * @return          an instance of the class DialogBox"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"        return new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"     * Returns an instance of the class DialogBox from Duke."},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"     * @param   text    the description of the dialog"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"     * @param   img     the image of the dialog"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"     * @return          an instance of the class DialogBox"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"        db.flip();"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"        return db;"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":76}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.command.Parser;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" * Encapsulates Duke, the chatbot application."},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    private final Ui ui;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    private final Storage storage;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    private final TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class Duke."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * @param filePath the file path location at which Duke stores data"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    public Duke(String filePath) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        TaskList loaded \u003d storage.loadFile();"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        if (loaded \u003d\u003d null) {"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"            storage.createDirectoryAndFile();"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"            tasks \u003d loaded;"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     * Returns a response from Duke by entering an user input command."},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * @param   input   input command by the user"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     * @return          appropriate response to the input command"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    public String getResponse(String input) {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        if (input.equals(\"\")) {"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"            return \"\\t...\";"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"                final Command command \u003d Parser.parseCommand(input);"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"                return command.executeAndGetResponse(tasks, ui, storage);"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"            } catch (Exception e) {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"                return e.getMessage();"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"aaronsms":50}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    private Duke duke \u003d new Duke(\"./data/tasks.txt\");"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.Priority;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"        DialogBox user \u003d DialogBox.getUserDialog(input, userImage);"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"        DialogBox duke \u003d DialogBox.getDukeDialog(response, dukeImage);"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"        HBox.setHgrow(user, Priority.ALWAYS);"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"        HBox.setHgrow(duke, Priority.ALWAYS);"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"        dialogContainer.getChildren().addAll(user, duke);"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"        userInput.clear();"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"            CompletableFuture\u003cVoid\u003e cf \u003d CompletableFuture.runAsync(() -\u003e {"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"                try {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"                    Thread.sleep(1500);"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"                } catch (InterruptedException e) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"                    e.printStackTrace();"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"            });"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"            cf.thenRun(Platform::exit).thenRun(() -\u003e System.exit(0));"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":70}},{"path":"src/main/java/duke/Statistics.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import java.util.Queue;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"public class Statistics {"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    final Queue\u003cLocalDateTime\u003e datetime;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for Statistics class."},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     * @param   dateTime    the list of datetime the user has completed."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"     **/"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    public Statistics(List\u003cLocalDateTime\u003e dateTime) {"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d new LinkedList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        this.datetime.addAll(dateTime);"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    public Statistics() {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d new LinkedList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    public void addCompletionDatetime() {"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"        datetime.add(LocalDateTime.now());"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"    public int getCompletedTasksCountLastWeek() {"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"        trimCompletionDatetimeLastWeek();"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        return datetime.size();"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    private void trimCompletionDatetimeLastWeek() {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        LocalDateTime currentDateTime \u003d LocalDateTime.now();"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        LocalDateTime dt \u003d datetime.peek();"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        while (dt !\u003d null) {"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"            if (!isLaterThanOneWeek(dt, currentDateTime)) {"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"                return;"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"            datetime.poll();"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"            dt \u003d datetime.peek();"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"    private static boolean isLaterThanOneWeek(LocalDateTime dt, LocalDateTime now) {"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"        assert(dt !\u003d null);"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"        long numberOfDays \u003d ChronoUnit.DAYS.between(dt, now);"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"        return numberOfDays \u003e 7;"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"    public List\u003cString\u003e encode() {"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"        return datetime.stream().map(dt -\u003e dt.toString()).collect(Collectors.toList());"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":60}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.command.Parser;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":" * Encapsulates the storage domain that provides persistence to the Duke. This"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":" * class handles file and directory creation, file saving and loading."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    private final String filePath;"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class Storage."},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     * @param   filePath    the file path location this Storage instance is"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     *                      directed to"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    public Storage(String filePath) {"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * Creates a directory at most 1 level deep and a file in the location"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * specified in the file path of this Storage instance."},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public void createDirectoryAndFile() {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            final int i \u003d filePath.lastIndexOf(\"/\");"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"            String dirPath \u003d filePath.substring(0, i);"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            Path dir \u003d Paths.get(dirPath);"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            Path path \u003d Paths.get(filePath);"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"            if (!Files.exists(dir)) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"                Files.createDirectory(dir);"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"            Files.createFile(path);"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Parent directory does not exist.\");"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * Saves a file containing the data in the file path location of this"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     * Storage instance."},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"     * @param   data    a list of String"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"    public void saveFile(List\u003cString\u003e data) {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            createDirectoryAndFile();"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"            Files.write(path, data, StandardCharsets.UTF_8);"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Duke cannot save file.\");"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"     * Returns a TaskList object by loading and processing the file in file path"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"     * location of this Storage instance. This method will return null if the"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"     * file specified in the path location does not exist."},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     * @return          a TaskList instance decoded by the Parser class"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"     * @see             duke.command.Parser"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    public TaskList loadFile() {"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"        Path path \u003d Paths.get(filePath);"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"        if (!Files.exists(path)) {"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"            List\u003cString\u003e lines \u003d Files.readAllLines(path, StandardCharsets.UTF_8);"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"            List\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"            List\u003cString\u003e stats \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"            int i \u003d 0;"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"            for (; i \u003c lines.size(); i++) {"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"                if (lines.get(i).equals(\"%\")) {"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"                    break;"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"                tasks.add(lines.get(i));"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"            for (i++; i \u003c lines.size(); i++) {"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"                stats.add(lines.get(i));"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"            List\u003cTask\u003e t \u003d tasks.stream()"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"                    .map(str -\u003e Parser.parseAsTask(str))"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"                    .filter(task -\u003e task !\u003d null)"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"                    .collect(Collectors.toList());"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"            Statistics s \u003d Parser.parseAsStats(stats);"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"            assert(!t.contains(null));"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"            return new TaskList(t, s);"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        } catch (IOException e) {"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"            System.err.println(\"Duke cannot read the file.\");"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"            e.printStackTrace();"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":118}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" * Represents a collection of Task instances."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    private final Statistics stats;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class TaskList supplied with some Task instances."},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"     * @param tasks a list of Tasks instances"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"     * @param stats a Statistics instance"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    public TaskList(List\u003cTask\u003e tasks, Statistics stats) {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        this.stats \u003d stats;"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class TaskList."},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    public TaskList() {"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        this.stats \u003d new Statistics();"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded format of the list of tasks in this TaskList object."},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded format of the list of tasks"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"    public List\u003cString\u003e encode() {"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"        List\u003cString\u003e encoding \u003d tasks.stream()"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"            .map(task -\u003e task.encode())"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"            .filter(str -\u003e str !\u003d null)"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            .collect(Collectors.toList());"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        encoding.add(\"%\");"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        encoding.addAll(stats.encode());"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"        return encoding;"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * Returns the number of tasks present in this TaskList instance."},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"     * @return the number of tasks present in this TaskList instance"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    public int size() {"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"        return tasks.size();"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"     * Marks the status of a Task instance at a particular index as finished."},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"     * @see duke.task.Task#markAsDone()"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"    public void markAsDone(int index) {"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        boolean wasNotAlreadyDone \u003d tasks.get(index).markAsDone();"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"        if (wasNotAlreadyDone) {"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"            stats.addCompletionDatetime();"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     * Returns the total number of completed tasks in the past week."},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"    public int getCompletedTasksCountLastWeek() {"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"        return stats.getCompletedTasksCountLastWeek();"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"     * Returns the task description of a Task instance at a particular index."},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"    public String getTaskDescription(int index) {"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"        return tasks.get(index).toString();"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"     * Returns the task description of all Task instances in this TaskList instance."},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"    public String list() {"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"        final StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"        int i \u003d 0;"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"        for (final Task t : tasks) {"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"            sb.append(String.format(\"\\t%d. %s\\n\", ++i, t));"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"        return sb.toString();"},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"     * Returns a list of string representation of Tasks instances that contains the"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"     * keyword ignoring case."},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"     * @param keyword the keyword to be tested with"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"     * @return a list of tasks that matches the keyword"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"    public List\u003cString\u003e find(String keyword) {"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"        return tasks.stream().filter(task -\u003e task.isMatching(keyword)).map(task -\u003e task.toString())"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"                .collect(Collectors.toList());"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"     * Removes a Task instance at a particular index."},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"     * @param index the index of the Task instance in the list"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"    public Task delete(int index) {"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"        return tasks.remove(index);"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"     * Appends a Task instance to the end of this TaskList instance."},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"     * @param task the Task instance to be added to the collection"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"    public boolean add(Task task) {"},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"        return tasks.add(task);"},{"lineNumber":133,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":134}},{"path":"src/main/java/duke/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"public enum TaskType {"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"    TODO, DEADLINE, EVENT"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":5}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":" * Encapsulates the Ui component of Duke."},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when tasklist capacity is exceeded."},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"     * @return      the message when tasklist capacity is exceeded"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    public String getfullDatabaseMessage() {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        return \"\\tSorry. The database is full!\\n\";"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when task is added successfully."},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"     * @param   taskDescription the description of the task added"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"     * @param   numberOfTasks   the number of tasks including the added task"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     * @return                  the message when task is added successfully"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    public String getAddTaskSuccessfulMessage(String taskDescription, int numberOfTasks) {"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"        String headerText \u003d \"\\tGot it. I\u0027ve added this task: \\n\";"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"        String addedTaskText \u003d String.format(\"\\tTask added: %s\\n\", taskDescription);"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        String currentTasksText \u003d String.format(\"\\tNow you have %d task%s in the list.\\n\","},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"                numberOfTasks, numberOfTasks \u003d\u003d 1 ? \"\" : \"s\");"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        return headerText + addedTaskText + currentTasksText;"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when task is marked as done."},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"     * @param   taskDescription the description of the task marked as done"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"     * @return      the message with the description of the task marked as done"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"    public String getMarkTaskAsDoneMessage(String taskDescription, int numberOfCompletedTaskLastWeek) {"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"        String headerText \u003d \"\\tNice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"        String taskMarkedText \u003d String.format(\"\\t%s\\n\", taskDescription);"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        String completedTasksText \u003d String.format(\"\\tWell done! You have completed %d task(s) last week.\\n\","},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"                numberOfCompletedTaskLastWeek);"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        return headerText + taskMarkedText + completedTasksText;"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when index is out of bound."},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * @return      the message when index is out of bound"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"    public String getIndexOutOfBoundMessage() {"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"        return \"\\tOops! The index is out of bound.\\n\";"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when all tasks are listed."},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"     * @param   taskList    the list of task descriptions"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"     * @param   hasTask     whether there is at least one task"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"     * @return              the message with all the tasks listed"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"    public String getListTaskMessage(String taskList, boolean hasTask) {"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"        String headerText;"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"        if (!hasTask) {"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"            headerText \u003d \"\\tHmm... You do not have any tasks!\\n\";"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"            headerText \u003d \"\\tHere are the tasks in your list:\\n\";"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"        return headerText + taskList;"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     * Returns the message during exit."},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"     * @return      the message during exit"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    public String getExitMessage() {"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"        return \"\\tBye. Hope to see you again soon!\\n\";"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when task is deleted successfully."},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"     * @param   deletedTask     the description of the deleted task"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"     * @param   numberOfTasks   the number of tasks left after deletion"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"     * @return                  the message when task is deleted successfully"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"    public String getDeleteTaskMessage(Task deletedTask, int numberOfTasks) {"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"        String headerText \u003d \"\\tNoted. I\u0027ve removed this task: \\n\";"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"        String taskRemovedText \u003d String.format(\"\\t%s\\n\", deletedTask);"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"        String currentTasksText \u003d String.format(\"\\tNow you have %d task%s in the list.\\n\","},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"                numberOfTasks, numberOfTasks \u003d\u003d 1 ? \"\" : \"s\");"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"        return headerText + taskRemovedText + currentTasksText;"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when no tasks exist."},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * @return      the message when no tasks exist"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"    public String getNoTaskExistsMessage() {"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"        return \"\\tHmm... You do not have any tasks!\\n\";"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"     * Returns the message when tasklist is filtered with some keyword."},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"     * @param   matchingTasks   the filtered tasklist"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"     * @return                  the message with the filtered tasklist"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"    public String getFindTaskMessage(List\u003cString\u003e matchingTasks) {"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"        int i \u003d 0;"},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"        for (String str : matchingTasks) {"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"            sb.append(String.format(\"\\t%d. %s\\n\", ++i, str));"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"            return \"\\tHmm... You do not have any matching tasks!\\n\";"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        String headerText \u003d \"\\tHere are the matching tasks in your list:\\n\";"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"        return headerText + sb.toString();"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":130}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.TaskType;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"public class AddCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    private TaskType type;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    private String task;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    private String datetime;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class AddCommand on tasks without a datetime."},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"     * @param   type    the task type"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * @param   task    the task description"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    public AddCommand(TaskType type, String task) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"        this.type \u003d type;"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        this.task \u003d task;"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d null;"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     * Constructor for class AddCommand on tasks with a datetime."},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * @param   type        the task type"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     * @param   task        the task description"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * @param   datetime    the datetime"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    public AddCommand(TaskType type, String task, String datetime) {"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        this.type \u003d type;"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        this.task \u003d task;"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"        this.datetime \u003d datetime;"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        boolean isInsert \u003d false;"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        if (tasks.size() \u003e\u003d 100) {"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"            return ui.getfullDatabaseMessage();"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"        switch (type) {"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"        case TODO:"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"            tasks.add(new ToDo(task));"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"            isInsert \u003d true;"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"        case EVENT:"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"            Event event \u003d null;"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"            final String[] eventDeadline \u003d this.datetime.split(\" \", 2);"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"            if (eventDeadline.length \u003d\u003d 1) {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"                event \u003d Event.create(task, eventDeadline[0].strip());"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            } else if (eventDeadline.length \u003d\u003d 2) {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"                event \u003d Event.create(task, eventDeadline[0].strip(), eventDeadline[1].strip());"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"            if (event !\u003d null) {"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"                tasks.add(event);"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"                isInsert \u003d true;"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"        case DEADLINE:"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"            Deadline deadline \u003d null;"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"            final String[] deadlineDatetime \u003d this.datetime.split(\" \", 2);"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"            if (deadlineDatetime.length \u003d\u003d 1) {"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"                deadline \u003d Deadline.create(task, deadlineDatetime[0].strip());"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"            } else if (deadlineDatetime.length \u003d\u003d 2) {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"                deadline \u003d Deadline.create(task, deadlineDatetime[0].strip(), deadlineDatetime[1].strip());"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"            if (deadline !\u003d null) {"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"                tasks.add(deadline);"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"                isInsert \u003d true;"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"            break;"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"        default:"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"            return \"\";"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"        if (isInsert) {"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"            int numberOfTasks \u003d tasks.size();"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"            return ui.getAddTaskSuccessfulMessage(tasks.getTaskDescription(tasks.size() - 1), numberOfTasks);"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"        return \"\";"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":96}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public interface Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"    boolean isExit();"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage);"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":10}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    private final int index;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"        this.index \u003d index;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"        if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"            final Task deletedTask \u003d tasks.delete(index);"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            int numberOfTasks \u003d tasks.size();"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"            return ui.getDeleteTaskMessage(deletedTask, numberOfTasks);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"            return ui.getIndexOutOfBoundMessage();"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":31}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public class DoneCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"    private final int index;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    public DoneCommand(int index) {"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"        this.index \u003d index;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        if (0 \u003c\u003d index \u0026\u0026 index \u003c tasks.size()) {"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"            tasks.markAsDone(index);"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"            return ui.getMarkTaskAsDoneMessage(tasks.getTaskDescription(index), tasks.getCompletedTasksCountLastWeek());"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"            return ui.getIndexOutOfBoundMessage();"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":29}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"public class ExitCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"        return true;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        final List\u003cString\u003e data \u003d tasks.encode();"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        storage.saveFile(data);"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        return ui.getExitMessage();"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"public class FindCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    private final String keyword;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"            return ui.getNoTaskExistsMessage();"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        final List\u003cString\u003e matchingTasks \u003d tasks.find(keyword);"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"        assert(matchingTasks !\u003d null);"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"        return ui.getFindTaskMessage(matchingTasks);"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":33}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"public class ListCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    public boolean isExit() {"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public String executeAndGetResponse(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"        boolean hasTask \u003d tasks.size() !\u003d 0;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"        return ui.getListTaskMessage(tasks.list(), hasTask);"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":20}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"import duke.Statistics;"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.TaskType;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddDeadlineCommandParseException;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddEventCommandParseException;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddToDoCommandParseException;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.exception.DeleteCommandParseException;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import duke.exception.DoneCommandParseException;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ExitCommandParseException;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"import duke.exception.FindCommandParseException;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ListCommandParseException;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"import duke.exception.UnknownCommandParseException;"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":" * Encapsulates a utility parser that parses task from the saved file and"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":" * commands inputted by the user."},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"public class Parser {"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     * Returns a task decoded from the encoded string representation of task. This"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"     * parser will return null on invalid encoded strings."},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * @param str the encoded string representation of task"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * @return the task corresponding to the encoded representation"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public static Task parseAsTask(String str) {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        final String[] tokens \u003d str.split(\" \\\\| \");"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        String[] datetime;"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"            switch (tokens[0]) {"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            case \"T\":"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"                final ToDo todo \u003d new ToDo(tokens[2]);"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"                    todo.markAsDone();"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"                return todo;"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"            case \"D\":"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"                datetime \u003d tokens[3].split(\" \", 2);"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"                Deadline deadline;"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"                if (datetime.length \u003d\u003d 2) {"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(tokens[2], datetime[0].strip(), datetime[1].strip());"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"                } else {"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"                    deadline \u003d Deadline.create(tokens[2], datetime[0].strip());"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"                    deadline.markAsDone();"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"                return deadline;"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            case \"E\":"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"                datetime \u003d tokens[3].split(\" \", 2);"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"                Event event;"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"                if (datetime.length \u003d\u003d 2) {"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(tokens[2], datetime[0].strip(), datetime[1].strip());"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"                } else {"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"                    event \u003d Event.create(tokens[2], datetime[0].strip());"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"                if (tokens[1].equals(\"1\")) {"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"                    event.markAsDone();"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"                return event;"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"            default:"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"                return null;"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     * Returns a command decoded from the string inputted by the users. This parser"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     * will throw Exceptions on invalid input strings."},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"     * @param fullCommand the encoded string representation of task"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"     * @return the task corresponding to the encoded representation"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"    public static Command parseCommand(String fullCommand) throws Exception {"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"        final String[] tokens \u003d fullCommand.strip().split(\"\\\\s+\", 2);"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"        assert(tokens.length !\u003d 0);"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"        final String command \u003d tokens[0];"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"        switch (command) {"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"        case \"bye\":"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 1) {"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"                throw new ExitCommandParseException();"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"            return new ExitCommand();"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"        case \"list\":"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"                throw new ListCommandParseException();"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"            return new ListCommand();"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"        case \"find\":"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"                throw new FindCommandParseException();"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"            return new FindCommand(tokens[1]);"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        case \"delete\":"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"                throw new DeleteCommandParseException();"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"            try {"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"                final int deleteIndex \u003d Integer.parseInt(tokens[1]) - 1;"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"                return new DeleteCommand(deleteIndex);"},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"            } catch (final NumberFormatException e) {"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"                throw new NumberFormatException(\"\\tOops! Please input a number.\");"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"        case \"done\":"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"                throw new DoneCommandParseException();"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"            try {"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"                final int doneIndex \u003d Integer.parseInt(tokens[1]) - 1;"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"                return new DoneCommand(doneIndex);"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"                throw new NumberFormatException(\"\\tOops! Please input a number.\");"},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"aaronsms"},"content":"        case \"todo\":"},{"lineNumber":134,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":135,"author":{"gitId":"aaronsms"},"content":"                throw new AddToDoCommandParseException();"},{"lineNumber":136,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":138,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.TODO, tokens[1]);"},{"lineNumber":139,"author":{"gitId":"aaronsms"},"content":"        case \"deadline\":"},{"lineNumber":140,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":141,"author":{"gitId":"aaronsms"},"content":"                throw new AddDeadlineCommandParseException();"},{"lineNumber":142,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"aaronsms"},"content":"            final String[] splitOnBy \u003d tokens[1].split(\"\\\\s+/by\\\\s+\", 2);"},{"lineNumber":144,"author":{"gitId":"aaronsms"},"content":"            if (splitOnBy.length !\u003d 2) {"},{"lineNumber":145,"author":{"gitId":"aaronsms"},"content":"                throw new AddDeadlineCommandParseException();"},{"lineNumber":146,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":148,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.DEADLINE, splitOnBy[0], splitOnBy[1]);"},{"lineNumber":149,"author":{"gitId":"aaronsms"},"content":"        case \"event\":"},{"lineNumber":150,"author":{"gitId":"aaronsms"},"content":"            if (tokens.length !\u003d 2) {"},{"lineNumber":151,"author":{"gitId":"aaronsms"},"content":"                throw new AddEventCommandParseException();"},{"lineNumber":152,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"aaronsms"},"content":"            final String[] splitOnAt \u003d tokens[1].split(\"\\\\s+/at\\\\s+\", 2);"},{"lineNumber":154,"author":{"gitId":"aaronsms"},"content":"            if (splitOnAt.length !\u003d 2) {"},{"lineNumber":155,"author":{"gitId":"aaronsms"},"content":"                throw new AddEventCommandParseException();"},{"lineNumber":156,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":158,"author":{"gitId":"aaronsms"},"content":"            return new AddCommand(TaskType.EVENT, splitOnAt[0], splitOnAt[1]);"},{"lineNumber":159,"author":{"gitId":"aaronsms"},"content":"        default:"},{"lineNumber":160,"author":{"gitId":"aaronsms"},"content":"            throw new UnknownCommandParseException();"},{"lineNumber":161,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":164,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"aaronsms"},"content":"     * Parses a list of String representing the statistics into a Statistics instance."},{"lineNumber":166,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"aaronsms"},"content":"     * @param   stats   the list of String encoded to the saved file"},{"lineNumber":168,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"aaronsms"},"content":"    public static Statistics parseAsStats(List\u003cString\u003e stats) {"},{"lineNumber":170,"author":{"gitId":"aaronsms"},"content":"        List\u003cLocalDateTime\u003e dateTimes \u003d stats.stream().map(str -\u003e LocalDateTime"},{"lineNumber":171,"author":{"gitId":"aaronsms"},"content":"                .parse(str))"},{"lineNumber":172,"author":{"gitId":"aaronsms"},"content":"                .collect(Collectors.toList()"},{"lineNumber":173,"author":{"gitId":"aaronsms"},"content":"        );"},{"lineNumber":174,"author":{"gitId":"aaronsms"},"content":"        return new Statistics(dateTimes);"},{"lineNumber":175,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":176}},{"path":"src/main/java/duke/exception/AddDeadlineCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddDeadlineCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddDeadlineCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"deadline \u003ctodo\u003e /by \u003cdatetime\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/AddEventCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddEventCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddEventCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"event \u003ctodo\u003e /at \u003cdatetime\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/AddToDoCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class AddToDoCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public AddToDoCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"todo \u003ctask\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/DeleteCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class DeleteCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public DeleteCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"delete \u003cindex\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/DoneCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class DoneCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public DoneCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"done \u003cindex\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/ExitCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class ExitCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public ExitCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"bye\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/FindCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class FindCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public FindCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"find \u003ckeyword\u003e\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/ListCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class ListCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public ListCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tPlease follow this format \\\"list\\\".\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/exception/UnknownCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"@SuppressWarnings(\"serial\")"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"public class UnknownCommandParseException extends Exception {"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"    public UnknownCommandParseException() {"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"        super(\"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":8}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * Represents a task item with a deadline specified by a due date and possibly a"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" * due time."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"public class Deadline extends Task {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public final LocalDate date;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    public final LocalTime time;"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    private Deadline(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d null;"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    private Deadline(String description, LocalDate date, LocalTime time) {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d time;"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Deadline with only the due date."},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Deadline instance"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * @return a Deadline instance with the description and the due date"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    public static Deadline create(String description, String dateStr) {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"            return new Deadline(description, date);"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Deadline with both the due date and time."},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Deadline instance"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * @param timeStr     the string representation of time with the form"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *                    \"hh:mm:[ss]\""},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @return a deadline instance with the description, the due date and time"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    public static Deadline create(String description, String dateStr, String timeStr) {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            LocalTime time \u003d LocalTime.parse(timeStr, DateTimeFormatter.ISO_LOCAL_TIME);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"            return new Deadline(description, date, time);"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of the due date and time."},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of the due date and time"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    public String getDateTime() {"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"            return date.toString();"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"%s %s\", this.date, this.time);"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Deadline instance"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Deadline instance"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getStatusIcon(), this.description, this.getDateTime());"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this Deadline instance."},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this Deadline instance"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"D | %s | %s | %s\", this.isDone ? \"1\" : \"0\", this.description, this.getDateTime());"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two Deadline instances are equivalent."},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     * @return true if two Deadline instances are equivalent"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof Deadline)) {"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"        Deadline other \u003d (Deadline) o;"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone \u0026\u0026 this.date.equals(other.date)"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"                \u0026\u0026 (this.time \u003d\u003d null || this.time.equals(other.time));"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this Deadline instance."},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this Deadline instance"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 37;"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((date \u003d\u003d null) ? 0 : date.hashCode());"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((time \u003d\u003d null) ? 0 : time.hashCode());"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":132}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":" * Represents an event specified by a date and possibly a time."},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    public final LocalDate date;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"    public final LocalTime time;"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    private Event(String description, LocalDate date) {"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d null;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    private Event(String description, LocalDate date, LocalTime time) {"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        this.date \u003d date;"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        this.time \u003d time;"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Event with only the date."},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Event instance"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"     * @return an Event instance with a description and a date"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"    public static Event create(String description, String dateStr) {"},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"            return new Event(description, date);"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"     * Factory constructor for class Event with both the date and time."},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this Event instance"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"     * @param dateStr     the string representation of date with the form"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     *                    \"YYYY-MM-DD\""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"     * @param timeStr     the string representation of time with the form"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     *                    \"hh:mm:[ss]\""},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     * @return a deadline instance with a description, a due date and time"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"    public static Event create(String description, String dateStr, String timeStr) {"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"            LocalDate date \u003d LocalDate.parse(dateStr, DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"            LocalTime time \u003d LocalTime.parse(timeStr, DateTimeFormatter.ISO_LOCAL_TIME);"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"            return new Event(description, date, time);"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"            System.out.println(\"\\tPlease follow this format \\\"YYYY-MM-DD [hh:mm[:ss]]\\\" for datetime.\");"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            return null;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of the date and time."},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of the date and time"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"    public String getDateTime() {"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"        if (time \u003d\u003d null) {"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"            return date.toString();"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"%s %s\", this.date, this.time);"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Event instance"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Event instance"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getStatusIcon(), this.description, this.getDateTime());"},{"lineNumber":88,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":90,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this Event instance."},{"lineNumber":92,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this Event instance"},{"lineNumber":94,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":97,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"E | %s | %s | %s\", this.isDone ? \"1\" : \"0\", this.description, this.getDateTime());"},{"lineNumber":98,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":100,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two Event instances are equivalent."},{"lineNumber":102,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":104,"author":{"gitId":"aaronsms"},"content":"     * @return true if two Event instances are equivalent"},{"lineNumber":105,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":108,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof Event)) {"},{"lineNumber":109,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"aaronsms"},"content":"        Event other \u003d (Event) o;"},{"lineNumber":112,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone \u0026\u0026 this.date.equals(other.date)"},{"lineNumber":113,"author":{"gitId":"aaronsms"},"content":"                \u0026\u0026 (this.time \u003d\u003d null || this.time.equals(other.time));"},{"lineNumber":114,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":116,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this Event instance."},{"lineNumber":118,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this Event instance"},{"lineNumber":120,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":122,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":123,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 31;"},{"lineNumber":124,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":125,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((date \u003d\u003d null) ? 0 : date.hashCode());"},{"lineNumber":126,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((time \u003d\u003d null) ? 0 : time.hashCode());"},{"lineNumber":127,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":128,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":129,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":130,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":131}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * Represents a task item that can be added and listed in Duke."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    protected boolean isDone;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    protected final String description;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"     * Default constructor for subclasses of Task."},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"     * @param isDone      the status of the task item"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"     * @param description the description for the task item"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    protected Task(final boolean isDone, final String description) {"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    public abstract String encode();"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"     * Returns a tick if this Task object is finished and a cross otherwise."},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * @return the status icon based on the status of this Task object."},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        return (this.isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"     * Returns true if the marking of completion status of the Task object is"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":"     * successful."},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"     * @return true when the task was not already marked as done."},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"    public boolean markAsDone() {"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        boolean wasDone \u003d this.isDone;"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"        this.isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"        return !wasDone;"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"     * Returns true if this task description contains the keyword ignoring case."},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"     * @param keyword the keyword to be tested with"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"     * @return true if this task description matches the keyword"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    public boolean isMatching(String keyword) {"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"        return containsIgnoreCase(description, keyword);"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"    private static boolean containsIgnoreCase(String str, String searchStr) {"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"        if (str \u003d\u003d null || searchStr \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        final int length \u003d searchStr.length();"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        if (length \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"            return true;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"        for (int i \u003d str.length() - length; i \u003e\u003d 0; i--) {"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"            if (str.regionMatches(true, i, searchStr, 0, length)) {"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"                return true;"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"        return false;"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"     * Returns the string represenatation of this Task instance"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this Task instance"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":84}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":" * Represents a todo task item without a specific deadline."},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":" *"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":" * @author Aaron Saw Min Sern"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":" */"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"     * Sole constructor for class ToDo."},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"     * @param description the description of this ToDo instance"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    public ToDo(String description) {"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"        super(false, description);"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"     * Returns the string representation of this ToDo instance."},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"     * @return the string representation of this ToDo instance"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"[T][%s] %s\", this.getStatusIcon(), this.description);"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":"     * Returns the encoded representation for this ToDo instance."},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"     * @return the encoded representation of this ToDo instance"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"    public String encode() {"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        return String.format(\"T | %s | %s\", this.isDone ? \"1\" : \"0\", this.description);"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"     * Returns true if two ToDo items are equivalent."},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"     * @param o the other object to be compared"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"     * @return true if two ToDo items are equivalent"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    public boolean equals(Object o) {"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"        if (!(o instanceof ToDo)) {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"            return false;"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        ToDo other \u003d (ToDo) o;"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        return this.description.equals(other.description) \u0026\u0026 this.isDone \u003d\u003d other.isDone;"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"     * Returns the hashcode of this ToDo instance."},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"     * @return hashcode of this ToDo instance"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"        final int prime \u003d 31;"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"        int result \u003d 1;"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + ((description \u003d\u003d null) ? 0 : description.hashCode());"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        result \u003d prime * result + (isDone ? 1 : 0);"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"        return result;"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":66}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"aaronsms":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"aaronsms":19}},{"path":"src/test/java/duke/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"aaronsms"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":3,"author":{"gitId":"aaronsms"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"aaronsms"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":6,"author":{"gitId":"aaronsms"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":8,"author":{"gitId":"aaronsms"},"content":"import duke.exception.AddToDoCommandParseException;"},{"lineNumber":9,"author":{"gitId":"aaronsms"},"content":"import duke.exception.ListCommandParseException;"},{"lineNumber":10,"author":{"gitId":"aaronsms"},"content":"import duke.exception.UnknownCommandParseException;"},{"lineNumber":11,"author":{"gitId":"aaronsms"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"aaronsms"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"aaronsms"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"aaronsms"},"content":"import duke.task.ToDo;"},{"lineNumber":15,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":16,"author":{"gitId":"aaronsms"},"content":"public class ParserTest {"},{"lineNumber":17,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":18,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_emptyString_returnNull() {"},{"lineNumber":20,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), null);"},{"lineNumber":22,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":24,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_invalidString_returnNull() {"},{"lineNumber":26,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"K | 1 | asdf\";"},{"lineNumber":27,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), null);"},{"lineNumber":28,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":30,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_todoSuccess_returnTask() {"},{"lineNumber":32,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"T | 1 | read book\";"},{"lineNumber":33,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d new ToDo(\"read book\");"},{"lineNumber":34,"author":{"gitId":"aaronsms"},"content":"        output.markAsDone();"},{"lineNumber":35,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":36,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":38,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_deadlineSuccess_returnTask() {"},{"lineNumber":40,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"D | 0 | return book | 2000-12-20\";"},{"lineNumber":41,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d Deadline.create(\"return book\", \"2000-12-20\");"},{"lineNumber":42,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":43,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":45,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"aaronsms"},"content":"    public void parseAsTask_eventSuccess_returnTask() {"},{"lineNumber":47,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"E | 1 | lend book | 2020-05-12 12:30:13\";"},{"lineNumber":48,"author":{"gitId":"aaronsms"},"content":"        Task output \u003d Event.create(\"lend book\", \"2020-05-12\", \"12:30:13\");"},{"lineNumber":49,"author":{"gitId":"aaronsms"},"content":"        output.markAsDone();"},{"lineNumber":50,"author":{"gitId":"aaronsms"},"content":"        assertEquals(Parser.parseAsTask(input), output);"},{"lineNumber":51,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":53,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidAddCommand_exceptionThrow() {"},{"lineNumber":55,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"todo\";"},{"lineNumber":56,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(AddToDoCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":57,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tPlease follow this format \\\"todo \u003ctask\u003e\\\".\");"},{"lineNumber":58,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":60,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidListCommand_exceptionThrow() {"},{"lineNumber":62,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"list asdf\";"},{"lineNumber":63,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(ListCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":64,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tPlease follow this format \\\"list\\\".\");"},{"lineNumber":65,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":67,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_invalidDoneCommand_exceptionThrow() {"},{"lineNumber":69,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"done asdf\";"},{"lineNumber":70,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(NumberFormatException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":71,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Please input a number.\");"},{"lineNumber":72,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":74,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_unknownCommand_exceptionThrow() {"},{"lineNumber":76,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"asfasdaasfd\";"},{"lineNumber":77,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(UnknownCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":78,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":79,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"aaronsms"},"content":""},{"lineNumber":81,"author":{"gitId":"aaronsms"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"aaronsms"},"content":"    public void parseCommand_emptyCommand_exceptionThrow() {"},{"lineNumber":83,"author":{"gitId":"aaronsms"},"content":"        String input \u003d \"\";"},{"lineNumber":84,"author":{"gitId":"aaronsms"},"content":"        Throwable exception \u003d assertThrows(UnknownCommandParseException.class, () -\u003e Parser.parseCommand(input));"},{"lineNumber":85,"author":{"gitId":"aaronsms"},"content":"        assertEquals(exception.getMessage(), \"\\tOops! Sorry, I do not know what that means.\");"},{"lineNumber":86,"author":{"gitId":"aaronsms"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"aaronsms"},"content":"}"}],"authorContributionMap":{"aaronsms":87}}]
