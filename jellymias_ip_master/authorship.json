[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"1. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"jellymias":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jellymias":1,"-":45}},{"path":"data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"T | O | work "},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":"T | O | book report "},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"D | O | submit ip | by: 12-2-2021 1900"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"E | X | level outing | from: 02-2-2021 1900 | to: 02-2-2021 2100"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"E | O | team meeting | from: 02-2-2021 2100 | to: 02-2-2021 2359"}],"authorContributionMap":{"jellymias":5}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class Main {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        duke.run();"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":8}},{"path":"src/main/java/duke/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class AddTaskCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    public AddTaskCommand(String command, String input, TaskList taskList) {"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct To-do command."},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     * If it is, it adds the To-do to the task list and prints the Add task message."},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    private void addTodo() {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseTodo(input)) {"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"                String description \u003d parser.parseTodoDescription(input);"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"                Task task \u003d new Todo(description);"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"                taskList.addTask(task);"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"                ui.printAddTask(task, taskList.getSize());"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Deadline command."},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"     * If it is, it adds the Deadline to the task list and prints the Add task message."},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    private void addDeadline() {"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseDeadline(input)) {"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"                try {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime dateTime \u003d parser.parseDeadlineDate(input);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"                    String description \u003d parser.parseDeadlineDescription(input);"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"                    Deadline task \u003d new Deadline(dateTime, description);"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"                    taskList.addTask(task);"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"                    ui.printAddTask(task, taskList.getSize());"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"                    ui.printError(new WrongFormatDukeException(command));"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Event command."},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"     * If it is, it adds the Event to the task list and prints the Add task message."},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"    private void addEvent() {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseEvent(input)) {"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"                try {"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime startDateTime \u003d parser.parseEventStartDate(input);"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime endDateTime \u003d parser.parseEventEndDate(input);"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"                    String description \u003d parser.parseEventDescription(input);"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"                    Event task \u003d new Event(startDateTime, endDateTime, description);"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":"                    taskList.addTask(task);"},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"                    ui.printAddTask(task, taskList.getSize());"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"                    ui.printError(new WrongFormatDukeException(command));"},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"     * Executes the add task command."},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"        if (command.equals(\"todo\")) {"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"            addTodo();"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"deadline\")) {"},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"            addDeadline();"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"event\")) {"},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"            addEvent();"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":96}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    protected final String command;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    protected final String input;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    protected TaskList taskList;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    protected Ui ui;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    protected Parser parser;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    public Command(String command, String input, TaskList taskList) {"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        this.command \u003d command;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        this.input \u003d input;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     * Returns the task list."},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     * @return Task list."},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    public TaskList getTaskList() {"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        return this.taskList;"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     * Executes the command based on the user input and task list."},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public abstract void execute();"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":31}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime date;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    private String description;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    public Deadline(LocalDateTime date, String description) {"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        this.date \u003d date;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the Deadline task."},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be written into the file writer."},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     * @return String to be passed into file writer."},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    public String formatToSave() {"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"D | \";"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        if (isDone()) {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"X |\";"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"O |\";"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        str +\u003d \" \" + description + \" | by: \" + date.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"));"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the Deadline task."},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be printed by the Ui."},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * @return String to be printed by Ui."},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"[D]\";"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        str +\u003d getMark() + \" \" + description + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\")) + \")\";"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":46}},{"path":"src/main/java/duke/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class DeleteTaskCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    public DeleteTaskCommand(String command, String input, TaskList taskList) {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Delete command."},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * If it is, it removes the task and prints the Delete message."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private void removeTask() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseIndexCommand(input, taskList.getSize())) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                int index \u003d parser.parseIndex(input);"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"                Task deleted \u003d taskList.deleteTask(index);"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"                ui.printDeleteTask(deleted);"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * Executes the command to remove task."},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        removeTask();"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":35}},{"path":"src/main/java/duke/DoneTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class DoneTaskCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    public DoneTaskCommand(String command, String input, TaskList taskList) {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Done command."},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * If it is, it marks the task as done and prints the Done message."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private void doTask() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseIndexCommand(input, taskList.getSize())) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                int index \u003d parser.parseIndex(input);"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"                taskList.doneTask(index);"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"                ui.printDoneTask(taskList.getTask(index));"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * Executes the done task command."},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        doTask();"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":35}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    private TaskList tasks;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    private Storage storage;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    private Parser parser;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    public Duke() {"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        this.tasks \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        this.storage \u003d new Storage(\"C:/Users/Jeremias/Documents/GitHub/ip/data/\", \"data.txt\");"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"        duke.run();"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * Starts the Duke program."},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    public void run() {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        ui.printGreeting();"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        storage.loadTaskList(tasks);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        boolean shouldExit \u003d false;"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        while (!shouldExit) {"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"                shouldExit \u003d true;"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"                ui.printBye();"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"                executeCommand(input);"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"                save();"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"     * Executes the command that the user inputs."},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"    private void executeCommand(String input) {"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        String command \u003d parser.parseCommand(input);"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        Command cmd \u003d null;"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"            if (command.equals(\"todo\") || command.equals(\"deadline\") || command.equals(\"event\")) {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new AddTaskCommand(command, input, tasks);"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"            } else if (command.equals(\"list\")) {"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new ListTaskCommand(command, input, tasks);"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"            } else if (command.equals(\"done\")) {"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new DoneTaskCommand(command, input, tasks);"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"            } else if (command.equals(\"delete\")) {"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new DeleteTaskCommand(command, input, tasks);"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"            } else if (command.equals(\"help\")) {"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new HelpCommand(command, input, tasks);"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"            } else if (command.equals(\"find\")) {"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"                cmd \u003d new FindCommand(command, input, tasks);"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"                throw new WrongCommandDukeException();"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":"        if (cmd !\u003d null) {"},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"            cmd.execute();"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"            tasks \u003d cmd.getTaskList();"},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"     * Saves the task list into the storage file."},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"    private void save() {"},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"\";"},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {"},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"            str +\u003d tasks.getTask(i).formatToSave() + \"\\n\";"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"        storage.saveTaskList(str);"},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":84,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"     * Returns the string representation of a DukeException"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"     * @return String."},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        return \"Exception in Mr. C has occured!\";"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime startDate;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime endDate;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    private String description;"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    public Event(LocalDateTime startDate, LocalDateTime endDate, String description) {"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the Event task."},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be written into the file writer."},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * @return String to be passed into file writer."},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    public String formatToSave() {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"E | \";"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        if (isDone()) {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"X |\";"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"O |\";"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        str +\u003d \" \" + description + \" | from: \" + startDate.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"))"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"                + \" | to: \" + endDate.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"));"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the Event task."},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be printed by the Ui."},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"     * @return String to be printed by Ui."},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"[E]\";"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"        str +\u003d this.getMark() + \" \" + description"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"                + \" (from: \" + startDate.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"))"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"                + \" - \" + endDate.format(DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\")) + \")\";"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":51}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class FindCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    public FindCommand(String command, String input, TaskList taskList) {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct find command."},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * If it is, it prints the find message."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private void find() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseFindCommand(input)) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                String keyword \u003d parser.parseKeyword(input);"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"                TaskList tempTaskList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"                for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"                    Task task \u003d taskList.getTask(i);"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"                    if (task.hasKeyWord(keyword)) {"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"                        tempTaskList.addTask(task);"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"                    }"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"                if (tempTaskList.getSize() \u003d\u003d 0) {"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"                    throw new NoSuchKeywordException(keyword);"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"                } else {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"                    ui.printFoundTaskList(tempTaskList);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     * Executes the find command."},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        find();"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":45}},{"path":"src/main/java/duke/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class HelpCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    public HelpCommand(String command, String input, TaskList taskList) {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct help command."},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * If it is, help message is printed."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the exception faced."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private void help() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseHelpCommand(input)) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                ui.printHelp();"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * Executes the help command."},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        help();"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":33}},{"path":"src/main/java/duke/ListTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class ListTaskCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    public ListTaskCommand(String command, String input, TaskList taskList) {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"        super(command, input, taskList);"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct list command."},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * If it is, it prints the task list."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Otherwise, it prints the error faced."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private void listTask() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            if (parser.canParseListCommand(input)) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                ui.printTaskList(taskList);"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"                throw new WrongFormatDukeException(command);"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"        } catch (DukeException e) {"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"            ui.printError(e);"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * Executes the list task command."},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    public void execute() {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        listTask();"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":33}},{"path":"src/main/java/duke/NoSuchKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class NoSuchKeywordException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    private final String keyword;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    public NoSuchKeywordException(String keyword) {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * Returns the string representation of the exception where no task containing the keyword is found."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * @return String."},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"I am afraid to inform you that I could not find a task that matched \u0027\" + keyword"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"                + \"\u0027.\\nPerhaps you should consider a better word to search.\";"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":21}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    private final int DEADLINE_SUB \u003d 9;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    private final int EVENT_SUB \u003d 6;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    private LocalDateTime parseDate(String date) {"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        return dateTime;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"     * Parses user input and returns the command."},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     * @return Command word."},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    public String parseCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        return command[0];"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct To-do task."},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    public boolean canParseTodo(String input) {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        } else if (command[1].equals(\"\")) {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the description of a To-do task."},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"     * @return To-do description."},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    public String parseTodoDescription(String input) {"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"        String description \u003d \"\";"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 1; i \u003c command.length; i++) {"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"            description +\u003d command[i] + \" \";"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"        return description;"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Deadline task."},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"    public boolean canParseDeadline(String input) {"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"        } else if (command[1].equals(\"/by\")) {"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"            String[] details \u003d input.split(\" /by \");"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"            if (details.length !\u003d 2) {"},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"                return false;"},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"                    return true;"},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the description of a Deadline task."},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"     * @return Deadline description."},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"    public String parseDeadlineDescription(String input) {"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"        String[] details \u003d input.split(\" /by \");"},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":"        return details[0].substring(DEADLINE_SUB);"},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the deadline of a Deadline task."},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"     * @return Deadline date."},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":"    public LocalDateTime parseDeadlineDate(String input) {"},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":"        String[] details \u003d input.split(\" /by \");"},{"lineNumber":99,"author":{"gitId":"jellymias"},"content":"        return parseDate(details[1]);"},{"lineNumber":100,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":102,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Event task."},{"lineNumber":104,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":106,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":107,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"jellymias"},"content":"    public boolean canParseEvent(String input) {"},{"lineNumber":109,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":110,"author":{"gitId":"jellymias"},"content":"        if (command.length \u003d\u003d 1) {"},{"lineNumber":111,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":112,"author":{"gitId":"jellymias"},"content":"        } else if (command[1].equals(\"/from\")) {"},{"lineNumber":113,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":114,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"jellymias"},"content":"            String[] details \u003d input.split(\" /from \");"},{"lineNumber":116,"author":{"gitId":"jellymias"},"content":"            if (details.length !\u003d 2) {"},{"lineNumber":117,"author":{"gitId":"jellymias"},"content":"                return false;"},{"lineNumber":118,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":119,"author":{"gitId":"jellymias"},"content":"                String[] dates \u003d details[1].split(\" /to \");"},{"lineNumber":120,"author":{"gitId":"jellymias"},"content":"                if (dates.length !\u003d 2) {"},{"lineNumber":121,"author":{"gitId":"jellymias"},"content":"                    return false;"},{"lineNumber":122,"author":{"gitId":"jellymias"},"content":"                } else {"},{"lineNumber":123,"author":{"gitId":"jellymias"},"content":"                    return true;"},{"lineNumber":124,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":125,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":129,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the description of an Event task."},{"lineNumber":131,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":132,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":133,"author":{"gitId":"jellymias"},"content":"     * @return Event description."},{"lineNumber":134,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"jellymias"},"content":"    public String parseEventDescription(String input) {"},{"lineNumber":136,"author":{"gitId":"jellymias"},"content":"        String[] details \u003d input.split(\" /from \");"},{"lineNumber":137,"author":{"gitId":"jellymias"},"content":"        return details[0].substring(EVENT_SUB);"},{"lineNumber":138,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":140,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the start date of an Event task."},{"lineNumber":142,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":144,"author":{"gitId":"jellymias"},"content":"     * @return Event start date."},{"lineNumber":145,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"jellymias"},"content":"    public LocalDateTime parseEventStartDate(String input) {"},{"lineNumber":147,"author":{"gitId":"jellymias"},"content":"        String[] details \u003d input.split(\" /from \");"},{"lineNumber":148,"author":{"gitId":"jellymias"},"content":"        String[] dates \u003d details[1].split(\" /to \");"},{"lineNumber":149,"author":{"gitId":"jellymias"},"content":"        return parseDate(dates[0]);"},{"lineNumber":150,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":152,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the end date of an Event task."},{"lineNumber":154,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":156,"author":{"gitId":"jellymias"},"content":"     * @return Event end date."},{"lineNumber":157,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"jellymias"},"content":"    public LocalDateTime parseEventEndDate(String input) {"},{"lineNumber":159,"author":{"gitId":"jellymias"},"content":"        String[] details \u003d input.split(\" /from \");"},{"lineNumber":160,"author":{"gitId":"jellymias"},"content":"        String[] dates \u003d details[1].split(\" /to \");"},{"lineNumber":161,"author":{"gitId":"jellymias"},"content":"        return parseDate(dates[1]);"},{"lineNumber":162,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":164,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct List command."},{"lineNumber":166,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":168,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":169,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"jellymias"},"content":"    public boolean canParseListCommand(String input) {"},{"lineNumber":171,"author":{"gitId":"jellymias"},"content":"       return input.equals(\"list\") || input.equals(\"list \");"},{"lineNumber":172,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":174,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":175,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct index calling command."},{"lineNumber":176,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":177,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":178,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":179,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"jellymias"},"content":"    public boolean canParseIndexCommand(String input, int size) {"},{"lineNumber":181,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":182,"author":{"gitId":"jellymias"},"content":"        if (input.equals(\"done\") || input.equals(\"done \")) {"},{"lineNumber":183,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":184,"author":{"gitId":"jellymias"},"content":"        } else if (command.length !\u003d 2) {"},{"lineNumber":185,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":186,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":187,"author":{"gitId":"jellymias"},"content":"            int index \u003d Integer.valueOf(command[1]) - 1;"},{"lineNumber":188,"author":{"gitId":"jellymias"},"content":"            if (index \u003c 0 || index \u003e\u003d size) {"},{"lineNumber":189,"author":{"gitId":"jellymias"},"content":"                return false;"},{"lineNumber":190,"author":{"gitId":"jellymias"},"content":"            } else {"},{"lineNumber":191,"author":{"gitId":"jellymias"},"content":"                return true;"},{"lineNumber":192,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":196,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the index of an index calling command."},{"lineNumber":198,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":200,"author":{"gitId":"jellymias"},"content":"     * @return Index."},{"lineNumber":201,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":202,"author":{"gitId":"jellymias"},"content":"    public int parseIndex(String input) {"},{"lineNumber":203,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":204,"author":{"gitId":"jellymias"},"content":"        int index \u003d Integer.valueOf(command[1]) - 1;"},{"lineNumber":205,"author":{"gitId":"jellymias"},"content":"        return index;"},{"lineNumber":206,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":208,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Help command."},{"lineNumber":210,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":211,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":212,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":213,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"jellymias"},"content":"    public boolean canParseHelpCommand(String input) {"},{"lineNumber":215,"author":{"gitId":"jellymias"},"content":"        if (input.equals(\"help\") || input.equals(\"help \")) {"},{"lineNumber":216,"author":{"gitId":"jellymias"},"content":"            return true;"},{"lineNumber":217,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":218,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":219,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":221,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":222,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":223,"author":{"gitId":"jellymias"},"content":"     * Checks if the user input is formatted into a correct Find command."},{"lineNumber":224,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":225,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":226,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":227,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"jellymias"},"content":"    public boolean canParseFindCommand(String input) {"},{"lineNumber":229,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":230,"author":{"gitId":"jellymias"},"content":"        if (input.equals(\"find\") || input.equals(\"find \")) {"},{"lineNumber":231,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":232,"author":{"gitId":"jellymias"},"content":"        } else if (command.length !\u003d 2) {"},{"lineNumber":233,"author":{"gitId":"jellymias"},"content":"            return false;"},{"lineNumber":234,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":235,"author":{"gitId":"jellymias"},"content":"            return true;"},{"lineNumber":236,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":237,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":239,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":240,"author":{"gitId":"jellymias"},"content":"     * Parses the user input and returns the keyword for a find command."},{"lineNumber":241,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":242,"author":{"gitId":"jellymias"},"content":"     * @param input User input."},{"lineNumber":243,"author":{"gitId":"jellymias"},"content":"     * @return Keyword for find."},{"lineNumber":244,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"jellymias"},"content":"    public String parseKeyword(String input) {"},{"lineNumber":246,"author":{"gitId":"jellymias"},"content":"        String[] command \u003d input.split(\" \");"},{"lineNumber":247,"author":{"gitId":"jellymias"},"content":"        return command[1];"},{"lineNumber":248,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":249}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    private final String filePath;"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    private final String fileName;"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public Storage(String filePath, String fileName) {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * Writes the tasks in the task list into the specified file."},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * @param tasks Task list to be saved."},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    public void saveTaskList(String tasks) {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"            FileWriter fw \u003d new FileWriter(filePath + fileName);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"            fw.write(tasks);"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"            fw.close();"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"            System.out.println(\"This file cannot be saved... much like you!\");"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     * Reads the saved task list in the file and adds the task into the task list."},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     * @param taskList Task list to load the tasks from the file to."},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"    public void loadTaskList(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"            File f \u003d new File(filePath + fileName);"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"            f.createNewFile();"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"            while (sc.hasNext()) {"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"                String taskString \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"                String[] taskArr \u003d taskString.split(\"\\\\| \");"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"                Task task \u003d null;"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"                switch(taskArr[0]) {"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"                case \"T \":"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"                    String input \u003d taskArr[2];"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"                        task \u003d new Todo(input);"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"                        break;"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"                case \"D \":"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(taskArr[3].substring(4),"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"                            DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"));"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"                    task \u003d new Deadline(dateTime, taskArr[2].substring(0, taskArr[2].length() - 1));"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"                    break;"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"                case \"E \":"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime dateTimeStart \u003d LocalDateTime.parse(taskArr[3].substring(6, taskArr[3].length() - 1),"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"                            DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"));"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"                    LocalDateTime dateTimeEnd \u003d LocalDateTime.parse(taskArr[4].substring(4),"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"                            DateTimeFormatter.ofPattern(\"dd-M-yyyy HHmm\"));"},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"                    task \u003d new Event(dateTimeStart, dateTimeEnd, taskArr[2].substring(0, taskArr[2].length() - 1));"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"                    break;"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"                if (task !\u003d null) {"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"                    if (taskArr[1].equals(\"X \")) {"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":"                        task.checkTask();"},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"                    }"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"                    taskList.addTask(task);"},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"        } catch (IOException e) {"},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"            System.out.println(\"This file cannot be loaded... My apologies\");"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":79}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    public String input;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    private boolean isDone;"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    public static String CHECKED \u003d \"[X]\";"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    public static String UNCHECKED \u003d \"[ ]\";"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    public Task(String input) {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"        this.input \u003d input;"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    public String getMark() {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        if (isDone) {"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"            return CHECKED;"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        } else  {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"            return UNCHECKED;"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    public boolean isDone() {"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        return isDone;"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    private String getDescription() {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        return this.input;"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     * Checks if the description of a task contains a given keyword."},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"     * @param keyword Keyword."},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"     * @return Boolean."},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    public boolean hasKeyWord(String keyword) {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        String[] words \u003d getDescription().split(\" \");"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        boolean containsKeyword \u003d false;"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 0; i \u003c words.length; i++) {"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"            if (words[i].equals(keyword)) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"                containsKeyword \u003d true;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        return containsKeyword;"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"     * Returns the task in a String format that can be saved by the file writer."},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"     * @return Formatted string of task."},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"    public abstract String formatToSave();"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"     * Marks the task as done."},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"    public void checkTask() {"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        this.isDone \u003d true;"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":60}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"public class TaskList {"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    public TaskList() {"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * Adds task into task list."},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"     * @param task Task to be added."},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    public void addTask(Task task) {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        tasks.add(task);"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * Removes task at specified index from task list."},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"     * @param index Index of task to be removed."},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"     * @return Task removed."},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    public Task deleteTask(int index) {"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        Task removed \u003d tasks.remove(index);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        return removed;"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"     * Marks task at specified index as done."},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     * @param index Index of task to be marked as done."},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"    public void doneTask(int index) {"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        task.checkTask();"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        tasks.add(index, task);"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        tasks.remove(index + 1);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"     * Returns number of tasks in task list."},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"     * @return Number of tasks in task list."},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"    public int getSize() {"},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"        return tasks.size();"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"     * Returns the task at a specified index."},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"     * @param index Index of task to return."},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"     * @return Task."},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    public Task getTask(int index) {"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":"        Task task \u003d this.tasks.get(index);"},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"        return task;"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":63}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    private String description;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    public Todo(String description) {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the To-do task."},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be written into the file writer."},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"     * @return String to be passed into file writer."},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    public String formatToSave() {"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"T | \";"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"        if (isDone()) {"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"X |\";"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"            str +\u003d \"O |\";"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        str +\u003d \" \" + description;"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"     * Returns a String that has been formatted which contains the information of the To-do task."},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"     * String is formatted into a form to be printed by the Ui."},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"     * @return String to be printed by Ui."},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"[T]\";"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        str +\u003d this.getMark() + \" \" + description;"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":41}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class Ui {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    private final String SPACER \u003d \"----------------------------------------------------\";"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    private void printSpacer() {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"        System.out.println(SPACER);"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"     * Prints the greeting when Duke is started."},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    public void printGreeting() {"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Hello my name is Mr. C!\" +"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"                \"\\nYou may type the command \u0027help\u0027 to see my list of commands.\" +"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"                \"\\nHow may I assist you?\");"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     * Prints the goodbye message when Duke is exited."},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    public void printBye() {"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Farewell sir/ma\u0027am. I hope to see you again soon.\");"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"    private void printTask(Task task) {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        System.out.println(task);"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"     * Prints a message for when a task is added to the list."},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"     * @param task Task to be added."},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"     * @param size Number of tasks currently in the list."},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"    public void printAddTask(Task task, int size) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"I have added the following task to your list:\");"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        printTask(task);"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        System.out.println(String.format(\"There are %d tasks in your list. I hope this pleases you.\", size));"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":48,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"jellymias"},"content":"     * Prints a message for when a task is marked as done."},{"lineNumber":50,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"jellymias"},"content":"     * @param task Task to be marked as done."},{"lineNumber":52,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"jellymias"},"content":"    public void printDoneTask(Task task) {"},{"lineNumber":54,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":55,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Congratulations on conquering this task:\");"},{"lineNumber":56,"author":{"gitId":"jellymias"},"content":"        printTask(task);"},{"lineNumber":57,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"You are one step closer to victory\");"},{"lineNumber":58,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":59,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":61,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"jellymias"},"content":"     * Prints a message for when a task is being removed from the list."},{"lineNumber":63,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"jellymias"},"content":"     * @param task Task to be removed."},{"lineNumber":65,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"jellymias"},"content":"    public void printDeleteTask(Task task) {"},{"lineNumber":67,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":68,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"I have removed the following task from your list:\");"},{"lineNumber":69,"author":{"gitId":"jellymias"},"content":"        printTask(task);"},{"lineNumber":70,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Does this bring you the satisfaction you so crave?\");"},{"lineNumber":71,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":72,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":74,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"jellymias"},"content":"     * Prints all the tasks in the list."},{"lineNumber":76,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"jellymias"},"content":"     * @param taskList List of tasks."},{"lineNumber":78,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"jellymias"},"content":"    public void printTaskList(TaskList taskList) {"},{"lineNumber":80,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":81,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":82,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"},{"lineNumber":83,"author":{"gitId":"jellymias"},"content":"            System.out.println(String.format(\"%d. \", i) + taskList.getTask(i - 1).toString());"},{"lineNumber":84,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\\nDo what you will with this information.\");"},{"lineNumber":86,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":87,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":89,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"jellymias"},"content":"     * Prints the error message."},{"lineNumber":91,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"jellymias"},"content":"     * @param e Exception that has occurred."},{"lineNumber":93,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"jellymias"},"content":"    public void printError(DukeException e) {"},{"lineNumber":95,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":96,"author":{"gitId":"jellymias"},"content":"        System.out.println(e);"},{"lineNumber":97,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":98,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":100,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"jellymias"},"content":"     * Prints the help message."},{"lineNumber":102,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"jellymias"},"content":"    public void printHelp() {"},{"lineNumber":104,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":105,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"These are the following commands that I understand:\");"},{"lineNumber":106,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027help\u0027 (shows the list of commands)\");"},{"lineNumber":107,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027list\u0027 (shows the list of tasks you have on your list)\");"},{"lineNumber":108,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027todo (task description)\u0027 (adds a To Do task to your list)\");"},{"lineNumber":109,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027deadline (task description) /by (DD/MM/YYYY TIME)\u0027 (adds a Deadline task to your list)\");"},{"lineNumber":110,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027event (task description) /from (DD/MM/YYYY TIME) /to (DD/MM/YYYY TIME)\u0027 (adds an Event task to your list)\");"},{"lineNumber":111,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027done (valid index)\u0027 (checks a task on your list)\");"},{"lineNumber":112,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027delete (valid index)\u0027 (removes a task from your list)\");"},{"lineNumber":113,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"\u0027find (keyword)\u0027 (searches for all tasks in your list containing the keyword)\");"},{"lineNumber":114,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Do omit the parentheses in the actual command.\");"},{"lineNumber":115,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"I pray that I will be of use to you.\");"},{"lineNumber":116,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":117,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":119,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"jellymias"},"content":"     * Prints the tasks that have been found."},{"lineNumber":121,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"jellymias"},"content":"     * @param taskList Task list that only contains found tasks."},{"lineNumber":123,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"jellymias"},"content":"    public void printFoundTaskList(TaskList taskList) {"},{"lineNumber":125,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":126,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"Here are the tasks that fit your search criteria:\");"},{"lineNumber":127,"author":{"gitId":"jellymias"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"},{"lineNumber":128,"author":{"gitId":"jellymias"},"content":"            System.out.println(String.format(\"%d. \", i) + taskList.getTask(i - 1).toString());"},{"lineNumber":129,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"jellymias"},"content":"        System.out.println(\"I can only pray that I have been of use to you.\");"},{"lineNumber":131,"author":{"gitId":"jellymias"},"content":"        printSpacer();"},{"lineNumber":132,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":133}},{"path":"src/main/java/duke/WrongCommandDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class WrongCommandDukeException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"     * Returns the string representation of an exception where an invalid command is given."},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"     * @return String."},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        return \"I am unable to comprehend what you have just said. I deeply regret my inadequecy.\";"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":14}},{"path":"src/main/java/duke/WrongFormatDukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"public class WrongFormatDukeException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"    private final String TODO \u003d \"todo (task description)\";"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"    private final String DEADLINE \u003d \"deadline (task description) /by (DD/MM/YYYY TIME)\";"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"    private final String EVENT \u003d \"event (task description) /from (DD/MM/YYYY TIME) /to (DD/MM/YYYY TIME)\";"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"    private final String DONE \u003d \"done (valid index)\";"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    private final String DELETE \u003d \"delete (valid index)\";"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    private final String LIST \u003d \"list\";"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"    private final String HELP \u003d \"help\";"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    private final String FIND \u003d \"find (keyword)\";"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    private String command;"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    public WrongFormatDukeException(String command) {"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        this.command \u003d command;"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"     * Returns the string representation of the exception where the command is not formatted properly."},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"     * @return String."},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        String str \u003d \"Sorry, I believe you have made a mistake in the format of this command.\\nHere is the correct format:\\n\";"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        if (command.equals(\"todo\")) {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"            str +\u003d TODO;"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"deadline\")) {"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"            str +\u003d DEADLINE;"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"event\")) {"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"            str +\u003d EVENT;"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"done\")) {"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"            str +\u003d DONE;"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"delete\")) {"},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"            str +\u003d DELETE;"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"            str +\u003d LIST;"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"help\")) {"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"            str +\u003d HELP;"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        } else if (command.equals(\"find\")) {"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"            str +\u003d FIND;"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        return str;"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":45}},{"path":"src/test/java/duke/DeadLineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"public class DeadLineTest {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    public void testFormatToSave() {"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"25/12/2021 1800\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Deadline(ldt, \"cook turkey\");"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.formatToSave();"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"D | O | cook turkey | by: 25-12-2021 1800\";"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        assertEquals(expected, actual);"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    public void testToString() {"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"25/12/2021 1800\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Deadline(ldt, \"cook turkey\");"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.toString();"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"[D][ ] cook turkey (by: 25-12-2021 1800)\";"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        assertEquals(expected, actual);"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":28}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"public class EventTest {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"    public void testFormatToSave() {"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldtStart \u003d LocalDateTime.parse(\"25/12/2021 0000\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldtEnd \u003d LocalDateTime.parse(\"25/12/2021 2359\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Event(ldtStart, ldtEnd, \"xmas\");"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.formatToSave();"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"E | O | xmas | from: 25-12-2021 0000 | to: 25-12-2021 2359\";"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        assertEquals(expected, actual);"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    public void testToString() {"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldtStart \u003d LocalDateTime.parse(\"25/12/2021 0000\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":"        LocalDateTime ldtEnd \u003d LocalDateTime.parse(\"25/12/2021 2359\", DateTimeFormatter.ofPattern(\"dd/M/yyyy Hmm\"));"},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Event(ldtStart, ldtEnd, \"xmas\");"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.toString();"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"[E][ ] xmas (from: 25-12-2021 0000 - 25-12-2021 2359)\";"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        assertEquals(expected, actual);"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":30}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class TaskListTest {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    public void testSize() {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        int actual \u003d taskList.getSize();"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        assertEquals(0, actual);"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    public void testAddTask() {"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        Task task1 \u003d new Todo(\"read book\");"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        taskList.addTask(task1);"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"        Task task2 \u003d taskList.getTask(0);"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"        assertEquals(task1, task2);"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"        assertEquals(1, taskList.getSize());"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":25,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"jellymias"},"content":"    public void testDeleteTask() {"},{"lineNumber":27,"author":{"gitId":"jellymias"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"jellymias"},"content":"        Task task1 \u003d new Todo(\"read book\");"},{"lineNumber":29,"author":{"gitId":"jellymias"},"content":"        taskList.addTask(task1);"},{"lineNumber":30,"author":{"gitId":"jellymias"},"content":"        Task task2 \u003d taskList.deleteTask(0);"},{"lineNumber":31,"author":{"gitId":"jellymias"},"content":"        assertEquals(task1, task2);"},{"lineNumber":32,"author":{"gitId":"jellymias"},"content":"        assertEquals(0, taskList.getSize());"},{"lineNumber":33,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":35,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"jellymias"},"content":"    public void testDoneTask() {"},{"lineNumber":37,"author":{"gitId":"jellymias"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"jellymias"},"content":"        Task task1 \u003d new Todo(\"read book\");"},{"lineNumber":39,"author":{"gitId":"jellymias"},"content":"        taskList.addTask(task1);"},{"lineNumber":40,"author":{"gitId":"jellymias"},"content":"        taskList.doneTask(0);"},{"lineNumber":41,"author":{"gitId":"jellymias"},"content":"        task1 \u003d taskList.getTask(0);"},{"lineNumber":42,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task1.toString();"},{"lineNumber":43,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"[T][X] read book\";"},{"lineNumber":44,"author":{"gitId":"jellymias"},"content":"        assertEquals(expected, actual);"},{"lineNumber":45,"author":{"gitId":"jellymias"},"content":"        assertEquals(1, taskList.getSize());"},{"lineNumber":46,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":47}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"public class TodoTest {"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"    public void testFormatToSave() {"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Todo(\"read book\");"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.formatToSave();"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"T | O | read book\";"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"        assertEquals(actual, expected);"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":""},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"    public void testToString() {"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"        Task task \u003d new Todo(\"read book\");"},{"lineNumber":19,"author":{"gitId":"jellymias"},"content":"        String actual \u003d task.toString();"},{"lineNumber":20,"author":{"gitId":"jellymias"},"content":"        String expected \u003d \"[T][ ] read book\";"},{"lineNumber":21,"author":{"gitId":"jellymias"},"content":"        assertEquals(actual, expected);"},{"lineNumber":22,"author":{"gitId":"jellymias"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"jellymias"},"content":"}"}],"authorContributionMap":{"jellymias":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jellymias"},"content":"todo"},{"lineNumber":2,"author":{"gitId":"jellymias"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"jellymias"},"content":"deadline"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"deadline return book"},{"lineNumber":5,"author":{"gitId":"jellymias"},"content":"deadline return book /by Sunday"},{"lineNumber":6,"author":{"gitId":"jellymias"},"content":"event"},{"lineNumber":7,"author":{"gitId":"jellymias"},"content":"event project meeting"},{"lineNumber":8,"author":{"gitId":"jellymias"},"content":"event project meeting /at 6th August 2pm - 4pm"},{"lineNumber":9,"author":{"gitId":"jellymias"},"content":"list"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"done"},{"lineNumber":11,"author":{"gitId":"jellymias"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"jellymias"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"jellymias"},"content":"list"},{"lineNumber":14,"author":{"gitId":"jellymias"},"content":"rubbish"},{"lineNumber":15,"author":{"gitId":"jellymias"},"content":"delete 0"},{"lineNumber":16,"author":{"gitId":"jellymias"},"content":"delete 1"},{"lineNumber":17,"author":{"gitId":"jellymias"},"content":"list"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"bye"}],"authorContributionMap":{"jellymias":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"jellymias"},"content":"if not exist \\Users\\Jeremias\\Documents\\Github\\ip\\bin mkdir \\Users\\Jeremias\\Documents\\Github\\ip\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"jellymias"},"content":"javac  -cp \\Users\\Jeremias\\Documents\\GitHub\\ip\\src\\main\\java -Xlint:none -d \\Users\\Jeremias\\Documents\\Github\\ip\\bin \\Users\\Jeremias\\Documents\\GitHub\\ip\\src\\main\\java\\duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jellymias"},"content":"java -classpath \\Users\\Jeremias\\Documents\\Github\\ip\\bin duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"jellymias":3,"-":18}}]
