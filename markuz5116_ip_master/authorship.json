[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"# duke.gui.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"1. After the importing is complete, locate the `src/main/java/duke.gui.Duke.java` file, right-click it, and choose `Run duke.gui.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"markuz5116":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.6\u0027"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"    enableAssertions \u003d true"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markuz5116":18,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"ï»¿# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"Duke is a **desktop application for managing tasks, optimized to be used with Command Line Interface** (CLI). It showcased your inputs and the outputs using Graphical User Interface (GUI)."},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"  "},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"![Image of Duke.](Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"#### Table Of Contents"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"- Features"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    - Adding a task: `todo` / `event` / `deadline`"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"    - Listing all persons: `list`"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    - Locating tasks by description: `find`"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    - Marking a task as complete: `done`"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    - Deleting a task: `delete`"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    - Saving the data"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    - Editing the save file"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"- Command summary"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"\u003e Notes about the command format:"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":" \u003e- Words in UPPER_CASE are the parameters supplied by you. e.g. in `DESCRIPTION`, `DESCRIPTION` is a parameter which which can be used as `todo read book`."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"### Adding a task: todo / event / deadline"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"Adds a task into Duke. There are three types of tasks: todo, deadline, event."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"\u003e Note: DATE is in format: YYYY-MM-DD"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"1. Add todo: `todo`"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"\t* Format: `todo DESCRIPTION`"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"\t* Examples:"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"\t\t* `todo read book`"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"2. Add deadline: `deadline`"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"\t* Format: `deadline DESCRIPTION /by DATE`"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"\t* Example:"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"\t\t* `deadline assignment /by 2020-01-01`"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"3. Add event: `event`"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"\t* Format: `event DESCRIPTION /at DATE`"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"\t* Example:"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"\t\t* `event funfair /at 2020-02-02`"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"### Listing all tasks: `list`"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"Shows a list of all tasks in Duke."},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"Format: `list`"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"### Locating tasks by description: `find`"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"Finds the tasks whose description contains the keywords you give."},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"Format: `find KEYWORDS`"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":" * The search is case-sensitive, and the order matters."},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":" * Only the description is searched."},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"\t* Example: Fun fair does not match with fair fun."},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":" * Partial words will be matched."},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"\t* Example: funfair will match with fun."},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"Examples: "},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":" * `find CS2101` returns `CS2101 HW`, `CS2101 assgn`, and `CS2101 exam`.  "},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"![Image of find method example.](Find_method_example.png)"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"### Marking a task as complete: `done`"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"Marks a task as done."},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"Format: `done INDEX`"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":" * Marks the task at the specified `INDEX`. The index refers to the index number shown in the displayed task list. The index **must be a positive integer** 1, 2, 3, ..."},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"Eamples:"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":" - `done 1` Marks your first task as completed.  "},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"![Image of done example.](Done_method_example.png)"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"### Deleting a task: `delete`"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"Deletes a specified task from your task list."},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"Format: `delete INDEX`"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"* Deletes the task at the specified `INDEX`."},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"* The index refers to the index number shown in your task list."},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"* The index **must be a positive integer** 1, 2, 3, ..."},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"Examples:"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":" * `delete 6` deletes the 6th task in your Duke."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":" * ![Image of delete method](Delete_method_example.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"### Saving the data"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"Duke saves your data in the hard disk automatically after each of your inputs. There is no need to save manually :)"},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"### Editing the save file"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"Duke saves your data in `[file location]/data/save.txt]`. You are welcomed to update your data directly by editing the save file."},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"\u003e Caution: Make sure the save file is of the right format, else all your data will be deleted.  "},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"\u003e Format: \u003cbr\u003e"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"\t1. T | 0/1 | DESCRIPTION  "},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"\t2. D | 0/1 | DESCRIPTION | YYYY-MM-DD  "},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"\t3. E | 0/1 | DESCRIPTION | YYYY-MM-DD"},{"lineNumber":85,"author":{"gitId":"-"},"content":"\t"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"## Command Summary  "},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"Action | Format | Examples "},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"------ | ------- | --------"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"Add|`todo DESCRIPTION` \u003cbr\u003e `deadline DESCRIPTION /by YYYY-MM-DD` \u003cbr\u003e `event DESCRIPTION /at YYYY-MM-DD`. | `todo task1` \u003cbr\u003e `deadline task2 /by 2021-03-12` \u003cbr\u003e `event task3 /at 2021-04-02`"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"List|`list`"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"Find|`find KEYWORDS`. | `find task`"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"Done|`done INDEX`. | `done 1`"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"Delete|`delete INDEX`. | `delete 6`"},{"lineNumber":95,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"markuz5116":80,"-":15}},{"path":"src/main/java/duke/Controller.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import duke.commands.BasicCommandType;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateDirectoryException;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateFileException;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeEmptyListException;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeSaveFileException;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeUnknownArgumentsException;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import duke.storage.Storage;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.TaskList;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import duke.ui.Message;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":" * Represents the Controller used to control the logic of the duke.gui.Duke program. Controller contains"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":" * the TaskList, Storage, and Ui."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"public class Controller {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    private static final String END_COMMAND \u003d \"bye\";"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    private TaskList tasks;"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    private Storage storage;"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * Initialises the new Controller for the logic of the Duke application."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     * @return Error messages if there are issues present, else returns the starting message."},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public String initialise() {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"            storage \u003d Storage.getInstance();"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"            tasks \u003d new TaskList(storage);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeCorruptedStorageException e) {"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeCreateFileException e) {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeCreateDirectoryException e) {"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        return Message.getStartMsg();"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     * Starts the program and accepting user inputs."},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public String run(String input) {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        if (input.equals(END_COMMAND)) {"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"            return Message.getByeMsg();"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        return handleInput(input);"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"     * Handles inputs from user."},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     * @param input User inputs."},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    public String handleInput(String input) {"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        BasicCommandType command \u003d Parser.parseCommand(input);"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        return executeCommand(input, command);"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"     * Executes User inputs based on the commandType."},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"     * @param input user input used based on commandType."},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"     * @param command commandType used to differentiate how input is used."},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"    private String executeCommand(String input, BasicCommandType command) {"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"            String output;"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"            switch (command) {"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"            case DONE:"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"                output \u003d doneTask(input);"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"            case LIST:"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"                output \u003d printList();"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"            case DELETE:"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"                output \u003d tasks.deleteTask(input);"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"            case ADD:"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"                output \u003d specificTask(input);"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"            default:"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"                throw new DukeUnknownArgumentsException();"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"            tasks.updateSave(storage);"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"            return output;"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeUnknownArgumentsException | DukeEmptyListException e) {"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeSaveFileException e) {"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e, tasks);"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"     * Marks specified task based on input as done."},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get index to be marked as done."},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"    private String doneTask(String input) {"},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":"        return tasks.done(input);"},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"     * Adds task based on input to the TaskList."},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get specific information of the task to be added."},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeUnknownArgumentsException if the input contains an unknown command."},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"    private String specificTask(String input) throws DukeUnknownArgumentsException {"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        return tasks.run(input);"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":"     * Prints the string representation of the TaskList."},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"    private String printList() {"},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"        return tasks.print();"},{"lineNumber":121,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":123}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import duke.gui.Duke;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":" * Launcher class used to launch the Duke GUI application."},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import duke.commands.BasicCommandType;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import duke.commands.SpecificCommandType;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeNoDescriptionException;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeUnknownArgumentsException;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":" * Represents a Parser class to parse input to specified outputs based on inputs."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    private static final String DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    private static final String DONE_COMMAND \u003d \"done\";"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    private static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    private static final String DELETE_COMMAND \u003d \"delete\";"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    private static final String TODO_COMMAND \u003d \"todo\";"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    private static final String EVENT_COMMAND \u003d \"event\";"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    private static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    private static final int TODO_MIN_ARGUMENTS \u003d 2;"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private static final int TODO_DESCRIPTION \u003d 5;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    private static final int ENCODE_DATE_PARAM \u003d 3;"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    private static final int DESCRIPTION_PARAM \u003d 0;"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    private static final String DATE_SEPARATOR \u003d \"/\";"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    private static final int DATE_INPUT_MIN_ARGUMENTS \u003d 4;"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    private static final int INDEX_PADDING \u003d 1;"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    private static final String TODO_COMMAND_TYPE \u003d \"T\";"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    private static final String DEADLINE_COMMAND_TYPE \u003d \"D\";"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    private static final String EVENT_COMMAND_TYPE \u003d \"E\";"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    private static final String DATA_SEPARATOR \u003d \" \\\\| \";"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    private static final int TODO_COMMAND_TYPE_PARAM \u003d 0;"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    private static final int TODO_DESCRIPTION_PARAM \u003d 2;"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    private static final int IS_DONE_PARAM \u003d 1;"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    private static final String DONE_ENCODING \u003d \"1\";"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    private static final String NOT_DONE_ENCODING \u003d \"0\";"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    private static final int DATE_PARAM \u003d 1;"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"    private static final int DATE_POSTFIX \u003d 3;"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    private static final int FIND_MIN_ARGUMENTS \u003d 2;"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"     * Returns a string representation based on LocalDate."},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"     * @param date date used to create the string representation."},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"     * @return the date with \"MMM dd yyyy\"."},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    public static String localDateToString(LocalDate date) {"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        return date.format(dtf);"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     * Returns BasicCommandType based on input."},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"     * @param input user input used to return a BasicCommandType."},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"     * @return BasicCommandType."},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    static BasicCommandType parseCommand(String input) {"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        if (input.startsWith(DONE_COMMAND)) {"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"            return BasicCommandType.DONE;"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        } else if (input.startsWith(LIST_COMMAND)) {"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"            return BasicCommandType.LIST;"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        } else if (input.startsWith(DELETE_COMMAND)) {"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"            return BasicCommandType.DELETE;"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"            return BasicCommandType.ADD;"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"     * Returns index based on string input."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get index."},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"     * @param i when the string representation of the index starts."},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"     * @return index based on the input."},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"    public static int stringToIndex(String input, int i) {"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        return Integer.parseInt(input.substring(i)) - INDEX_PADDING;"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"     * Returns SpecificCommandType based on input: TODO, DEADLINE, EVENT, FIND."},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"     * @param input user input used to get SpecificCommandType."},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"     * @return SpecificCommandType based on input."},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeUnknownArgumentsException when the input contains an unknown command."},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"    public static SpecificCommandType inputToSpecificCommand(String input)"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"            throws DukeUnknownArgumentsException {"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        if (input.startsWith(TODO_COMMAND)) {"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.TODO;"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"        } else if (input.startsWith(DEADLINE_COMMAND)) {"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.DEADLINE;"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"        } else if (input.startsWith(EVENT_COMMAND)) {"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.EVENT;"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"        } else if (input.startsWith(FIND_COMMAND)) {"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.FIND;"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":"            throw new DukeUnknownArgumentsException();"},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"     * Returns description of the Todo based on input."},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":"     * @param input user input to get description of Todo."},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"     * @return description of Todo based on input."},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException when the description is empty."},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"    public static String parseTodoInput(String input) throws DukeNoDescriptionException {"},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"        if (input.split(\" \").length \u003c TODO_MIN_ARGUMENTS) {"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"            throw new DukeNoDescriptionException(TODO_COMMAND);"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"            return input.substring(TODO_DESCRIPTION).trim();"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":"     * Returns description from the find input."},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"     * @param input find input used to get the description."},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"     * @return the description of the find input."},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException if there is no description."},{"lineNumber":121,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":"    public static String parseFindInput(String input) throws DukeNoDescriptionException {"},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"        if (input.split(\" \").length \u003c FIND_MIN_ARGUMENTS) {"},{"lineNumber":124,"author":{"gitId":"markuz5116"},"content":"            throw new DukeNoDescriptionException(SpecificCommandType.FIND.getName());"},{"lineNumber":125,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":126,"author":{"gitId":"markuz5116"},"content":"            return input.substring(SpecificCommandType.FIND.getPostfix());"},{"lineNumber":127,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"     * Returns LocalDate based on input and AddCommandType\u0027s postfix."},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"     * @param input user input to get Task date representation."},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":"     * @param command AddCommandType to be used to distinguish how to get the LocalDate."},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":"     * @return LocalDate based on the string representation of the date."},{"lineNumber":135,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":"    public static LocalDate obtainDate(String input, SpecificCommandType command) {"},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":"        input \u003d input.substring(command.getPostfix());"},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"        String[] inputs \u003d input.split(DATE_SEPARATOR);"},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"        return LocalDate.parse(inputs[DATE_PARAM].substring(DATE_POSTFIX));"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":"     * Returns description of the Event and Deadline Task, depending on the command."},{"lineNumber":144,"author":{"gitId":"markuz5116"},"content":"     * @param input user input to get the description of the Event or Deadline."},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"     * @param command AddCommandType used to differentiate the Event and Deadline."},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"     * @return description of either Event or Deadline."},{"lineNumber":147,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException when the description of the input is empty."},{"lineNumber":148,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":"    public static String obtainDescription(String input, SpecificCommandType command)"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":"            throws DukeNoDescriptionException {"},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"        if (input.split(\" \").length \u003c DATE_INPUT_MIN_ARGUMENTS) {"},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"            throw new DukeNoDescriptionException(command.getName());"},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"            input \u003d input.substring(command.getPostfix());"},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":"            String[] inputs \u003d input.split(DATE_SEPARATOR);"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"            return inputs[DESCRIPTION_PARAM];"},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"     * Returns AddCommandType based on encoded input."},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":"     * @param input used to get encoded representation to get the AddCommandType."},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":"     * @return TODO if \"T\", DEADLINE if \"D\", EVENT if \"E\"."},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encoded command is unknown."},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"markuz5116"},"content":"    public static SpecificCommandType parseCommandType(String input)"},{"lineNumber":167,"author":{"gitId":"markuz5116"},"content":"            throws DukeCorruptedStorageException {"},{"lineNumber":168,"author":{"gitId":"markuz5116"},"content":"        String[] separatedInput \u003d input.split(DATA_SEPARATOR);"},{"lineNumber":169,"author":{"gitId":"markuz5116"},"content":"        String command \u003d separatedInput[TODO_COMMAND_TYPE_PARAM];"},{"lineNumber":170,"author":{"gitId":"markuz5116"},"content":"        switch (command) {"},{"lineNumber":171,"author":{"gitId":"markuz5116"},"content":"        case TODO_COMMAND_TYPE:"},{"lineNumber":172,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.TODO;"},{"lineNumber":173,"author":{"gitId":"markuz5116"},"content":"        case DEADLINE_COMMAND_TYPE:"},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.DEADLINE;"},{"lineNumber":175,"author":{"gitId":"markuz5116"},"content":"        case EVENT_COMMAND_TYPE:"},{"lineNumber":176,"author":{"gitId":"markuz5116"},"content":"            return SpecificCommandType.EVENT;"},{"lineNumber":177,"author":{"gitId":"markuz5116"},"content":"        default:"},{"lineNumber":178,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCorruptedStorageException();"},{"lineNumber":179,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":182,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"markuz5116"},"content":"     * Returns description of task based on encoded input."},{"lineNumber":184,"author":{"gitId":"markuz5116"},"content":"     * @param input encoded input from save file."},{"lineNumber":185,"author":{"gitId":"markuz5116"},"content":"     * @return description of task."},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encoded input is not of the right format."},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"markuz5116"},"content":"    public static String obtainEncodedDescription(String input)"},{"lineNumber":189,"author":{"gitId":"markuz5116"},"content":"            throws DukeCorruptedStorageException {"},{"lineNumber":190,"author":{"gitId":"markuz5116"},"content":"        String[] separatedInput \u003d input.split(DATA_SEPARATOR);"},{"lineNumber":191,"author":{"gitId":"markuz5116"},"content":"        if (separatedInput[TODO_DESCRIPTION_PARAM].isBlank()) {"},{"lineNumber":192,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCorruptedStorageException();"},{"lineNumber":193,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"markuz5116"},"content":"        return separatedInput[TODO_DESCRIPTION_PARAM];"},{"lineNumber":195,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":197,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"markuz5116"},"content":"     * Returns true if encoded task is marked as done, otherwise false."},{"lineNumber":199,"author":{"gitId":"markuz5116"},"content":"     * @param input encoded task from save file."},{"lineNumber":200,"author":{"gitId":"markuz5116"},"content":"     * @return true if encoded task is marked as done."},{"lineNumber":201,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encoded task is not of the right format."},{"lineNumber":202,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":203,"author":{"gitId":"markuz5116"},"content":"    public static boolean isEncodedTaskDone(String input) throws DukeCorruptedStorageException {"},{"lineNumber":204,"author":{"gitId":"markuz5116"},"content":"        String[] separatedInput \u003d input.split(DATA_SEPARATOR);"},{"lineNumber":205,"author":{"gitId":"markuz5116"},"content":"        String isDone \u003d separatedInput[IS_DONE_PARAM];"},{"lineNumber":206,"author":{"gitId":"markuz5116"},"content":"        if (isDone.equals(DONE_ENCODING)) {"},{"lineNumber":207,"author":{"gitId":"markuz5116"},"content":"            return true;"},{"lineNumber":208,"author":{"gitId":"markuz5116"},"content":"        } else if (isDone.equals(NOT_DONE_ENCODING)) {"},{"lineNumber":209,"author":{"gitId":"markuz5116"},"content":"            return false;"},{"lineNumber":210,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":211,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCorruptedStorageException();"},{"lineNumber":212,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":215,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"markuz5116"},"content":"     * Returns LocalDate of either the Event\u0027s date or Deadline\u0027s date."},{"lineNumber":217,"author":{"gitId":"markuz5116"},"content":"     * @param input encoded task used to get the LocalDate."},{"lineNumber":218,"author":{"gitId":"markuz5116"},"content":"     * @return LocalDate based on input."},{"lineNumber":219,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encoded task is not of the right format."},{"lineNumber":220,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":221,"author":{"gitId":"markuz5116"},"content":"    public static LocalDate obtainEncodedDate(String input) throws DukeCorruptedStorageException {"},{"lineNumber":222,"author":{"gitId":"markuz5116"},"content":"        String[] separatedInput \u003d input.split(DATA_SEPARATOR);"},{"lineNumber":223,"author":{"gitId":"markuz5116"},"content":"        String date \u003d separatedInput[ENCODE_DATE_PARAM];"},{"lineNumber":224,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":225,"author":{"gitId":"markuz5116"},"content":"            return LocalDate.parse(date);"},{"lineNumber":226,"author":{"gitId":"markuz5116"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":227,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCorruptedStorageException();"},{"lineNumber":228,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":230}},{"path":"src/main/java/duke/commands/BasicCommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * BasicCommandType contains basic commands that do not require additional inputs apart from"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" * command type and without a date input."},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"public enum BasicCommandType {"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    DONE, LIST, DELETE, ADD"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":9}},{"path":"src/main/java/duke/commands/SpecificCommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * AddCommandType contains command type for adding command types."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public enum SpecificCommandType {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"    TODO(\"todo\", 2), DEADLINE(\"deadline\", 9), EVENT(\"event\", 6), FIND(\"find\", 5);"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    private final String name;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    private final int addCommandPostfix;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    SpecificCommandType(String name, int addCommandPostfix) {"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"        this.name \u003d name;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        this.addCommandPostfix \u003d addCommandPostfix;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of AddCommandType."},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     * @return string representation of the individual AddCommandType."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public String getName() {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        return name;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     * Returns postfix index for the AddCommandType."},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"     * @return postfix index of AddCommandType."},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    public int getPostfix() {"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        return addCommandPostfix;"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":32}},{"path":"src/main/java/duke/exceptions/DukeCorruptedStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when the save file does not conform to the format of the proper save"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" * file."},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"public class DukeCorruptedStorageException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of the exception."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     * @return cause of DukeCorruptedStorageException."},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"        return \"Storage file is corrupted. Continue to reset save file.\";"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":17}},{"path":"src/main/java/duke/exceptions/DukeCreateDirectoryException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when a directory cannot be created."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeCreateDirectoryException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"    private final String dir;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * Constructs a DukeCreateDirectoryException containing the string representation of the"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     * data directory."},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"     * @param dir String representation of the data directory"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    public DukeCreateDirectoryException(String dir) {"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"        this.dir \u003d dir;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation for the cause of the DukeCreateDirectoryException."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     * @return cause of the DukeCreateDirectoryException."},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"Failed to create new directory: \u0027%s\u0027.\", dir);"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":26}},{"path":"src/main/java/duke/exceptions/DukeCreateFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when the save file cannot be created."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeCreateFileException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation for the cause of DukeCreateFileException."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * @return string representation for the cause of the exception."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        return \"Failed to create new file: save.txt.\";"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":16}},{"path":"src/main/java/duke/exceptions/DukeEmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when the TaskList is empty but user wants to delete a task."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeEmptyListException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation for the cause of the DukeEmptyListException."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * @return string representation for the cause of the exception."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        return \"Cannot delete task in empty list.\";"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":16}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Superclass of all specific DukeExceptions subclasses. Used to package exceptions due to Duke"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" * application."},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":8}},{"path":"src/main/java/duke/exceptions/DukeNoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents an exception when the command has an empty description."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeNoDescriptionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"    private final String command;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * Constructs a DukeNoDescriptionException that contains the command type."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     * @param command string representation of the command type."},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public DukeNoDescriptionException(String command) {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        this.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation for the cause of the DukeNoDescriptionException."},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"     * @return string representation for the cause of the exception."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"OOPS!!! The description of a %s cannot be empty.\", command);"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":24}},{"path":"src/main/java/duke/exceptions/DukeSaveFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when save file cannot be updated."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeSaveFileException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"     * Returns a string representation for the cause of DukeSaveFileException."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * @return string representation for the cause of the exception."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        return \"Failed to update save file.\";"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":16}},{"path":"src/main/java/duke/exceptions/DukeUnknownArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":" * Represents the exception when the input command is unknown."},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"public class DukeUnknownArgumentsException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"     * Returns the string representation for the cause of DukeUnknownArgumentsException."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"     * @return string representation for the cause of the exception."},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        return \"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":16}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.text.Font;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"        dialog.setFont(new Font(\"Georgia\", 10));"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        displayPicture.setImage(img);"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     * Creates a dialog box for user\u0027s input."},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"     * @param text Input text by user."},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"     * @param img Image used to represent user."},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"     * @return Dialog box created to represent user."},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        return new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"     * Creates a dialog box for Duke\u0027s response."},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"     * @param text Response from Duke based on user\u0027s input."},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"     * @param img Image used to represent Duke."},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"     * @return Dialog box created to represent Duke\u0027s response."},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, img);"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"        dialogBox.flip();"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        return dialogBox;"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":75}},{"path":"src/main/java/duke/gui/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.Controller;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":" * A GUI for duke.gui.Duke using FXML."},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"public class Duke extends Application {"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    private static Stage stage;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    private final Controller controller \u003d new Controller();"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            this.stage \u003d stage;"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"            stage.setOnCloseRequest(e -\u003e handleExit());"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"            stage.setTitle(\"duke.gui.Duke\");"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"            stage.setScene(scene);"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"            stage.setResizable(false);"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setController(controller);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"     * Quits the Duke GUI application."},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    public static void handleExit() {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        stage.close();"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":43}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import duke.Controller;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import duke.ui.Message;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":" * Controller for controller.gui.MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    private Controller controller;"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     * Initializes the GUI application for Duke."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        scrollPane.setFitToHeight(true);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"     * Initializes the Controller for the GUI application, and shows starting message if Duke"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"     * application is started correctly."},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     * @param controller controller for the logic of the Duke application for the GUI application."},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public void setController(Controller controller) {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        String response \u003d controller.initialise();"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        this.controller \u003d controller;"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing controller.gui."},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"     * Duke\u0027s reply and then appends them to the dialog container. Clears the user input after"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"     * processing."},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    private void handleUserInput() {"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        String response \u003d controller.run(input);"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        input \u003d Message.getUserInput(input);"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"        );"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        if (response.equals(Message.getByeMsg())) {"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"            Duke.handleExit();"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        userInput.clear();"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":72}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateDirectoryException;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateFileException;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeSaveFileException;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":" * Represents the Storage file that is used to store and update the save file."},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    private static final String DATA_DIR \u003d new File(\"data\").getAbsolutePath();"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    private static Storage storage;"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    private final File saveFile \u003d new File(DATA_DIR + \"/save.txt\");"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    private Storage() throws DukeCreateDirectoryException {"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        createDirectory();"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"     * Returns a new Storage or an existing one."},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     * @return a new or existing Storage class."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    public static Storage getInstance() throws DukeCreateDirectoryException {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        if (storage \u003d\u003d null) {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"            storage \u003d new Storage();"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        return storage;"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"     * Updates the save file in the hardware with the new TaskList."},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     * @param tasks The TaskList used to update the save file."},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public void update(ArrayList\u003cTask\u003e tasks) throws DukeSaveFileException {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        assert(!tasks.isEmpty());"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"            FileWriter fw \u003d new FileWriter(saveFile);"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"            fw.write(StorageEncoder.encodeTasks(tasks));"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"            fw.close();"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"            throw new DukeSaveFileException();"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"     * Returns an ArrayList of Task from the save file."},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"     * @return an ArrayList of Task from the save file."},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeCreateFileException, DukeCorruptedStorageException {"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"            if (saveFile.createNewFile()) {"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"                return tasks;"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"            Scanner sc \u003d new Scanner(saveFile);"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"            ArrayList\u003cString\u003e inputs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"            while (sc.hasNext()) {"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"                inputs.add(sc.nextLine());"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"            tasks \u003d StorageDecoder.decodeSave(inputs);"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCreateFileException();"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        return tasks;"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"     * Creates a data directory from source unless it already exists."},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"    private void createDirectory() throws DukeCreateDirectoryException {"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"        Path dataPath \u003d Paths.get(DATA_DIR);"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"            Files.createDirectories(dataPath);"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"        } catch (IOException e) {"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCreateDirectoryException(DATA_DIR);"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":90}},{"path":"src/main/java/duke/storage/StorageDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import duke.Parser;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import duke.commands.SpecificCommandType;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Todo;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":" * Represents the StorageDecoder that decodes the data representation of the save file into the"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":" * ArrayList of Task."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"public class StorageDecoder {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     * Returns ArrayList of Task decoded from the save file."},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"     * @param encodedTasks data representation of the TaskList from save file."},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * @return ArrayList of Task from the encodedTasks."},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encodedTasks does not conform with the"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     *     proper save file format."},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public static ArrayList\u003cTask\u003e decodeSave(ArrayList\u003cString\u003e encodedTasks) throws DukeCorruptedStorageException {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        for (String encodedTask : encodedTasks) {"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"            SpecificCommandType command \u003d Parser.parseCommandType(encodedTask);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"            Task task;"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"            switch (command) {"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"            case TODO:"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"                task \u003d decodeTodo(encodedTask);"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"            case EVENT:"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"            case DEADLINE:"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"                task \u003d decodeTaskWithDate(command, encodedTask);"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"            default:"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"                throw new DukeCorruptedStorageException();"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"            tasks.add(task);"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        return tasks;"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"     * Returns Todo Task based on a single line of the encodedTask."},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"     * @param encodedTask data representation of a single Todo Task from save file."},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"     * @return Todo Task based on the encodedTask."},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the Task does not fit the format of a Todo Task."},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"    private static Task decodeTodo(String encodedTask) throws DukeCorruptedStorageException {"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"        assert(!encodedTask.isEmpty());"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        boolean isDone \u003d Parser.isEncodedTaskDone(encodedTask);"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"        String description \u003d Parser.obtainEncodedDescription(encodedTask);"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        Task task \u003d new Todo(description);"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"        if (isDone) {"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"            task.done();"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        return task;"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"     * Returns either Event or Deadline Task based on the single line encodedTask, based on"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"     * AddCommandType."},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"     * @param command AddCommandType used to distinguish between Event and Deadline."},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"     * @param encodedTask data representation of the Event or Dateline from save file."},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"     * @return Event or Deadline based on the command using encodedTask."},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeCorruptedStorageException when the encodedTask does not fit the format for a"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"     *     Task with dates."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    private static Task decodeTaskWithDate(SpecificCommandType command, String encodedTask)"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"            throws DukeCorruptedStorageException {"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        assert(command !\u003d null);"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"        assert(!encodedTask.isEmpty());"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"        boolean isDone \u003d Parser.isEncodedTaskDone(encodedTask);"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        String description \u003d Parser.obtainEncodedDescription(encodedTask);"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"        LocalDate date \u003d Parser.obtainEncodedDate(encodedTask);"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"        Task task;"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"        switch (command) {"},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"        case EVENT:"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"            task \u003d new Event(description, date);"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"        case DEADLINE:"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"            task \u003d new Deadline(description, date);"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        default:"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"            throw new DukeCorruptedStorageException();"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"        if (isDone) {"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"            task.done();"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"        return task;"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":97}},{"path":"src/main/java/duke/storage/StorageEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":" * Represents an encoder used to encode TaskList into its data representation."},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"public class StorageEncoder {"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"    private static final String NEW_LINE \u003d \"\\n\";"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"     * Returns data representation of TaskList encoded using the tasks."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"     * @param tasks TaskList used to be encoded to be saved in save file."},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"     * @return encoded representation for the save file."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    public static String encodeTasks(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"        String res \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"        for (Task task : tasks) {"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"            res \u003d res.concat(task.data() + NEW_LINE);"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        return res;"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":25}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.Parser;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":" * Represents the subclass of Task. It contains the description of the task and a LocalDate that"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":" * represents the deadline of the Task."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"     * Constructs a Deadline Task that contains the description of the task and its deadline."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"     * Defaults with the task being not done."},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"     * @param deadline deadline for the task."},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"        super(description, deadline);"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of encoded data for the task so it can be saved."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     * @return string representation of the data of the task."},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    public String data() {"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"D | %s | %s\", super.data(), date);"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation the task."},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"     * @return type of the task, whether the task is done, task\u0027s description, and task\u0027s deadline."},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), Parser.localDateToString(date));"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":40}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.Parser;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":" * Represents the subclass of Task. It contains the description of the task and the date of the"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":" * event."},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"     * Constructs a Event class that contains the description of the task and the date of the event."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"     * @param description description of the Event."},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"     * @param eventTime date when the Event occurs."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    public Event(String description, LocalDate eventTime) {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"        super(description, eventTime);"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     * Returns data representation of the Event to be saved into the save file."},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"     * @return data representation of the Event."},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public String data() {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"E | %s | %s\", super.data(), date);"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of the Event that will be shown to the user."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     * @return the event type, whether it is done, the event\u0027s description and the event\u0027s date."},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), Parser.localDateToString(date));"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":39}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" * Represents the Task that contains the description of the task with a boolean to show if the"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":" * task is done."},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"public abstract class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"    protected final String description;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    protected final LocalDate date;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"     * Constructs a Task that contains the description and defaulted as not done."},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"     * @param description description of the Task."},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    public Task(String description, LocalDate date) {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"        isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        this.date \u003d date;"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"     * Sets the task as done."},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    public void done() {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     * Returns a data representation of the task to be saved in the save.txt file."},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"     * @return data representation of Task."},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"    public String data() {"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        String done \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"%s | %s\", done, description);"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of the Task to be shown to the user."},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"     * @return string representation of the Task."},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        String output;"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        if (isDone) {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"            output \u003d String.format(\"[X] %s\", description);"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"            output \u003d String.format(\"[ ] %s\", description);"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"        return output;"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"     * Returns integer comparing whether either tasks are completed, then dates of other task,"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"     * then other task\u0027s names."},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"     * @param otherTask other task used for comparing."},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"     * @return negative integer if this is done, or earlier date, or if the three criteria are"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"     * the same, positive if this task is not done, or later date. If first two criteria are the"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"     * same, compare the names."},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"    public int compareTo(Task otherTask) {"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        if (areDifferentStates(otherTask)) {"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"            return isDone ? 1 : -1;"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"        if (this.areDifferentDates(otherTask)) {"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"            return date.compareTo(otherTask.date);"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"        return description.compareTo(otherTask.description);"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    private boolean areDifferentStates(Task otherTask) {"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"        return this.isDone !\u003d otherTask.isDone;"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"    private boolean areDifferentDates(Task otherTask) {"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"        return date.compareTo(otherTask.date) !\u003d 0;"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":81}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import duke.Parser;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import duke.commands.SpecificCommandType;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateFileException;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeEmptyListException;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeNoDescriptionException;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeSaveFileException;"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeUnknownArgumentsException;"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"import duke.storage.Storage;"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"import duke.ui.Message;"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":" * Represents the TaskList to store all the tasks inputted by the user. Tasklist contains a Ui"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":" * class that show output from functions."},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"public class TaskList {"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"     * Constructs TaskList containing an ArrayList of Task and the Ui."},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"     * @param storage Use to load the latest TaskList from save file."},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    public TaskList(Storage storage) throws DukeCorruptedStorageException, DukeCreateFileException {"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        tasks \u003d storage.load();"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"     * Creates new empty TaskList."},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"    public TaskList() {"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"     * Returns number of tasks."},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"     * @return number of tasks in the TaskList."},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"    public int size() {"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"        return tasks.size();"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"     * Updates the save file in the hardware."},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"     * @param storage Storage class used for storage in the hardware."},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    public void updateSave(Storage storage) throws DukeSaveFileException {"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        storage.update(tasks);"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"     * Marks the task based on the input as done."},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get index of task to be marked as done."},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"    public String done(String input) {"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        int index \u003d Parser.stringToIndex(input, 5);"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":"        task.done();"},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"        return Message.getDoneMsg(task);"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"     * Returns a Todo Task that will be added to this TaskList."},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get the description for the task."},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"     * @return Todo task with the description."},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException if the description of the todo command is empty."},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    Todo createTodo(String input) throws DukeNoDescriptionException {"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"        input \u003d Parser.parseTodoInput(input);"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"        return new Todo(input);"},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"     * Returns Deadline subclass of Task that will be added to this TaskList."},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get the description and deadline of the Deadline task."},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"     * @return Deadline task with the description and deadline."},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException if the description of the deadline is empty."},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"     * @throws DateTimeParseException if the deadline is not of format: YYYY-MM-DD."},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"    Deadline createDeadline(String input) throws DukeNoDescriptionException,"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"            DateTimeParseException {"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"        String description \u003d Parser.obtainDescription(input, SpecificCommandType.DEADLINE);"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        LocalDate deadline \u003d Parser.obtainDate(input, SpecificCommandType.DEADLINE);"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"        return new Deadline(description, deadline);"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":"     * Returns Event subclass of Task that will be added to this TaskList."},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get the description and event time of the Event task."},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"     * @return Event task with description and event time."},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException when the description of the Event is empty."},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":"     * @throws  DateTimeParseException when the event time is not of format: YYYY-MM-DD."},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"    Event createEvent(String input) throws DukeNoDescriptionException {"},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"        String description \u003d Parser.obtainDescription(input, SpecificCommandType.EVENT);"},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"        LocalDate eventTime \u003d Parser.obtainDate(input, SpecificCommandType.EVENT);"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":"        return new Event(description, eventTime);"},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"     * Deletes Task from TaskList of index using input."},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get index of Task to be deleted."},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeEmptyListException when the TaskList is empty."},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"    public String deleteTask(String input) throws DukeEmptyListException {"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":"        int index \u003d Parser.stringToIndex(input, 7);"},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"            throw new DukeEmptyListException();"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":117,"author":{"gitId":"markuz5116"},"content":"        tasks.remove(index);"},{"lineNumber":118,"author":{"gitId":"markuz5116"},"content":"        return Message.getDeleteMsg(task, tasks.size());"},{"lineNumber":119,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":121,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"markuz5116"},"content":"     * Decides whether the input is to add a new task or find tasks in the existing tasklist."},{"lineNumber":123,"author":{"gitId":"markuz5116"},"content":"     * @param input input used to get the relevant information of Task."},{"lineNumber":124,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeUnknownArgumentsException when the input arguments for the creation of the"},{"lineNumber":125,"author":{"gitId":"markuz5116"},"content":"     *     Task is unknown."},{"lineNumber":126,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"markuz5116"},"content":"    public String run(String input) throws DukeUnknownArgumentsException {"},{"lineNumber":128,"author":{"gitId":"markuz5116"},"content":"        String output;"},{"lineNumber":129,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":130,"author":{"gitId":"markuz5116"},"content":"            SpecificCommandType command \u003d Parser.inputToSpecificCommand(input);"},{"lineNumber":131,"author":{"gitId":"markuz5116"},"content":"            switch (command) {"},{"lineNumber":132,"author":{"gitId":"markuz5116"},"content":"            case TODO:"},{"lineNumber":133,"author":{"gitId":"markuz5116"},"content":"            case EVENT:"},{"lineNumber":134,"author":{"gitId":"markuz5116"},"content":"            case DEADLINE:"},{"lineNumber":135,"author":{"gitId":"markuz5116"},"content":"                output \u003d add(input, command);"},{"lineNumber":136,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":137,"author":{"gitId":"markuz5116"},"content":"            case FIND:"},{"lineNumber":138,"author":{"gitId":"markuz5116"},"content":"                output \u003d find(input);"},{"lineNumber":139,"author":{"gitId":"markuz5116"},"content":"                break;"},{"lineNumber":140,"author":{"gitId":"markuz5116"},"content":"            default:"},{"lineNumber":141,"author":{"gitId":"markuz5116"},"content":"                throw new DukeUnknownArgumentsException();"},{"lineNumber":142,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeNoDescriptionException e) {"},{"lineNumber":144,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":145,"author":{"gitId":"markuz5116"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":146,"author":{"gitId":"markuz5116"},"content":"            return Message.getErrorMsg(e);"},{"lineNumber":147,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"markuz5116"},"content":"        return output;"},{"lineNumber":149,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":151,"author":{"gitId":"markuz5116"},"content":"    private String add(String input, SpecificCommandType command) throws DukeNoDescriptionException,"},{"lineNumber":152,"author":{"gitId":"markuz5116"},"content":"            DateTimeParseException, DukeUnknownArgumentsException {"},{"lineNumber":153,"author":{"gitId":"markuz5116"},"content":"        Task task;"},{"lineNumber":154,"author":{"gitId":"markuz5116"},"content":"        switch (command) {"},{"lineNumber":155,"author":{"gitId":"markuz5116"},"content":"        case TODO:"},{"lineNumber":156,"author":{"gitId":"markuz5116"},"content":"            task \u003d createTodo(input);"},{"lineNumber":157,"author":{"gitId":"markuz5116"},"content":"            break;"},{"lineNumber":158,"author":{"gitId":"markuz5116"},"content":"        case DEADLINE:"},{"lineNumber":159,"author":{"gitId":"markuz5116"},"content":"            task \u003d createDeadline(input);"},{"lineNumber":160,"author":{"gitId":"markuz5116"},"content":"            break;"},{"lineNumber":161,"author":{"gitId":"markuz5116"},"content":"        case EVENT:"},{"lineNumber":162,"author":{"gitId":"markuz5116"},"content":"            task \u003d createEvent(input);"},{"lineNumber":163,"author":{"gitId":"markuz5116"},"content":"            break;"},{"lineNumber":164,"author":{"gitId":"markuz5116"},"content":"        default:"},{"lineNumber":165,"author":{"gitId":"markuz5116"},"content":"            throw new DukeUnknownArgumentsException();"},{"lineNumber":166,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"markuz5116"},"content":"        tasks.add(task);"},{"lineNumber":168,"author":{"gitId":"markuz5116"},"content":"        return Message.getAddMsg(task, tasks.size());"},{"lineNumber":169,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":171,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"markuz5116"},"content":"     * Prints String representation of the TaskList for the user."},{"lineNumber":173,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"markuz5116"},"content":"    public String print() {"},{"lineNumber":175,"author":{"gitId":"markuz5116"},"content":"        sort(tasks);"},{"lineNumber":176,"author":{"gitId":"markuz5116"},"content":"        return this.print(tasks);"},{"lineNumber":177,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":179,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"markuz5116"},"content":"     * Prints the task in the specified tasklist."},{"lineNumber":181,"author":{"gitId":"markuz5116"},"content":"     * @param tasks the tasks used for printing."},{"lineNumber":182,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"markuz5116"},"content":"    private String print(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":184,"author":{"gitId":"markuz5116"},"content":"        return Message.getTaskListMsg(tasks);"},{"lineNumber":185,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":187,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"markuz5116"},"content":"     * Prints tasks that contain input description."},{"lineNumber":189,"author":{"gitId":"markuz5116"},"content":"     * @param input used to get the description to print the tasks with the description."},{"lineNumber":190,"author":{"gitId":"markuz5116"},"content":"     * @throws DukeNoDescriptionException when the description given is empty."},{"lineNumber":191,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":192,"author":{"gitId":"markuz5116"},"content":"    public String find(String input) throws DukeNoDescriptionException {"},{"lineNumber":193,"author":{"gitId":"markuz5116"},"content":"        String description \u003d Parser.parseFindInput(input);"},{"lineNumber":194,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cTask\u003e selectedTask \u003d new ArrayList\u003c\u003e();"},{"lineNumber":195,"author":{"gitId":"markuz5116"},"content":"        for (Task task : tasks) {"},{"lineNumber":196,"author":{"gitId":"markuz5116"},"content":"            if (task.description.contains(description)) {"},{"lineNumber":197,"author":{"gitId":"markuz5116"},"content":"                selectedTask.add(task);"},{"lineNumber":198,"author":{"gitId":"markuz5116"},"content":"            }"},{"lineNumber":199,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"markuz5116"},"content":"        return Message.getFindMsg(selectedTask);"},{"lineNumber":201,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":203,"author":{"gitId":"markuz5116"},"content":"    private void sort(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":204,"author":{"gitId":"markuz5116"},"content":"        System.out.println(tasks);"},{"lineNumber":205,"author":{"gitId":"markuz5116"},"content":"        Collections.sort(tasks);"},{"lineNumber":206,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":207}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":" * Represents Todo subclass of Task that contains description of Task."},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"    public static final String TODO_DATE \u003d \"0000-01-01\";"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"     * Constructs Todo subclass of Task containing the description of the Task."},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"     * @param description description of the Todo."},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"    public Todo(String description) {"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"        super(description, LocalDate.parse(TODO_DATE));"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"     * Returns data representation of the Task, encoded to be saved in save file."},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"     * @return encoded form of Todo for save file."},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    public String data() {"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        return String.format(\"T | %s\", super.data());"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"     * Returns string representation of Todo."},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"     * @return type of Todo, whether it is done, description of Todo."},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":37}},{"path":"src/main/java/duke/ui/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCreateFileException;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeNoDescriptionException;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeSaveFileException;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.TaskList;"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":" * Message class used to create output strings for UI class to be shown as output of duke.gui.Duke."},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":" */"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"public class Message {"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    private static final String INDENT \u003d \"    \";"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"    private static final String NEWLINE \u003d System.lineSeparator();"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"    public static final String LINE \u003d INDENT"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"            + \"__________________________________________________\""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            + \"______________\" + NEWLINE;"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"    private static final String START_MSG \u003d INDENT + \"Hello! I\u0027m Duke\" + NEWLINE"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"            + INDENT + \"What can I do for you?\" + NEWLINE;"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"    private static final String BYE_MSG \u003d"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"            INDENT + \" Bye. Hope to see you again soon!\" + NEWLINE;"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"    public static String getStartMsg() {"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        return START_MSG;"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"    public static String getByeMsg() {"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        return BYE_MSG;"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DukeException e) {"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        return INDENT + e;"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(NumberFormatException e) {"},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        return INDENT + \"Please enter an integer as argument. \" + e.getMessage();"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(IndexOutOfBoundsException e, TaskList taskList) {"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        return String.format(INDENT + \"Please enter an integer within your tasks size: %d\" + NEWLINE,"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":"                taskList.size());"},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DukeNoDescriptionException e) {"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":"        return String.format(INDENT + \" %s\", e);"},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DateTimeParseException e) {"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        return INDENT + \"Date is not input correctly. Ensure input date is: YYYY-MM-DD.\";"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DukeSaveFileException e) {"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":"        return INDENT + e.toString();"},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":61,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DukeCreateFileException e) {"},{"lineNumber":62,"author":{"gitId":"markuz5116"},"content":"        return INDENT + e.toString();"},{"lineNumber":63,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":65,"author":{"gitId":"markuz5116"},"content":"    public static String getErrorMsg(DukeCorruptedStorageException e) {"},{"lineNumber":66,"author":{"gitId":"markuz5116"},"content":"        return INDENT + e.toString();"},{"lineNumber":67,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":69,"author":{"gitId":"markuz5116"},"content":"    public static String getDoneMsg(Task task) {"},{"lineNumber":70,"author":{"gitId":"markuz5116"},"content":"        return String.format(INDENT + \" Nice! I\u0027ve marked this task as done:\" + NEWLINE"},{"lineNumber":71,"author":{"gitId":"markuz5116"},"content":"                + INDENT + INDENT + \" %s\", task);"},{"lineNumber":72,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":74,"author":{"gitId":"markuz5116"},"content":"    public static String getDeleteMsg(Task task, int numTasks) {"},{"lineNumber":75,"author":{"gitId":"markuz5116"},"content":"        return String.format(INDENT + \" Noted. I\u0027ve removed this task:\" + NEWLINE + INDENT + INDENT"},{"lineNumber":76,"author":{"gitId":"markuz5116"},"content":"                        + task + NEWLINE + INDENT + \" Now you have %d tasks in the list.\","},{"lineNumber":77,"author":{"gitId":"markuz5116"},"content":"                numTasks);"},{"lineNumber":78,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":80,"author":{"gitId":"markuz5116"},"content":"    public static String getAddMsg(Task t, int taskSize) {"},{"lineNumber":81,"author":{"gitId":"markuz5116"},"content":"        return String.format(INDENT + \" Got it. I\u0027ve added this task:\" + NEWLINE"},{"lineNumber":82,"author":{"gitId":"markuz5116"},"content":"                + INDENT + INDENT + \" %s\" + NEWLINE + INDENT + \" Now you have %d tasks \""},{"lineNumber":83,"author":{"gitId":"markuz5116"},"content":"                + \"in the list.\", t, taskSize);"},{"lineNumber":84,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":86,"author":{"gitId":"markuz5116"},"content":"    public static String getTaskListMsg(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":87,"author":{"gitId":"markuz5116"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":88,"author":{"gitId":"markuz5116"},"content":"            return INDENT + \"You have no tasks in the list.\";"},{"lineNumber":89,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"markuz5116"},"content":"        String msg \u003d INDENT + \"Here are the tasks in your list:\";"},{"lineNumber":91,"author":{"gitId":"markuz5116"},"content":"        msg \u003d getTaskListDetailMsg(taskList, msg);"},{"lineNumber":92,"author":{"gitId":"markuz5116"},"content":"        return msg;"},{"lineNumber":93,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":95,"author":{"gitId":"markuz5116"},"content":"    public static String getFindMsg(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":96,"author":{"gitId":"markuz5116"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":97,"author":{"gitId":"markuz5116"},"content":"            return INDENT + \"You have no matching tasks in the list.\";"},{"lineNumber":98,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"markuz5116"},"content":"        String msg \u003d INDENT + \"Here are the matching tasks in your list:\";"},{"lineNumber":100,"author":{"gitId":"markuz5116"},"content":"        msg \u003d getTaskListDetailMsg(taskList, msg);"},{"lineNumber":101,"author":{"gitId":"markuz5116"},"content":"        return msg;"},{"lineNumber":102,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":104,"author":{"gitId":"markuz5116"},"content":"    public static String getTaskListDetailMsg(ArrayList\u003cTask\u003e taskList, String msg) {"},{"lineNumber":105,"author":{"gitId":"markuz5116"},"content":"        int index \u003d 1;"},{"lineNumber":106,"author":{"gitId":"markuz5116"},"content":"        for (Task task : taskList) {"},{"lineNumber":107,"author":{"gitId":"markuz5116"},"content":"            msg \u003d msg.concat(String.format(NEWLINE + INDENT + \"%d.%s\", index, task));"},{"lineNumber":108,"author":{"gitId":"markuz5116"},"content":"            index++;"},{"lineNumber":109,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"markuz5116"},"content":"        return msg;"},{"lineNumber":111,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":113,"author":{"gitId":"markuz5116"},"content":"    public static String getUserInput(String input) {"},{"lineNumber":114,"author":{"gitId":"markuz5116"},"content":"        return input + INDENT;"},{"lineNumber":115,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":116}},{"path":"src/test/java/DukeStorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"import duke.exceptions.DukeCorruptedStorageException;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":"import duke.storage.StorageDecoder;"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import duke.storage.StorageEncoder;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"public class DukeStorageTest {"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"    public void testStorage() {"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cString\u003e encodedFile \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"T | 0 | todo task not done\");"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"T | 1 | todo task done\");"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"D | 0 | deadline task not done | 2020-01-25\");"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"D | 1 | deadline task done | 2020-01-20\");"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"E | 0 | event task not done | 2020-02-20\");"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"        encodedFile.add(\"E | 1 | event task done | 2020-02-19\");"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        taskList.add(new Todo(\"todo task not done\"));"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"        Todo todo2 \u003d new Todo(\"todo task done\");"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        todo2.done();"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"        taskList.add(todo2);"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"        taskList.add(new Deadline(\"deadline task not done\", LocalDate.parse(\"2020-01-25\")));"},{"lineNumber":32,"author":{"gitId":"markuz5116"},"content":"        Deadline deadline2 \u003d new Deadline(\"deadline task done\", LocalDate.parse(\"2020-01-20\"));"},{"lineNumber":33,"author":{"gitId":"markuz5116"},"content":"        deadline2.done();"},{"lineNumber":34,"author":{"gitId":"markuz5116"},"content":"        taskList.add(deadline2);"},{"lineNumber":35,"author":{"gitId":"markuz5116"},"content":"        taskList.add(new Event(\"event task not done\", LocalDate.parse(\"2020-02-20\")));"},{"lineNumber":36,"author":{"gitId":"markuz5116"},"content":"        Event event2 \u003d new Event(\"event task done\", LocalDate.parse(\"2020-02-19\"));"},{"lineNumber":37,"author":{"gitId":"markuz5116"},"content":"        event2.done();"},{"lineNumber":38,"author":{"gitId":"markuz5116"},"content":"        taskList.add(event2);"},{"lineNumber":39,"author":{"gitId":"markuz5116"},"content":"        ArrayList\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":41,"author":{"gitId":"markuz5116"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"markuz5116"},"content":"            decodedTasks \u003d StorageDecoder.decodeSave(encodedFile);"},{"lineNumber":43,"author":{"gitId":"markuz5116"},"content":"        } catch (DukeCorruptedStorageException e) {"},{"lineNumber":44,"author":{"gitId":"markuz5116"},"content":"            assert false;"},{"lineNumber":45,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":47,"author":{"gitId":"markuz5116"},"content":"        for (int i \u003d 0; i \u003c 6; i++) {"},{"lineNumber":48,"author":{"gitId":"markuz5116"},"content":"            assertEquals(decodedTasks.get(i).toString(), taskList.get(i).toString());"},{"lineNumber":49,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":51,"author":{"gitId":"markuz5116"},"content":"        String encodedTaskList \u003d \"\";"},{"lineNumber":52,"author":{"gitId":"markuz5116"},"content":"        for (String encode : encodedFile) {"},{"lineNumber":53,"author":{"gitId":"markuz5116"},"content":"            encodedTaskList \u003d encodedTaskList.concat(encode + \"\\n\");"},{"lineNumber":54,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":56,"author":{"gitId":"markuz5116"},"content":"        assertEquals(StorageEncoder.encodeTasks(taskList), encodedTaskList);"},{"lineNumber":57,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":59,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":60,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":60}},{"path":"src/test/java/DukeTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Deadline;"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Event;"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"markuz5116"},"content":"import duke.tasks.Todo;"},{"lineNumber":5,"author":{"gitId":"markuz5116"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":7,"author":{"gitId":"markuz5116"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":9,"author":{"gitId":"markuz5116"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"markuz5116"},"content":""},{"lineNumber":11,"author":{"gitId":"markuz5116"},"content":"public class DukeTaskTest {"},{"lineNumber":12,"author":{"gitId":"markuz5116"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"markuz5116"},"content":"    public void testTask() {"},{"lineNumber":14,"author":{"gitId":"markuz5116"},"content":"        Task[] tasks \u003d new Task[] {new Todo(\"a\"),"},{"lineNumber":15,"author":{"gitId":"markuz5116"},"content":"            new Deadline(\"b\", LocalDate.parse(\"2020-01-01\")),"},{"lineNumber":16,"author":{"gitId":"markuz5116"},"content":"            new Event(\"c\", LocalDate.parse(\"2020-01-01\"))};"},{"lineNumber":17,"author":{"gitId":"markuz5116"},"content":"        String[] strTasksNotDone \u003d new String[] {\"[T][ ] a\", \"[D][ ] b (by: Jan 01 2020)\","},{"lineNumber":18,"author":{"gitId":"markuz5116"},"content":"            \"[E][ ] c (at: Jan 01 2020)\"};"},{"lineNumber":19,"author":{"gitId":"markuz5116"},"content":"        String[] strTasksDone \u003d new String[] {\"[T][X] a\", \"[D][X] b (by: Jan 01 2020)\","},{"lineNumber":20,"author":{"gitId":"markuz5116"},"content":"            \"[E][X] c (at: Jan 01 2020)\"};"},{"lineNumber":21,"author":{"gitId":"markuz5116"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"            assertEquals(tasks[i].toString(), strTasksNotDone[i]);"},{"lineNumber":23,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"markuz5116"},"content":"        for (Task task : tasks) {"},{"lineNumber":25,"author":{"gitId":"markuz5116"},"content":"            task.done();"},{"lineNumber":26,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"markuz5116"},"content":"        for (int i \u003d 0; i \u003c 3; i++) {"},{"lineNumber":28,"author":{"gitId":"markuz5116"},"content":"            assertEquals(tasks[i].toString(), strTasksDone[i]);"},{"lineNumber":29,"author":{"gitId":"markuz5116"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"markuz5116"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"markuz5116"},"content":"}"}],"authorContributionMap":{"markuz5116":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"markuz5116"},"content":"todo 1"},{"lineNumber":2,"author":{"gitId":"markuz5116"},"content":"list"},{"lineNumber":3,"author":{"gitId":"markuz5116"},"content":"bye"}],"authorContributionMap":{"markuz5116":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"markuz5116"},"content":"# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"markuz5116":1,"-":37}}]
