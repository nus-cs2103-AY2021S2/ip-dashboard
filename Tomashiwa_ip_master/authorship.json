[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeLoadException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"/** A chat bot that can help the user manage their tasks */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    /** Name of the chat bot */"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    private static final String CHATBOT_NAME \u003d \"Mantaro\";"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    /** Determine whether the chat bot continue to run */"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    private boolean isActive;"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    /** Manages a task list in the chat bot */"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    private TaskManager taskManager;"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    /** Provide different way of printing messages for the chat bot */"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    /** Constructor of Duke */"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    public Duke() {"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"        isActive \u003d true;"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"        taskManager \u003d new TaskManager();"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"        Command.setup(ui, taskManager);"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"            Storage.loadTasksTo(taskManager);"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"        } catch (DukeLoadException e) {"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"            ui.printError(e.getMessage());"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    /** Lifecycle of Duke */"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"        ui.printWelcomeMsg(CHATBOT_NAME);"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"        String line \u003d \"\";"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        while (isActive) {"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"            line \u003d scanner.nextLine();"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"                Command command \u003d Parser.parse(line);"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"                command.execute();"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"                isActive \u003d !command.willExit();"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            } catch(DukeException e) {"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"                ui.printError(e.getMessage());"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"        ui.printGoodbyeMsg();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"     * Lifecycle of the program"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     * @param args Command line arguments"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"    public static void main(String[] args) {"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        Duke bot \u003d new Duke();"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"        bot.run();"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Tomashiwa":62,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.FindCommand;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.EventCommand;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"/** An utility class that translate user inputs into commands executable by the chat bot */"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into an executable command"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * @return An executable Command"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeException if the command string cannot be parsed"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    public static Command parse(String text) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"        if (text.matches(\"^todo($|.+$)\")) {"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"            return parseToDo(text);"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.matches(\"^deadline($|.+$)\")) {"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"            return parseDeadline(text);"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.matches(\"^event($|.+$)\")) {"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"            return parseEvent(text);"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.matches(\"^done($|.+$)\")) {"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"            return parseDone(text);"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.matches(\"^delete($|.+$)\")) {"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"            return parseDelete(text);"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.matches(\"^find($|.+$)\")) {"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"            return parseFind(text);"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.equals(\"list\")) {"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            return parseList(text);"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"        } else if (text.equals(\"bye\")) {"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"            return parseExit(text);"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeException(\"No such command, please try again with another command.\");"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a ToDo command"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"     * @return A ToDo command"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the command string contains an empty description"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"    public static ToDoCommand parseToDo(String text) throws DukeCommandException {"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"        String desc \u003d text.substring(4).stripLeading();"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"        if (desc.length() \u003d\u003d 0) {"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"todo\", desc, \"Description of ToDo cannot be empty\");"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"            return new ToDoCommand(desc);"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a Deadline command"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"     * @return A Deadline command"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the command string has insufficient parameters or invalid date time format"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"    public static DeadlineCommand parseDeadline(String text) throws DukeCommandException {"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"        String validDateTimePattern \u003d \"^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])-\" +"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"                \"([1-9][0-9][0-9][0-9]) ([1-9]|1[0-2])(AM|PM)\";"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"        String params \u003d text.substring(8).stripLeading();"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"The details of a Deadline cannot be empty.\");"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"        } else if (!params.contains(\"/by\") || params.split(\" /by \").length !\u003d 2) {"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"Description and date/time must be given for a \" +"},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"                    \"Deadline.\");"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"        } else if (!params.split(\" /by \")[1].matches(validDateTimePattern)) {"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"Date time format is incorrect, try to follow the \" +"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"                    \"format of dd-mm-yyyy hAM/PM.\");"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"            String[] splits \u003d params.split(\" /by \");"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(splits[1], formatter);"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"            return new DeadlineCommand(splits[0], dateTime);"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into an Event command"},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"     * @return An Event command"},{"lineNumber":113,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the command string has insufficient parameters or invalid date time format"},{"lineNumber":114,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"Tomashiwa"},"content":"    public static EventCommand parseEvent(String text) throws DukeCommandException {"},{"lineNumber":116,"author":{"gitId":"Tomashiwa"},"content":"        // Regex pattern matching date-month-year xAM/PM"},{"lineNumber":117,"author":{"gitId":"Tomashiwa"},"content":"        String pattern \u003d \"^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])-\" +"},{"lineNumber":118,"author":{"gitId":"Tomashiwa"},"content":"                \"([1-9][0-9][0-9][0-9]) ([1-9]|1[0-2])(AM|PM)\";"},{"lineNumber":119,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":120,"author":{"gitId":"Tomashiwa"},"content":"        String params \u003d text.substring(5).stripLeading();"},{"lineNumber":121,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":122,"author":{"gitId":"Tomashiwa"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"event\", params, \"The details of a Event cannot be empty.\");"},{"lineNumber":124,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":125,"author":{"gitId":"Tomashiwa"},"content":"        } else if (!params.contains(\"/start\") || !params.contains(\"/end\")"},{"lineNumber":126,"author":{"gitId":"Tomashiwa"},"content":"                || params.split(\" /start | /end \").length !\u003d 3) {"},{"lineNumber":127,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"event\", params, \"Description, start datetime, and end datetime \" +"},{"lineNumber":128,"author":{"gitId":"Tomashiwa"},"content":"                    \"must be given for an Event.\");"},{"lineNumber":129,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":130,"author":{"gitId":"Tomashiwa"},"content":"        } else if (!params.split(\" /start | /end \")[1].matches(pattern)"},{"lineNumber":131,"author":{"gitId":"Tomashiwa"},"content":"                || !params.split(\" /start | /end \")[2].matches(pattern)) {"},{"lineNumber":132,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"Start or end date has incorrect format, try to \" +"},{"lineNumber":133,"author":{"gitId":"Tomashiwa"},"content":"                    \"follow the format of dd-mm-yyyy hAM/PM.\");"},{"lineNumber":134,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":135,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":136,"author":{"gitId":"Tomashiwa"},"content":"            String[] splits \u003d params.split(\" /start | /end \");"},{"lineNumber":137,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":138,"author":{"gitId":"Tomashiwa"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":139,"author":{"gitId":"Tomashiwa"},"content":"            LocalDateTime start \u003d LocalDateTime.parse(splits[1], formatter);"},{"lineNumber":140,"author":{"gitId":"Tomashiwa"},"content":"            LocalDateTime end \u003d LocalDateTime.parse(splits[2], formatter);"},{"lineNumber":141,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":142,"author":{"gitId":"Tomashiwa"},"content":"            return new EventCommand(splits[0], start, end);"},{"lineNumber":143,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":146,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a Done command"},{"lineNumber":148,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":150,"author":{"gitId":"Tomashiwa"},"content":"     * @return A Done command"},{"lineNumber":151,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the index in the command string is invalid"},{"lineNumber":152,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"Tomashiwa"},"content":"    public static DoneCommand parseDone(String text) throws DukeCommandException {"},{"lineNumber":154,"author":{"gitId":"Tomashiwa"},"content":"        String params \u003d text.substring(4).stripLeading();"},{"lineNumber":155,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":156,"author":{"gitId":"Tomashiwa"},"content":"        if (!params.matches(\"-?(0|[1-9]\\\\d*)\")) {"},{"lineNumber":157,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", params, \"Please provide an actual number for the task you are done\" +"},{"lineNumber":158,"author":{"gitId":"Tomashiwa"},"content":"                    \" with.\");"},{"lineNumber":159,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":160,"author":{"gitId":"Tomashiwa"},"content":"            return new DoneCommand(Integer.parseInt(params) - 1);"},{"lineNumber":161,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":164,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a Delete command"},{"lineNumber":166,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":168,"author":{"gitId":"Tomashiwa"},"content":"     * @return A Delete command"},{"lineNumber":169,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the index in the command string is invalid"},{"lineNumber":170,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":171,"author":{"gitId":"Tomashiwa"},"content":"    public static DeleteCommand parseDelete(String text) throws DukeCommandException {"},{"lineNumber":172,"author":{"gitId":"Tomashiwa"},"content":"        String params \u003d text.substring(6).stripLeading();"},{"lineNumber":173,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":174,"author":{"gitId":"Tomashiwa"},"content":"        if (!params.matches(\"-?(0|[1-9]\\\\d*)\")) {"},{"lineNumber":175,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", params, \"Please provide an actual number for the task you are \" +"},{"lineNumber":176,"author":{"gitId":"Tomashiwa"},"content":"                    \"deleting.\");"},{"lineNumber":177,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":178,"author":{"gitId":"Tomashiwa"},"content":"            return new DeleteCommand(Integer.parseInt(params) - 1);"},{"lineNumber":179,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":182,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a Find command"},{"lineNumber":184,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command String"},{"lineNumber":186,"author":{"gitId":"Tomashiwa"},"content":"     * @return A Find command"},{"lineNumber":187,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if the parameters are empty or in invalid format"},{"lineNumber":188,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"Tomashiwa"},"content":"    public static FindCommand parseFind(String text) throws DukeCommandException {"},{"lineNumber":190,"author":{"gitId":"Tomashiwa"},"content":"        String validDatePattern \u003d \"^(0[1-9]|1[0-9]|2[0-9]|3[0-1])-(0[1-9]|1[0-2])-\" +"},{"lineNumber":191,"author":{"gitId":"Tomashiwa"},"content":"                \"([1-9][0-9][0-9][0-9])\";"},{"lineNumber":192,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":193,"author":{"gitId":"Tomashiwa"},"content":"        String params \u003d text.substring(4).stripLeading();"},{"lineNumber":194,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":195,"author":{"gitId":"Tomashiwa"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":196,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"find\", params, \"Find command cannot have empty parameter.\");"},{"lineNumber":197,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":198,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.startsWith(\"/on\") \u0026\u0026 params.substring(3).trim().length() \u003d\u003d 0) {"},{"lineNumber":199,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"find\", params, \"Cannot find by an empty date.\");"},{"lineNumber":200,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":201,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.startsWith(\"/on\") \u0026\u0026 !params.substring(3).trim().matches(validDatePattern)) {"},{"lineNumber":202,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"find\", params, \"Date has invalid format, try to \" +"},{"lineNumber":203,"author":{"gitId":"Tomashiwa"},"content":"                    \"follow the format of dd-mm-yyyy.\");"},{"lineNumber":204,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":205,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.contains(\" /on \") \u0026\u0026 params.split(\" /on \").length !\u003d 2) {"},{"lineNumber":206,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"find\", params, \"Either the query or the search date is missing.\");"},{"lineNumber":207,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":208,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.contains(\" /on \") \u0026\u0026 params.split(\" /on \").length \u003d\u003d 2"},{"lineNumber":209,"author":{"gitId":"Tomashiwa"},"content":"                \u0026\u0026 !params.split(\" /on \")[1].matches(validDatePattern)) {"},{"lineNumber":210,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"find\", params, \"Date has invalid format, try to \" +"},{"lineNumber":211,"author":{"gitId":"Tomashiwa"},"content":"                    \"follow the format of dd-mm-yyyy.\");"},{"lineNumber":212,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":213,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.startsWith(\"/on\")) {"},{"lineNumber":214,"author":{"gitId":"Tomashiwa"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":215,"author":{"gitId":"Tomashiwa"},"content":"            LocalDate targetDate \u003d LocalDate.parse(params.substring(4), formatter);"},{"lineNumber":216,"author":{"gitId":"Tomashiwa"},"content":"            return new FindCommand(\"\", targetDate);"},{"lineNumber":217,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":218,"author":{"gitId":"Tomashiwa"},"content":"        } else if (params.contains(\" /on \")) {"},{"lineNumber":219,"author":{"gitId":"Tomashiwa"},"content":"            String[] splits \u003d params.split(\" /on \");"},{"lineNumber":220,"author":{"gitId":"Tomashiwa"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":221,"author":{"gitId":"Tomashiwa"},"content":"            LocalDate targetDate \u003d LocalDate.parse(splits[1], formatter);"},{"lineNumber":222,"author":{"gitId":"Tomashiwa"},"content":"            return new FindCommand(splits[0], targetDate);"},{"lineNumber":223,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":224,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":225,"author":{"gitId":"Tomashiwa"},"content":"            return new FindCommand(params);"},{"lineNumber":226,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":227,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":229,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":230,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":231,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into a List command"},{"lineNumber":232,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":234,"author":{"gitId":"Tomashiwa"},"content":"     * @return A List command"},{"lineNumber":235,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"Tomashiwa"},"content":"    public static ListCommand parseList(String text) {"},{"lineNumber":237,"author":{"gitId":"Tomashiwa"},"content":"        return new ListCommand();"},{"lineNumber":238,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":240,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"Tomashiwa"},"content":"     * Parses a command string into an Exit command"},{"lineNumber":242,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":243,"author":{"gitId":"Tomashiwa"},"content":"     * @param text A command string"},{"lineNumber":244,"author":{"gitId":"Tomashiwa"},"content":"     * @return An Exit command"},{"lineNumber":245,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":246,"author":{"gitId":"Tomashiwa"},"content":"    public static ExitCommand parseExit(String text) {"},{"lineNumber":247,"author":{"gitId":"Tomashiwa"},"content":"        return new ExitCommand();"},{"lineNumber":248,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":249}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeTaskException;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeSaveException;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeLoadException;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"import java.io.File;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"import java.io.FileWriter;"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"import java.io.PrintWriter;"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"/** An utility class that provide read/write related operations */"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    /** Directory path of the save file */"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    private static final String PATH \u003d \"data/duke.txt\";"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * Saves all tasks in the current session into the hard disk"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasks A list of tasks"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeSaveException if there is an issue writing into the hard disk"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"    public static void saveTasks(List\u003cTask\u003e tasks) throws DukeSaveException {"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"        // Create the \u0027data\u0027 folder if missing"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        if (!dir.exists()) {"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"            dir.mkdir();"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"        File file \u003d new File(PATH);"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"            // Erase any existing list in the file"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"            new PrintWriter(PATH).close();"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"            // Save each task as a row in the file"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"            FileWriter writer \u003d new FileWriter(PATH);"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"            for (Task task : tasks) {"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"                writer.write(task.toSaveInfoString() + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            writer.close();"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeSaveException(\"Issue with IO while saving tasks\");"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"     * Loads tasks from the hard disk into current session\u0027s task list"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"     * @param taskManager TaskManager that contains the current session\u0027s task list"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeLoadException if there is an issue reading tasks from the hard disk"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"    public static void loadTasksTo(TaskManager taskManager) throws DukeLoadException {"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"        // Create the \u0027data\u0027 folder if missing"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"        if (!dir.exists()) {"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"            dir.mkdir();"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"        // Load the save file or create one if missing"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"        File file \u003d new File(PATH);"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"            // If the save file already exists, load its tasks"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"            if (!file.createNewFile()) {"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"                Scanner scanner \u003d new Scanner(file);"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"                while (scanner.hasNextLine()) {"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"                    String[] splits \u003d scanner.nextLine().split(\" \\\\| \");"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"                    boolean isDone \u003d splits[1].equals(\"1\");"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"                    switch (splits[0]) {"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"                    case \"T\":"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"                        ToDo toDo \u003d taskManager.addToDo(splits[2]);"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"                        if (isDone) {"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"                            toDo.markAsDone();"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"                        }"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"                        break;"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"                    case \"D\":"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"                        LocalDateTime dateTime \u003d LocalDateTime.parse(splits[3], formatter);"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"                        Deadline deadline \u003d taskManager.addDeadline(splits[2], dateTime);"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":"                        if (isDone) {"},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"                            deadline.markAsDone();"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":"                        }"},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"                        break;"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"                    case \"E\":"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"                        LocalDateTime start \u003d LocalDateTime.parse(splits[3], formatter);"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"                        LocalDateTime end \u003d LocalDateTime.parse(splits[4], formatter);"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"                        Event event \u003d taskManager.addEvent(splits[2], start, end);"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"                        if (isDone) {"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"                            event.markAsDone();"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"                        }"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"                        break;"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"                    default:"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"                        throw new DukeLoadException(\"Invalid task type found: \" + splits[0]);"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":"                    }"},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"                }"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":"        } catch (IOException e) {"},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeLoadException(\"Issue with IO while loading tasks\");"},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":"        } catch (DukeTaskException e) {"},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeLoadException(e.getMessage());"},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":112}},{"path":"src/main/java/duke/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeTaskException;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"/** An object that manage the storing, retrieving and removing of tasks from the chat bot */"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"public class TaskManager {"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    /** A list of tasks tracked by the chat bot */"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    private List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     * Adds a new ToDo into the task list"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the new ToDo"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * @return ToDo that was created"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeTaskException if description provided is empty"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    public ToDo addToDo(String desc) throws DukeTaskException {"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"        if (desc.length() \u003d\u003d 0) {"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"The description of a ToDo cannot be empty.\");"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"            ToDo toDo \u003d new ToDo(desc);"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(toDo);"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"            return toDo;"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"     * Adds a new Deadline into the task list"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the new Deadline"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"     * @param dateTime Date and time when the new Deadline is due"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     * @return Deadline that was created"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeTaskException if description provided is empty"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"    public Deadline addDeadline(String desc, LocalDateTime dateTime) throws DukeTaskException {"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        if (desc.length() \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"The description of a Deadline cannot be empty.\");"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"            Deadline deadline \u003d new Deadline(desc, dateTime);"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(deadline);"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"            return deadline;"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"     * Adds a new Event into the task list"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the new Event"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"     * @param start Date and time when the new Event starts"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     * @param end Date and time when the new Event ends"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     * @return Event that was created"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeTaskException if description provided is empty"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"    public Event addEvent(String desc, LocalDateTime start, LocalDateTime end) throws DukeTaskException {"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"        if (desc.length() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"The description of an Event cannot be empty.\");"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"            Event event \u003d new Event(desc, start, end);"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(event);"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"            return event;"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"     * Deletes a specific task from the task list"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of the task that you want to delete"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"     * @return Deleted task"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeTaskException if there is no task in the list or the index is out of range"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"    public Task deleteTask(int index) throws DukeTaskException {"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"        if (tasks.size() \u003d\u003d 0){"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"There are no task to be deleted.\");"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"        } else if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"Please enter a valid task index ranging from 1 to \" + tasks.size() +"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"                    \" (inclusive).\");"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"            return tasks.remove(index);"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":"     * Marks a specific task in the task list as completed"},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of the task that you want to complete"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeTaskException if there is no task in the list or the index is out of range"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"    public void completeTask(int index) throws DukeTaskException {"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"        if (tasks.size() \u003d\u003d 0){"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"There are no task to be completed.\");"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"        } else if (index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeTaskException(\"Please enter a valid task index ranging from 1 to \" + tasks.size() +"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"                    \" (inclusive).\");"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":"            Task task \u003d tasks.get(index);"},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"            task.markAsDone();"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a task in the list with a specific index"},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of a task you want to retrieve"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"     * @return Task with the specified index"},{"lineNumber":113,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"Tomashiwa"},"content":"    public Task getTask(int index) {"},{"lineNumber":115,"author":{"gitId":"Tomashiwa"},"content":"        return this.tasks.get(index);"},{"lineNumber":116,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":118,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a copy of the task list"},{"lineNumber":120,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"Tomashiwa"},"content":"     * @return A copy of the task list"},{"lineNumber":122,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Tomashiwa"},"content":"    public List\u003cTask\u003e getTasks() {"},{"lineNumber":124,"author":{"gitId":"Tomashiwa"},"content":"        return new ArrayList\u003c\u003e(this.tasks);"},{"lineNumber":125,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":127,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Tomashiwa"},"content":"     * Sets the content of the task list"},{"lineNumber":129,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":130,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasks A task list to import the content from"},{"lineNumber":131,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"Tomashiwa"},"content":"    public void setTasks(List\u003cTask\u003e tasks) {"},{"lineNumber":133,"author":{"gitId":"Tomashiwa"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":134,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":136,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the number of tasks in the task list"},{"lineNumber":138,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"Tomashiwa"},"content":"     * @return Number of tasks in the task list"},{"lineNumber":140,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"Tomashiwa"},"content":"    public int getTasksSize() {"},{"lineNumber":142,"author":{"gitId":"Tomashiwa"},"content":"        return this.tasks.size();"},{"lineNumber":143,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":144}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"/** An object that handles the printing of chat bot\u0027s messages*/"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    /** Borderlines to contain a display message*/"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    private static final String BORDER \u003d \"___________________________________________________________\";"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * Displays a message"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Message to be displayed"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public void printMsg(String msg) {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(msg);"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * Displays a default welcome message"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * @param botName Name of the chat bot to greet with"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    public void printWelcomeMsg(String botName) {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"        printMsg(String.format(\"Meow, I\u0027m %s\\nWhat can I do for you today?\", botName));"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    /** Displays a default exit message */"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    public void printGoodbyeMsg() {"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        printMsg(\"Meow. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     * Displays a message to indicate the addition of a new task"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     * @param task Task that was added"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasksSize Number of total tasks after adding that new task"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"    public void printAddMsg(Task task, int tasksSize) {"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Got it meow. I\u0027ve added this task:\");"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"  [%s][%s] %s\\n\", task.getTypeSymbol(), task.getStatusSymbol(), task.getDesc());"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", tasksSize);"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"     * Displays a message to indicate the completion of a task"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of the completed task in the list"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"     * @param task Task that was completed"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"    public void printDoneMsg(int index, Task task) {"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Good job meow, I\u0027ve marked this task as done:\");"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"%d.[%s][%s] %s\\n\", index + 1, task.getTypeSymbol(), task.getStatusSymbol(),"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"                task.getDesc());"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"     * Displays a message to indicate the deletion of a task"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"     * @param task Task that was deleted"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasksSize Number of total tasks left after deleting that task"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"    public void printDeleteMsg(Task task, int tasksSize) {"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Noted meow. I\u0027ve removed this task:\");"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"  [%s][%s] %s\\n\", task.getTypeSymbol(), task.getStatusSymbol(),"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"                task.getDesc());"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", tasksSize);"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"     * Display the tasks from the search result"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasks A list of tasks as search results"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"    public void printFoundMsg(List\u003cTask\u003e tasks) {"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Meow, here are the matching tasks in your list:\");"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"%d.[%s][%s] %s\\n\", i + 1, task.getTypeSymbol(), task.getStatusSymbol(), task.getDesc());"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"     * Displays all tasks currently in the list"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"     * @param tasks List of tasks"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"    public void printTaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER);"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Meow, here are the tasks in your list:\");"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"%d.[%s][%s] %s\\n\", i + 1, task.getTypeSymbol(), task.getStatusSymbol(), task.getDesc());"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(BORDER + \"\\n\");"},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"     * Displays an error message"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message"},{"lineNumber":114,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"Tomashiwa"},"content":"    public void printError(String msg) {"},{"lineNumber":116,"author":{"gitId":"Tomashiwa"},"content":"        printMsg(String.format(\"ERROR MEOW! %s\", msg));"},{"lineNumber":117,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":118}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"/** An executable comment issued by the user */"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    /** An Ui instance that all commands will act upon */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    protected static Ui ui;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    /** A TaskManager instance that all commands will act upon */"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    protected static TaskManager taskManager;"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * Setups the Ui and TaskManager instance"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     * @param ui Ui instance to be shared"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"     * @param taskManager TaskManager instance to be shared"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    public static void setup(Ui ui, TaskManager taskManager) {"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"        Command.ui \u003d ui;"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"        Command.taskManager \u003d taskManager;"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the command"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if any issue happened during the execution of the command"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    public abstract void execute() throws DukeCommandException;"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a boolean to indicate whether this command will terminate the chat bot"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"     * @return A boolean whether this command terminates the chat bot"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    public boolean willExit() {"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"        return false;"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":40}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to create a task with a due date */"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"public class DeadlineCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    /** Description of a Deadline to be created */"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    private String desc \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /** Date and time when a Deadline to be created is ending */"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor of a DeadlineCommand"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of a Deadline to be created"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"     * @param dateTime Date and time of when a Deadline to be created is ending"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    public DeadlineCommand(String desc, LocalDateTime dateTime) {"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"        this.desc \u003d desc;"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the Deadline command to create a Deadline task in the list"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is an issue adding the Deadline into the task list or saving the tasks into"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     * hard disk"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"            Deadline deadline \u003d taskManager.addDeadline(this.desc, this.dateTime);"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"            ui.printAddMsg(deadline, taskManager.getTasksSize());"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"            Storage.saveTasks(taskManager.getTasks());"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"        } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", desc, e.getMessage());"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":44}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to delete a specified task */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /** Index of the task that is going to be deleted */"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    private int index;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor of a DeleteCommand"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of a task that this command is going to delete"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"        this.index \u003d index;"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the delete command to delete a task from the list"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is no tasks to delete, index is out of range, an issue with deleting task"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * from the task list or an issue with saving the deletion to the hard disk"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"        if (taskManager.getTasksSize() \u003d\u003d 0){"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", String.valueOf(index), \"There are no task to be deleted.\");"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"        } else if (index \u003c 0 || index \u003e\u003d taskManager.getTasksSize()) {"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", String.valueOf(index), \"Please enter a valid task index \" +"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"                    \"ranging from 1 to \" + taskManager.getTasksSize() + \" (inclusive).\");"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"                Task task \u003d taskManager.deleteTask(index);"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"                ui.printDeleteMsg(task, taskManager.getTasksSize());"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"                Storage.saveTasks(taskManager.getTasks());"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"            } catch(DukeException e) {"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"                throw new DukeCommandException(\"delete\", String.valueOf(index), e.getMessage());"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":45}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to set a task as completed */"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    /** Index of the task that is going to be completed */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    private int index;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor of a DoneCommand"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * @param index Index of a task that will be completed"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public DoneCommand(int index) {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        this.index \u003d index;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the Done command to complete the task that existed in the list"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is no tasks to be completed, invalid task index, an issue with saving the"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * task\u0027s completion or an issue with updating the task\u0027s completion status"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"        if (taskManager.getTasksSize() \u003d\u003d 0) {"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", String.valueOf(this.index), \"There are no task to be completed.\");"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"        } else if (index \u003c 0 || index \u003e\u003d taskManager.getTasksSize()) {"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", String.valueOf(this.index), \"Please enter a valid task index \" +"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"                    \"ranging from 1 to \" + taskManager.getTasksSize() + \" (inclusive).\");"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        } else if (taskManager.getTask(this.index).getStatusSymbol().equals(\"X\")) {"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", String.valueOf(this.index), \"This task is already completed.\");"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"                taskManager.completeTask(this.index);"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"                ui.printDoneMsg(this.index, taskManager.getTask(this.index));"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"                Storage.saveTasks(taskManager.getTasks());"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"            } catch(DukeException e) {"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"                throw new DukeCommandException(\"done\", String.valueOf(index), e.getMessage());"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":46}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to create a task with start date and end date */"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"public class EventCommand extends Command{"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    /** Description of an Event that is going to be created */"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    private String desc \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /** Starting date and time of an Event that is going to be created  */"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime start;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    /** Ending date and time of an Event that is going to be created */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime end;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor of an EventCommand"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of an Event that is going to be created"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * @param start Starting date and time of an Event that is going to be created"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * @param end Ending date and time of an Event that is going to be created"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    public EventCommand(String desc, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"        this.desc \u003d desc;"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"        this.start \u003d start;"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"        this.end \u003d end;"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the Event command to create an Event task in the list"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is an issue with adding the Event into the list or saving the Event into"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"     * the hard disk"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"            Event event \u003d taskManager.addEvent(this.desc, this.start, this.end);"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"            ui.printAddMsg(event, taskManager.getTasksSize());"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"            Storage.saveTasks(taskManager.getTasks());"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"event\", desc, e.getMessage());"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":48}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to close the chat bot */"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the exit command to tell the Duke to exit"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     * Returns true to indicate that the chat bot will be exiting"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     * @return True boolean to indicate that the bot is exiting"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    public boolean willExit() {"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"        return true;"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":25}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to find a task by keyword and/or date of occurrence */"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /** Keyword to search tasks with */"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    private String keyword \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    /** Date to search tasks with */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDate targetDate \u003d null;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a FindCommand"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * @param keyword A String to check against task\u0027s description"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a FindCommand"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @param keyword A String to check against task\u0027s description"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     * @param date A date to filter the tasks with"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    public FindCommand(String keyword, LocalDate date) {"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        this.targetDate \u003d date;"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the Find command to search tasks that matches the keyword and occurs on the target date"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if tasks cannot be retrieved"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasksFound \u003d taskManager.getTasks().stream()"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"                .filter(task -\u003e {"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"                    if (task.getDesc().contains(keyword)) {"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"                        if (targetDate !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"                            switch (task.getTypeSymbol()) {"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"                            case \"D\":"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"                                LocalDate due \u003d ((Deadline) task).getDateTime().toLocalDate();"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"                                return targetDate.equals(due);"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"                            case \"E\":"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"                                LocalDate start \u003d ((Event) task).getStartDateTime().toLocalDate();"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"                                LocalDate end \u003d ((Event) task).getEndDateTime().toLocalDate();"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"                                return targetDate.isEqual(start) || targetDate.isEqual(end)"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"                                        || (targetDate.isAfter(start) \u0026\u0026 targetDate.isBefore(end));"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"                            default:"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"                                return false;"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"                            }"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"                        } else {"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"                            return true;"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"                        }"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"                    } else {"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"                        return false;"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"                    }"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"                })"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"                .collect(Collectors.toList());"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"        ui.printFoundMsg(tasksFound);"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":73}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to list down all tracked tasks */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the List command to list out all tasks in the list"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is an issue retrieving tasks from the list or printing it through the Ui"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasks \u003d taskManager.getTasks();"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        ui.printTaskList(tasks);"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":20}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeCommandException;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"/** An executable command to create a basic task with description */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /** Description of a ToDo that is going to be created */"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    private String desc \u003d \"\";"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor of a ToDoCommand"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of a ToDo that is going to be created"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"    public ToDoCommand(String desc) {"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"        this.desc \u003d desc;"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * Executes the ToDo command to create a ToDo in the list"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException if there is an issue with adding the ToDo into the list or saving the ToDo into the"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * hard disk"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    public void execute() throws DukeCommandException {"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"            ToDo toDo \u003d taskManager.addToDo(this.desc);"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"            ui.printAddMsg(toDo, taskManager.getTasksSize());"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"            Storage.saveTasks(taskManager.getTasks());"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        } catch(DukeException e) {"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"todo\", desc, e.getMessage());"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":38}},{"path":"src/main/java/duke/exception/DukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** An exception that happened due to chat bot trying to execute a command */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class DukeCommandException extends DukeException{"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /** Type of command that throws the exception */"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    private String commandType;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    /** Parameters that the command was using */"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"    private String params;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeCommandException"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * @param commandType Type of the command"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * @param params Parameters processed by the command"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalled"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public DukeCommandException(String commandType, String params, String msg) {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the type of the command"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * @return Type of the command"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    public String getCommandType() {"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"        return this.commandType;"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a string containing the parameters of the command"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     * @return Parameters of the command"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    public String getParams() {"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        return this.params;"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":38}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** An exception that happened due to chat bot\u0027s execution */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeException"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalled"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public DukeException(String msg) {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":13}},{"path":"src/main/java/duke/exception/DukeLoadException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** An exception that happened due to chat bot trying to load data from hard disk */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class DukeLoadException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeLoadException"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalled"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public DukeLoadException(String msg) {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":13}},{"path":"src/main/java/duke/exception/DukeSaveException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** An exception that happened due to chat bot trying to save data to hard disk */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class DukeSaveException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeSaveException"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalled"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public DukeSaveException(String msg) {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":13}},{"path":"src/main/java/duke/exception/DukeTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** An exception that happened due to chat bot trying to do something task related (eg. creating or removing a task) */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class DukeTaskException extends DukeException{"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeTaskException"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalledv"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public DukeTaskException(String msg) {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":13}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"/** A task with a due date */"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"    /** Date and time when the Deadline task needs to be completed */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime dateTime;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a Deadline task"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * @param dateTime Date and time when the task needs to be completed"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public Deadline(String desc, LocalDateTime dateTime) {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, false);"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * Alternate constructor for a Deadline task whereby you can indicate it\u0027s completion status"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     * @param dateTime Date and time when the task needs to be completed"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     * @param isDone Completion status of the task"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    public Deadline(String desc, LocalDateTime dateTime, boolean isDone) {"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, isDone);"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the description of the Deadline"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"     * @return Description of the Deadline"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc + \" (By: \" + this.dateTime.format(formatter) + \")\";"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a letter symbol for the Deadline"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"     * @return Letter symbol for the Deadline"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"        return \"D\";"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the Deadline\u0027s details in a format to be saved into the hard disk"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     * @return Deadline\u0027s details in a savable format"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"    public String toSaveInfoString() {"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"        return this.getTypeSymbol() + \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.desc + \" | \" +"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"                this.dateTime.format(formatter);"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the date and time at which the Deadline is due"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"     * @return Due date and time for the Deadline"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"    public LocalDateTime getDateTime() {"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"        return this.dateTime;"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":75}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"/** A task that needs to be done within a date range */"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"    /** Date and time when the Event task starts */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime start;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /** Date and time when the Event task ends */"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    private LocalDateTime end;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for an Event task"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     * @param start Date and time when the task starts"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"     * @param end Date and time when the task ends"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    public Event(String desc, LocalDateTime start, LocalDateTime end) {"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, false);"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"        this.start \u003d start;"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"        this.end \u003d end;"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     * Alternate constructor for an Event task whereby you can indicate the completion status of the task"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     * @param start Date and time when the task starts"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @param end Date and time when the task ends"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     * @param isDone Completion status of the task"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    public Event(String desc, LocalDateTime start, LocalDateTime end, boolean isDone) {"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, isDone);"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"        this.start \u003d start;"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"        this.end \u003d end;"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the description of the Event"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"     * @return Description of the Event"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc + \" (Start: \" + this.start.format(formatter) + \" | End: \" + this.end.format(formatter) + \")\";"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a letter symbol for the Event"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"     * @return Letter symbol for the Event"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"        return \"E\";"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the Event\u0027s details in a format to be saved into the hard disk"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"     * @return Event\u0027s detail in a savable format"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"    public String toSaveInfoString() {"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"        return this.getTypeSymbol() + \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.desc + \" | \" +"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"                this.start.format(formatter) + \" | \" + this.end.format(formatter);"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the date and time when the Event starts"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"     * @return Starting date and time of the Event"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"    public LocalDateTime getStartDateTime() {"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"        return this.start;"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the date and time when the Event ends"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"     * @return Ending date and time of the Event"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"    public LocalDateTime getEndDateTime() {"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"        return this.end;"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":90}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** A piece of work that user want to track */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /** Description of a task */"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    protected String desc;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    /** Indicate completion of a task */"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a Task"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of a task"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * @param isDone Completion of a task"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"    public Task(String desc, boolean isDone) {"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"        this.desc \u003d desc;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Sets the task as completed"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    public void markAsDone() {"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"        this.isDone \u003d true;"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"     * Provides the description of the task"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @return Description of the task"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc;"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     * Provides the symbol for the task type"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     * @return Symbol for the task type"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"        return \" \";"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"     * Provides the completion status of the task"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"     * @return Completion status of the task"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"    public String getStatusSymbol() {"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":"        return this.isDone ? \"X\" : \" \";"},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the task\u0027s details in a format to be saved into the hard disk"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     * @return Task\u0027s detail in a savable format"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"    public String toSaveInfoString() {"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"        return this.getTypeSymbol() + \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.desc;"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":63}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"/** A simple task without any additional info */"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a ToDo task"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public ToDo(String desc) {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, false);"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * Alternate constructor for a ToDo task whereby you can indicate it\u0027s completion"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the task"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"     * @param isDone Completion state of the task"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"    public ToDo(String desc, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"        super(desc, isDone);"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * Returns a letter symbol for the ToDo"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"     * @return Letter symbol for the ToDo"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"        return \"T\";"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"     * Returns the ToDo\u0027s details in a format to be saved into the hard disk"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"     * @return ToDo\u0027s detail in a savable format"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"    public String toSaveInfoString() {"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"        return this.getTypeSymbol() + \" | \" + (this.isDone ? \"1\" : \"0\") + \" | \" + this.desc;"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":43}},{"path":"src/test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"T | 0 | DESCRIPTION 1"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"D | 1 | DESCRIPTION 2 | 24-01-2021 5PM"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"E | 0 | DESCRIPTION 3 | 24-01-2021 5PM | 24-01-2021 5PM"}],"authorContributionMap":{"Tomashiwa":3}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeLoadException;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import duke.exception.DukeSaveException;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"import java.util.Scanner;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"import static org.junit.jupiter.api.Assumptions.assumeFalse;"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"/** Tests to be run on the read/write functionality of the chat bot */"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"public class StorageTest {"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    /** Directory path of the save file */"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    private static final String PATH \u003d \"data/duke.txt\";"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests for saving tasks without any previously existing save file */"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    public void saveTasks_NoExisting() {"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        File file \u003d new File(PATH);"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"        if (file.exists()) {"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"            file.delete();"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new ToDo(\"DESCRIPTION 1\"));"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Deadline(\"DESCRIPTION 2\", dateTime, true));"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Event(\"DESCRIPTION 3\", dateTime, dateTime));"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            Storage.saveTasks(tasks);"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"        } catch(DukeSaveException e) {"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"            assumeFalse(true, \"Failed to save tasks\");"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"            Scanner scanner \u003d new Scanner(file);"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"            String content \u003d \"\";"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"                content +\u003d scanner.nextLine() + \"\\n\";"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"            String expected \u003d \"T | 0 | DESCRIPTION 1\\nD | 1 | DESCRIPTION 2 | \" + dateTime.format(formatter) +"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"                    \"\\nE | 0 | DESCRIPTION 3 | \" + dateTime.format(formatter) + \" | \" + dateTime.format(formatter) +"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"                    \"\\n\";"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"            assertEquals(expected, content);"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"        } catch(FileNotFoundException e) {"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"            assumeFalse(true, \"Save file cannot be found after saving\");"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests for loading tasks from a save file when there is no previously existing save file */"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":"    public void loadTasksTo_NoExisting() {"},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"        // Create the \u0027data\u0027 folder if missing"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"        File dir \u003d new File(\"data\");"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"        if (!dir.exists()) {"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"            dir.mkdir();"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"        File file \u003d new File(PATH);"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy ha\");"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"            FileWriter writer \u003d new FileWriter(file);"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"            writer.write(\"T | 0 | DESCRIPTION 1\\nD | 1 | DESCRIPTION 2 | \" + dateTime.format(formatter) + \"\\n\" +"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"                    \"E | 0 | DESCRIPTION 3 | \" + dateTime.format(formatter) + \" | \" + dateTime.format(formatter));"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"            writer.close();"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":"            TaskManager taskManager \u003d new TaskManager();"},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"            Storage.loadTasksTo(taskManager);"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"            assertEquals(\"T | 0 | DESCRIPTION 1\", taskManager.getTask(0).toSaveInfoString());"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"            assertEquals(\"D | 1 | DESCRIPTION 2 | \" + dateTime.format(formatter),"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"                    taskManager.getTask(1).toSaveInfoString());"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"            assertEquals(\"E | 0 | DESCRIPTION 3 | \" + dateTime.format(formatter) + \" | \" +"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"                    dateTime.format(formatter), taskManager.getTask(2).toSaveInfoString());"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"        } catch(DukeLoadException e) {"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"            assertFalse(true, \"Failed to load task from save\");"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"        } catch(IOException e) {"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"            assertFalse(true, \"Failed to create a mock save file\");"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":103}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"/** Tests to be run on the message output process of the chat bot */"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"public class UiTest {"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    /** A reference to the default output stream */"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"    private final PrintStream standardOut \u003d System.out;"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    /** A mock output stream to capture outputs from the Ui */"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"    private final ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"    /** Borderlines to contain a display message*/"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"    private final String BORDER \u003d \"___________________________________________________________\";"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"    /** Replace the system\u0027s output stream with a custom stream to capture the output */"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"    @BeforeEach"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"        System.setOut(new PrintStream(outputStream));"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    public void printMsg_test() {"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"        String msg \u003d \"Testing Message 1234567890!\";"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"        String expected \u003d BORDER + \"\\r\\n\" + msg + \"\\r\\n\" + BORDER;"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        ui.printMsg(msg);"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expected, outputStream.toString().trim());"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of task list when the list is empty */"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"    public void printTaskList_emptyList() {"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":"        String expected \u003d BORDER + \"\\r\\n\" + \"Meow, here are the tasks in your list:\\r\\n\" + BORDER;"},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"        ui.printTaskList(tasks);"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expected, outputStream.toString().trim());"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of task list when the list has 3 items */"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"    public void printTaskList_3Items() {"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"        String expected \u003d BORDER + \"\\r\\nMeow, here are the tasks in your list:\\r\\n\" +"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"                \"1.[T][ ] DESCRIPTION 1\\n\" + \"2.[D][ ] DESCRIPTION 2 (By: \" + dateTime.format(formatter) + \")\\n\" +"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"                \"3.[E][ ] DESCRIPTION 3 (Start: \" + dateTime.format(formatter) + \" | End: \" + dateTime.format(formatter)"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"                + \")\\n\" + BORDER;"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new ToDo(\"DESCRIPTION 1\"));"},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Deadline(\"DESCRIPTION 2\", dateTime));"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Event(\"DESCRIPTION 3\", dateTime, dateTime));"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"        ui.printTaskList(tasks);"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expected, outputStream.toString().trim());"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of add message when the list has 3 items and each is an unique type */"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"    public void printAddMsg_taskTypesAll_tasksSize3() {"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"        String expectedToDo \u003d BORDER + \"\\r\\nGot it meow. I\u0027ve added this task:\\r\\n  [T][ ] DESCRIPTION 1\\nNow you \" +"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"                \"have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"        String expectedDeadline \u003d BORDER + \"\\r\\nGot it meow. I\u0027ve added this task:\\r\\n  [D][ ] DESCRIPTION 2 (By: \" +"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":"                dateTime.format(formatter) + \")\\nNow you have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"        String expectedEvent \u003d BORDER + \"\\r\\nGot it meow. I\u0027ve added this task:\\r\\n  [E][ ] DESCRIPTION 3 (Start: \" +"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":"                dateTime.format(formatter) + \" | End: \" + dateTime.format(formatter) + \")\\n\" +"},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"                \"Now you have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"        ToDo toDo \u003d new ToDo(\"DESCRIPTION 1\");"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"        Deadline deadline \u003d new Deadline(\"DESCRIPTION 2\", dateTime);"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"        Event event \u003d new Event(\"DESCRIPTION 3\", dateTime, dateTime);"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"        ui.printAddMsg(toDo, 99);"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedToDo, outputStream.toString().trim());"},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"        ui.printAddMsg(deadline, 99);"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedDeadline, outputStream.toString().trim());"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"        ui.printAddMsg(event, 99);"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedEvent, outputStream.toString().trim());"},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of done message when the list has 3 items and each is an unique type */"},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"    public void printDoneMsg_taskTypesAll_tasksSize3() {"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":113,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":114,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":115,"author":{"gitId":"Tomashiwa"},"content":"        String expectedToDo \u003d BORDER + \"\\r\\nGood job meow, I\u0027ve marked this task as done:\\r\\n100.[T][ ] DESCRIPTION\" +"},{"lineNumber":116,"author":{"gitId":"Tomashiwa"},"content":"                \" 1\\n\" + BORDER;"},{"lineNumber":117,"author":{"gitId":"Tomashiwa"},"content":"        String expectedDeadline \u003d BORDER + \"\\r\\nGood job meow, I\u0027ve marked this task as done:\\r\\n100.[D][ ] \" +"},{"lineNumber":118,"author":{"gitId":"Tomashiwa"},"content":"                \"DESCRIPTION 2 (By: \" + dateTime.format(formatter) + \")\\n\" + BORDER;"},{"lineNumber":119,"author":{"gitId":"Tomashiwa"},"content":"        String expectedEvent \u003d BORDER + \"\\r\\nGood job meow, I\u0027ve marked this task as done:\\r\\n100.[E][ ] \" +"},{"lineNumber":120,"author":{"gitId":"Tomashiwa"},"content":"                \"DESCRIPTION 3 (Start: \" + dateTime.format(formatter) + \" | End: \" + dateTime.format(formatter) +"},{"lineNumber":121,"author":{"gitId":"Tomashiwa"},"content":"                \")\\n\" + BORDER;"},{"lineNumber":122,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":123,"author":{"gitId":"Tomashiwa"},"content":"        ToDo toDo \u003d new ToDo(\"DESCRIPTION 1\");"},{"lineNumber":124,"author":{"gitId":"Tomashiwa"},"content":"        Deadline deadline \u003d new Deadline(\"DESCRIPTION 2\", dateTime);"},{"lineNumber":125,"author":{"gitId":"Tomashiwa"},"content":"        Event event \u003d new Event(\"DESCRIPTION 3\", dateTime, dateTime);"},{"lineNumber":126,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":127,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":128,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDoneMsg(99, toDo);"},{"lineNumber":129,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedToDo, outputStream.toString().trim());"},{"lineNumber":130,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":131,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":132,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDoneMsg(99, deadline);"},{"lineNumber":133,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedDeadline, outputStream.toString().trim());"},{"lineNumber":134,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":135,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":136,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDoneMsg(99, event);"},{"lineNumber":137,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedEvent, outputStream.toString().trim());"},{"lineNumber":138,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":140,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of delete message when the list has 3 items and each is an unique type */"},{"lineNumber":141,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":142,"author":{"gitId":"Tomashiwa"},"content":"    public void printDeleteMsg_taskTypesAll_tasksSize3() {"},{"lineNumber":143,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":144,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":145,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":146,"author":{"gitId":"Tomashiwa"},"content":"        String expectedToDo \u003d BORDER + \"\\r\\nNoted meow. I\u0027ve removed this task:\\r\\n  [T][ ] DESCRIPTION\" +"},{"lineNumber":147,"author":{"gitId":"Tomashiwa"},"content":"                \" 1\\nNow you have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":148,"author":{"gitId":"Tomashiwa"},"content":"        String expectedDeadline \u003d BORDER + \"\\r\\nNoted meow. I\u0027ve removed this task:\\r\\n  [D][ ] \" +"},{"lineNumber":149,"author":{"gitId":"Tomashiwa"},"content":"                \"DESCRIPTION 2 (By: \" + dateTime.format(formatter) + \")\\nNow you have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":150,"author":{"gitId":"Tomashiwa"},"content":"        String expectedEvent \u003d BORDER + \"\\r\\nNoted meow. I\u0027ve removed this task:\\r\\n  [E][ ] \" +"},{"lineNumber":151,"author":{"gitId":"Tomashiwa"},"content":"                \"DESCRIPTION 3 (Start: \" + dateTime.format(formatter) + \" | End: \" + dateTime.format(formatter) +"},{"lineNumber":152,"author":{"gitId":"Tomashiwa"},"content":"                \")\\nNow you have 99 tasks in the list.\\n\" + BORDER;"},{"lineNumber":153,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":154,"author":{"gitId":"Tomashiwa"},"content":"        ToDo toDo \u003d new ToDo(\"DESCRIPTION 1\");"},{"lineNumber":155,"author":{"gitId":"Tomashiwa"},"content":"        Deadline deadline \u003d new Deadline(\"DESCRIPTION 2\", dateTime);"},{"lineNumber":156,"author":{"gitId":"Tomashiwa"},"content":"        Event event \u003d new Event(\"DESCRIPTION 3\", dateTime, dateTime);"},{"lineNumber":157,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":158,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":159,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDeleteMsg(toDo, 99);"},{"lineNumber":160,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedToDo, outputStream.toString().trim());"},{"lineNumber":161,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":162,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":163,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDeleteMsg(deadline, 99);"},{"lineNumber":164,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedDeadline, outputStream.toString().trim());"},{"lineNumber":165,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":166,"author":{"gitId":"Tomashiwa"},"content":"        outputStream.reset();"},{"lineNumber":167,"author":{"gitId":"Tomashiwa"},"content":"        ui.printDeleteMsg(event, 99);"},{"lineNumber":168,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expectedEvent, outputStream.toString().trim());"},{"lineNumber":169,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":171,"author":{"gitId":"Tomashiwa"},"content":"    /** Tests printing of search results when there are 3 tasks of different types */"},{"lineNumber":172,"author":{"gitId":"Tomashiwa"},"content":"    @Test"},{"lineNumber":173,"author":{"gitId":"Tomashiwa"},"content":"    public void printFoundMsg_taskTypesAll_tasksSize3() {"},{"lineNumber":174,"author":{"gitId":"Tomashiwa"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MMM, EEE ha\");"},{"lineNumber":175,"author":{"gitId":"Tomashiwa"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":176,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":177,"author":{"gitId":"Tomashiwa"},"content":"        String expected \u003d BORDER + \"\\r\\nMeow, here are the matching tasks in your list:\\r\\n\" +"},{"lineNumber":178,"author":{"gitId":"Tomashiwa"},"content":"                \"1.[T][ ] DESCRIPTION 1\\n\" + \"2.[D][ ] DESCRIPTION 2 (By: \" + dateTime.format(formatter) + \")\\n\" +"},{"lineNumber":179,"author":{"gitId":"Tomashiwa"},"content":"                \"3.[E][ ] DESCRIPTION 3 (Start: \" + dateTime.format(formatter) + \" | End: \" + dateTime.format(formatter)"},{"lineNumber":180,"author":{"gitId":"Tomashiwa"},"content":"                + \")\\n\" + BORDER;"},{"lineNumber":181,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":182,"author":{"gitId":"Tomashiwa"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":183,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new ToDo(\"DESCRIPTION 1\"));"},{"lineNumber":184,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Deadline(\"DESCRIPTION 2\", dateTime));"},{"lineNumber":185,"author":{"gitId":"Tomashiwa"},"content":"        tasks.add(new Event(\"DESCRIPTION 3\", dateTime, dateTime));"},{"lineNumber":186,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":187,"author":{"gitId":"Tomashiwa"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":188,"author":{"gitId":"Tomashiwa"},"content":"        ui.printFoundMsg(tasks);"},{"lineNumber":189,"author":{"gitId":"Tomashiwa"},"content":"        assertEquals(expected, outputStream.toString().trim());"},{"lineNumber":190,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":192,"author":{"gitId":"Tomashiwa"},"content":"    /** Reset the system\u0027s output stream with system.out */"},{"lineNumber":193,"author":{"gitId":"Tomashiwa"},"content":"    @AfterEach"},{"lineNumber":194,"author":{"gitId":"Tomashiwa"},"content":"    public void tearDown() {"},{"lineNumber":195,"author":{"gitId":"Tomashiwa"},"content":"        System.setOut(standardOut);"},{"lineNumber":196,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":197}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"test"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"todo sleep"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"deadline eat /by 24-01-2021 12PM"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"event play /start 24-01-2021 10AM /end 24-01-2021 7PM"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"find sleep"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"find /on 24-01-2021"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"done 1"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"done 2"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"delete 2"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"find sleep"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"delete 1"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"bye"}],"authorContributionMap":{"Tomashiwa":18}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"java -classpath ..\\bin\\duke Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"pause"}],"authorContributionMap":{"Tomashiwa":4,"-":19}}]
