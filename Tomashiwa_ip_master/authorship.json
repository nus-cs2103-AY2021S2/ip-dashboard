[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    public String dateTime;"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"    public Deadline(String desc, String dateTime) {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"        super(desc);"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc + \" (by: \" + this.dateTime + \")\";"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"        return \"D\";"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":18}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    private static final String CHATBOT_NAME \u003d \"Mantaro\";"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    private static boolean isActive \u003d true;"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    private static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     * Print an adding message corresponding to the added Task\u0027s type"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * @param task Task that was added"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    private static void printTaskAdding(Task task) {"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\");"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Got it meow. I\u0027ve added this task:\");"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"  [%s][%s] %s\\n\", task.getTypeSymbol(), task.getStatusSymbol(), task.getDesc());"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"Now you have %d tasks in the list.\\n\", tasks.size());"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     * Add a ToDo into the internal list"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of the ToDo"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"    private static void addToDo(String desc) throws DukeCommandException {"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":"        if(desc.length() \u003d\u003d 0) {"},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"todo\", desc, \"The details of a ToDo cannot be empty.\");"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"            ToDo newToDo \u003d new ToDo(desc);"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(newToDo);"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"            printTaskAdding(newToDo);"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     * Add a Deadline into the internal list"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"     * @param params Parameters of Deadline (Description, Date/Time) in String form that will be processed"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"    private static void addDeadline(String params) throws DukeCommandException {"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        if(params.length() \u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"The details of a Deadline cannot be empty.\");"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"        } else if(!params.contains(\"/by\") || params.split(\" /by \").length !\u003d 2) {"},{"lineNumber":45,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"deadline\", params, \"Proper description and date/time must be given for a \" +"},{"lineNumber":46,"author":{"gitId":"Tomashiwa"},"content":"                    \"Deadline.\");"},{"lineNumber":47,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"Tomashiwa"},"content":"            String[] splits \u003d params.split(\" /by \");"},{"lineNumber":49,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":50,"author":{"gitId":"Tomashiwa"},"content":"            Deadline newDeadline \u003d new Deadline(splits[0], splits[1]);"},{"lineNumber":51,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(newDeadline);"},{"lineNumber":52,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":53,"author":{"gitId":"Tomashiwa"},"content":"            printTaskAdding(newDeadline);"},{"lineNumber":54,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":57,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Tomashiwa"},"content":"     * Add an Event into the internal list"},{"lineNumber":59,"author":{"gitId":"Tomashiwa"},"content":"     * @param params Parameters of Event (Description, Date/Time range) in String form that will be processed"},{"lineNumber":60,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Tomashiwa"},"content":"    private static void addEvent(String params) throws DukeCommandException {"},{"lineNumber":62,"author":{"gitId":"Tomashiwa"},"content":"        if(params.length() \u003d\u003d 0) {"},{"lineNumber":63,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"event\", params, \"The details of a Event cannot be empty.\");"},{"lineNumber":64,"author":{"gitId":"Tomashiwa"},"content":"        } else if(!params.contains(\"/at\") || params.split(\" /at \").length !\u003d 2) {"},{"lineNumber":65,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"event\", params, \"Proper description and date/time range must be given for\" +"},{"lineNumber":66,"author":{"gitId":"Tomashiwa"},"content":"                    \" a Event.\");"},{"lineNumber":67,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"Tomashiwa"},"content":"            String[] splits \u003d params.split(\" /at \");"},{"lineNumber":69,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":70,"author":{"gitId":"Tomashiwa"},"content":"            Event newEvent \u003d new Event(splits[0], splits[1]);"},{"lineNumber":71,"author":{"gitId":"Tomashiwa"},"content":"            tasks.add(newEvent);"},{"lineNumber":72,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":73,"author":{"gitId":"Tomashiwa"},"content":"            printTaskAdding(newEvent);"},{"lineNumber":74,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":77,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Tomashiwa"},"content":"     * Mark a task as completed"},{"lineNumber":79,"author":{"gitId":"Tomashiwa"},"content":"     * @param param Parameter in String form to complete a task (Index)"},{"lineNumber":80,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException"},{"lineNumber":81,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"Tomashiwa"},"content":"    private static void doneTask(String param) throws DukeCommandException {"},{"lineNumber":83,"author":{"gitId":"Tomashiwa"},"content":"        if(!param.matches(\"-?(0|[1-9]\\\\d*)\")) {"},{"lineNumber":84,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", param, \"Please provide an actual number for the task you are done \" +"},{"lineNumber":85,"author":{"gitId":"Tomashiwa"},"content":"                    \"with.\");"},{"lineNumber":86,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":88,"author":{"gitId":"Tomashiwa"},"content":"        int index \u003d Integer.valueOf(param) - 1;"},{"lineNumber":89,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":90,"author":{"gitId":"Tomashiwa"},"content":"        if(tasks.size() \u003d\u003d 0){"},{"lineNumber":91,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", param, \"There are no task to be completed.\");"},{"lineNumber":92,"author":{"gitId":"Tomashiwa"},"content":"        } else if(index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":93,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"done\", param, \"Please enter a valid task index ranging \" +"},{"lineNumber":94,"author":{"gitId":"Tomashiwa"},"content":"                    \"from 1 to \" + String.valueOf(tasks.size()) + \" (inclusive).\");"},{"lineNumber":95,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"Tomashiwa"},"content":"            Task task \u003d tasks.get(index);"},{"lineNumber":97,"author":{"gitId":"Tomashiwa"},"content":"            task.markAsDone();"},{"lineNumber":98,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":99,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"___________________________________________________________\");"},{"lineNumber":100,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"Good job meow, I\u0027ve marked this task as done:\");"},{"lineNumber":101,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"%d.[%s][%s] %s\\n\", index + 1, task.getTypeSymbol(), task.getStatusSymbol(),"},{"lineNumber":102,"author":{"gitId":"Tomashiwa"},"content":"                    task.getDesc());"},{"lineNumber":103,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":104,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":107,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"Tomashiwa"},"content":"     * Delete a task from the internal list"},{"lineNumber":109,"author":{"gitId":"Tomashiwa"},"content":"     * @param param Parameter in String form to identify a task for deletion (Index)"},{"lineNumber":110,"author":{"gitId":"Tomashiwa"},"content":"     * @throws DukeCommandException"},{"lineNumber":111,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"Tomashiwa"},"content":"    private static void deleteTask(String param) throws DukeCommandException {"},{"lineNumber":113,"author":{"gitId":"Tomashiwa"},"content":"        if(!param.matches(\"-?(0|[1-9]\\\\d*)\")) {"},{"lineNumber":114,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", param, \"Please provide an actual number for the task you are \" +"},{"lineNumber":115,"author":{"gitId":"Tomashiwa"},"content":"                    \"deleting.\");"},{"lineNumber":116,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":118,"author":{"gitId":"Tomashiwa"},"content":"        int index \u003d Integer.valueOf(param) - 1;"},{"lineNumber":119,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":120,"author":{"gitId":"Tomashiwa"},"content":"        if(tasks.size() \u003d\u003d 0){"},{"lineNumber":121,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", param, \"There are no task to be deleted.\");"},{"lineNumber":122,"author":{"gitId":"Tomashiwa"},"content":"        } else if(index \u003c 0 || index \u003e\u003d tasks.size()) {"},{"lineNumber":123,"author":{"gitId":"Tomashiwa"},"content":"            throw new DukeCommandException(\"delete\", param, \"Please enter a valid task index ranging \" +"},{"lineNumber":124,"author":{"gitId":"Tomashiwa"},"content":"                    \"from 1 to \" + String.valueOf(tasks.size()) + \" (inclusive).\");"},{"lineNumber":125,"author":{"gitId":"Tomashiwa"},"content":"        } else {"},{"lineNumber":126,"author":{"gitId":"Tomashiwa"},"content":"            Task deletedTask \u003d tasks.remove(index);"},{"lineNumber":127,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":128,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"___________________________________________________________\");"},{"lineNumber":129,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"Noted meow. I\u0027ve removed this task:\");"},{"lineNumber":130,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"  [%s][%s] %s\\n\", deletedTask.getTypeSymbol(), deletedTask.getStatusSymbol(),"},{"lineNumber":131,"author":{"gitId":"Tomashiwa"},"content":"                    deletedTask.getDesc());"},{"lineNumber":132,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"Now you have %d tasks in the list.\\n\", tasks.size());"},{"lineNumber":133,"author":{"gitId":"Tomashiwa"},"content":"            System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":134,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":137,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Tomashiwa"},"content":"     * List down all tasks in the internal list"},{"lineNumber":139,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"Tomashiwa"},"content":"    private static void listTasks() {"},{"lineNumber":141,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\");"},{"lineNumber":142,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Meow, here are the tasks in your list:\");"},{"lineNumber":143,"author":{"gitId":"Tomashiwa"},"content":"        for(int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":144,"author":{"gitId":"Tomashiwa"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":145,"author":{"gitId":"Tomashiwa"},"content":"            System.out.printf(\"%d.[%s][%s] %s\\n\", i + 1, task.getTypeSymbol(), task.getStatusSymbol(), task.getDesc());"},{"lineNumber":146,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":148,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":150,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"Tomashiwa"},"content":"     * Lifecycle of the chatbot"},{"lineNumber":152,"author":{"gitId":"Tomashiwa"},"content":"     * @param args"},{"lineNumber":153,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":155,"author":{"gitId":"Tomashiwa"},"content":"        // Opening message"},{"lineNumber":156,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\");"},{"lineNumber":157,"author":{"gitId":"Tomashiwa"},"content":"        System.out.printf(\"Meow, I\u0027m %s\\nWhat can I do for you today?\\n\", CHATBOT_NAME);"},{"lineNumber":158,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":159,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":160,"author":{"gitId":"Tomashiwa"},"content":"        // Scan user input as a command"},{"lineNumber":161,"author":{"gitId":"Tomashiwa"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":162,"author":{"gitId":"Tomashiwa"},"content":"        String command \u003d \"\";"},{"lineNumber":163,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":164,"author":{"gitId":"Tomashiwa"},"content":"        // Respond to user\u0027s commands and exit when user enters bye"},{"lineNumber":165,"author":{"gitId":"Tomashiwa"},"content":"        while(isActive) {"},{"lineNumber":166,"author":{"gitId":"Tomashiwa"},"content":"            command \u003d scanner.nextLine();"},{"lineNumber":167,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":168,"author":{"gitId":"Tomashiwa"},"content":"            try {"},{"lineNumber":169,"author":{"gitId":"Tomashiwa"},"content":"                if(command.matches(\"^todo($|.+$)\")) {"},{"lineNumber":170,"author":{"gitId":"Tomashiwa"},"content":"                    addToDo(command.substring(4).stripLeading());"},{"lineNumber":171,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.matches(\"^deadline($|.+$)\")) {"},{"lineNumber":172,"author":{"gitId":"Tomashiwa"},"content":"                    addDeadline(command.substring(8).stripLeading());"},{"lineNumber":173,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.matches(\"^event($|.+$)\")) {"},{"lineNumber":174,"author":{"gitId":"Tomashiwa"},"content":"                    addEvent(command.substring(5).stripLeading());"},{"lineNumber":175,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.matches(\"^done($|.+$)\")) {"},{"lineNumber":176,"author":{"gitId":"Tomashiwa"},"content":"                    doneTask(command.substring(4).stripLeading());"},{"lineNumber":177,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.matches(\"^delete($|.+$)\")) {"},{"lineNumber":178,"author":{"gitId":"Tomashiwa"},"content":"                    deleteTask(command.substring(6).stripLeading());"},{"lineNumber":179,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.equals(\"list\")) {"},{"lineNumber":180,"author":{"gitId":"Tomashiwa"},"content":"                    listTasks();"},{"lineNumber":181,"author":{"gitId":"Tomashiwa"},"content":"                } else if(command.equals(\"bye\")) {"},{"lineNumber":182,"author":{"gitId":"Tomashiwa"},"content":"                    isActive \u003d false;"},{"lineNumber":183,"author":{"gitId":"Tomashiwa"},"content":"                } else {"},{"lineNumber":184,"author":{"gitId":"Tomashiwa"},"content":"                    System.out.println(\"___________________________________________________________\");"},{"lineNumber":185,"author":{"gitId":"Tomashiwa"},"content":"                    System.out.println(\"No such command, Please try again with another command meow.\");"},{"lineNumber":186,"author":{"gitId":"Tomashiwa"},"content":"                    System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":187,"author":{"gitId":"Tomashiwa"},"content":"                }"},{"lineNumber":188,"author":{"gitId":"Tomashiwa"},"content":"            } catch(DukeCommandException e) {"},{"lineNumber":189,"author":{"gitId":"Tomashiwa"},"content":"                System.out.println(\"___________________________________________________________\");"},{"lineNumber":190,"author":{"gitId":"Tomashiwa"},"content":"                System.out.printf(\"ERROR MEOW! %s\\n\", e.getMessage());"},{"lineNumber":191,"author":{"gitId":"Tomashiwa"},"content":"                System.out.println(\"___________________________________________________________\\n\");"},{"lineNumber":192,"author":{"gitId":"Tomashiwa"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"Tomashiwa"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":195,"author":{"gitId":"Tomashiwa"},"content":"        // Closing message"},{"lineNumber":196,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\");"},{"lineNumber":197,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"Meow. Hope to see you again soon!\");"},{"lineNumber":198,"author":{"gitId":"Tomashiwa"},"content":"        System.out.println(\"___________________________________________________________\");"},{"lineNumber":199,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Tomashiwa":196,"-":4}},{"path":"src/main/java/DukeCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class DukeCommandException extends DukeException{"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"     * Type of command that throws the exception"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    private String commandType;"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     * Parameters that the command was processing"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    private String params;"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeCommandException"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"     * @param commandType Type of command"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"     * @param params Parameters processed by that command"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Message to display for this exception"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public DukeCommandException(String commandType, String params, String msg) {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Return the type of command"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * @return"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    public String getCommandType() {"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"        return this.commandType;"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     * Return the parameters of the command"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @return"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    public String getParams() {"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        return this.params;"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":36}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for DukeException"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"     * @param msg Error message that can be recalled"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    public DukeException(String msg) {"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"        super(msg);"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    public String dateTimeRange;"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"    public Event(String desc, String dateTimeRange) {"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"        super(desc);"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"        this.dateTimeRange \u003d dateTimeRange;"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc + \" (at: \" + this.dateTimeRange + \")\";"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"        return \"E\";"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":18}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    protected String desc;"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"     * Constructor for a task"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"     * @param desc Description of a Task"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    public Task(String desc) {"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"        this.desc \u003d desc;"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"     * Set the task as completed"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"    public void markAsDone() {"},{"lineNumber":18,"author":{"gitId":"Tomashiwa"},"content":"        this.isDone \u003d true;"},{"lineNumber":19,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":21,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":"     * Provide the description of the task"},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"     * @return"},{"lineNumber":24,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Tomashiwa"},"content":"    public String getDesc() {"},{"lineNumber":26,"author":{"gitId":"Tomashiwa"},"content":"        return this.desc;"},{"lineNumber":27,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":29,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Tomashiwa"},"content":"     * Provide the task\u0027s typing"},{"lineNumber":31,"author":{"gitId":"Tomashiwa"},"content":"     * @return"},{"lineNumber":32,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":34,"author":{"gitId":"Tomashiwa"},"content":"        return \" \";"},{"lineNumber":35,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":37,"author":{"gitId":"Tomashiwa"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Tomashiwa"},"content":"     * Provide the completion status of the task"},{"lineNumber":39,"author":{"gitId":"Tomashiwa"},"content":"     * @return"},{"lineNumber":40,"author":{"gitId":"Tomashiwa"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Tomashiwa"},"content":"    public String getStatusSymbol() {"},{"lineNumber":42,"author":{"gitId":"Tomashiwa"},"content":"        return this.isDone ? \"X\" : \" \";"},{"lineNumber":43,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":44}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"    public ToDo(String desc) {"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"        super(desc);"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"    public String getTypeSymbol() {"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"        return \"T\";"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"}"}],"authorContributionMap":{"Tomashiwa":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Tomashiwa"},"content":"test"},{"lineNumber":2,"author":{"gitId":"Tomashiwa"},"content":"todo eat"},{"lineNumber":3,"author":{"gitId":"Tomashiwa"},"content":"deadline sleep /by 10pm Sunday"},{"lineNumber":4,"author":{"gitId":"Tomashiwa"},"content":"event play /at 11am Saturday"},{"lineNumber":5,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Tomashiwa"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"Tomashiwa"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Tomashiwa"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":11,"author":{"gitId":"Tomashiwa"},"content":"done 0"},{"lineNumber":12,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":13,"author":{"gitId":"Tomashiwa"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"Tomashiwa"},"content":"delete 2"},{"lineNumber":15,"author":{"gitId":"Tomashiwa"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Tomashiwa"},"content":"list"},{"lineNumber":17,"author":{"gitId":"Tomashiwa"},"content":"bye"}],"authorContributionMap":{"Tomashiwa":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Tomashiwa"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"Tomashiwa"},"content":""},{"lineNumber":23,"author":{"gitId":"Tomashiwa"},"content":"pause"}],"authorContributionMap":{"Tomashiwa":3,"-":20}}]
