{"authorDailyContributionsMap":{"Maurice2n97":[{"date":"2021-01-17","commitResults":[{"hash":"e6a1da79bf66da7c1c1863ae12766eaf451e9b6f","messageTitle":"Implemented greet, echo, exit","messageBody":"","tags":["Level-1"],"fileTypesAndContributionMap":{"java":{"insertions":12,"deletions":0}}},{"hash":"9e55bb8fd0ba8c86746b6a8892178c957fd5da20","messageTitle":"Added remember commands, or list them out","messageBody":"","tags":["level-2"],"fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":5}}},{"hash":"01fd7d5fb0eb80c25244b22382e9463fbf0bb810","messageTitle":"added the Task class","messageBody":"","tags":["Task-class"],"fileTypesAndContributionMap":{"java":{"insertions":23,"deletions":0}}}]},{"date":"2021-01-18","commitResults":[{"hash":"44cf088f56a0f24611d8cef7722c9764e2a028af","messageTitle":"Added functionality to Chatbot to Mark Done Tasks","messageBody":"","tags":["Level-3"],"fileTypesAndContributionMap":{"java":{"insertions":31,"deletions":5}}},{"hash":"c0f9f1b3667adf9faeee0c8216953f931daba018","messageTitle":"Added Deadline and ToDo tasks.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":22,"deletions":0}}},{"hash":"b5d25a496093bd0cc8c968328f6226b99b316cde","messageTitle":"Added Event.java and modified toString for Deadline.java","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":13,"deletions":1}}},{"hash":"da24252d82b39ca3c0890955a2611847ea4f1551","messageTitle":"Implemented tracking of three types of task","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":85,"deletions":7}}},{"hash":"298103c51d1ce9f1c5cf6add628d2ba4faa84f65","messageTitle":"got rid of some duplication","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":17}}},{"hash":"61677d7daacced2b7b590565140b3748e2db9770","messageTitle":"Added tracking for three tasks req for level 4.","messageBody":"","tags":["Level-4"],"fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":0}}},{"hash":"1953a00fe2744e408415b45f389f18b15369f5d4","messageTitle":"Minor changes, set up automated testing","messageBody":"","tags":["A-TextUiTesting"],"fileTypesAndContributionMap":{"txt":{"insertions":10,"deletions":0},"java":{"insertions":5,"deletions":8}}},{"hash":"d8022cb78018bfee6fe741c437a9c63cb920905a","messageTitle":"Create class DukeException","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":5,"deletions":0}}},{"hash":"2393191ff2b0e3ffb284b384958705f63dd82319","messageTitle":"Added changes to enum","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":89,"deletions":41}}},{"hash":"f1981cccac786d678dba52a1b5b4dbef580be0bd","messageTitle":"updated additional checks for lowerCase, UpperCase, handle empty command( e.g, todo)","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":1},"java":{"insertions":31,"deletions":11}}}]},{"date":"2021-01-19","commitResults":[{"hash":"6310611acdb64d7e06b0048477695acf36b7100d","messageTitle":"Trying to fix problem with UI testing","messageBody":"","fileTypesAndContributionMap":{"txt":{"insertions":5,"deletions":4},"java":{"insertions":14,"deletions":11}}},{"hash":"f0a816fca00a2c4e25a014c7334b2ce12e2e0f06","messageTitle":"Added functionality to delete Tasks, Updated test_cases","messageBody":"","tags":["Level-6"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":0},"java":{"insertions":27,"deletions":1}}},{"hash":"07317e30952d9668452a57a148644f00e46c804d","messageTitle":"Added comments to code.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":103,"deletions":16}}}]},{"date":"2021-01-26","commitResults":[{"hash":"ff5bb7e7987151d025857f0d75a6cf2034a07603","messageTitle":"Extract out letterCode for all subclasses of Task. Task Class and its subclasses do not have a coded letter for quickly identifying what type of Task it is. Task Class now has a String variable inside which stands for the letter code, i.e \u0027T\u0027, for task  \u0027D\u0027 for deadline Enhances readability and people would know what the variable stands for, may allow for easier generalisation between Task classes.","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":30,"deletions":8}}},{"hash":"557de9970cdb1cfc7b63c79b7bf28ad1ccb95dd2","messageTitle":"Add feature to store the taskList","messageBody":"When the program closes, memory of the original taskList is lost.\n\nStore in a text file, Use a Storage Class to fetch the data. Furthermore a Parser class will  parse the saved format.\n\nThis adds more functionality to our Duke Chatbot.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":0},"java":{"insertions":104,"deletions":5}}},{"hash":"0a0b4581b4ea7341a5e28e6a4a9c3dba53d1e9bd","messageTitle":"Extract out classes for UI and TaskList","messageBody":"Main method requires cleanup as it is being cluttered with too many methods.\n\nExtracting out the useful methods for UI into the UI class and seperately implementing a Tasklist class would be more organised and enhance readability. Also it would conform to SLAP principles.\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":89,"deletions":15}}},{"hash":"d523dd03ff523ed6cbb74b1cc615ee933a3e999b","messageTitle":"Extract date from Event description","messageBody":"For Deadline and Event classes, we need a way to parse and store the dates associated with these two classes.\n\nStatic methods in Parser allows for parsing based on the date. So far the only recognisable format is  yyyy-MM-DD. F\nuture iterations could have more date formats.\n\nThis would facilitate future features which can categorise events based on their dates.\n","fileTypesAndContributionMap":{"java":{"insertions":66,"deletions":2}}},{"hash":"02a16098678318075f26aa11824c06016b58ff70","messageTitle":"fix missing newline output","messageBody":"Upon writing to the file there was no newline seperator between entries to the duke.txt\n\nHaving newline makes it easier to read the txt file and the bug would also cause problems reading from duke.txt\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":1},"java":{"insertions":2,"deletions":2}}},{"hash":"e70d5a29f96cc72a0170e40f98d6c2fe1fda4716","messageTitle":"Handle file or directory is missing","messageBody":"There might be a problem when the program is run on other computers where they do not have the directories or files needed by duke. In this case we need to handle it by creating the files or directories for them.\n\nAdditionally added Duke constructor where the missing file or directory case will be handled.\n","fileTypesAndContributionMap":{"java":{"insertions":18,"deletions":1}}},{"hash":"73fe928903fa4482a84caeba5e03f6867aa181fc","messageTitle":"Fix bug of not converting between formats","messageBody":"There are two format for the string representation of Task, the readable format and the saved format. toString will return the more readable date format while the saved format is kept different\n","tags":["Level-8","Level-7"],"fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":6},"java":{"insertions":26,"deletions":19}}},{"hash":"8073f6e2db4f8fd046617076087335789b6bf90c","messageTitle":"Shorten Code","messageBody":"enhance readability by using DateFormatter API in java to easily extract date out from String instead of regex\n","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":10}}},{"hash":"4bbaa870e3c35e9bfb16eed58e116ef307a2f52e","messageTitle":"Flesh out classes before refactoring","messageBody":"Refactoring code before creating new Command class\n","fileTypesAndContributionMap":{"java":{"insertions":47,"deletions":16}}}]},{"date":"2021-01-27","commitResults":[{"hash":"643b648e459f825c128f7fd082bc487fb3fcd2a8","messageTitle":"Organise into packages and implement TaskList class wrapper","messageBody":"Organise the classes into packages as there are too many classes and some needs to be logically grouped together. The new TaskList class also acts as a wrapper over TaskList and seperates it out from the main.\n\nOrganising into packages is neater and hence we can find files fast. It also helps with maintainability. The TaskList class adheres more strongly to OOP design.\n","fileTypesAndContributionMap":{"java":{"insertions":20,"deletions":3}}},{"hash":"d7e00d92f4ddc4b5ebe19f79c31435f9754ee459","messageTitle":"Fix bug IndexError when deleting entry from TaskList","messageBody":"running text-ui test shows a bug when deleting the last indexed entry from TaskList. A previous change to Tasklist\u0027s delete method did not subtract 1 from the indexToDelete when calling arraylist.remove.\n","fileTypesAndContributionMap":{"txt":{"insertions":16,"deletions":8},"java":{"insertions":30,"deletions":38},"sh":{"insertions":2,"deletions":2}}},{"hash":"8a677b2dad1132da6e110502c15bce7ccdef2930","messageTitle":"Minor changes to text-ui-test file","messageBody":"Minor changes, add some line breaks for readability\n","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":9},"java":{"insertions":8,"deletions":13}}},{"hash":"d2c8903a8bd3edc2355064201891fef519564844","messageTitle":"Create Command class and its subclasses","messageBody":"Representing the possible Actions that Duke Chatbot can take after parsing the command.\n\nBreaking into Parser Class would allow better readability and maintainability by breaking the program into smaller modules.\n\n**TODO ** Parser class would take a string and depending on the keyword parsed, will extract out the string and create the appropriate task/ command to pass to Main.\n","fileTypesAndContributionMap":{"java":{"insertions":120,"deletions":1}}},{"hash":"f3dc20f619e1d10862f4fb530993084aa3acad2f","messageTitle":"Rename packages to smallcase.","messageBody":"this is to suite java package naming conventions\n\nfix some small errors as well.\n","fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":15}}},{"hash":"12580d8b5354c39c1f5c6c54bc14407be7deafd5","messageTitle":"Refactor Parser to parse input","messageBody":"made Parser handle parsing input into the correct Command. This is so the logic flow is clearer and all the bulk of the string processing is located in the Parser class.\n","fileTypesAndContributionMap":{"java":{"insertions":169,"deletions":6}}},{"hash":"024da4cb1458bba13648bba0ddcf442b024dc635","messageTitle":"Finish up parsing for exit and List Command.","messageBody":"Checkpoint in case I need to revert back the changes.\n","fileTypesAndContributionMap":{"java":{"insertions":26,"deletions":14}}},{"hash":"7678b22958b6394a40d6fd95d5a11d0f285e5f33","messageTitle":"Seperate out Parser Logic from Main.","messageBody":"Adhering to true OOP principles, restructure the code so that it is better organised . The Parser class handles most of the logic of reading input String and figuring out what Command to return.\nCommand.execute() carries out the calling of the UI and the storage. There is more work to be done to seperate out the Ui Logic from the Command class.\n\n** TODO ** Seperate out the printing to the ui class. Also could seperate out Date Parsing logic from the Command Parser class . For future iterations/\n","fileTypesAndContributionMap":{"txt":{"insertions":4,"deletions":2},"java":{"insertions":58,"deletions":45}}},{"hash":"f189086e03a269925c1daf39bc76be88c0b97e95","messageTitle":"Remove Comments and fix minor bug.","messageBody":"sc.hasNextLine() waits for the user, thus creating an issue where at the end of execution after inputting bye, the program still waits for the user input before exiting entirely.\n\nfix : Deleted the need for a sc.hasNextLine() check.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":191}}},{"hash":"06708dbba8bfdb1727ae951a8e06f198b6a3ce10","messageTitle":"Deleted redundant function","messageBody":"hasUserInput is not used.\n","fileTypesAndContributionMap":{"java":{"insertions":0,"deletions":4}}},{"hash":"20f0cb38b5fce78d3db2f6fe5a5774541f0d312b","messageTitle":"Revert \"Deleted redundant function\"","messageBody":"This reverts commit 06708dbba8bfdb1727ae951a8e06f198b6a3ce10.\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":0}}},{"hash":"dcc58b42d8b87609c2005e386a3f52ada45ba539","messageTitle":"Delete redundant method in Ui","messageBody":"ui.hasUserInput is not used and hence deleted.\n","tags":["A-Packages","A-MoreOOP"],"fileTypesAndContributionMap":{"java":{"insertions":1,"deletions":3}}},{"hash":"f5e6bfc7f98d884b322e91138fb95a34d009a009","messageTitle":"Add J-Unit Tests for Deadline.","messageBody":"Add JUnit tests to test Deadline. Check two methods for correctness, the toString method,\nand the method for generating the saved String format used for storing the task in the file.\n\nThere could be instances where there is a typo that results in an incorrect String format.\nThis might lead to bugs when the tasks are being stored in another .txt file and fetched the next\ntime the app is open.\n\nJ-Unit tests help to automate the testing.\n\nLet\u0027s add unit test to check for toString method correctness.\na unit test to check the getSavedString format correctness\nand a unit test to check if Deadline throws Exception when\nno date is able to be parsed from its by String.\n","tags":["v.01","A-Jar","A-JUnit"],"fileTypesAndContributionMap":{"java":{"insertions":48,"deletions":81}}}]},{"date":"2021-01-28","commitResults":[{"hash":"6cbf1bf099b9c09ee93fff035ce186c860991515","messageTitle":"Add  JavaDoc Comments and extract duplicate code","messageBody":"There is duplicate code in the toString method of various subclasses of Task. The common code can be extracted out under the Task class,\nhence shortening the code. JavaDoc comments are needed to document what each class does and to make it easier to read.\n\nLet\u0027s put JavaDoc comments for at least half of the classes, with the rest to be filled in at later dates.\nLet\u0027s extract out the this.getLetterCode() function call  to the Task class method.\n","tags":["A-JavaDoc"],"fileTypesAndContributionMap":{"java":{"insertions":206,"deletions":63}}},{"hash":"f9d1adfab3ba6b95062c6f46340f0cfa3187601c","messageTitle":"Fixed Coding Style","messageBody":"fixed coding style to adhere to the Coding Style standard and make the code appear to be written by one user.\n","fileTypesAndContributionMap":{"java":{"insertions":4,"deletions":3}}},{"hash":"d089ba3c6960e0e5961d74af8b8e8d2d42d27c6b","messageTitle":"Save checkpoint","messageBody":"","fileTypesAndContributionMap":{"java":{"insertions":40,"deletions":0}}},{"hash":"02d01eb00c19c4dbee26698b3ff40866de6402c4","messageTitle":"Update Duke","messageBody":"Previously, Duke does not do case insensitive matching when finding tasks via keyword. Also, Duke throws an Exception when an empty line is entered to the chat bot\n\nThe case insensitive matching would be better ideal for searching .Second point  would not be good as the user may accidentally hit enter and cause the program to terminate.\n\nLet\u0027s make Duke ignore empty return lines\nLet\u0027s make Duke convert all search input to lower case, and target string to search will be lower case as well.\n","tags":["Level-9"],"fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":2},"java":{"insertions":38,"deletions":2}}},{"hash":"169a905b145893df3b60a216126eee1572a39891","messageTitle":"Extract out field isExit from Command class","messageBody":"Previously, the command class execute method would, after execution, return a boolean indicating\nif the program should terminate or not. This is harder to read as one would have to look\nfor the meaning of the returned boolean value from execute.\n\n iI the boolean variable were to be separated out as a  field within the command c it would be easier.\n\nLet\u0027s modify execute to be a void method, while the Command\nclass contains the attribute isExit  and method shouldExitt(),\nwhich should inform the user if the command is telling the program to exit.\n","fileTypesAndContributionMap":{"txt":{"insertions":0,"deletions":1},"java":{"insertions":20,"deletions":21}}}]},{"date":"2021-02-01","commitResults":[{"hash":"216bdcd0996be14d5ef7bb2d9dd62066a5ecd82a","messageTitle":"Integrate Gradle for automating builds","messageBody":"Automated testing would ease the workflow of deploying and testing code.\n\nGradle support is provided for checkstye and JUnit testing\n\n**TODO** add support for buidling JAR files using ShadowJar in Gradle\n","tags":["A-Gradle","A-CheckStyle"],"fileTypesAndContributionMap":{"gradle":{"insertions":26,"deletions":0},"txt":{"insertions":0,"deletions":1},"bat":{"insertions":100,"deletions":0}}},{"hash":"280fa5a33d3b1ff75f362552fd95b95d744c3b95","messageTitle":"fix Checkstyle errors","messageBody":"Code is messy with many violation of the coding standards\n\nmake code neater and in line with JLS coding standards, using gradle checkstyle\n","fileTypesAndContributionMap":{"gradle":{"insertions":0,"deletions":3},"java":{"insertions":281,"deletions":217}}}]},{"date":"2021-02-02","commitResults":[{"hash":"e9d77bd1203a874a552cc055327fa72d213e22e0","messageTitle":"Create simple GUI for chatbot.","messageBody":"basic GUI chatbot window to type in commands. Not a finished article yet. Save Checkpoint here before tinkering.\n","fileTypesAndContributionMap":{"gradle":{"insertions":20,"deletions":0},"java":{"insertions":107,"deletions":0}}},{"hash":"8e595408907a4b81a4d08235d68ff7d14db6fb67","messageTitle":"Add more functionality to GUI","messageBody":"Add pictures, dialog boxes, spacing.\n","fileTypesAndContributionMap":{"java":{"insertions":78,"deletions":6}}}]},{"date":"2021-02-04","commitResults":[{"hash":"af1e7908cf6ffa08f1850c8063ab9c229e966a19","messageTitle":"Separate out Ui logic form Ui design","messageBody":"The application class is getting too bulky\n\nLets Use controller view design to separate out business logic.\n","fileTypesAndContributionMap":{"java":{"insertions":116,"deletions":140}}},{"hash":"f68f9495bfa637f6db48e3d32f4372efc03c3047","messageTitle":"Connect GUI to main logic","messageBody":"GUI now is able to output responses from Duke Chatbot.\n","tags":["Level-10"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":58,"deletions":47}}}]},{"date":"2021-02-05","commitResults":[{"hash":"be67107ea6b6eb7e074efca0413e52b516537c5d","messageTitle":"Set Insets for components in GUI","messageBody":"Alter FXML files to set margins around the images and text labels within dialog boxes.\n\nLooks nicer overall.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":1}}}]},{"date":"2021-02-11","commitResults":[{"hash":"68ee27367145ee28c6ff660e7f2a4a467b815cd9","messageTitle":"Set GUI to be resizeable","messageBody":"Resizeable GUI that grows the comment bar and the scroll pane to fit the window.\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":1},"txt":{"insertions":0,"deletions":1},"java":{"insertions":5,"deletions":7}}},{"hash":"407baaf4bb8a3a22d2c5f3f9507bfd24fd9bd62d","messageTitle":"Got rid of Duke Welcome Message","messageBody":"When GUI displays the welcome message, there is some formatting issues with regards to how the whitespaces are sized relative to the \"_\" characters. Decide to remove it for cleaner UI.\n","fileTypesAndContributionMap":{"java":{"insertions":2,"deletions":8}}}]},{"date":"2021-02-12","commitResults":[{"hash":"47d337a4c7769786a24aeda78207e422259e8b2b","messageTitle":"Refactor Code for Parser","messageBody":"Ensures code is within code quality standards. Split parseCommand into two seperate steps.\nFirst step checks for match, second step extracts out the match. Simplify code for find Command and\ntodo command as well.\n","fileTypesAndContributionMap":{"java":{"insertions":144,"deletions":154}}},{"hash":"34e1ea5012d194eab6361e6ba903a63772ebf564","messageTitle":"Refactor Classes","messageBody":"Refactor classes to satisfy code quality standards\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":4},"java":{"insertions":85,"deletions":47}}},{"hash":"6f62ae0ec7c1ccebfb52592230ce9f526c849320","messageTitle":"Extract out error message","messageBody":"Extract the error message to a private final static field within deadline and event classes.\n\nMakes it easier to locate within the code, makes it neater as well.\n","tags":["A-CodeQuality"],"fileTypesAndContributionMap":{"java":{"insertions":9,"deletions":4}}},{"hash":"d93043ab286d7405953c96c6c870f3a6f8d41724","messageTitle":"Add Assertions for Parser,TaskList","messageBody":"Provide a sanity check that the index to access in the task list is not negative.\nProvide a sanity check that the inputCommand should not be negative.\n","fileTypesAndContributionMap":{"java":{"insertions":3,"deletions":0}}}]},{"date":"2021-02-13","commitResults":[{"hash":"ddb54eef0070783c7c98279c989c64b880a05cd1","messageTitle":"Create new  CommandResult class","messageBody":"Stores program execution state inside CommandResult , which is returned from executing a command. This is in contrast to previously altering a field in the ui to store the messages, which is dangerous as changing the state causes some coupling of the code.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":1},"java":{"insertions":64,"deletions":68}}}]},{"date":"2021-02-14","commitResults":[{"hash":"5e70335561e7a2a49eec21edd6fdea812a4a9338","messageTitle":"Refactor storage class","messageBody":"Shorten functions by breaking them up into smaller functions.\n\nEnhances readability and makes the happy path more prominent. Apply more SLAP.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":3},"java":{"insertions":86,"deletions":59}}},{"hash":"7e2eec9e83f605928c35c51fe415aced935772bd","messageTitle":"Create new class Storage Parser","messageBody":"Extract method refactoring done on Parser to extract out methods used for parsing the\nencoded task string from database.\n\nThis is so that it is neater and Parser class will not be responsible for doing different unrelated things.\nParser will seperate out to CommandParser and StorageParser. Command Parser will just focus on\nparsing Commands.\n","fileTypesAndContributionMap":{"java":{"insertions":92,"deletions":56}}},{"hash":"b02e32e63015292edf0cff97d070931946b411e3","messageTitle":"Handle ArrayListOutOfBounds Exception","messageBody":"Handle the case that the index is out of bounds : so as to prompt the user again for another index.\n\nEnsures the program doesnt quit at runtime if user mistakenly enters a wrong index\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":4},"java":{"insertions":30,"deletions":14}}}]},{"date":"2021-02-15","commitResults":[{"hash":"04e719e80d631edd015f9d7bbc5be381270d2de2","messageTitle":"Organize into packages","messageBody":"Organize classes into packages makes it easier to search for them and reduces clutter.\n","fileTypesAndContributionMap":{"java":{"insertions":116,"deletions":66}}},{"hash":"37cccf3c189a6feaa1b03b446e4987649ff62bf9","messageTitle":"Minor changes to improve code quality","messageBody":"Put call to static field storage as CLASS_NAME.storage rather than INSTANCE.storage\n","fileTypesAndContributionMap":{"java":{"insertions":11,"deletions":13}}},{"hash":"d09dff51cb307a84381b4848c6e8ca226288295d","messageTitle":"Add feature sorting of tasks","messageBody":"Add feature which automatically sorts the tasks via the dates. ToDo tasks\n have maximum dates, so they will be pushed to the end of the list.\nThe list automatically sorts itself whenever it is changed ( or when the model TaskList is initialized).\n\nSorting helps the user track dates easily instead of the dates being jumbled around.\n","tags":["BCD-Extension"],"fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":1},"java":{"insertions":20,"deletions":7}}},{"hash":"cf8fb3c791ac064c5653266c70dfc86ae0547b00","messageTitle":"Set up CI/CD","messageBody":" add gradle.yml file for GitHub to run continuous integration\n","fileTypesAndContributionMap":{"java":{"insertions":7,"deletions":0}}}]},{"date":"2021-02-16","commitResults":[{"hash":"2af918148a8e339c0f397d2e039631e720e8db48","messageTitle":"Break down method add","messageBody":"Extracted out add and sort functions for taskList into separate functions. Used insertIntoSorted position to combine both functions together.\n\nApplied SLAP. now the add is no longer doing two things at the same time.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2},"java":{"insertions":8,"deletions":4}}}]},{"date":"2021-02-17","commitResults":[{"hash":"e8d13062b2a461358059b0ce7dd97237cdd0fb61","messageTitle":"Fix bug regarding input with whitespace","messageBody":"Input with leading whitespaces are not trimmed.\nAlso renamed packages to lower case to match java standards.\n","fileTypesAndContributionMap":{"txt":{"insertions":2,"deletions":2},"java":{"insertions":126,"deletions":92}}}]},{"date":"2021-02-18","commitResults":[{"hash":"7c2be2f2e8d14287030f151ff243823d8f15c55a","messageTitle":"fix bug regarding invalid Date","messageBody":"There might be invalid Dates for example 2021-20-20 is not a valid date in the calender.\nCausing an unhandled DateTimeParseException to not be handled during runtime.\nCreated a new exception DukeDateTimeException to catch errors from Date Parser.\n\nWhat could be done in the future. A dependency injection framework for initializing Time - based tasks like deadline.\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":2},"java":{"insertions":235,"deletions":100}}},{"hash":"0ef26a94755b3802fc8ed685f676eb2fd08c2a47","messageTitle":"Add some JUnit Tests","messageBody":"Increase code coverage for Parser classes.\n","fileTypesAndContributionMap":{"java":{"insertions":83,"deletions":8}}},{"hash":"0b4627492e11d81308ba8b2d0e1d30e07eecbf1d","messageTitle":"Handle Error when storage file cant be created","messageBody":"The previous code throws a runtime error when there is an IO Exception in the case where\nthe txt file to store the tasks does not exist in the directory.\n\nThis could be not informative to the user who needs to diagnose the problem.\n\nLets-\n* Handle the IO exception within the controller class main window\n* Print out a message telling the user to close the app.\n* Ask user to check the directory in qn and see if the file cant be created insdie\n","fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1},"java":{"insertions":42,"deletions":23}}},{"hash":"6465bb44b0def59283a3bbd38b539f48cc79f863","messageTitle":"Add Colors to components via CSS","messageBody":"The default colours look dreary. Photo may have royalties associated with it.\n\nReplacing them with custom colours would make it look nicer. Replace the photo with non royalty photo, with credit to (photographer)\n\nLets -\n* add java FX CSS skins to button and viewport\n*Change pictures used before release to no-royalty stock images\n","tags":["A-BetterGUI"],"fileTypesAndContributionMap":{"txt":{"insertions":1,"deletions":1}}}]},{"date":"2021-02-19","commitResults":[{"hash":"a4df9c9c127af1b9713314c23d274d1e92e4f6df","messageTitle":"Setup README, Add product image","messageBody":"It is time to publish the second version\n\nLets -\n*include the User guide for people to use\n* Update the profile pic for showcase\n","fileTypesAndContributionMap":{"txt":{"insertions":3,"deletions":3},"java":{"insertions":2,"deletions":2},"md":{"insertions":188,"deletions":5}}},{"hash":"1662dfee866ad0d17bc5d20294fb1b237dedf16b","messageTitle":"Fix typos in README","messageBody":"small typos are found\n\nhinders readability of user guide\n\nLets -\n*Update the user guide with a more correct version\n","fileTypesAndContributionMap":{"md":{"insertions":3,"deletions":2}}},{"hash":"d297447e3938c4aad2703ee4f2e274a4f9f4d167","messageTitle":"Refactor to match coding standard","messageBody":"There are minor coding standard violations\n\nThis makes it hard to standardise it to make it seem like it is written by only one person\n\nLets\n- Make extra javadocs\n- Ensure code follows the java coding standards\n","fileTypesAndContributionMap":{"gradle":{"insertions":1,"deletions":0},"txt":{"insertions":1,"deletions":2},"java":{"insertions":345,"deletions":159}}},{"hash":"2f1ca628e950c32cd503b235a31dd7d6d4cf495e","messageTitle":"Update README to get rid of errors","messageBody":"Some inaccuracies have to be corrected.\n","tags":["v.02"],"fileTypesAndContributionMap":{"gradle":{"insertions":14,"deletions":3},"txt":{"insertions":0,"deletions":17},"bat":{"insertions":0,"deletions":21},"sh":{"insertions":0,"deletions":38},"md":{"insertions":6,"deletions":5}}},{"hash":"4a1d3ab94d0227b80eadf32312dbafa64c90e2ea","messageTitle":"Update README to get rid of more errors.","messageBody":"","fileTypesAndContributionMap":{"md":{"insertions":2,"deletions":2}}}]},{"date":"2021-02-20","commitResults":[{"hash":"4300f493a0b99ed1a5e5544b0144368f939dbf82","messageTitle":"Update README","messageBody":"To fix spelling errors\n","tags":["A-UserGuide"],"fileTypesAndContributionMap":{"md":{"insertions":4,"deletions":2}}}]}]},"authorFileTypeContributionMap":{"Maurice2n97":{"java":1856,"md":185,"fxml":50,"sh":0,"bat":100,"gradle":55,"txt":4}},"authorContributionVariance":{"Maurice2n97":59380.676},"authorDisplayNameMap":{"Maurice2n97":"CS2103-T16-2 MOK ..RICE"}}
