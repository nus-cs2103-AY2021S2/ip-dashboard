[{"path":"src/main/java/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * An enum type which defines the type of command issue to the chatbot,"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A command will order the chatbot to do something."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" * So far there are five commands -\u003e to add an event at some time, to add a deadline by some time,"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * to add something to do, to delete a task and to mark a task as done."},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public enum CommandType {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    ADD_EVENT(){"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        public boolean isCommandTypeFor(String input) {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d input.toLowerCase();"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            if (input.startsWith(\"event \") || input.equals(\"event\")){"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"                return true;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                return false;"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    },"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    ADD_DEADLINE() {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        public boolean isCommandTypeFor(String input) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d input.toLowerCase();"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            if (input.startsWith(\"deadline \") || input.equals(\"deadline\")) {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                return true;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                return false;"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    },"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    ADD_TODO() {"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        public boolean isCommandTypeFor(String input) {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d input.toLowerCase();"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            if (input.startsWith(\"todo \")||input.equals(\"todo\")) {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                return true;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"                return false;"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    },"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    MARK_AS_DONE() {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        public boolean isCommandTypeFor(String input) {"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d input.toLowerCase();"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            if (input.startsWith(\"done \")|| input.equals(\"done\")) {"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"                return true;"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"                return false;"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    },"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    REMOVE_TASK() {"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        @Override"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        public boolean isCommandTypeFor(String input) {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d input.toLowerCase();"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"            if (input.startsWith(\"delete \")||input.equals(\"delete\")) {"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"                return true;"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"            } else {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"                return false;"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    };"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * Checks if the string belongs to the command_type of the calling enum class."},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     * @param input to be analysed if it is of the command_type."},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * @return whether the input is of the commandtype"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    public abstract boolean isCommandTypeFor(String input);"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":78}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":" * A Task with a deadline to complete."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    protected String by;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    public Deadline(String description,String by) {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" * main class containing the Duke Chatbot main logic."},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private static List\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * Prints all the tasks stored on the list."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private static void printAllTasks() {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        int counter \u003d 1;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(counter + \".\" + currentTask);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            counter++;"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * adds a Task to the list, and prints a message on to the console"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * @param incomingTask"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private static void addTask(Task incomingTask) {"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + incomingTask);"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.add(incomingTask);"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Now you have \" + listOfTasks.size() + \" tasks in the list.\");"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * parse a string input MARK_DONE command to obtain the index of the task to mark as done."},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string."},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"     * @return  the index of the task to mark done."},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException for the case when done is empty or when the integer cannot be parsed."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    private static int parseMarkDone(String input) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"done\" in the input string is followed by variable number of space."},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^done\\\\s*$\")) {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^done\\\\s+([0-9]+)$\"; // \"done\" followed by at least one space and at least one number."},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"            // Unable to parse the string following \"done \""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for done must be integer.\");"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        int indexToMarkDone \u003d Integer.parseInt(m.group(1));"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        return indexToMarkDone;"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * Marks a task at a specified index in the list as done. Prints out a message to tell the user that the"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * task is marked done."},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToMarkDone the index of the task to mark as done."},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    private static void markTaskDone(int indexToMarkDone) {"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d listOfTasks.get(indexToMarkDone-1);"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        task.markAsDone();"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + task);"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * Reads in a REMOVE_TASK command. Parses the string to obtain the index of the task to be deleted."},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     * Prints out a message to tell the user the task is deleted"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * @return index of the task to be deleted."},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the delete is of the incorrect format or is empty."},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    private static int parseDelete(String input) throws DukeException{"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"delete\" is followed by variable number of space."},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^delete\\\\s*$\")) {"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^delete\\\\s+([0-9]+)$\"; //delete followed by at least one space and one number."},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for delete must be integer.\");"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        int indexToDelete \u003d Integer.parseInt(m.group(1));"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        return indexToDelete;"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"     * deletes a task in the list at a certain index."},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToDelete index of the task to be deleted."},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    private static void deleteTask(int indexToDelete) {"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d listOfTasks.get(indexToDelete-1);"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.remove(indexToDelete-1);"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + task);"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Now you have \" + listOfTasks.size() + \" tasks in the list.\");"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"     * parses a string input of the ADD_DEADLINE command and returns the corresponidng deadline class."},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"     * @return Deadline to be added."},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the deadline is empty."},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"    private static Task parseAddDeadline(String input) throws DukeException {"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^deadline\\\\s*$\")) {"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"            // when the string is just \"deadline\" followed by variable number of space."},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\";"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"            // case when it is of the wrong format. (e.g no \\by in input string.)"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The deadline is of incorrect format.\");"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"        String by \u003d m.group(2);"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        return new Deadline(description,by);"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"     * parses an input of the type ADD_EVENT, returns the correspoinding event class."},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"     * @return Event Task"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the event command is empty or of incorrect format."},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"    private static Task parseAddEvent(String input) throws DukeException{"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^event\\\\s*$\")) {"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^event\\\\s+(.+)\\\\s+/at\\\\s+(.+)$\";"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The event is of incorrect format.\");"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"        String at \u003d m.group(2);"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"        return new Event(description,at);"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"     * parses an input of the Command type ADD_TODO and returns the corresponding ToDo Task."},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"     * @return ToDo Task."},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException command Todo is empty or of the incorrect format."},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"    private static Task parseToDo (String input) throws DukeException{"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^todo\\\\s*$\")) {"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^todo\\\\s+(.+)$\";"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The todo is of incorrect format.\");"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"        return new ToDo(description);"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":179,"author":{"gitId":"-"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":180,"author":{"gitId":"-"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":181,"author":{"gitId":"-"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":182,"author":{"gitId":"-"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":184,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"        String input;"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"        // Read in user input, determine the type of command that is being issued, (if any) parses the command"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"        //and performs the necessary action."},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"            try {"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"                if (input.equals(\"bye\")) break;"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"                if (input.equals(\"list\")) {"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"                    printAllTasks();"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"                } else if (CommandType.MARK_AS_DONE.isCommandTypeFor(input)) {"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"                    int indexToMarkDone \u003d parseMarkDone(input);"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"                    markTaskDone(indexToMarkDone);"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"                } else if (CommandType.ADD_DEADLINE.isCommandTypeFor(input)) {"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"                    Task incomingTask \u003d parseAddDeadline(input);"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":"                    addTask(incomingTask);"},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":"                } else if (CommandType.ADD_EVENT.isCommandTypeFor(input)) {"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"                    Task incomingTask \u003d parseAddEvent(input);"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":"                    addTask(incomingTask);"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"                } else if (CommandType.ADD_TODO.isCommandTypeFor(input)) {"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"                    Task incomingTask \u003d parseToDo(input);"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"                    addTask(incomingTask);"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"                } else if (CommandType.REMOVE_TASK.isCommandTypeFor(input)) {"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"                    int indexToDelete \u003d parseDelete(input);"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"                    deleteTask(indexToDelete);"},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"                } else{"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":"                    // do not understand the command.."},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":"                    throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":"                }"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"            } catch (DukeException e) {"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":"                System.out.println(\"OOPS!!! \" + e.getMessage());"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":221,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":212,"-":10}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"        super(errorMessage);"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":" * A type of Task that will happen at some point in the future."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"public class Event extends Task {"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    protected String at;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    public Event(String description,String at) {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        this.at \u003d at;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"public class Parser {"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"     * A class to parse input String for more information of what type of event it is."},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":" * Stores information of a Task - the description and a boolean flag to indicate if the task is done."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    public Task(String description) {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public String getStatusIcon() {"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public void markAsDone(){"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        isDone \u003d true;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        String mark \u003d (isDone ? \"X\" : \" \");"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + mark + \"] \" + description;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":26}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":" *  A type of task that is to be done."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"public class ToDo extends Task{"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    public ToDo(String description){"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"deadline read book /by Someday"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at next Thursday"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"deadline cs2103 assignment /by Thursday 2359"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at this Thursday too!! :566\u0026:$$"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"deadline"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"todo lunch"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"event"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"blahff"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"delete 5"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"bye"}],"authorContributionMap":{"Maurice2n97":17}}]
