[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"checkstyle {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"run {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    enableAssertions \u003d true"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    standardInput \u003d System.in"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"shadowJar {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    archiveClassifier \u003d null"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"test {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    useJUnitPlatform()"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    mainClassName \u003d \u0027duke.Launcher\u0027"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"dependencies {"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    testCompile group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-params\u0027, version: \u00275.7.0\u0027"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":55}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"D | 1 | apply financial assistance | 2021-03-01"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | CS3230 homework | 2021-03-02"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"E | 0 | CS3230 midterm  | 2021-03-06"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"E | 1 | graduation | I think is somewhere around 2022-05-03..."}],"authorContributionMap":{"Maurice2n97":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"Monique the monitor lizard is a desktop java GUI client that makes managing tasks easier. You interact"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"with it through a command line interface, where you type commands"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":". It can manage three different types of tasks, todo tasks *("},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"which can serve as a sort of bullet reminder about outstanding things)*, deadline tasks *(tasks that need "},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"to be completed by a certain date)* and lastly event tasks *(events occurring on a certain date, like promos"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"or meetings)."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"Note all command words are case-insensitive"},{"lineNumber":13,"author":{"gitId":"-"},"content":"### Feature 1 "},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"### `event` - Add Event task to the list"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"One event task must be associated with one date, that is the date this event occurs. The event must be entered into the CLI with the following format  "},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" `event (String description) /at (String containing date)`. The date must be in the following format  *\"yyyy-mm-dd\"* .It must be present in the"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" string after the /at keyword, else the event cannot be parsed. The date can be anywhere so long as it comes after /at. If there are multiple different "},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":" dates following the format specified earlier, only the earliest date will be the one parsed and associated with this event. After the adding the event"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" to the list. When the task is displayed by the GUI, all occurrences of the associated date will be converted to a more readable format *\u0027MMM-dd-yyyy\u0027* .  After entering the command,"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" an event task will be added to the list, and the chatbot will output a message to notify you if the command was successful. "},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":" "},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"  Example of usage: 1.`event hang out with friends /at Cathay Cineplex 2021-03-04`"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"`Got it! I have added this task: \\n\\t [E][X] hang out with friends (at: Cathay Cineplex Mar 4 2021) \\n Now you have 1 tasks in the"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"list.`"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"### Feature 2 "},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"### `Deadline` - Add Deadline task to list"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"A deadline task must be associated with one date, that is the date by which the task must be completed. The command must be entered into the"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"CLI with the following format `deadline (String description) /by (String containing date`). Similar to adding an event task from earlier, "},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"the date must be in the format \"yyyy-mm\", and it must be present after that /by keyword. It can be at any position in the string so long as "},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"it comes after /by. For multiple date clashes, **see \u0027event\u0027 feature** for how it will be resolved, as it is similar. After entering the command,"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"a deadline task will be added to the list, and the chatbot will output a message to notify you if the command was successful."},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"`deadline I need to do my homework /by 2021-04-05 6pm`"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"`Got it! I have added this task: "},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"\\n\\t [D][X] I need to do my homework (by: Apr 5 2021 6pm) \\n Now you have 2  tasks in the"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":" list.`"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"### Feature 3 "},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"### `todo` - Add ToDo task to list"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"A todo task is not specified with any date. The command must be entered into the CLI with the following format `todo (String description)`."},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"After which a todo task will be added into the list.After entering the command,"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"a deadline task will be added to the list, and the chatbot will output a message to notify you if the command was successful.                                                    "},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"`todo read a good book`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"`Got it! I have added this task: \\n\\t [T][X] read a good book \\n Now you have 3 tasks in the list.`"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"### Feature 4"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"### `find` - find task with matching substring"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"The format for the command is `find (String regex)`. It will then search through the list to filter off the tasks whose string "},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"representation contains a substring that matches the regex. It will then display the list of matching tasks to the user."},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"Note : The string representation of a task is the string which is displayed by the GUI to represent the task. If unsure,"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"you can call a list Command to see the format. So for example in the earlier todo task example, the string representation is "},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"`[T][X] read a good book`. Note that you can also search out all deadline tasks using the unique task identifier, for example "},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"`find [D]`. Additionally if you want to search by date, you have to search the \u0027MMM-dd-yyyy\u0027 format string, so for example "},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"`find Mar 3 2021`. Note that the search is case insenstive."},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"`find CS3230`"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"lists out all tasks whose display string contains the string \u0027CS3230\u0027 as a substring, for example this task gets filtered  "},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"`[E][X] CS3230 midterm (:at Mar 2 2021)`. If no tasks match, GUI will display message `You have nothing on currently`"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"### Feature 5"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"### `Delete` - Delete task at index"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"Command must be of the format `delete (index)`. The program will then delete the task in the list at that index. GUI displays a message"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"to notify you if the command was successful."},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"`delete 3`"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"the third numbered task should be deleted from the list and GUI displays the task that is deleted, within a confirmation message."},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"Also the number of tasks left in the list is displayed."},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"### Feature 6"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"### `Done` - Mark Task as done."},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"Command must be of the format `done (index)`. Command will then find the task in the list at the index and mark it as done. GUI displays a"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"message to notify you if the command was successful. "},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"If an already marked done task wis located at the index, it will still proceed to \"mark\" the task, even if in the end the "},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"task\u0027s state will not change."},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"GUI displays the task that is marked as done, within a confirmation message."},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":" "},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"`done 3`"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"The task at 3 will be marked as done. The next time the task is displayed, in the string "},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":" representation, the task will be ticked instead of marked with a cross. For example the "},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":" following  to do task is marked as done."},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":" "},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":" `[T][✓] Get out of the house`"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"  "},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"### Feature 7"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"### `list` - Display all the tasks"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"Command should just be of the format `list`. The GUI will then display out all the tasks in a numbered list."},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"`list`"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"GUI displays list of tasks, numbered."},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"### Feature 8"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"### Automatic sorting by date"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"The program sorts tasks by its date. Events or deadlines that are happening sooner"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"are higher up the list. Since ToDo tasks do not have any date associated with them, they will be pushed back to the end"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"of the list. If the tasks have the same date then the more recently added tasks will come later in the list."},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"The program automatically maintains the sorted property whenever you add a task to the list."},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"No input needed."},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"List of tasks displayed by the GUI will be sorted by most recent date if they are date-based tasks like Deadline or Event."},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"ToDo Tasks will be pushed to the back. "},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"### Feature 9"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"## Usage"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"### `bye` - Exit the program"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"Example of usage: "},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"`bye`"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"Expected outcome:"},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"GUI window closes and program exits."},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"##Acknowledgements"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"Special thanks to the two authors for the images. Do check out their work!."},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"@author Frieda Bredesen"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"Image DaUser.png"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"https://unsplash.com/photos/IxlY2KB4Krs?utm_source\u003dunsplash\u0026utm_medium\u003dreferral\u0026utm_content\u003dcreditShareLink"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":"@author Mark Stoop"},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":" Image DaUser.png"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":" "},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":" https://unsplash.com/photos/IxlY2KB4Krs?utm_source\u003dunsplash\u0026utm_medium\u003dreferral\u0026utm_content\u003dcreditShareLink"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":" "},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":" "}],"authorContributionMap":{"Maurice2n97":185,"-":22}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":":init"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":":end"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":":omega"}],"authorContributionMap":{"Maurice2n97":100}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.CommandResult;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeCommandParseException;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeOutOfBoundsException;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import duke.parser.CommandParser;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" * main class containing the Duke Chatbot main logic."},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private static final String STORAGE_DIRECTORY_PATH \u003d \"data\";"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private static final String STORAGE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private static final String STORAGE_INITIALIZATION_ERROR_MESSAGE \u003d \"Cannot Crete file duke.txt\";"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private static Storage storage;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    private MessageGenerator messageGenerator;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private TaskList tasks;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * Initializes and loads all the data from storage, as well as create the nexessary classes."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException when the file does not exist and Duke cannot create the file in the necessary path"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public Duke() throws IOException {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        this.messageGenerator \u003d new MessageGenerator();"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        Duke.storage \u003d initializeStorage();"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList(storage.loadStorage());"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeStorageException | DukeCommandParseException | DukeDateParseException err) {"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            // resets the tracking of the number of tasks."},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            err.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    private void createStorageFileIfNotExist() throws IOException {"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        File f \u003d new File(STORAGE_FILE_PATH);"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        if (!f.exists()) {"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            f.createNewFile();"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    private void createStorageDirectoryIfNotExist() {"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        File directory \u003d new File(STORAGE_DIRECTORY_PATH);"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        if (!directory.exists()) {"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"            directory.mkdir();"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    private Storage initializeStorage() throws IOException {"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        createStorageDirectoryIfNotExist();"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        createStorageFileIfNotExist();"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        return new Storage(\"data/duke.txt\");"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the message to display at the start of the program."},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     * @return the message to display at the when Duke is started."},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"    public String startMessage() {"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        return messageGenerator.getWelcomeMessage();"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"     * Runs the Duke logic given the input string  and gets Duke\u0027s response to the input."},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"     * @param input the string to be passed to Dyke"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"     * @return the response after Duke analyses the string"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"    public String getResponse(String input) {"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"            CommandParser commandParser \u003d new CommandParser(input);"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"            Command command \u003d commandParser.parseCommand();"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"            CommandResult commandResult \u003d command.execute(messageGenerator, tasks, storage);"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"            this.isExit \u003d commandResult.getIsExit();"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            return commandResult.getMessageToDisplay();"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeCommandParseException | DukeOutOfBoundsException | DukeDateParseException e) {"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"            return \"OOPS!!! \" + e.getMessage();"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeStorageException e) {"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"            // error saving and loading to database."},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"            return \"DATABASE ERROR!\" + e.getMessage();"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the exit flag for Duke Chatbot"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"     * @return the flag isExit. It is true if the exit Command has been executed."},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"     * Else it will be false to show Duke is still running"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    public boolean getIsExit() {"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        return isExit;"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":116,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":114,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke();"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":33}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class AddCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    private final Task taskToBeAdded;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public AddCommand(Task taskToBeAdded) {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        this.taskToBeAdded \u003d taskToBeAdded;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage)"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeStorageException {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        tasks.insertIntoSortedPosition(taskToBeAdded);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        String addMessage \u003d messageGenerator.generateAddMessage(taskToBeAdded, tasks);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(addMessage, false);"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":25}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" * The Command class provides the contract by which all commands must abide by."},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" * All commands should be able to be executed and return"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" * a command result. They must have access to the model and the storage,"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * as well as a class for generating the messages to put in the"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" * CommandResult class ( if need be)."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Command {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * Executes a sequence of high - level instructions and returns a CommandResult data structure"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     * containing the data obtained after"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * running the execute method."},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * @param messageGenerator The class to handle formatting and generating UI display messages"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * @param tasks The model of the data"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     * @param storage The class responsible to save data onto the hard disk"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * @return CommandResult, a resulting data obtained after executing the command."},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeStorageException"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeOutOfBoundsException"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    public abstract CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage)"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeStorageException, DukeOutOfBoundsException;"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":32}},{"path":"src/main/java/duke/command/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * A class containing the information to pass to Duke from Command class  after that Command is executed."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class CommandResult {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    private String messageToDisplay;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    private boolean isExit;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor that stores the necessary information"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * @param messageToDisplay the message for the GUI to display."},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * @param isExit the flag indicating if the program should stop after the command is run."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    CommandResult(String messageToDisplay, boolean isExit) {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        this.messageToDisplay \u003d messageToDisplay;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public String getMessageToDisplay() {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        return messageToDisplay;"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public boolean getIsExit() {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        return isExit;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private final int indexToDelete;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public DeleteCommand(int indexToDelete) {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToDelete \u003d indexToDelete;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage)"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeStorageException, DukeOutOfBoundsException {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        Task taskToDelete \u003d tasks.pop(indexToDelete);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        String deleteMessage \u003d messageGenerator.generateDeleteMessage(taskToDelete, tasks);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(deleteMessage, false);"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":26}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        String exitMessage \u003d messageGenerator.generateExitMessage();"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(exitMessage, true);"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class FindTaskCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public FindTaskCommand(String keyword) {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        TaskList filteredTaskList \u003d tasks.filterByWord(keyword);"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        String findTaskMessage \u003d messageGenerator.generateFindTaskMessage(filteredTaskList);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(findTaskMessage, false);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":22}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        String listMessage \u003d messageGenerator.getDisplayOfAllTasks(tasks);"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(listMessage, false);"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeOutOfBoundsException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.ui.MessageGenerator;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class MarkTaskCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private int indexToMarkDone;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public MarkTaskCommand(int indexToMarkDone) {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToMarkDone \u003d indexToMarkDone;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public CommandResult execute(MessageGenerator messageGenerator, TaskList tasks, Storage storage)"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeStorageException, DukeOutOfBoundsException {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        tasks.markTaskDone(indexToMarkDone);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        Task doneTask \u003d tasks.get(indexToMarkDone);"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        storage.saveTasks(tasks);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        String markTaskMessage \u003d messageGenerator.generateMarkTaskMessage(doneTask);"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        return new CommandResult(markTaskMessage, false);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":27}},{"path":"src/main/java/duke/exceptions/DukeCommandParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * An error that is thrown when Duke encounters error parsing the command in CommandParser."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class DukeCommandParseException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    public DukeCommandParseException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":10}},{"path":"src/main/java/duke/exceptions/DukeDateParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * A exception that is thrown when Duke encounters an error while parsing dates in Date Parser."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class DukeDateParseException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    public DukeDateParseException(String message) {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":11}},{"path":"src/main/java/duke/exceptions/DukeOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * An exception that is thrown when the program tries to access an invalid positon in the TaskList."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class DukeOutOfBoundsException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    public DukeOutOfBoundsException(String message) {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":10}},{"path":"src/main/java/duke/exceptions/DukeStorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * An exception thrown when Duke encounters an error storing or loading files in the Storage class."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class DukeStorageException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    public DukeStorageException(String message) {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":10}},{"path":"src/main/java/duke/model/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Iterator;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeOutOfBoundsException;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * Wrapper class for a List of Tasks. Supports add and remove operations, as well as additional operations"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" * to search and mark tasks as done. The tasks in the list are maintained in sorted order when tasks are added to it."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static final String OUT_OF_BOUNDS_ERROR_MESSAGE \u003d \"Sorry, the index is out of Range .\""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Try to specify a number from 1 to (the size of the list) \";"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    private List\u003cTask\u003e listOfTasks;"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     * Empty Constructor that wraps around an empty list."},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList() {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor that wraps around the provided list of tasks."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     * @param listOfTasks the task of lists to wrap around"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList(List\u003cTask\u003e listOfTasks) {"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cTask\u003e copiedListOfTasks \u003d new ArrayList\u003c\u003e(listOfTasks);"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        Collections.sort(copiedListOfTasks);"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        this.listOfTasks \u003d copiedListOfTasks;"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    private void add(Task t) {"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.add(t);"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * Adds the task to the end of the list, then sorts the TaskList."},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     * This is to ensure list remains sorted after the insertion."},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     * @param t Task to be appended on the list."},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    public void insertIntoSortedPosition(Task t) {"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        add(t);"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        sort();"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"     * Removes from the list by index ( 1 - based indexing ). Performs much like popping a task at a certain index."},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToDelete ( 1 -based indexing ) the index of the Task to delete."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * @return Task that was deleted."},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    public Task pop(int indexToDelete) throws DukeOutOfBoundsException {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        Task taskToReturn \u003d get(indexToDelete);"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.remove(indexToDelete - 1);"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        return taskToReturn;"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * gets a task at a certain index ( with 1- based indexing, so the first element starts from 0)."},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * @param index the index of the task to retrieve"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * @return a task at the index specified."},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    public Task get(int index) throws DukeOutOfBoundsException {"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        boolean isOutOfBounds \u003d (index \u003c 1) || (index \u003e listOfTasks.size());"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        if (isOutOfBounds) {"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeOutOfBoundsException(OUT_OF_BOUNDS_ERROR_MESSAGE);"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.get(index - 1);"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"     * Marks a Task as done at certain index on the list. ( 1 -based indexing )."},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToMarkDone index of Task to mark"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeOutOfBoundsException thrown when there is no available task at that index."},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    public void markTaskDone(int indexToMarkDone) throws DukeOutOfBoundsException {"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d get(indexToMarkDone);"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        task.markAsDone();"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the length of the list."},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"     * @return length of the list"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    public int size() {"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.size();"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"     * Returns iterator to iterate through the Tasks."},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"     * @return iterator to the List of Tasks."},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.iterator();"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"     * Finds all tasks whose description contains the keyword string. The match is done case insensitively."},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"     * @param keyword"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * @return"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList filterByWord(String keyword) {"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cTask\u003e filteredListOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"            String taskString \u003d currentTask.toString().toLowerCase();"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"            boolean isContainsKeyword \u003d taskString.contains(keyword.toLowerCase());"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"            if (isContainsKeyword) {"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"                filteredListOfTasks.add(currentTask);"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"        return new TaskList(filteredListOfTasks);"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"    private void sort() {"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        Collections.sort(listOfTasks);"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":139}},{"path":"src/main/java/duke/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.AddCommand;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ExitCommand;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.FindTaskCommand;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.MarkTaskCommand;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeCommandParseException;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Deadline;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Event;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.ToDo;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" * A Parser that provides certain key parsing methods on a input String to infer the relevant action to take,"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":" * which will be represented and returned as Command objects. Also has various static methods for searching strings"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":" * for date in broad format i.e ( yyyy-MM-dd)."},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"public class CommandParser {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    /* Pattern to get the first word of the String */"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern KEYWORD_AND_ARGUMENTS_PATTERN \u003d"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            Pattern.compile(\"(?\u003ckeyword\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern SINGLE_INTEGER_ARGUMENT_PATTERN \u003d"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            Pattern.compile(\"^(?\u003cintegerArgument\u003e[0-9]+)$\", Pattern.CASE_INSENSITIVE);"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern ADD_DEADLINE_ARGUMENTS_PATTERN \u003d"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            Pattern.compile(\"^(?\u003cdescription\u003e.+)\\\\s+/by\\\\s+(?\u003cby\u003e.+)$\", Pattern.CASE_INSENSITIVE);"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern ADD_EVENT_ARGUMENTS_PATTERN \u003d"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"            Pattern.compile(\"^(?\u003cdescription\u003e.+)\\\\s+/at\\\\s+(?\u003cat\u003e.+)$\", Pattern.CASE_INSENSITIVE);"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    /*Keywords for each command type*/"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_EVENT_COMMAND \u003d \"event\";"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_TODO_COMMAND \u003d \"todo\";"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    private static final String DELETE_TASK_COMMAND \u003d \"delete\";"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    private static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    private static final String MARK_DONE_COMMAND \u003d \"done\";"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    private static final String EXIT_COMMAND \u003d \"bye\";"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    private static final String PARSE_ERROR_MESSAGE \u003d \"I\u0027m sorry, \""},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            + \"but I don\u0027t know what that means :-(\";"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    private static final String DEADLINE_FORMAT_ERROR_MESSAGE \u003d \"The deadline is of incorrect format.\";"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    private static final String EVENT_FORMAT_ERROR_MESSAGE \u003d \"The event to add is of incorrect format.\";"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    private static final String EMPTY_INPUT_ERROR_MESSAGE \u003d \"The input cannot be empty\";"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INTEGER_FORMAT_ERROR_MESSAGE \u003d \"The input to the command must be integer.\";"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    /* Stores the string to Parse*/"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    private final String inputCommand;"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor for a Parser Object."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * @param inputCommand String which the Parser will parse."},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    public CommandParser(String inputCommand) {"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        this.inputCommand \u003d inputCommand.trim();"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the variable string to determine what type of Command Object should be created."},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     * @return A Command Object that represents the relevant action to execute,"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the input String does not match any of the known command formats."},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseCommand() throws DukeCommandParseException, DukeDateParseException {"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        String commandWord \u003d getKeyWord();"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        assert !this.inputCommand.equals(\"\"); //check that empty string is handled by getKeyWord"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        String arguments \u003d getArguments();"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        switch (commandWord) {"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_DEADLINE_COMMAND:"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddDeadlineArguments(arguments);"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_EVENT_COMMAND:"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddEventArguments(arguments);"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_TODO_COMMAND:"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddToDoArguments(arguments);"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        case DELETE_TASK_COMMAND:"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"            return parseDeleteCommandArguments(arguments);"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        case MARK_DONE_COMMAND:"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"            return parseMarkDoneArguments(arguments);"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        case LIST_COMMAND:"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"            return parseListCommandArguments(arguments);"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        case EXIT_COMMAND:"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            return parseExitCommandArguments(arguments);"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        case FIND_COMMAND:"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            return parseFindCommandArguments(arguments);"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(PARSE_ERROR_MESSAGE);"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the argument string following the command word."},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"     * @return the argument string"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException if it does not match the command format."},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"    public String getArguments() throws DukeCommandParseException {"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d KEYWORD_AND_ARGUMENTS_PATTERN.matcher(this.inputCommand);"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"        if (m.matches()) {"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"            return m.group(\"arguments\").trim();"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(PARSE_ERROR_MESSAGE);"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"     * check if the string is empty. Throws error if its not empty."},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be checked"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException if string is not \"\""},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    private void throwErrorIfNotEmpty(String input) throws DukeCommandParseException {"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        if (!input.equals(\"\")) {"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(PARSE_ERROR_MESSAGE);"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the Exit Command."},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments String to be parsed."},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"     * @return an exit Command."},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException the string is not of the correct Exit Command format."},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseExitCommandArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfNotEmpty(arguments);"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"        return new ExitCommand();"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the List Command."},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments String to be parsed"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"     * @return a List Command."},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when string is not of the correct List Command format."},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseListCommandArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfNotEmpty(arguments);"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"        return new ListCommand();"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"     * Check if the string is nonempty. Throws error is string is empty."},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments string to be checked"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException if the string is \"\""},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"    private void throwErrorIfEmpty(String arguments) throws DukeCommandParseException {"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"        if (arguments.equals(\"\")) {"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(EMPTY_INPUT_ERROR_MESSAGE);"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"     * Matches a string if it is just a string literal of an integer value,"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"     * and returns the matcher. Else throws exception."},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments the strng to be matched."},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"     * @return matcher the matcher that is successfully matched to an integer literal."},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException if there is no match found."},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":"    Matcher matchToInteger(String arguments) throws DukeCommandParseException {"},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(arguments);"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d SINGLE_INTEGER_ARGUMENT_PATTERN.matcher(arguments);"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"            // Unable to parse the string to integer"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(INTEGER_FORMAT_ERROR_MESSAGE);"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"            return m;"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the MarkTaskCommand format,"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to mark task as done."},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments string to be Parsed."},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":"     * @return Mark Task Command."},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException When the Command cannot be parsed."},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseMarkDoneArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d matchToInteger(arguments);"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"        int indexToMarkDone \u003d Integer.parseInt(m.group(\"integerArgument\"));"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"        return new MarkTaskCommand(indexToMarkDone);"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the DeleteCommand format,"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to mark task as done."},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments string"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"     * @return Delete Command."},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the delete is of the incorrect format."},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseDeleteCommandArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d matchToInteger(arguments);"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":"        int indexToDelete \u003d Integer.parseInt(m.group(\"integerArgument\"));"},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"        return new DeleteCommand(indexToDelete);"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the AddToDoCommand format,"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add ToDo Task."},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments string to be Parsed."},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"     * @return AddTodo Command."},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException command Todo is  of the incorrect format."},{"lineNumber":226,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":228,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddToDoArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":229,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(arguments);"},{"lineNumber":230,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new ToDo(arguments);"},{"lineNumber":231,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":232,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":234,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":235,"author":{"gitId":"Maurice2n97"},"content":"     * Matches a given argument string to the format required of a valid Add Deadline command."},{"lineNumber":236,"author":{"gitId":"Maurice2n97"},"content":"     * The matcher returned will then be"},{"lineNumber":237,"author":{"gitId":"Maurice2n97"},"content":"     * used to extract out the arguments needed by parseAddEvent."},{"lineNumber":238,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":239,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments the string to match"},{"lineNumber":240,"author":{"gitId":"Maurice2n97"},"content":"     * @return matcher containing extracted arguments."},{"lineNumber":241,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the string does not match to a valid argument."},{"lineNumber":242,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":244,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":245,"author":{"gitId":"Maurice2n97"},"content":"    Matcher matchAddDeadlineFormat(String arguments) throws DukeCommandParseException {"},{"lineNumber":246,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(arguments);"},{"lineNumber":247,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d ADD_DEADLINE_ARGUMENTS_PATTERN.matcher(arguments);"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":249,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(DEADLINE_FORMAT_ERROR_MESSAGE);"},{"lineNumber":250,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":251,"author":{"gitId":"Maurice2n97"},"content":"            return m;"},{"lineNumber":252,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":255,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":256,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the Add Deadline format,"},{"lineNumber":257,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add the Deadline."},{"lineNumber":258,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":259,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments string to be Parsed."},{"lineNumber":260,"author":{"gitId":"Maurice2n97"},"content":"     * @return add Deadline Command"},{"lineNumber":261,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the string is of incorrect format."},{"lineNumber":262,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":263,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":264,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddDeadlineArguments(String arguments)"},{"lineNumber":265,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeCommandParseException, DukeDateParseException {"},{"lineNumber":266,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d matchAddDeadlineFormat(arguments);"},{"lineNumber":267,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(\"description\");"},{"lineNumber":268,"author":{"gitId":"Maurice2n97"},"content":"        String by \u003d m.group(\"by\");"},{"lineNumber":269,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Deadline(description, by);"},{"lineNumber":270,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":271,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":272,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":273,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":274,"author":{"gitId":"Maurice2n97"},"content":"     * Matches a given argument string to the format required of a valid Add Event command."},{"lineNumber":275,"author":{"gitId":"Maurice2n97"},"content":"     * The matcher returned will then be"},{"lineNumber":276,"author":{"gitId":"Maurice2n97"},"content":"     * used to extract out the arguments needed by parseAddEvent."},{"lineNumber":277,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":278,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments the string to match"},{"lineNumber":279,"author":{"gitId":"Maurice2n97"},"content":"     * @return matcher containing extracted arguments."},{"lineNumber":280,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the string does not match to a valid argument."},{"lineNumber":281,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":282,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":283,"author":{"gitId":"Maurice2n97"},"content":"    Matcher matchAddEventFormat(String arguments) throws DukeCommandParseException {"},{"lineNumber":284,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(arguments);"},{"lineNumber":285,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d ADD_EVENT_ARGUMENTS_PATTERN.matcher(arguments);"},{"lineNumber":286,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":287,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(EVENT_FORMAT_ERROR_MESSAGE);"},{"lineNumber":288,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":289,"author":{"gitId":"Maurice2n97"},"content":"            return m;"},{"lineNumber":290,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":291,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":292,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":293,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":294,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the Add Event format,"},{"lineNumber":295,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add the Event task."},{"lineNumber":296,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":297,"author":{"gitId":"Maurice2n97"},"content":"     * @return addEvent Command"},{"lineNumber":298,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the event command is of incorrect format."},{"lineNumber":299,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":300,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":301,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddEventArguments(String arguments) throws DukeCommandParseException, DukeDateParseException {"},{"lineNumber":302,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d matchAddEventFormat(arguments);"},{"lineNumber":303,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(\"description\");"},{"lineNumber":304,"author":{"gitId":"Maurice2n97"},"content":"        String at \u003d m.group(\"at\");"},{"lineNumber":305,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Event(description, at);"},{"lineNumber":306,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":307,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":308,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":309,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":310,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the first word of the inputCommand String given to the Parser, converted to lower case."},{"lineNumber":311,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":312,"author":{"gitId":"Maurice2n97"},"content":"     * @return the first word in the string, converted to lower case."},{"lineNumber":313,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":314,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":315,"author":{"gitId":"Maurice2n97"},"content":"    public String getKeyWord() throws DukeCommandParseException {"},{"lineNumber":316,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(this.inputCommand);"},{"lineNumber":317,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d KEYWORD_AND_ARGUMENTS_PATTERN.matcher(this.inputCommand);"},{"lineNumber":318,"author":{"gitId":"Maurice2n97"},"content":"        boolean isMatch \u003d m.matches();"},{"lineNumber":319,"author":{"gitId":"Maurice2n97"},"content":"        //there will definitely be a match because string is non empty and hence contains a word."},{"lineNumber":320,"author":{"gitId":"Maurice2n97"},"content":"        assert isMatch \u003d\u003d true;"},{"lineNumber":321,"author":{"gitId":"Maurice2n97"},"content":"        return m.group(\"keyword\").toLowerCase();"},{"lineNumber":322,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":323,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":324,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":325,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":326,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":327,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it fits the Find Command format,"},{"lineNumber":328,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command class to find the task."},{"lineNumber":329,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":330,"author":{"gitId":"Maurice2n97"},"content":"     * @param arguments input to parse."},{"lineNumber":331,"author":{"gitId":"Maurice2n97"},"content":"     * @return A FindCommand"},{"lineNumber":332,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeCommandParseException when the find Command is of incorrect format."},{"lineNumber":333,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":334,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":335,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseFindCommandArguments(String arguments) throws DukeCommandParseException {"},{"lineNumber":336,"author":{"gitId":"Maurice2n97"},"content":"        throwErrorIfEmpty(arguments);"},{"lineNumber":337,"author":{"gitId":"Maurice2n97"},"content":"        return new FindTaskCommand(arguments);"},{"lineNumber":338,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":339,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":340,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":340}},{"path":"src/main/java/duke/parser/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"public class DateParser {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern DATE_FORMAT_PATTERN \u003d Pattern.compile(\"\\\\d+[-]\\\\d+[-]\\\\d+\");"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private static final String MISSING_DATE_ERROR_MESSAGE \u003d \"YOU ARE MISSING OUT A DATE IN (yyyy-mm-dd) format!\";"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    private static final String INVALID_DATE_ERROR_MESSAGE \u003d \"Date must be a valid date in the calendar!\";"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * parses the date string if it is of broad format (yyyy-MM-dd)"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * and converts it into a LocalDate object if it is of broad format (yyyy-MM-dd)"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string of only the date."},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     * @return string containing the date."},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDate parseDate(String input) {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        return LocalDate.parse(input, dateTimeFormatter);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     * Extracts date within the string in the format d-d-d, d stand for arbitrary number of digits. Only the"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * first occurrence of such a date in the form d-d-d is parsed."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be parsed."},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * @return The subtring containing the date only."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeDateParseException when the date of the required format is not found in the string."},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    public static String extractDate(String input) throws DukeDateParseException {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d DATE_FORMAT_PATTERN.matcher(input);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        if (m.find()) {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            return m.group(0);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeDateParseException(MISSING_DATE_ERROR_MESSAGE);"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     * Extracts the first occurence of a substring containing the date, and then"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     * parses it into a localDate Object."},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"     * The date substring must be in the following format (d-d-d) where d"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * represents an arbitrary number of digits."},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     * @param input the string to extract and parse the date from"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     * @return the LocalDate that is obtained from parsing the date inside the string"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeDateParseException throws error when it is not a valid date"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDate parseStringContainingDate(String input) throws DukeDateParseException {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d DateParser.extractDate(input);"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            return DateParser.parseDate(dateString);"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeDateParseException(INVALID_DATE_ERROR_MESSAGE);"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"     * Replaces all occurrences of a date inside the string with a new formatted date."},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     * All the replaced dates are in the format"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"     * (MMM-dd-yyy) for example \"Oct 9 2021\"."},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * @param stringWithOldDate string containing a date inside as a substring"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * @param newLocalDate the new local date to replace the old date."},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     * @return the resulting new string containing the formatted new date in place of the old date"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"    public static String replaceDate(String stringWithOldDate , LocalDate newLocalDate) {"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"            String oldDateString \u003d DateParser.extractDate(stringWithOldDate);"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"            String newDateString \u003d newLocalDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"            String stringWithNewDate \u003d stringWithOldDate.replaceAll(oldDateString, newDateString);"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"            return stringWithNewDate;"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeDateParseException e) {"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"            return stringWithOldDate;"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":88}},{"path":"src/main/java/duke/parser/StorageParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeCommandParseException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Deadline;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Event;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.ToDo;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" * A class containing static methods used to parse strings obtained from the local txt file into tasks."},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" * vice versa, it also converts tasks to a string to save into the txt file."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"public class StorageParser {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    private static final String STORAGE_PARSE_ERROR_MESSAGE \u003d \"Please delete contents \""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            + \"of the file data.duke and try again.\";"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     * Static method for parsing a special string representation of a Task which is used"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     * to store the Task in hard disk. Returns the corresponding Task."},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     * @param input String representation of Task as it is stored in the hard disk."},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * @return the corresponding Task."},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public static Task parseTaskFromStorageFormat(String input)"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            throws DukeCommandParseException, DukeDateParseException {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        Task parsedTask;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        String[] fields \u003d input.split(\" \\\\| \");"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        String commandCode \u003d fields[0];"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        switch (commandCode) {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        case (\"T\"):"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new ToDo(fields[2]);"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        case (\"D\"):"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Deadline(fields[2], fields[3]);"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        case (\"E\"):"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Event(fields[2], fields[3]);"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeCommandParseException(STORAGE_PARSE_ERROR_MESSAGE);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        boolean isDone \u003d (Integer.parseInt(fields[1]) \u003d\u003d 1);"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        if (isDone) {"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask.markAsDone();"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        return parsedTask;"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the string to save the task in."},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * @param task Task to be saved"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to save the task in."},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    public static String convertTaskToStorageFormat(Task task) {"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        return task.getSavedStringFormat();"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":61}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeCommandParseException;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeStorageException;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import duke.parser.StorageParser;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" * Responsible for storing and fetching the data of the tasks from the hard disk"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private static final String WRITE_FILE_EXCEPTION_MESSAGE \u003d"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            \"Unable to write to file! Check duke/data.txt file.\";"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private static final String READ_FILE_EXCEPTION_MESSAGE \u003d"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            \"Unable to read the duke/data.txt because it cant be found.\";"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    private String filePath;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath directory path to the file in which to save the tasks or load the tasks from"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public Storage(String filePath) {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    private Scanner getScannerToReadFile() throws DukeStorageException {"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        File fileSource;"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        Scanner scanner;"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            fileSource \u003d new File(filePath);"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"            scanner \u003d new Scanner(fileSource);"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        } catch (FileNotFoundException err) {"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeStorageException(READ_FILE_EXCEPTION_MESSAGE);"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        return scanner;"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    public boolean isEmpty(String line) {"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        return line.equals(\"\");"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * loads all the tasks from a file into a List."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * @return List of all tasks stored in a file"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeStorageException when unable find the file"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cTask\u003e loadStorage() throws DukeStorageException, DukeCommandParseException, DukeDateParseException {"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        Scanner scanner \u003d getScannerToReadFile();"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cTask\u003e savedListOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        while (scanner.hasNextLine()) {"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"            String line \u003d scanner.nextLine().trim();"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"            if (isEmpty(line)) {"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"                continue; //consume empty lines"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"            Task t \u003d StorageParser.parseTaskFromStorageFormat(line);"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"            savedListOfTasks.add(t);"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        return savedListOfTasks;"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    private void clearFile() throws DukeStorageException {"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        try (FileWriter fw \u003d new FileWriter(filePath);) {"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"            fw.write(\"\"); // clear the file."},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeStorageException(WRITE_FILE_EXCEPTION_MESSAGE);"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"     * saves all the Tasks inside the List to a file on the hard disk."},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"     * @param listOfTasks list of Tasks to save"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException when there is error reading or writing to the file."},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"    public void saveTasks(TaskList listOfTasks) throws DukeStorageException {"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        clearFile();"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        writeTasksToFile(listOfTasks);"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    private void writeTasksToFile(TaskList listOfTasks) throws DukeStorageException {"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(filePath, true)) {"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"            for (Task t : listOfTasks) {"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"                fileWriter.write(StorageParser.convertTaskToStorageFormat(t) + \"\\n\");"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeStorageException(WRITE_FILE_EXCEPTION_MESSAGE);"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":116}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.parser.DateParser;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A Task with a deadline to complete."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private String by;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private String byToPrint; //all dates are converted to more readable form for printing."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor. Note that it parses the first occurrence of the string \"yyyy-M-d\" that occurs"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * into a LocalDate Object and ignores any other dates inside."},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param description description of the task"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * @param by the string containing a date of the deadline in the format \"yyyy-M-d\""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    public Deadline(String description, String by) throws DukeDateParseException {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"D\");"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        this.localDate \u003d DateParser.parseStringContainingDate(by);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        this.by \u003d by;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        this.byToPrint \u003d DateParser.replaceDate(by, localDate);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation of the task, with all dates converted to format MMM d yyyy."},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation of the task."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString() + \" (by: \" + byToPrint + \")\";"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation used to save the task in the hard disk."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation to be saved in the hard disk."},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + by;"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":53}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeDateParseException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.parser.DateParser;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" * A type of Task that will happen at some point in the future."},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    protected String at;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    protected String atToPrint;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * @param description"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param at"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    public Event(String description, String at) throws DukeDateParseException {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"E\");"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        this.at \u003d at;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        this.localDate \u003d DateParser.parseStringContainingDate(at);"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        this.atToPrint \u003d DateParser.replaceDate(at, localDate);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString() + \" (at: \" + atToPrint + \")\";"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation used to save the task in the hard disk."},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation to be saved in the hard disk."},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + this.at;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":42}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * Represents a Task. Stores relevant information about the task like  basic description, the code letter that will"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * be displayed when the Task is printed, as well as the state of whether or not the Task is done."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    protected String letterCode;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    protected LocalDate localDate \u003d LocalDate.MAX;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     * @param description the description of the Task"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     * @param letterCode the letter Code to indicate the type of Task ( for text-ui displaying )"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public Task(String description, String letterCode) {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        this.letterCode \u003d letterCode;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        this.isDone \u003d false;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     * Gives a symbol to indicate the state of whether the task is done."},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"     * tick means the task is done. X means the task is not yet done ."},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     * @return tick or X symbol"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * set the state of the task to be done."},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    public void markAsDone() {"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the letter code for the task ( for example , \u0027T\u0027 for ToDo tasks );"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     * @return letter code of the type of Task"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    public String getLetterCode() {"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        return this.letterCode;"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the task in the string representation used to save the Task on the hard disk."},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     * (e.g letterCode | (1 or 0 depending on if task completed or not) | description of Task)"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string representing the task in saved format."},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        String s \u003d (isDone) ? \"1\" : \"0\";"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        return letterCode + \" | \" + s + \" | \" + description;"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"     * Return the string representation of Task ( normally for displauing purposes)."},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"     * for example the format [letterCode][ \"X \"if done else \"\"][description]"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation of Task"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        String mark \u003d getStatusIcon();"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + this.getLetterCode() + \"]\" + \"[\" + mark + \"] \" + description;"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     * Tasks are compared based on comparing the dates associated with the task."},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     * A task is greater than another task if it has"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"     * a further date and vice versa."},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"     * @param o the task to compare with this task"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"     * @return the comparator value of the two tasks, positive if t is greater than o, negative if lesser"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    public int compareTo(Task o) {"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        return this.localDate.compareTo(o.localDate);"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"     * Compares two tasks to see if they are equal. A task is qual to another task"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"     * if the string representations are equal."},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"     * @param obj to be compared with"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"     * @return a boolean value, true if the two tasks are equal to each other and false if not equal."},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"        if (obj \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"            return false;"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        } else if (obj instanceof Task) {"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"            Task other \u003d (Task) obj;"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"            return other.toString().equals(this.toString());"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"            return false;"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":109}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * A type of task that is to be done without any associated date for completion."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ToDo extends Task {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"T\");"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * String representation of Todo. For example : \"[T][] Read book\""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * @return String representation of ToDo"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString();"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":21}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * An example of a custom control using FXML."},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private Circle circleImage;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        dialog.setText(text);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        circleImage.setFill(new ImagePattern(img));"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        return new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        db.flip();"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":63}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    private static final String LOAD_ERROR_MESSAGE \u003d \"There might be a problem with initializing the necessary\""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            + \" data files in data folder, PLEASE Close the program and check the data directory\";"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private VBox dialogContainer;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private Button sendButton;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private Duke duke;"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    //@author Frieda Bredesen"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    //Image DaUser.png"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    // https://unsplash.com/photos/IxlY2KB4Krs?utm_source\u003dunsplash\u0026utm_medium\u003dreferral\u0026utm_content\u003dcreditShareLink"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    //@author Mark Stoop"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    // Image DaDuke.png"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    //https://unsplash.com/photos/IxlY2KB4Krs?utm_source\u003dunsplash\u0026utm_medium\u003dreferral\u0026utm_content\u003dcreditShareLink"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.jpg\"));"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    //@author"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    public void initialize() {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    public void setDuke() {"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            duke \u003d new Duke();"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            dialogContainer.getChildren()"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"                    .add(DialogBox.getDukeDialog(LOAD_ERROR_MESSAGE, dukeImage));"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            return;"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.startMessage(), dukeImage));"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    private void handleUserInput() {"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        );"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        userInput.clear();"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        if (duke.getIsExit()) {"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"            Platform.exit();"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":82}},{"path":"src/main/java/duke/ui/MessageGenerator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.model.TaskList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * Provides some functions which handle formatting display messages to display to the user."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class MessageGenerator {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the welcome message when first starting duke."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public String getWelcomeMessage() {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        return \"Hello! I\u0027m Monique the Monitor Lizard\\n\""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"                + \"I can help you monitor your life and beat procrastination!\\n\""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"                + \"What can I do for you?\";"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the string of all the tasks stored on the TaskList."},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public static String getDisplayOfAllTasks(TaskList listOfTasks) {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        if (listOfTasks.size() \u003d\u003d 0) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            return \"You have nothing on currently.\";"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        String output \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        int counter \u003d 1;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            output +\u003d (counter + \".\" + currentTask + \"\\n\");"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            counter++;"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        return output;"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message to display the number of tasks."},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"     * @param listOfTasks a list of Tasks to display info about"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    public static String getDisplayOfNumberOfTasks(TaskList listOfTasks) {"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        return \"Now you have \" + listOfTasks.size() + \" tasks in the list.\";"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message upon successful execution of adding a task to the list"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"     * @param taskToBeAdded the task that is added"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * @param tasks the list of tasks that is changed."},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display."},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    public String generateAddMessage(Task taskToBeAdded, TaskList tasks) {"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"        return \"Got it. I\u0027ve added this task:\\n\\t\" + taskToBeAdded + \"\\n\""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"                + MessageGenerator.getDisplayOfNumberOfTasks(tasks);"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message upon successful execution of deleting a task from the list"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"     * @param taskToDelete the task that is deleted"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"     * @param tasks the list of tasks that is changed."},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display."},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    public String generateDeleteMessage(Task taskToDelete, TaskList tasks) {"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\\t\" + taskToDelete"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"                + \"\\n\" + MessageGenerator.getDisplayOfNumberOfTasks(tasks);"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message upon successful execution of a exit command"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display."},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    public String generateExitMessage() {"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message upon successful execution of a find Task Command."},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"     * @param filteredTaskList the listOfTasks that is filtered"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display."},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    public String generateFindTaskMessage(TaskList filteredTaskList) {"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"        return \"Here are the matching tasks in your list:\" + \"\\n\""},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"                + getDisplayOfAllTasks(filteredTaskList);"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"     * Get the display message upon successful execution of a Done Command."},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"     * @param taskToMarkDone task that is marked done."},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string to display."},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"    public String generateMarkTaskMessage(Task taskToMarkDone) {"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"\\t\" + taskToMarkDone;"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":""}],"authorContributionMap":{"Maurice2n97":104}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            \u003cFont name\u003d\"System Font\" size\u003d\"17.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"      \u003cCircle fx:id\u003d\"circleImage\" fill\u003d\"DODGERBLUE\" radius\u003d\"50.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    \u003cpadding\u003e"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/padding\u003e"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Maurice2n97":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" stylesheets\u003d\"@../CSSstyles/myStyle.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"77.0\"\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"            \u003cFont name\u003d\"Microsoft Sans Serif\" size\u003d\"13.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" stylesheets\u003d\"@../CSSstyles/myStyle.css\" text\u003d\"Send\" AnchorPane.bottomAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"         \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            \u003cFont size\u003d\"16.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../CSSstyles/myStyle.css\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.rightAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            \u003ccontent\u003e"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" stylesheets\u003d\"@../CSSstyles/myStyle.css\" /\u003e"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/content\u003e"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Maurice2n97":26}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_dateIncluded_success() throws Exception {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Read book\", \"2020-03-04 2359\");"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(\"[D][✘] Read book (by: Mar 4 2020 2359)\", d.toString());"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public void savedStringFormat_checkFormat_success() throws Exception {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Do Homework\", \"2021-03-04\");"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(\"D | 0 | Do Homework | 2021-03-04\", d.getSavedStringFormat());"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_checkFormat_throwsException() {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            Deadline d \u003d new Deadline(\"do Something\", \"this date\");"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            fail(); // test should not reach this line."},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(\"YOU ARE MISSING OUT A DATE IN (yyyy-mm-dd) format!\", e.getMessage());"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":32}},{"path":"src/test/java/duke/parser/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.ParameterizedTest;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.provider.Arguments;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.provider.CsvSource;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.provider.MethodSource;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.AddCommand;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ExitCommand;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.FindTaskCommand;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ListCommand;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.MarkTaskCommand;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"import duke.exceptions.DukeCommandParseException;"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"public class CommandParserTest {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private static Stream\u003cArguments\u003e provideGetArguments() {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        return Stream.of("},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"done 3 \", \"3\"),"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"list\", \"\"),"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"deadline something /by this date \\t\" , \"something /by this date\")"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        );"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    @ParameterizedTest"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    @MethodSource(\"provideGetArguments\")"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    public void getArguments_correctArguments_success(String input, String expected) {"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(input);"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        String actual \u003d null;"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"            actual \u003d p.getArguments();"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeCommandParseException e) {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(actual, expected);"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    @ParameterizedTest"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    @CsvSource({\"done 3,done\", \"deadline something /by sometime,deadline\", \" todo task,todo\"})"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    public void getKeyWord_correctKeyword_success(String input, String expected) {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(input);"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        String actual \u003d null;"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            actual \u003d p.getKeyWord();"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeCommandParseException e) {"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(actual , expected);"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public void getKeyWord_emptyString_throwsException() {"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"            CommandParser p \u003d new CommandParser(\"\");"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"            p.getKeyWord();"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            fail(); // test should not reach this line."},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(\"The input cannot be empty\" , e.getMessage());"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_markTaskCmmand_success() {"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"done 3\");"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof MarkTaskCommand;"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_listCommand_success() {"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"list\");"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof ListCommand;"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_deadlineCommand_success() {"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"deadline something /by this date 2020-10-09 \\t\");"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof AddCommand;"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_todoCommand_success() {"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"todo task\");"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof AddCommand;"},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_exitCommand_success() {"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"bye\");"},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof ExitCommand;"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_findCommand_success() {"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"find hello world\");"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof FindTaskCommand;"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"    public void parseCommand_eventCommand_success() {"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"event something /at 2020-03-02\");"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"            boolean expected \u003d p.parseCommand() instanceof AddCommand;"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(expected, true);"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"            fail();"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"    public void matchToInteger_integerArguments_success() throws Exception {"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"done 4\");"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d p.matchToInteger(\"45\");"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(m.group(0), \"45\");"},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"    public void matchAddDeadlineFormat_correctDeadlineFormat_success() throws Exception {"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"done 3\");"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d p.matchAddDeadlineFormat(\"something /by 2020-10-09\");"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(m.group(1), \"something\");"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(m.group(2), \"2020-10-09\");"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"    public void matchAddEventFormat_correctEventFormat_success() throws Exception {"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"        CommandParser p \u003d new CommandParser(\"done 3\");"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d p.matchAddEventFormat(\"nothing /at 2020-10-04\");"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(m.group(1), \"nothing\");"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(m.group(2), \"2020-10-04\");"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":168}},{"path":"src/test/java/duke/parser/StorageParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.stream.Stream;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.ParameterizedTest;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.provider.Arguments;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.params.provider.MethodSource;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Event;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.Task;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import duke.tasks.ToDo;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"public class StorageParserTest {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private static Stream\u003cArguments\u003e parseTaskFromStorageFormatGetArguments() throws Exception {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        Event e1 \u003d new Event(\"party\", \"my house 2020-10-09\");"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        Event e2 \u003d new Event(\"Badminton\", \"your house 2020-09-08\");"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        ToDo t1 \u003d new ToDo(\"Japan trip\");"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        ToDo t2 \u003d new ToDo(\"French trip\");"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d1 \u003d new Deadline(\"homework\", \"2020-10-09\");"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d2 \u003d new Deadline(\"nothing\", \"2020-10-09\");"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        e1.markAsDone();"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        t1.markAsDone();"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        d2.markAsDone();"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        return Stream.of("},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"E | 1 | party | my house 2020-10-09\", e1),"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"E | 0 | Badminton | your house 2020-09-08\", e2),"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"T | 1 | Japan trip\", t1),"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"T | 0 | French trip\", t2),"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"D | 0 | homework | 2020-10-09\", d1),"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"                Arguments.of(\"D | 1 | nothing | 2020-10-09\", d2)"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    @ParameterizedTest"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    @MethodSource(\"parseTaskFromStorageFormatGetArguments\")"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    public void parseTaskFromStorageFormat_success(String input, Task t) throws Exception {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(StorageParser.parseTaskFromStorageFormat(input), t);"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    @ParameterizedTest"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    @MethodSource(\"parseTaskFromStorageFormatGetArguments\")"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    public void convertTaskToStorageFormat_success(String input, Task t) {"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(input, StorageParser.convertTaskToStorageFormat(t));"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":51}}]
