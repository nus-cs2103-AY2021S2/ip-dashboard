[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"checkstyle {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"test {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    useJUnitPlatform()"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"application {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    mainClassName \u003d \u0027duke.DukeGui\u0027"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"dependencies {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":43}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | read book | 2020-04-03"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | read book | 2020-03-25"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"T | 0 | lunch"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | lunch | 2020-09-03"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"T | 0 | Something"}],"authorContributionMap":{"Maurice2n97":5}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"@rem Find java.exe"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"echo location of your Java installation."},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"goto fail"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":":findJavaFromJavaHome"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"echo."},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"echo location of your Java installation."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"goto fail"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":":init"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":":win9xME_args"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"@rem Slurp the command line arguments."},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"set _SKIP\u003d2"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":":win9xME_args_slurp"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":":execute"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"@rem Setup the command line"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"@rem Execute Gradle"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":":end"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":":fail"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"exit /b 1"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":":mainEnd"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":":omega"}],"authorContributionMap":{"Maurice2n97":100}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A Task with a deadline to complete."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Deadline extends duke.Task {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    private String by;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private LocalDate dateOfDeadline;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * @param description description of the task"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * @param by the string containing a date of the deadline."},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"D\");"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(by);"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        if (!dateString.equals(\"\")) {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            this.dateOfDeadline \u003d Parser.parseDate(dateString);"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            this.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalArgumentException(\"Sorry Unable to Parse date for Deadline. \""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Did you try to do it in yyyy-mm-dd format?\");"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation of the task, with all dates converted to format MMM d yyyy."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation of the task."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(by);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        String convertedDateString \u003d dateOfDeadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        String modifiedBy \u003d by.replaceAll(dateString, convertedDateString);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString() + \" (by: \" + modifiedBy + \")\";"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation used to save the task in the hard disk."},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation to be saved in the hard disk."},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + by;"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":57}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * main class containing the Duke Chatbot main logic."},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    private static Storage storage;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    private boolean isExit \u003d false;"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    Duke() {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        this.storage \u003d initializeStorage();"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList(storage.loadStorage());"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeException err) {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private Storage initializeStorage() {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        File directory \u003d new File(\"data\"); // Check if directory exists."},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        if (!directory.exists()) {"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"            directory.mkdir();"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        if (!f.exists()) {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"                f.createNewFile();"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"                e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        return new Storage(\"data/duke.txt\");"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    public String start(){"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        return ui.displayWelcomeMessage();"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    public String run(String input) {"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"            Parser parser \u003d new Parser(input);"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            Command command \u003d parser.parseCommand();"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"            command.execute(ui, tasks, storage);"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            this.isExit \u003d command.shouldExit();"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"            return ui.getMessageToDisplay();"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        } catch (DukeException e) {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"            return \"OOPS!!! \" + e.getMessage();"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    boolean shouldExit(){"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        return isExit;"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":65,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":7}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A type of Task that will happen at some point in the future."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    protected String at;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    protected LocalDate dateOfEvent;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * @param description"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * @param at"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public Event(String description, String at) {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"E\");"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(at);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        if (!dateString.equals(\"\")) {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            this.dateOfEvent \u003d Parser.parseDate(dateString);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            this.at \u003d at;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalArgumentException(\"Sorry Unable to Parse Date for Event. \""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Did you put in yyyy-mm-dd format?\");"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(at);"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        String convertedDateString \u003d dateOfEvent.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        String modifiedAt \u003d at.replaceAll(dateString, convertedDateString);"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString() + \" (at: \" + modifiedAt + \")\";"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * Gets the string representation used to save the task in the hard disk."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation to be saved in the hard disk."},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + this.at;"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":50}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.start(), dukeImage));"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    private void handleUserInput() {"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        String response \u003d duke.run(input);"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        userInput.clear();"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":52}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.AddCommand;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.FindTaskCommand;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.MarkTaskCommand;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":" * A Parser that provides certain key parsing methods on a input String to infer the relevant action to take,"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":" * which will be represented and returned as Command objects. Also has various static methods for searching strings"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":" * for date in broad format i.e ( yyyy-MM-dd)."},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"public class Parser {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    /* Pattern to get the first word of the String */"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private static final Pattern GET_KEYWORD \u003d Pattern.compile(\"(\\\\S+).*\");"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    /*Keywords for each command type*/"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_DEADLINE_COMMAND \u003d \"deadline\";"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_EVENT_COMMAND \u003d \"event\";"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private static final String ADD_TODO_COMMAND \u003d \"todo\";"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    private static final String DELETE_TASK_COMMAND \u003d \"delete\";"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    private static final String LIST_COMMAND \u003d \"list\";"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    private static final String MARK_DONE_COMMAND \u003d \"done\";"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    private static final String EXIT_COMMAND \u003d \"bye\";"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    private static final String FIND_COMMAND \u003d \"find\";"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    /* Stores the string to Parse*/"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    private String inputCommand;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor for a Parser Object."},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * @param inputCommand String which the Parser will parse."},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    Parser(String inputCommand) {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        this.inputCommand \u003d inputCommand;"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"     * Static method for parsing a special string representation of a Task which is used"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * to store the Task in hard disk. Returns the corresponding Task."},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     * @param input String representation of Task as it is stored in the hard disk."},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * @return the corresponding Task."},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public static Task parseTaskFromStoredFormat(String input) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        String[] fields \u003d input.split(\" \\\\| \");"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        String commandCode \u003d fields[0];"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        Task parsedTask;"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        switch (commandCode) {"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        case (\"T\"):"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new ToDo(fields[2]);"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        case (\"D\"):"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Deadline(fields[2], fields[3]);"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        case (\"E\"):"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Event(fields[2], fields[3]);"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        //default case throw a ParseError to be defined later..."},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"Please delete contents of the file data.duke and try again.\");"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        boolean isDone \u003d (Integer.parseInt(fields[1]) \u003d\u003d 1);"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"        if (isDone \u0026\u0026 (parsedTask !\u003d null)) {"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask.markAsDone();"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"        return parsedTask;"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"     * Extracts date within the string in the format d - d - d, d stand for arbitrary number of digits."},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be parsed."},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"     * @return The subtring containing the date only."},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"    public static String extractDate(String input) {"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"\\\\d+[-]\\\\d+[-]\\\\d+\";"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        Pattern datePattern \u003d Pattern.compile(regex);"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d datePattern.matcher(input);"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"        if (m.find()) {"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            return m.group(0);"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            return \"\";"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"     * parses the date and returns the string containing the date if it is of broad format ( yyyy-MM-dd)"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be parsed."},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"     * @return string containing the date."},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDate parseDate(String input) {"},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"        return LocalDate.parse(input, dateTimeFormatter);"},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the variable string to determine what type of Command Object should be created."},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"     * @return A Command Object that represents the relevant action to execute,"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the input String does not match any of the known command formats."},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseCommand() throws DukeException {"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"        String command \u003d getKeyWord(inputCommand).toLowerCase();"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"        Task t;"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":"        switch (command) {"},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_DEADLINE_COMMAND:"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddDeadline(inputCommand);"},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_EVENT_COMMAND:"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddEvent(inputCommand);"},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_TODO_COMMAND:"},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddToDo(inputCommand);"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":"        case DELETE_TASK_COMMAND:"},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"            return parseDelete(inputCommand);"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"        case MARK_DONE_COMMAND:"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"            return parseMarkDone(inputCommand);"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"        case LIST_COMMAND:"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"            return parseListCommand(inputCommand);"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"        case EXIT_COMMAND:"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"            return parseExitCommand(inputCommand);"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        case FIND_COMMAND:"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"            return parseFindCommand(inputCommand);"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the Exit Command."},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"     * @param inputCommand String to be parsed."},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"     * @return an exit Command."},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException the string is not of the correct Exit Command format."},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseExitCommand(String inputCommand) throws DukeException {"},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d EXIT_COMMAND + \"\\\\s*\";"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"        if (!inputCommand.toLowerCase().matches(regex)) {"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"        return new ExitCommand();"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the List Command."},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"     * @param inputCommand String to be parsed"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"     * @return a List Command."},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when string is not of the correct List Command format."},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseListCommand(String inputCommand) throws DukeException {"},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d LIST_COMMAND + \"\\\\s*\";"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"        if (!inputCommand.toLowerCase().matches(regex)) {"},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"        return new ListCommand();"},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the MsrkTaskCommand format,"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to mark task as done."},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be Parsed."},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"     * @return Mark Task Command."},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException When the Command cannot be parsed."},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseMarkDone(String input) throws DukeException {"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"done\" in the input string is followed by variable number of space."},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^done\\\\s*$\")) {"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"        // \"done\" followed by at least one space and at least one number."},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^done\\\\s+([0-9]+)$\";"},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"            // Unable to parse the string following \"done \""},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for done must be integer.\");"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":"        int indexToMarkDone \u003d Integer.parseInt(m.group(1));"},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":"        return new MarkTaskCommand(indexToMarkDone);"},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"    // Methods for extracting dates and formatting dates."},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the DeleteCommand format,"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to mark task as done."},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"     * @return Delete Command."},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the delete is of the incorrect format."},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseDelete(String input) throws DukeException {"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"delete\" is followed by variable number of space."},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^delete\\\\s*$\")) {"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^delete\\\\s+([0-9]+)$\"; //delete followed by at least one space and one number."},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for delete must be integer.\");"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"        int indexToDelete \u003d Integer.parseInt(m.group(1));"},{"lineNumber":226,"author":{"gitId":"Maurice2n97"},"content":"        return new DeleteCommand(indexToDelete);"},{"lineNumber":227,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":229,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":230,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the AddToDoCommand format,"},{"lineNumber":231,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add ToDo Task."},{"lineNumber":232,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be Parsed."},{"lineNumber":234,"author":{"gitId":"Maurice2n97"},"content":"     * @return AddTodo Command."},{"lineNumber":235,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException command Todo is  of the incorrect format."},{"lineNumber":236,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":237,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":238,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddToDo(String input) throws DukeException {"},{"lineNumber":239,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^todo\\\\s*$\")) {"},{"lineNumber":240,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":241,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^todo\\\\s+(.+)$\";"},{"lineNumber":243,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":244,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":245,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":246,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The todo is of incorrect format.\");"},{"lineNumber":247,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":249,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new ToDo(description);"},{"lineNumber":250,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":251,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the Add Deadline format,"},{"lineNumber":255,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add the Deadline."},{"lineNumber":256,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string to be Parsed."},{"lineNumber":258,"author":{"gitId":"Maurice2n97"},"content":"     * @return add Deadline Command"},{"lineNumber":259,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the string is of incorrect format."},{"lineNumber":260,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":261,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":262,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddDeadline(String input) throws DukeException {"},{"lineNumber":263,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^deadline\\\\s*$\")) {"},{"lineNumber":264,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":265,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\";"},{"lineNumber":267,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":268,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":269,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":270,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The deadline is of incorrect format.\");"},{"lineNumber":271,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":273,"author":{"gitId":"Maurice2n97"},"content":"        String by \u003d m.group(2);"},{"lineNumber":274,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Deadline(description, by);"},{"lineNumber":275,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":276,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":278,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it is of the Add Event format,"},{"lineNumber":280,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command to add the Event task."},{"lineNumber":281,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":282,"author":{"gitId":"Maurice2n97"},"content":"     * @return addEvent Command"},{"lineNumber":283,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the event command is of incorrect format."},{"lineNumber":284,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":285,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":286,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddEvent(String input) throws DukeException {"},{"lineNumber":287,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^event\\\\s*$\")) {"},{"lineNumber":288,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");"},{"lineNumber":289,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":290,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^event\\\\s+(.+)\\\\s+/at\\\\s+(.+)$\";"},{"lineNumber":291,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":292,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":293,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":294,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The event is of incorrect format.\");"},{"lineNumber":295,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":297,"author":{"gitId":"Maurice2n97"},"content":"        String at \u003d m.group(2);"},{"lineNumber":298,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Event(description, at);"},{"lineNumber":299,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":300,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":301,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":302,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":303,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the first word of a string."},{"lineNumber":304,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":305,"author":{"gitId":"Maurice2n97"},"content":"     * @param inputCommand The string to extract the first word from."},{"lineNumber":306,"author":{"gitId":"Maurice2n97"},"content":"     * @return the first word of the string."},{"lineNumber":307,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":308,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":309,"author":{"gitId":"Maurice2n97"},"content":"    public String getKeyWord(String inputCommand) {"},{"lineNumber":310,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d GET_KEYWORD.matcher(this.inputCommand);"},{"lineNumber":311,"author":{"gitId":"Maurice2n97"},"content":"        m.matches();"},{"lineNumber":312,"author":{"gitId":"Maurice2n97"},"content":"        return m.group(1);"},{"lineNumber":313,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":314,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":315,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":316,"author":{"gitId":"Maurice2n97"},"content":"     * Parses the input to see if it fits the Find Command format,"},{"lineNumber":317,"author":{"gitId":"Maurice2n97"},"content":"     * if so returns the Command class to find the task."},{"lineNumber":318,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":319,"author":{"gitId":"Maurice2n97"},"content":"     * @param input input to parse."},{"lineNumber":320,"author":{"gitId":"Maurice2n97"},"content":"     * @return A FindCommand"},{"lineNumber":321,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the find Command is of incorrect format."},{"lineNumber":322,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":323,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":324,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseFindCommand(String input) throws DukeException {"},{"lineNumber":325,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^\" + FIND_COMMAND + \"\\\\s*$\")) {"},{"lineNumber":326,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a find Command cannot be empty.\");"},{"lineNumber":327,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"(\\\\S+)\\\\s+(.+)\";"},{"lineNumber":329,"author":{"gitId":"Maurice2n97"},"content":"        Pattern pattern \u003d Pattern.compile(regex);"},{"lineNumber":330,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d pattern.matcher(input);"},{"lineNumber":331,"author":{"gitId":"Maurice2n97"},"content":"        m.matches();"},{"lineNumber":332,"author":{"gitId":"Maurice2n97"},"content":"        return new FindTaskCommand(m.group(2).trim());"},{"lineNumber":333,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":335,"author":{"gitId":"Maurice2n97"},"content":"    public static class ParseException extends Exception {"},{"lineNumber":336,"author":{"gitId":"Maurice2n97"},"content":"        ParseException(String message) {"},{"lineNumber":337,"author":{"gitId":"Maurice2n97"},"content":"            super(message);"},{"lineNumber":338,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":339,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":340,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":340}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":" * Responsible for storing and fetching the data of the tasks from the hard disk"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private String filePath;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     * @param filePath directory path to the file in which to save the tasks or load the tasks from"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"     * loads all the tasks from a file into a List."},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"     * @return List of all tasks stored in a file"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when unable find the file"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    public List\u003cTask\u003e loadStorage() throws DukeException {"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cTask\u003e savedListOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            File fileSource \u003d new File(filePath);"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            Scanner scanner \u003d new Scanner(fileSource);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"                String line \u003d scanner.nextLine();"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"                Task t \u003d Parser.parseTaskFromStoredFormat(line);"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"                savedListOfTasks.add(t);"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            return savedListOfTasks;"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        } catch (FileNotFoundException err) {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"Error fetching data from Storage in the desired format.\");"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * saves all the Tasks inside the List to a file on the hard disk."},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     * @param listOfTasks list of Tasks to save"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * @throws IOException when there is error reading or writing to the file."},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    public void saveTasks(TaskList listOfTasks) throws IOException {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        fw.write(\"\"); // clear the file."},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        fw.close();"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        FileWriter fileWriterToAppend \u003d new FileWriter(filePath, true);"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        for (Task t : listOfTasks) {"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"            fileWriterToAppend.write(t.getSavedStringFormat() + \"\\n\");"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        fileWriterToAppend.close();"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":69}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * Represents a Task. Stores relevant information about the task like  basic description, the code letter that will"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" * be displayed when the Task is printed, as well as the state of whether or not the Task is done."},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    protected String letterCode;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * @param description the description of the Task"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     * @param letterCode the letter Code to indicate the type of Task ( for text-ui displaying )"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public Task(String description, String letterCode) {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        this.letterCode \u003d letterCode;"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * Gives a symbol to indicate the state of whether the task is done."},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     * tick means the task is done. X means the task is not yet done ."},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"     * @return tick or X symbol"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    public String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); // return tick or X symbols"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     * set the state of the task to be done."},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    public void markAsDone() {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        isDone \u003d true;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the letter code for the task ( for example , \u0027T\u0027 for ToDo tasks );"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * @return letter code of the type of Task"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"    public String getLetterCode() {"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        return this.letterCode;"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the task in the string representation used to save the Task on the hard disk."},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     * (e.g letterCode | (1 or 0 depending on if task completed or not) | description of Task)"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     * @return the string representing the task in saved format."},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"        String s \u003d (isDone) ? \"1\" : \"0\";"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        return letterCode + \" | \" + s + \" | \" + description;"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"     * Return the string representation of Task ( normally for displauing purposes)."},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"     * for example the format [letterCode][ \"X \"if done else \"\"][description]"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"     * @return string representation of Task"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        String mark \u003d (isDone ? \"X\" : \" \");"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + this.getLetterCode() + \"]\" + \"[\" + mark + \"] \" + description;"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    public String getDescription() {"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"        return this.description;"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":79}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" * Wrapper class for a List of Tasks. Supports add and remove operations, as well as additional operations"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":" * to search and mark tasks as done."},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private static List\u003cTask\u003e listOfTasks;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     * Empty Constructor that wraps around an empty list."},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     * Constructor with 1 input."},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     * @param listOfTasks the task of lists to wrap around"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList(List\u003cTask\u003e listOfTasks) {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        TaskList.listOfTasks \u003d listOfTasks;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * Adds the task to the end of the list, much like append."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * @param t Task to be appended on the list."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public void add(Task t) {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.add(t);"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"     * Removes from the list by index ( 1 - based indexing ). Performs much like popping a task at a certain index."},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToDelete ( 1 -based indexing ) the index of the Task to delete."},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"     * @return Task that was deleted."},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"    public Task delete(int indexToDelete) {"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"        Task taskToReturn \u003d listOfTasks.get(indexToDelete - 1);"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        listOfTasks.remove(indexToDelete - 1);"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        return taskToReturn;"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"     * Marks a Task as done at certain index on the list. ( 1 -based indexing _"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"     * @param indexToMarkDone index of Task to mark"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"     * @return Task that is marked"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"    public Task markTaskDone(int indexToMarkDone) {"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d listOfTasks.get(indexToMarkDone - 1);"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        task.markAsDone();"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        return task;"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the length of the list."},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"     * @return length of the list"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"    public int size() {"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.size();"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"     * Returns iterator to iterate through the Tasks."},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     * @return iterator to the List of Tasks."},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.iterator();"},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"     * Finds all tasks whose description contains the keyword. The match is done case insensitively."},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"     * @param keyword"},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"     * @return"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"    public TaskList filterByWord(String keyword) {"},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"        List\u003cTask\u003e filteredListOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"            String description \u003d currentTask.getDescription().toLowerCase();"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"            boolean isContainsKeyword \u003d description.contains(keyword.toLowerCase());"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"            if (isContainsKeyword) {"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":"                filteredListOfTasks.add(currentTask);"},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"        return new TaskList(filteredListOfTasks);"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":105}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" * A type of task that is to be done without any associated date for completion."},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ToDo extends Task {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    public ToDo(String description) {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"T\");"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * String representation of Todo. For example : \"[T][] Read book\""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * @return String representation of ToDo"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        return super.toString();"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":21}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":" * Handles the User interface interactions with the user. Provides various methods to read in the command"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * and print out things to display."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    /*logo for welcome message.*/"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private static final String DIVIDER \u003d"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            \"\\n_______________________________________________________\\n\";"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    private Scanner scForCommandLine \u003d new Scanner(System.in);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    private String messageToDisplay \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the welcome message when first starting duke."},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    public String displayWelcomeMessage() {"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        return \"Hello from\\n\" + LOGO + \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * gets a line of user input from Command line, trimmed."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"     * @return String containing a line input from user."},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public String getUserCommand() {"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        String input;"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        do {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            input \u003d scForCommandLine.nextLine().trim();"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        } while (shouldIgnore(input));"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"        return input;"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"     * Ignores input if string does not contain any non-space characters. ( Could have multiple spaces,tabs etc)"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     * @return true a boolean value to indicate if the string is to be ignored."},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"    public boolean shouldIgnore(String input) {"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        if (input.trim().equals(\"\")) {"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            return true;"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            return false;"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"     * Returns the string of all the tasks stored on the TaskList."},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    public static String getDisplayOfAllTasks(TaskList listOfTasks) {"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        String output \u003d \"\";"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"        int counter \u003d 1;"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"            output +\u003d (counter + \".\" + currentTask + \"\\n\");"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"            counter++;"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"        return output;"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    public static String getDisplayOfNumberOfTasks(TaskList listOfTasks) {"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":"        return \"Now you have \" + listOfTasks.size() + \" tasks in the list.\";"},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    public void setDisplayMessage(String messageToDisplay){"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"        this.messageToDisplay \u003d messageToDisplay;"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"    public String getMessageToDisplay() {"},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"        return messageToDisplay;"},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":""}],"authorContributionMap":{"Maurice2n97":88}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class AddCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private final Task taskToBeAdded;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public AddCommand(Task tasktoBeAdded) {"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        this.taskToBeAdded \u003d tasktoBeAdded;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        tasks.add(taskToBeAdded);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException err) {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(\"Error in loading storage from addCommand.execute...Check data/duke.txt\");"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            this.isExit \u003d true;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        String displayMessage \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + taskToBeAdded + \"\\n\""},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                + Ui.getDisplayOfNumberOfTasks(tasks);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(displayMessage);"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    protected boolean isExit \u003d false;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public abstract void execute(Ui ui, TaskList tasks, Storage storage);"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public boolean shouldExit() {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        return isExit;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":16}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private final int indexToDelete;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    public DeleteCommand(int indexToDelete) {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToDelete \u003d indexToDelete;"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d tasks.delete(indexToDelete);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException err) {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"            this.isExit \u003d true;"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        String messageToDisplay \u003d \"Noted. I\u0027ve removed this task:\\n\\t\" + task"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"                + \"\\n\" + Ui.getDisplayOfNumberOfTasks(tasks);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(messageToDisplay);"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":30}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(\"Bye. Hope to see you again soon!\");"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        this.isExit \u003d true;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class FindTaskCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public FindTaskCommand(String keyword) {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        TaskList filteredTaskList \u003d tasks.filterByWord(keyword);"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(\"Here are the matching tasks in your list:\" + \"\\n\" +"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"                ui.getDisplayOfAllTasks(filteredTaskList) );"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":22}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(ui.getDisplayOfAllTasks(tasks))"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        ;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class MarkTaskCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    private int indexToMarkDone;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public MarkTaskCommand(int indexToMarkDone) {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToMarkDone \u003d indexToMarkDone;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    public void execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d tasks.markTaskDone(indexToMarkDone);"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        ui.setDisplayMessage(\"Nice! I\u0027ve marked this task as done:\\n\" + \"\\t\" + task);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":21}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Maurice2n97":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Maurice2n97":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_dateIncluded_success() throws Exception {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Read book\", \"2020-03-04 2359\");"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals( \"[D][ ] Read book (by: Mar 4 2020 2359)\",d.toString());"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public void savedStringFormat_checkFormat_success() throws Exception {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Do Homework\", \"2021-03-04\");"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(\"D | 0 | Do Homework | 2021-03-04\", d.getSavedStringFormat());"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_checkFormat_throwsException() {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            Deadline d \u003d new Deadline(\"do Something\", \"this date\");"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            fail(); // test should not reach this line."},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(\"Sorry Unable to Parse date for Deadline. \""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Did you try to do it in yyyy-mm-dd format?\", e.getMessage());"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":31}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.DynamicTest;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class DukeTest {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public void dummyTest() {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(2,2);"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"deadline read book /by 1997-12-02 1800"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at next Thursday 2010-01-12"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"deadline cs2103 assignment /by Thursday 1992-2-04"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at 2007-11-03"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"deadline"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"todo lunch"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"event"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"blahff"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"delete 5"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"bye"}],"authorContributionMap":{"Maurice2n97":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"java -classpath ../bin/ duke/Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Maurice2n97":2,"-":36}}]
