[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | read book | 2020-04-03"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | read book | 2020-03-25"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"D | 1 | read book | 2020-3-4"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"D | 0 | something | 2020-09-08"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"E | 0 | hi | 2020-01-22"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"T | 0 | lunch"}],"authorContributionMap":{"Maurice2n97":6}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A Task with a deadline to complete."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    private String by;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private LocalDate dateOfDeadline;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public Deadline(String description,String by) {"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"D\");"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(by);"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        if (!dateString.equals(\"\")) {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            this.dateOfDeadline \u003d Parser.parseDate(dateString);"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalArgumentException(\"Sorry Unable to Parse date for Deadline. \""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Did you try to do it in yyyy-mm-dd format?\");"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(by);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        String convertedDateString \u003d dateOfDeadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));  // convert the format"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        String modified_by \u003d by.replaceAll(dateString, convertedDateString);"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + this.getLetterCode() + \"]\" + super.toString() + \" (by: \" + modified_by + \")\";"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + by;"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":39}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":" * main class containing the Duke Chatbot main logic."},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private static Storage storage;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    TaskList tasks;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    Duke() {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        this.storage \u003d initializeStorage();"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList(storage.loadStorage());"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        } catch ( DukeException err) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    private Storage initializeStorage() {"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        File directory \u003d new File(\"data\"); // Check if directory exists."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        if (!directory.exists()) {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"            directory.mkdir();"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        File f \u003d new File(\"data/duke.txt\");"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        if (!f.exists()) {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"                f.createNewFile();"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"            } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"                e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        return new Storage(\"data/duke.txt\");"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"    public void run() {"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"        ui.displayWelcomeMessage();"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        boolean isExit \u003d false; // set to false is a command fails to execute exit command"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"        while (!isExit) {"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"                String input \u003d ui.getUserCommand();"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"                Parser parser \u003d new Parser(input);"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"                Command command \u003d parser.parseCommand();"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"                boolean isExecutionSuccess \u003d command.execute(ui, tasks, storage);"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"                isExit \u003d !isExecutionSuccess;"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"            } catch (DukeException e) {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"                System.out.println(\"OOPS!!! \" + e.getMessage());"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    public static void main(String[] args) {"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":"        Duke chatbot  \u003d new Duke();"},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"        chatbot.run();"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Maurice2n97":67,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":7}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":" * A type of Task that will happen at some point in the future."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    protected String at;"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    protected LocalDate dateOfEvent;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public Event(String description,String at) {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"E\");"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(at);"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        if (!dateString.equals(\"\")) {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"            this.dateOfEvent \u003d Parser.parseDate(dateString);"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"            this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"            throw new IllegalArgumentException(\"Sorry Unable to Parse Date for Event. Did you put in yyyy-mm-dd format?\");"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        String dateString \u003d Parser.extractDate(at);"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        String convertedDateString \u003d dateOfEvent.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));  // convert the format"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        String modified_at \u003d at.replaceAll(dateString, convertedDateString);"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + this.getLetterCode() + \"]\" + super.toString() + \" (at: \" + modified_at + \")\";"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        return super.getSavedStringFormat() + \" | \" + this.at;"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":36}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * A class containing static methods to parse input String for more information of what type of event it is."},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * Initialise a Parser that accepts in a String input Command, which it can Parse and determine the appropriate CommandType"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     * to issue to the caller."},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    private String inputCommand;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"    //list of keyword Constants."},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    private final static String ADD_DEADLINE_COMMAND  \u003d \"deadline\";"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"    private final static String ADD_EVENT_COMMAND  \u003d \"event\";"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    private final static String ADD_TODO_COMMAND \u003d \"todo\";"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"    private final static String DELETE_TASK_COMMAND \u003d \"delete\";"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    private final static String LIST_COMMAND \u003d \"list\";"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"    private final static String MARK_DONE_COMMAND \u003d \"done\";"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    private final static String EXIT_COMMAND \u003d \"bye\";"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    private static Pattern GET_KEYWORD \u003d Pattern.compile(\"(\\\\S+).*\");"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    Parser(String inputCommand) {"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        this.inputCommand \u003d inputCommand;"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseCommand() throws DukeException{"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        String command \u003d getKeyWord(inputCommand).toLowerCase();"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"        Task t;"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"        switch(command) {"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_DEADLINE_COMMAND:"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddDeadline(inputCommand);"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_EVENT_COMMAND:"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddEvent(inputCommand);"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"        case ADD_TODO_COMMAND :"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"            return parseAddToDo(inputCommand);"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"        case DELETE_TASK_COMMAND:"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"            return parseDelete(inputCommand);"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"        case MARK_DONE_COMMAND:"},{"lineNumber":50,"author":{"gitId":"Maurice2n97"},"content":"            return parseMarkDone(inputCommand);"},{"lineNumber":51,"author":{"gitId":"Maurice2n97"},"content":"        case LIST_COMMAND:"},{"lineNumber":52,"author":{"gitId":"Maurice2n97"},"content":"            return parseListCommand(inputCommand);"},{"lineNumber":53,"author":{"gitId":"Maurice2n97"},"content":"        case EXIT_COMMAND:"},{"lineNumber":54,"author":{"gitId":"Maurice2n97"},"content":"            return parseExitCommand(inputCommand);"},{"lineNumber":55,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":56,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":57,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseExitCommand(String inputCommand) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d EXIT_COMMAND +\"\\\\s*\";"},{"lineNumber":61,"author":{"gitId":"Maurice2n97"},"content":"        if (!inputCommand.toLowerCase().matches(regex)) {"},{"lineNumber":62,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":63,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Maurice2n97"},"content":"        return new ExitCommand();"},{"lineNumber":65,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":67,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseListCommand(String inputCommand) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d LIST_COMMAND +\"\\\\s*\";"},{"lineNumber":69,"author":{"gitId":"Maurice2n97"},"content":"        if (!inputCommand.toLowerCase().matches(regex)) {"},{"lineNumber":70,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":71,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Maurice2n97"},"content":"        return new ListCommand();"},{"lineNumber":73,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":75,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":76,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":77,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Maurice2n97"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"Maurice2n97"},"content":"     * parse a string input MARK_DONE command to obtain the index of the task to mark as done."},{"lineNumber":80,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string."},{"lineNumber":81,"author":{"gitId":"Maurice2n97"},"content":"     * @return  the index of the task to mark done."},{"lineNumber":82,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException for the case when done is empty or when the integer cannot be parsed."},{"lineNumber":83,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":85,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseMarkDone(String input) throws DukeException {"},{"lineNumber":86,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"done\" in the input string is followed by variable number of space."},{"lineNumber":87,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^done\\\\s*$\")) {"},{"lineNumber":88,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":89,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^done\\\\s+([0-9]+)$\"; // \"done\" followed by at least one space and at least one number."},{"lineNumber":91,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":92,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":93,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":94,"author":{"gitId":"Maurice2n97"},"content":"            // Unable to parse the string following \"done \""},{"lineNumber":95,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for done must be integer.\");"},{"lineNumber":96,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"Maurice2n97"},"content":"        int indexToMarkDone \u003d Integer.parseInt(m.group(1));"},{"lineNumber":98,"author":{"gitId":"Maurice2n97"},"content":"        return new MarkTaskCommand(indexToMarkDone);"},{"lineNumber":99,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":101,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Maurice2n97"},"content":"     * Reads in a REMOVE_TASK command. Parses the string to obtain the index of the task to be deleted."},{"lineNumber":103,"author":{"gitId":"Maurice2n97"},"content":"     * Prints out a message to tell the user the task is deleted"},{"lineNumber":104,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":105,"author":{"gitId":"Maurice2n97"},"content":"     * @return index of the task to be deleted."},{"lineNumber":106,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the delete is of the incorrect format or is empty."},{"lineNumber":107,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":109,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseDelete(String input) throws DukeException{"},{"lineNumber":110,"author":{"gitId":"Maurice2n97"},"content":"        //for the case when \"delete\" is followed by variable number of space."},{"lineNumber":111,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^delete\\\\s*$\")) {"},{"lineNumber":112,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input cannot be empty.\");"},{"lineNumber":113,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^delete\\\\s+([0-9]+)$\"; //delete followed by at least one space and one number."},{"lineNumber":115,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":116,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":117,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":118,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The input for delete must be integer.\");"},{"lineNumber":119,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"Maurice2n97"},"content":"        int indexToDelete \u003d Integer.parseInt(m.group(1));"},{"lineNumber":121,"author":{"gitId":"Maurice2n97"},"content":"        return new DeleteCommand(indexToDelete);"},{"lineNumber":122,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":124,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"Maurice2n97"},"content":"     * parses an input of the Command type ADD_TODO and returns the corresponding ToDo Task."},{"lineNumber":126,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":127,"author":{"gitId":"Maurice2n97"},"content":"     * @return ToDo Task."},{"lineNumber":128,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException command Todo is empty or of the incorrect format."},{"lineNumber":129,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":131,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddToDo (String input) throws DukeException{"},{"lineNumber":132,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^todo\\\\s*$\")) {"},{"lineNumber":133,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":134,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^todo\\\\s+(.+)$\";"},{"lineNumber":136,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":137,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":138,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":139,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The todo is of incorrect format.\");"},{"lineNumber":140,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":142,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new ToDo(description);"},{"lineNumber":143,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":144,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":146,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"Maurice2n97"},"content":"     * parses a string input of the ADD_DEADLINE command and returns the corresponidng deadline class."},{"lineNumber":148,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":149,"author":{"gitId":"Maurice2n97"},"content":"     * @return Deadline to be added."},{"lineNumber":150,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the deadline is empty."},{"lineNumber":151,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":153,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddDeadline(String input) throws DukeException {"},{"lineNumber":154,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^deadline\\\\s*$\")) {"},{"lineNumber":155,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":156,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^deadline\\\\s+(.+)\\\\s+/by\\\\s+(.+)$\";"},{"lineNumber":158,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":159,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":160,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()){"},{"lineNumber":161,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The deadline is of incorrect format.\");"},{"lineNumber":162,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":163,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":164,"author":{"gitId":"Maurice2n97"},"content":"        String by \u003d m.group(2);"},{"lineNumber":165,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Deadline(description,by);"},{"lineNumber":166,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":167,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":169,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":170,"author":{"gitId":"Maurice2n97"},"content":"     * parses an input of the type ADD_EVENT, returns the correspoinding event class."},{"lineNumber":171,"author":{"gitId":"Maurice2n97"},"content":"     * @param input string"},{"lineNumber":172,"author":{"gitId":"Maurice2n97"},"content":"     * @return Event Task"},{"lineNumber":173,"author":{"gitId":"Maurice2n97"},"content":"     * @throws DukeException when the event command is empty or of incorrect format."},{"lineNumber":174,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":176,"author":{"gitId":"Maurice2n97"},"content":"    public Command parseAddEvent(String input) throws DukeException{"},{"lineNumber":177,"author":{"gitId":"Maurice2n97"},"content":"        if (input.toLowerCase().matches(\"^event\\\\s*$\")) {"},{"lineNumber":178,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The description of a event cannot be empty.\");"},{"lineNumber":179,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"^event\\\\s+(.+)\\\\s+/at\\\\s+(.+)$\";"},{"lineNumber":181,"author":{"gitId":"Maurice2n97"},"content":"        Pattern patternToMatch \u003d Pattern.compile(regex, Pattern.CASE_INSENSITIVE);"},{"lineNumber":182,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d patternToMatch.matcher(input);"},{"lineNumber":183,"author":{"gitId":"Maurice2n97"},"content":"        if (!m.matches()) {"},{"lineNumber":184,"author":{"gitId":"Maurice2n97"},"content":"            throw new DukeException(\"The event is of incorrect format.\");"},{"lineNumber":185,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":186,"author":{"gitId":"Maurice2n97"},"content":"        String description \u003d m.group(1);"},{"lineNumber":187,"author":{"gitId":"Maurice2n97"},"content":"        String at \u003d m.group(2);"},{"lineNumber":188,"author":{"gitId":"Maurice2n97"},"content":"        Task t \u003d new Event(description,at);"},{"lineNumber":189,"author":{"gitId":"Maurice2n97"},"content":"        return new AddCommand(t);"},{"lineNumber":190,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":192,"author":{"gitId":"Maurice2n97"},"content":"    public String getKeyWord(String inputCommand) {"},{"lineNumber":193,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d GET_KEYWORD.matcher(this.inputCommand);"},{"lineNumber":194,"author":{"gitId":"Maurice2n97"},"content":"        m.matches();"},{"lineNumber":195,"author":{"gitId":"Maurice2n97"},"content":"        return m.group(1);"},{"lineNumber":196,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":198,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":199,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":200,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":201,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":202,"author":{"gitId":"Maurice2n97"},"content":"     * Static method for parsing the string from duke.txt file."},{"lineNumber":203,"author":{"gitId":"Maurice2n97"},"content":"     * @param input"},{"lineNumber":204,"author":{"gitId":"Maurice2n97"},"content":"     * @return"},{"lineNumber":205,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":206,"author":{"gitId":"Maurice2n97"},"content":"    public static Task parseTaskFromStoredFormat(String input){"},{"lineNumber":207,"author":{"gitId":"Maurice2n97"},"content":"        String[] fields \u003d input.split(\" \\\\| \");"},{"lineNumber":208,"author":{"gitId":"Maurice2n97"},"content":"        String commandCode \u003d fields[0];"},{"lineNumber":209,"author":{"gitId":"Maurice2n97"},"content":"        Task parsedTask;"},{"lineNumber":210,"author":{"gitId":"Maurice2n97"},"content":"        switch(commandCode) {"},{"lineNumber":211,"author":{"gitId":"Maurice2n97"},"content":"        case(\"T\"):"},{"lineNumber":212,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new ToDo(fields[2]);"},{"lineNumber":213,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":214,"author":{"gitId":"Maurice2n97"},"content":"        case(\"D\"):"},{"lineNumber":215,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Deadline(fields[2],fields[3]);"},{"lineNumber":216,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":217,"author":{"gitId":"Maurice2n97"},"content":"        case(\"E\"):"},{"lineNumber":218,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d new Event(fields[2],fields[3]);"},{"lineNumber":219,"author":{"gitId":"Maurice2n97"},"content":"            break;"},{"lineNumber":220,"author":{"gitId":"Maurice2n97"},"content":"            //default case throw a ParseError to be defined later..."},{"lineNumber":221,"author":{"gitId":"Maurice2n97"},"content":"        default:"},{"lineNumber":222,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask \u003d null;"},{"lineNumber":223,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"Maurice2n97"},"content":"        boolean isDone \u003d (Integer.parseInt(fields[1]) \u003d\u003d 1);"},{"lineNumber":225,"author":{"gitId":"Maurice2n97"},"content":"        if (isDone \u0026\u0026 (parsedTask !\u003d null)) {"},{"lineNumber":226,"author":{"gitId":"Maurice2n97"},"content":"            parsedTask.markAsDone();"},{"lineNumber":227,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"Maurice2n97"},"content":"        return parsedTask;"},{"lineNumber":229,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":231,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":232,"author":{"gitId":"Maurice2n97"},"content":"    // Methods for extracting dates and formatting dates."},{"lineNumber":233,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":234,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":235,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":236,"author":{"gitId":"Maurice2n97"},"content":"     * finds date within the string"},{"lineNumber":237,"author":{"gitId":"Maurice2n97"},"content":"     * @param input"},{"lineNumber":238,"author":{"gitId":"Maurice2n97"},"content":"     * @return The sustring containing the date only"},{"lineNumber":239,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":240,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":241,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":242,"author":{"gitId":"Maurice2n97"},"content":"    public static String extractDate(String input){"},{"lineNumber":243,"author":{"gitId":"Maurice2n97"},"content":"        String regex \u003d \"\\\\d+[-]\\\\d+[-]\\\\d+\";"},{"lineNumber":244,"author":{"gitId":"Maurice2n97"},"content":"        Pattern datePattern  \u003d Pattern.compile(regex);"},{"lineNumber":245,"author":{"gitId":"Maurice2n97"},"content":"        Matcher m \u003d datePattern.matcher(input);"},{"lineNumber":246,"author":{"gitId":"Maurice2n97"},"content":"        if(m.find()){"},{"lineNumber":247,"author":{"gitId":"Maurice2n97"},"content":"            return m.group(0);"},{"lineNumber":248,"author":{"gitId":"Maurice2n97"},"content":"        } else {"},{"lineNumber":249,"author":{"gitId":"Maurice2n97"},"content":"            return \"\";"},{"lineNumber":250,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":253,"author":{"gitId":"Maurice2n97"},"content":"    public static LocalDate parseDate (String input) {"},{"lineNumber":254,"author":{"gitId":"Maurice2n97"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-M-d\");"},{"lineNumber":255,"author":{"gitId":"Maurice2n97"},"content":"        return LocalDate.parse(input,dateTimeFormatter);"},{"lineNumber":256,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":258,"author":{"gitId":"Maurice2n97"},"content":"    public static class ParseException extends Exception {"},{"lineNumber":259,"author":{"gitId":"Maurice2n97"},"content":"        ParseException(String message){"},{"lineNumber":260,"author":{"gitId":"Maurice2n97"},"content":"            super(message);"},{"lineNumber":261,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":262,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":263,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":264,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":265,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":265}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"     * Responsible for storing the data in a local .txt file. Fetches data from the .txt file, parses them and sends the"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     * Task out to the caller. Also receives new ArrayList, which it uses to rewrite  the .txt file."},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"     private String filePath;"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"     Storage(String filePath) {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"         this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"     public List\u003cTask\u003e loadStorage() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"         List\u003cTask\u003e savedListOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"         try {"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"             File fileSource \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"             Scanner scanner \u003d new Scanner(fileSource);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"             while (scanner.hasNextLine()) {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"                 String line \u003d scanner.nextLine();"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"                 Task t \u003d Parser.parseTaskFromStoredFormat(line);"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"                 savedListOfTasks.add(t);"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"             }"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"             return savedListOfTasks;"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"         } catch (FileNotFoundException err) {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"             throw new DukeException(\"Error fetching data from Storage in the desired format.\");"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"         }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"     public void saveTasks(TaskList listOfTasks) throws IOException {"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"         FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"         fw.write(\"\");  // clear the file."},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"         fw.close();"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"         FileWriter fw_append \u003d new FileWriter(filePath,true);"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"         for (Task t : listOfTasks) {"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"            fw_append.write(t.getSavedStringFormat() + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"         }"},{"lineNumber":47,"author":{"gitId":"Maurice2n97"},"content":"         fw_append.close();"},{"lineNumber":48,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":49,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":49}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" * Stores information of a Task - the description and a boolean flag to indicate if the task is done."},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    protected String letterCode;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    protected Task(String description,String letterCode) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        this.letterCode \u003d letterCode;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"    public String getStatusIcon() {"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public void markAsDone(){"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        isDone \u003d true;"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public String getLetterCode(){"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        return this.letterCode;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    public String getSavedStringFormat() {"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        String s \u003d (isDone) ? \"1\" : \"0\";"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"        return letterCode + \" | \" +  s + \" | \" + description;"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        String mark \u003d (isDone ? \"X\" : \" \");"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + mark + \"] \" + description;"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":39}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"     * A class to wrap around the list of Tasks and provide additional functionality."},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"     private static List\u003cTask\u003e listOfTasks;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"     public TaskList() {"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"         this.listOfTasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"     public TaskList (List\u003cTask\u003e listOfTasks) {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"         this.listOfTasks \u003d listOfTasks;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"     public void add(Task t) {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"         listOfTasks.add(t);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"     public Task delete(int indexToDelete) {"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"         Task taskToReturn \u003d listOfTasks.get(indexToDelete-1);"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"         listOfTasks.remove(indexToDelete-1);"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"         return taskToReturn;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"     }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    public Task markTaskDone(int indexToMarkDone) {"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d listOfTasks.get(indexToMarkDone-1);"},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"        task.markAsDone();"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":"        return task;"},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"    public int size() {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"         return listOfTasks.size();"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"        return listOfTasks.iterator();"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":46}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":" *  A type of task that is to be done."},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":" */"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"public class ToDo extends Task{"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"    public ToDo(String description){"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"        super(description, \"T\");"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"        return \"[\" + this.getLetterCode() + \"]\" + super.toString();"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"     * Handles the User interface interactions with the user. Trims the command, prints out something to display."},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    private static final String DIVIDER \u003d"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"            \"\\n___________________________________________________________________________\\n\";"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    private Scanner scForCommandLine\u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    public void displayWelcomeMessage() {"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Hello from\\n\" + LOGO);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"    public String getUserCommand(){"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        String input;"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        input \u003d scForCommandLine.nextLine().trim();"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        return input;"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Maurice2n97"},"content":"     * Prints all the tasks stored on the TaskList."},{"lineNumber":34,"author":{"gitId":"Maurice2n97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":36,"author":{"gitId":"Maurice2n97"},"content":"    public void showUserAllTasks(TaskList listOfTasks){"},{"lineNumber":37,"author":{"gitId":"Maurice2n97"},"content":"        int counter \u003d 1;"},{"lineNumber":38,"author":{"gitId":"Maurice2n97"},"content":"        for (Task currentTask : listOfTasks) {"},{"lineNumber":39,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(counter + \".\" + currentTask);"},{"lineNumber":40,"author":{"gitId":"Maurice2n97"},"content":"            counter++;"},{"lineNumber":41,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":44,"author":{"gitId":"Maurice2n97"},"content":"}"},{"lineNumber":45,"author":{"gitId":"Maurice2n97"},"content":""}],"authorContributionMap":{"Maurice2n97":45}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class AddCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    private final Task taskToBeAdded;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public AddCommand(Task tasktoBeAdded){"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        this.taskToBeAdded \u003d tasktoBeAdded;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public boolean execute (Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + taskToBeAdded);"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        tasks.add(taskToBeAdded);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        } catch (IOException err) {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            System.out.println(\"Error in loading storage from addCommand.execute...Check data/duke.txt\");"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"            return EXECUTION_FAIL;"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"        return EXECUTION_SUCCESS;"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":32,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":32}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"    public static boolean EXECUTION_SUCCESS \u003d true;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    public static boolean EXECUTION_FAIL \u003d false;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public abstract boolean execute(Ui ui, TaskList tasks, Storage storage);"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":11}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    private final int indexToDelete;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    public DeleteCommand(int indexToDelete) {"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToDelete \u003d indexToDelete;"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    public boolean execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d tasks.delete(indexToDelete);"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"        } catch ( IOException err) {"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            return EXECUTION_FAIL;"},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + task);"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"        return EXECUTION_SUCCESS;"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":30}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public boolean execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        return EXECUTION_FAIL;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"public class ListCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public boolean execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        ui.showUserAllTasks(tasks);"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        return EXECUTION_SUCCESS;"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":14}},{"path":"src/main/java/duke/command/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import duke.Task;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class MarkTaskCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    int indexToMarkDone;"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public MarkTaskCommand(int indexToMarkDone) {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        this.indexToMarkDone \u003d indexToMarkDone;"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public boolean execute(Ui ui, TaskList tasks, Storage storage) {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        Task task \u003d tasks.markTaskDone(indexToMarkDone);"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"        System.out.println(\"\\t\" + task);"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"        return EXECUTION_SUCCESS;"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":21}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_dateIncluded_success() throws Exception {"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Read book\", \"2020-03-04 2359\");"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals( \"[D][ ] Read book (by: Mar 4 2020 2359)\",d.toString());"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"    public void savedStringFormat_checkFormat_success() throws Exception {"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"        Deadline d \u003d new Deadline(\"Do Homework\", \"2021-03-04\");"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(\"D | 0 | Do Homework | 2021-03-04\", d.getSavedStringFormat());"},{"lineNumber":18,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Maurice2n97"},"content":"    public void toStringFormat_checkFormat_throwsException() {"},{"lineNumber":21,"author":{"gitId":"Maurice2n97"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"Maurice2n97"},"content":"            Deadline d \u003d new Deadline(\"do Something\", \"this date\");"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"            fail(); // test should not reach this line."},{"lineNumber":24,"author":{"gitId":"Maurice2n97"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"Maurice2n97"},"content":"            assertEquals(\"Sorry Unable to Parse date for Deadline. \""},{"lineNumber":26,"author":{"gitId":"Maurice2n97"},"content":"                    + \"Did you try to do it in yyyy-mm-dd format?\", e.getMessage());"},{"lineNumber":27,"author":{"gitId":"Maurice2n97"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":30,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":31,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":31}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.DynamicTest;"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"public class DukeTest {"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"    public void dummyTest() {"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"        assertEquals(2,2);"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":""},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"}"}],"authorContributionMap":{"Maurice2n97":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Maurice2n97"},"content":"deadline read book /by 1997-12-02 1800"},{"lineNumber":2,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at next Thursday 2010-01-12"},{"lineNumber":3,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":4,"author":{"gitId":"Maurice2n97"},"content":"deadline cs2103 assignment /by Thursday 1992-2-04"},{"lineNumber":5,"author":{"gitId":"Maurice2n97"},"content":"event cs2103 lecture /at 2007-11-03"},{"lineNumber":6,"author":{"gitId":"Maurice2n97"},"content":"done 3"},{"lineNumber":7,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Maurice2n97"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":10,"author":{"gitId":"Maurice2n97"},"content":"deadline"},{"lineNumber":11,"author":{"gitId":"Maurice2n97"},"content":"todo lunch"},{"lineNumber":12,"author":{"gitId":"Maurice2n97"},"content":"event"},{"lineNumber":13,"author":{"gitId":"Maurice2n97"},"content":"blahff"},{"lineNumber":14,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":15,"author":{"gitId":"Maurice2n97"},"content":"delete 5"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"list"},{"lineNumber":17,"author":{"gitId":"Maurice2n97"},"content":"bye"}],"authorContributionMap":{"Maurice2n97":17}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Maurice2n97"},"content":"if ! javac -cp ../src/main/java/duke -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Maurice2n97"},"content":"java -classpath ../bin/ duke/Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Maurice2n97":2,"-":36}}]
