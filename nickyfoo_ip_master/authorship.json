[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"        "},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nickyfoo":17,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"* `bye` Exits the program"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"* `list` Displays the current list of tasks"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"* `done [num]` Marks task [num] to done"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"* `delete [num]` Deletes task [num] from the list"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"* `find [keyword]` Searches for tasks containing [keyword]"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"* `todo [description]` Adds a todo task with a description"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"* `deadline [description] /by [yyyy-mm-dd]` Adds a deadline"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"* `event [description] /at [yyyy-mm-dd]` Adds an event"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"* `help` Displays a list of commands and their syntax"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"### `bye` "},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"Exits the program"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `bye`"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: Exits Duke"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"### `list` "},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"Displays the current list of tasks"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `list`"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: List of tasks is displayed"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"### `done [num]` "},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"Marks task [num] to done"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `done 2`"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: Task 2 in the list is marked as done with a tick"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"### `delete [num]` "},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"Deletes task [num] from the list"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `delete 3`"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: Task 3 in the list is deleted from the list"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"### `find [keyword]` "},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"Searches for tasks containing [keyword] (case insensitive)"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `find home`"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: All tasks containing the keyword are displayed"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"### `todo [description]` "},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"Adds a todo task with a description"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `todo Homework`"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: A new task \"Homework\" is added to the list"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"### `deadline [description] /by [yyyy-mm-dd]` "},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"Adds a deadline "},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `deadline Lab Report /by 2021-02-19`"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: A new deadline is added to the list"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"### `event [description] /at [yyyy-mm-dd]` "},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"Adds an event"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `event Birthday Party /at 2021-01-20`"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: A new event is added to the list"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"### `help` "},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"Displays a list of commands and their syntax"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"Example of usage: `help`"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"Expected outcome: A list of commands and their syntax is displayed"},{"lineNumber":80,"author":{"gitId":"-"},"content":""},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"nickyfoo":70,"-":13}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"todo|Homework|F"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"event|CS2103 Lecture |2021-02-16|F"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"deadline|Lab Report |2021-02-19|F"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"todo|Buy flowers|T"}],"authorContributionMap":{"nickyfoo":4}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" * A DialogBox handles the DialogBox in the GUI for both user and Duke"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"public class DialogBox extends HBox {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private Label text;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    private ImageView displayPicture;"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * Handles DialogBox in the GUI for both the user and Duke"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param l label of the DialogBox"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param iv Image of the user/Duke"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public DialogBox(Label l, ImageView iv) {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        text \u003d l;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        displayPicture \u003d iv;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        text.setWrapText(true);"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        displayPicture.setFitWidth(100.0);"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        displayPicture.setFitHeight(100.0);"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        Circle circle \u003d new Circle();"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        circle.setRadius(50.0);"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        circle.setCenterX(50.0);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        circle.setCenterY(50.0);"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        displayPicture.setClip(circle);"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.getChildren().addAll(text, displayPicture);"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        this.setSpacing(10.0);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * Flips the dialog box"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"    private void flip() {"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        this.getChildren().setAll(tmp);"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     * Makes a DialogBox for the user"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"     * @param l label of the DialogBox"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"     * @param iv image of the user"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"     * @return a DialogBox for the user"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"        return new DialogBox(l, iv);"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"     * Makes a DialogBox for Duke"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"     * @param l label of the DialogBox"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"     * @param iv image of Duke"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"     * @return a DialogBox for Duke"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"        var db \u003d new DialogBox(l, iv);"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"        db.flip();"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"        return db;"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":76}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.exception.CommandException;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" * Duke handles the commands from the GUI"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    private final Parser p;"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    private final Storage s;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    private TaskList list;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final Ui ui;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for Duke, to initialise UI, Storage and Parser"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * tries to load TaskList from storage, else start a new empty TaskList"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public Duke() {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        s \u003d new Storage();"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        p \u003d new Parser();"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"            list \u003d new TaskList(s.loadData());"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            list \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * Runs the command from the user"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * @param userInput the input from the user"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * @return a String of the reply to the userInput"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    public String runCommand(String userInput) {"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"            Command cmd \u003d p.parse(userInput);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"            return ui.reply(cmd.execute(ui, s, list));"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        } catch (CommandException e) {"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"            return ui.showError(e.getMessage());"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        } catch (IOException | NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"            return ui.showError(\"Please enter a valid number!\");"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"            return ui.showError(\"You don\u0027t have a task at that index!\");"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * Welcome message from duke"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     * @return a welcome message from duke"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    public String welcome() {"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        return ui.welcome();"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":60}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * The entry point for the task helper Duke to avoid classpath issues"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" *"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * @author Foo Chuan Le, Nicholas"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class Launcher {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    public static void main(String[] args) {"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"        Application.launch(duke.Main.class, args);"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":14}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import javafx.geometry.Insets;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"import javafx.stage.Stage;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":" * Main is where the GUI is initialised and shown"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"public class Main extends Application {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    private VBox dialogContainer;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    private Button sendButton;"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    private Scene scene;"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    private Image userImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    private Image dukeImg \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * Start the GUI"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * @param stage The stage of the GUI"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    public void start(Stage stage) {"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"        userInput \u003d new TextField();"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"        stage.setScene(scene);"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"        stage.show();"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"        stage.setResizable(false);"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"        stage.setMinWidth(600.0);"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"        mainLayout.setPrefSize(600.0, 600.0);"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setPrefSize(585, 535);"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer.setPadding(new Insets(10, 10, 10, 10));"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer.setSpacing(20);"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"        userInput.setPrefWidth(525.0);"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"            handleUserInput();"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"        });"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"            handleUserInput();"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"        });"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"        Label dukeText \u003d new Label(duke.welcome());"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"                DialogBox.getDukeDialog(dukeText, new ImageView(dukeImg))"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"        );"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"     * Gets a response from duke based on the input"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"     * @param input user input"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"     * @return a response from duke"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"    private String getResponse(String input) {"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"        return this.duke.runCommand(input);"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"     * Handles the input from the user"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"    private void handleUserInput() {"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"        if (userInput.getText().equals(\"bye\")) {"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"            Platform.setImplicitExit(true);"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"            Platform.exit();"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"            Label userText \u003d new Label(userInput.getText());"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"            Label dukeText \u003d new Label(getResponse(userInput.getText()));"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"                    DialogBox.getUserDialog(userText, new ImageView(userImg)),"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"                    DialogBox.getDukeDialog(dukeText, new ImageView(dukeImg))"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"            );"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"        userInput.clear();"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":128}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import duke.command.HelpCommand;"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import duke.command.TodoCommand;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"import duke.exception.CommandException;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":" * Parser class to parse the input from users and return the appropriate instance of a command"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for a Parser"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    public Parser() {"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * Parses the line input by the user"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param line the line input by the uer"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @return A command corresponding to the input"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @throws CommandException when command is not understood"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @throws IndexOutOfBoundsException when command delete is called on an index that is out of bounds"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @throws NumberFormatException when command delete is called on an index that is not a number"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    public Command parse(String line) throws CommandException, IndexOutOfBoundsException, NumberFormatException {"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        String command \u003d line.split(\" \")[0];"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"            switch (command) {"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"            case \"bye\": {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"                return new ByeCommand();"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"            case \"help\": {"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"                return new HelpCommand();"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"            case \"list\": {"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"                return new ListCommand();"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"            case \"find\": {"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"                return parseFind(line);"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"            case \"done\": {"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"                return parseDone(line);"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"            case \"delete\": {"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"                return parseDelete(line);"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"            case \"todo\": {"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"                return parseTodo(line);"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"            case \"deadline\": {"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"                return parseDeadline(line);"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"            case \"event\": {"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"                return parseEvent(line);"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"            default: {"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"                throw new CommandException(\"I don\u0027t understand, maybe try typing \\\"help\\\" for a little help\");"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Please enter a valid value\");"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"    private Command parseFind(String line) throws CommandException {"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \");"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003e 2) {"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"I can only handle one keyword!\");"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"        } else if (ar.length \u003d\u003d 1) {"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"What keyword are you searching for?\");"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"            return new FindCommand(ar[1]);"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"    private Command parseDone(String line) throws CommandException {"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003d\u003d 1) {"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Which task are you done with?\");"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"        line \u003d line.split(\" \", 2)[1];"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"        int index \u003d Integer.parseInt(line) - 1;"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"        return new DoneCommand(index);"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"    private Command parseDelete(String line) throws CommandException {"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003d\u003d 1) {"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Which task are you deleting?\");"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"        line \u003d line.split(\" \", 2)[1];"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"        int index \u003d Integer.parseInt(line) - 1;"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"        return new DeleteCommand(index);"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"    private Command parseTodo(String line) throws CommandException {"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003d\u003d 1) {"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"        line \u003d line.split(\" \", 2)[1];"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"        return new TodoCommand(line);"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"    private Command parseDeadline(String line) throws CommandException {"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003d\u003d 1) {"},{"lineNumber":126,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":127,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"nickyfoo"},"content":"        line \u003d line.split(\" \", 2)[1];"},{"lineNumber":129,"author":{"gitId":"nickyfoo"},"content":"        String[] result \u003d line.split(\"/by \");"},{"lineNumber":130,"author":{"gitId":"nickyfoo"},"content":"        if (result.length \u003d\u003d 1) {"},{"lineNumber":131,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Er... when do you need to finish this /by?\");"},{"lineNumber":132,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":133,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"nickyfoo"},"content":"            LocalDate date \u003d LocalDate.parse(result[1]);"},{"lineNumber":135,"author":{"gitId":"nickyfoo"},"content":"            return new DeadlineCommand(result[0], date);"},{"lineNumber":136,"author":{"gitId":"nickyfoo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":137,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Please input a valid date as yyyy-mm-dd\");"},{"lineNumber":138,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":141,"author":{"gitId":"nickyfoo"},"content":"    private Command parseEvent(String line) throws CommandException {"},{"lineNumber":142,"author":{"gitId":"nickyfoo"},"content":"        String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":143,"author":{"gitId":"nickyfoo"},"content":"        assert ar.length \u003e 0;"},{"lineNumber":144,"author":{"gitId":"nickyfoo"},"content":"        if (ar.length \u003d\u003d 1) {"},{"lineNumber":145,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":146,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"nickyfoo"},"content":"        line \u003d line.split(\" \", 2)[1];"},{"lineNumber":148,"author":{"gitId":"nickyfoo"},"content":"        String[] result \u003d line.split(\"/at \");"},{"lineNumber":149,"author":{"gitId":"nickyfoo"},"content":"        if (result.length \u003d\u003d 1) {"},{"lineNumber":150,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Er... /at what time does this event start?\");"},{"lineNumber":151,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":153,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":154,"author":{"gitId":"nickyfoo"},"content":"            LocalDate date \u003d LocalDate.parse(result[1]);"},{"lineNumber":155,"author":{"gitId":"nickyfoo"},"content":"            return new EventCommand(result[0], date);"},{"lineNumber":156,"author":{"gitId":"nickyfoo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":157,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Please input your date as yyyy-mm-dd\");"},{"lineNumber":158,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":160}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":" * Storage class to handle saving and loading data in the TaskList"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    private final String location \u003d \"./duke.txt\";"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    private final Path path;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * A constructor for Storage"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * Attempts to get the file from the location, and if it does not exist, creates a new file."},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public Storage() {"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        this.path \u003d Paths.get(location);"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        File file \u003d new File(location);"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        if (Files.notExists(this.path)) {"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"            try {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"                file.createNewFile();"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"            } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"                e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"     * Stores the data to the text file at the location"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * @param list the list of tasks"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when an invalid filename is used in FileWriter"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    public void storeData(ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        FileWriter file \u003d new FileWriter(this.location);"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        for (Task t: list) {"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"            String data \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"            switch(t.getType()) {"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"            case \"todo\": {"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s\", t.getType(), t.getDescription(), t.getIsDone());"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"            case \"event\": {"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s|%s\","},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"                        t.getType(), t.getDescription(), ((Event) t).getAt(), t.getIsDone());"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"            case \"deadline\": {"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s|%s\","},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"                        t.getType(), t.getDescription(), ((Deadline) t).getBy(), t.getIsDone());"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"            default: {"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"            file.write(data + \"\\n\");"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"        file.close();"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"     * Loads the data from the saved text file"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"     * @return the list of Tasks as read from the text file"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"     * @throws FileNotFoundException when the scanner attempts to access an invalid file path"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"    public ArrayList\u003cTask\u003e loadData() throws FileNotFoundException {"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"            Scanner sc \u003d new Scanner(path.toFile());"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\"\\\\|\");"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"                switch (ar[0]) {"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"                case \"todo\": {"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"                    Todo t \u003d new Todo(ar[1]);"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"                    list.add(t);"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"                    break;"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"                case \"event\": {"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"                    list.add(new Event(ar[1], LocalDate.parse(ar[2])));"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"                    break;"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"                case \"deadline\": {"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"                    list.add(new Deadline(ar[1], LocalDate.parse(ar[2])));"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"                    break;"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"                default: {"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"                if (ar[ar.length - 1].equals(\"T\")) {"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"                    list.get(list.size() - 1).done();"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"            return list;"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":118}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * Handles the ArrayList representing the list of tasks"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for the TaskList"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param list the list comprising the tasks"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        this.list \u003d list;"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * A default constructor for the TaskList to initialise with an empty ArrayList\u003c\u003e"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public TaskList() {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * Adds a task to the list"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param t the task to be added"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public void addTask(Task t) {"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        this.list.add(t);"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * Deletes a task from the list"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the list to be deleted"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    public void deleteTask(int index) {"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.list.remove(index);"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"     * Gets the size of the list of tasks"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * @return the size of the list"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"    public int getSize() {"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        return this.list.size();"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"     * Gets the list of tasks"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * @return the list of tasks"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"        return this.list;"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"     * Gets an item in the list of tasks"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the item"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     * @return the item in that index in the list"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    public Task getItem(int index) {"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"        return this.list.get(index);"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":69}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * Handles the User input and output"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    private static final String logo \u003d \"\\t ____        _        \\n\""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for a Ui."},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public Ui(){"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * The welcome prompt when Duke is first initialised"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    public String welcome() {"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        return reply(\"Hello from Duke! What can I do for you?\");"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * Prints the error message for a caught CommandException"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param message the error message to be printed"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    public String showError(String message) {"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"        return reply(message);"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * Replies with indentation and border lines"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * @param reply content of the reply"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    public String reply(String reply) {"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        return reply;"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":42}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A ByeCommand is the command when the uer wants to terminate Duke"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Initialises the reply to a message and notes that this is the ByeCommand"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    public ByeCommand() {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"        super(\"Bye. Hope to see you again soon!\");"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        this.isBye \u003d true;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * Executes the ByeCommand"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @return A reply to the ByeCommand"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" * Handles the commands input from the user"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class Command {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    protected String reply;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    protected boolean isBye \u003d false;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply of the command"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @param reply the reply of the command"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public Command(String reply) {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d reply;"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * Checks if the command is \"bye\", in which case terminate Duke"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * @return whether the command is a ByeCommand"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    public boolean getIsBye() {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        return this.isBye;"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the command"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the list fails to be saved"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list)throws IOException {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(\"\");"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":44}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A DeadlineCommand is the command when the user wants to add a deadline task"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private final LocalDate by;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the description of the task and when it has to be done /by"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param task task description"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param by when the task has to be done /by"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public DeadlineCommand(String task, LocalDate by) {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        this.by \u003d by;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Executes the DeadlineCommand"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the DeadlineCommand"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the list fails to be saved"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        Deadline t \u003d new Deadline(this.description, this.by);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":46}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" * A DeleteCommand is when the user wants to delete a task from the list"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    private int index;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply and the index to be deleted"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the task to be deleted"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        this.index \u003d index;"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * Executes the DeleteCommand"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the DeleteCommand"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the list fails to be saved"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d list.getItem(index);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        list.deleteTask(index);"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Noted. I\u0027ve removed this task:\\n\\t\" + t.toString()"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":42}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A DoneCommand is when the user wants to mark a task as done"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class DoneCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply and the index to be marked as done"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * @param index index of task to be marked as done"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public DoneCommand(int index) {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        this.index \u003d index;"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * Executes the DoneCommand"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the DoneCommand"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the file fails to be saved"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d list.getItem(index);"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        t.done();"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t  \""},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"                + t.toString();"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":45}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * An EventCommand is when the user wants to add an event task to the list"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class EventCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private final LocalDate at;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the task description and when it\u0027s /at"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param task the task description"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param at when the event is /at"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public EventCommand(String task, LocalDate at) {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        this.at \u003d at;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Executes the EventCommand"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the EventCommand"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the file fails to be saved"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        Event t \u003d new Event(this.description, this.at);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":51}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.util.Locale;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" * A FindCommand is when the user wants to find tasks containing a particular keyword"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    private String keyword;"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the keyword to find"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"     * @param keyword the keyword to find"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * Executes the FindCommand"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the FindCommand"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        sb.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"            if (list.getItem(i).getDescription().toLowerCase(Locale.ROOT).contains(keyword)) {"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\t\");"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"                sb.append(i + 1).append(\". \").append(list.getItem(i));"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\n\");"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        if (list.getSize() \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\tYour list is empty!\");"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d sb.toString();"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":48}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A HelpCommand is the command when the uer wants to terminate Duke"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class HelpCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    private static String helpGuide \u003d \"Here are the commands you can use!\\n\""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"            + \"bye : exits the program\\n\""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"            + \"list : displays the current list of tasks\\n\""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"            + \"done [num] : marks task [num] to done\\n\""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"            + \"delete [num] : deletes task [num] from the list\\n\""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"            + \"find [keyword] : searches for tasks containing [keyword]\\n\""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"            + \"todo [description] : adds a todo task with a description\\n\""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"            + \"deadline [description] /by [yyyy-mm-dd] : adds a deadline\\n\""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"            + \"event [description] /at [yyyy-mm-dd] : adds an event\";"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * Initialises the reply to a message and notes that this is the HelpCommand"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public HelpCommand() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d helpGuide;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * Executes the HelpCommand"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * @return A reply to the HelpCommand"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":42}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A ListCommand is when the user wants to view the current list of tasks"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Initialises the reply, for the tasks to be added on to"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public ListCommand() {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Executes the ListCommand"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the ListCommand"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        sb.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\t\");"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            sb.append(i + 1).append(\". \").append(list.getItem(i));"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            if (i !\u003d list.getSize() - 1) {"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\n\");"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        if (list.getSize() \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\tYour list is empty!\");"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d sb.toString();"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":43}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A TodoCommand is when the user wants to add a todo task to the list"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class TodoCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the task description"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * @param task the description of the task"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public TodoCommand(String task) {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * Executes the TodoCommand"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param ui The ui to respond to the user\u0027s input"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @return The reply to the TodoCommand"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    public String execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        Todo t \u003d new Todo(this.description);"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        return ui.reply(this.reply);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":51}},{"path":"src/main/java/duke/exception/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A CommandException happens when a command is not understood or is asked to do something erroneous"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class CommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * constructs a new command exception;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param str an error message"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public CommandException(String str) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(str);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":16}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A class of Exceptions unique to Duke"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * Creates a new DukeException"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param str an error message"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public DukeException(String str) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(str);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":15}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * A deadline is a task with a date it must be done /by"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise a deadline\u0027s description and by"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * @param description the deadline\u0027s description"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param by when the task must be done /by"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        this.by \u003d by;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"deadline\";"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * Gets the date that the task must be done /by"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @return the date the task must be done /by"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public String getBy() {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        return this.by.toString();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method to include the type of the task"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @return a string with the details of the task"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        return \"[D]\" + super.toString() + String.format(\"(by: %s %s %s)\","},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                        this.by.getMonth(), this.by.getDayOfMonth(), this.by.getYear());"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * An Event is an instance of a task happening /at a particular date"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    protected LocalDate at;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise an event task"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * @param description description of the event"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param at date that the event takes place"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        this.at \u003d at;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"event\";"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * Gets the date the event occurs"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @return the date of the event"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public String getAt() {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        return this.at.toString();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method which includes the type of the task"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @return string of the details of the task"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        return \"[E]\" + super.toString() + String.format(\"(at: %s %s %s)\","},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                this.at.getMonth(), this.at.getDayOfMonth(), this.at.getYear());"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":40}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A Task"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    protected String type;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Constructor which initialises the description of a task and sets it as not done"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * @param description task description"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"task\";"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * Gets an icon based on the status of the task"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @return tick if done, blank if not"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        //return tick symbol if done"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Sets the task as done"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public void done() {"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        this.isDone \u003d true;"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * Gets the type of the task, todo, deadline or event."},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     * @return type of the task"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    public String getType() {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        return this.type;"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * Gets the description of the task"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * @return the description of the task"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        return this.description;"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * Gets the done status of the task"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     * @return T if done, F if not"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    public String getIsDone() {"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        return (this.isDone) ? \"T\" : \"F\";"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method that includes the status icon and task description"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     * @return a string containing details of the task"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":69}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A Todo type of task."},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise a todo task with a description"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param description the decription of the task"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method which includes the type of the task"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @return string with details of the task"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":25}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"public class StorageTest {"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":13}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class ListCommandTest {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    public void emptyListTest() {"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        Command cmd \u003d new ListCommand();"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"            cmd.execute(new Ui(), new Storage(), new TaskList());"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"            assertEquals(\"Here are the tasks in your list:\\n\" + \"\\tYour list is empty!\", cmd.reply);"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"        } catch (IOException e) {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public void todoListTest() {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        Command cmd \u003d new ListCommand();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            TaskList list \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            list.addTask(new Todo(\"Homework\"));"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            cmd.execute(new Ui(), new Storage(), list);"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"            assertEquals(\"Here are the tasks in your list:\\n\" + \"\\t1. [T][ ] Homework\", cmd.reply);"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":39}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    public void descriptionTest() {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"Homework\", t.getDescription());"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public void isDoneTest() {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        t.done();"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"T\", t.getIsDone());"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public void typeTest() {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"todo\", t.getType());"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"list"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"list"}],"authorContributionMap":{"nickyfoo":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\bin -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\command\\*.java"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\bin -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":8,"-":19}}]
