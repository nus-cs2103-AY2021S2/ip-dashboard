[{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"todo|Homework|F"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"event|Homeschooling |2021-01-26|F"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"deadline|lab report |2021-01-28|F"}],"authorContributionMap":{"nickyfoo":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.exception.CommandException;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" * The entry point for the task helper Duke"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" *"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" * @author Foo Chuan Le, Nicholas"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final Parser p;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private final Storage s;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    private TaskList list;"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    private final Ui ui;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for Duke, to initialise UI, Storage and Parser"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * tries to load TaskList from storage, else start a new empty TaskList"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public Duke() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        s \u003d new Storage();"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        p \u003d new Parser();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            list \u003d new TaskList(s.loadData());"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            list \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * Runs the Duke bot"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * Takes user input by line and executes the corresponding command,"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     * or prompts the user if the command is not understood with ui.showError()"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    public void run(){"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        ui.welcome();"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        boolean isBye \u003d false;"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"        while (!isBye) {"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"            try {"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"                Command cmd \u003d p.parse(ui.getInput());"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"                cmd.execute(ui, s, list);"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"                isBye \u003d cmd.getIsBye();"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"            } catch (CommandException e) {"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"            } catch (IOException | NumberFormatException e) {"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"                ui.showError(\"Please enter a valid number!\");"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"            } catch (IndexOutOfBoundsException e){"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"                ui.showError(\"You don\u0027t have a task at that index!\");"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"     * Starting point for Duke"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"     * @param args The command line arguments"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"    public static void main(String[] args) {"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"        new Duke().run();"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":67}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"import duke.command.TodoCommand;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import duke.exception.CommandException;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":" * Parser class to parse the input from users and return the appropriate instance of a command"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for a Parser"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public Parser() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * Parses the line input by the user"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param line the line input by the uer"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @return A command corresponding to the input"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @throws CommandException when command is not understood"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @throws IndexOutOfBoundsException when command delete is called on an index that is out of bounds"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @throws NumberFormatException when command delete is called on an index that is not a number"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public Command parse(String line) throws CommandException, IndexOutOfBoundsException, NumberFormatException {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        String command \u003d line.split(\" \")[0];"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            switch (command) {"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"            case \"bye\":"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"                return new ByeCommand();"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"            case \"list\": {"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"                return new ListCommand();"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"            case \"find\": {"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \");"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003e 2) {"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"I can only handle one keyword!\");"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"                } else if (ar.length \u003d\u003d 1) {"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"What keyword are you searching for?\");"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"                } else {"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"                    return new FindCommand(ar[1]);"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"            case \"done\": {"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003d\u003d 1) {"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Which task are you done with?\");"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"                line \u003d line.split(\" \", 2)[1];"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"                int index \u003d Integer.parseInt(line) - 1;"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"                return new DoneCommand(index);"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"            case \"delete\": {"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003d\u003d 1) {"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Which task are you deleting?\");"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"                line \u003d line.split(\" \", 2)[1];"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"                int index \u003d Integer.parseInt(line) - 1;"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"                return new DeleteCommand(index);"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"            case \"todo\": {"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003d\u003d 1) {"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":"                line \u003d line.split(\" \", 2)[1];"},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"                return new TodoCommand(line);"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"            case \"deadline\": {"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003d\u003d 1) {"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"                line \u003d line.split(\" \", 2)[1];"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"                String[] result \u003d line.split(\"/by \");"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"                if (result.length \u003d\u003d 1) {"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Er... when do you need to finish this /by?\");"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"                try {"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"                    LocalDate date \u003d LocalDate.parse(result[1]);"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"                    return new DeadlineCommand(result[0], date);"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Please input a valid date as yyyy-mm-dd\");"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"            case \"event\": {"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\" \", 2);"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"                if (ar.length \u003d\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"I can\u0027t add an empty task to the list!\");"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"                line \u003d line.split(\" \", 2)[1];"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"                String[] result \u003d line.split(\"/at \");"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"                if (result.length \u003d\u003d 1) {"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Er... /at what time does this event start?\");"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"                try {"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"                    LocalDate date \u003d LocalDate.parse(result[1]);"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"                    return new EventCommand(result[0], date);"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"                    throw new CommandException(\"Please input your date as yyyy-mm-dd\");"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"nickyfoo"},"content":"            default: {"},{"lineNumber":117,"author":{"gitId":"nickyfoo"},"content":"                throw new CommandException(\"I don\u0027t understand\");"},{"lineNumber":118,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":121,"author":{"gitId":"nickyfoo"},"content":"        } catch (IndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":122,"author":{"gitId":"nickyfoo"},"content":"            throw new CommandException(\"Please enter a valid value\");"},{"lineNumber":123,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":125}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Deadline;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Event;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":" * Storage class to handle saving and loading data in the TaskList"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    private final String location \u003d \"./duke.txt\";"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    private final Path path;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * A constructor for Storage"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Attempts to get the file from the location, and if it does not exist, creates a new file."},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public Storage() {"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        this.path \u003d Paths.get(location);"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        File file \u003d new File(location);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        if (Files.notExists(this.path)) {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                file.createNewFile();"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"                e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * Stores the data to the text file at the location"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * @param list the list of tasks"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when an invalid filename is used in FileWriter"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"    public void storeData(ArrayList\u003cTask\u003e list) throws IOException{"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        FileWriter file \u003d new FileWriter(this.location);"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        for (Task t: list) {"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"            String data \u003d \"\";"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"            switch(t.getType()) {"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"            case \"todo\": {"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s\", t.getType(), t.getDescription(), t.getIsDone());"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"            case \"event\": {"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s|%s\","},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"                        t.getType(), t.getDescription(), ((Event) t).getAt(), t.getIsDone());"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"            case \"deadline\": {"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"                data \u003d String.format(\"%s|%s|%s|%s\","},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"                        t.getType(), t.getDescription(), ((Deadline) t).getBy(), t.getIsDone());"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"nickyfoo"},"content":"            default: {"},{"lineNumber":71,"author":{"gitId":"nickyfoo"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"nickyfoo"},"content":"            file.write(data + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"nickyfoo"},"content":"        file.close();"},{"lineNumber":77,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":79,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"nickyfoo"},"content":"     * Loads the data from the saved text file"},{"lineNumber":81,"author":{"gitId":"nickyfoo"},"content":"     * @return the list of Tasks as read from the text file"},{"lineNumber":82,"author":{"gitId":"nickyfoo"},"content":"     * @throws FileNotFoundException when the scanner attempts to access an invalid file path"},{"lineNumber":83,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"nickyfoo"},"content":"    public ArrayList\u003cTask\u003e loadData() throws FileNotFoundException{"},{"lineNumber":85,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"nickyfoo"},"content":"            Scanner sc \u003d new Scanner(path.toFile());"},{"lineNumber":87,"author":{"gitId":"nickyfoo"},"content":"            ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":88,"author":{"gitId":"nickyfoo"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":89,"author":{"gitId":"nickyfoo"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":90,"author":{"gitId":"nickyfoo"},"content":"                String[] ar \u003d line.split(\"\\\\|\");"},{"lineNumber":91,"author":{"gitId":"nickyfoo"},"content":"                switch (ar[0]) {"},{"lineNumber":92,"author":{"gitId":"nickyfoo"},"content":"                    case \"todo\": {"},{"lineNumber":93,"author":{"gitId":"nickyfoo"},"content":"                        Todo t \u003d new Todo(ar[1]);"},{"lineNumber":94,"author":{"gitId":"nickyfoo"},"content":"                        list.add(t);"},{"lineNumber":95,"author":{"gitId":"nickyfoo"},"content":"                        break;"},{"lineNumber":96,"author":{"gitId":"nickyfoo"},"content":"                    }"},{"lineNumber":97,"author":{"gitId":"nickyfoo"},"content":"                    case \"event\": {"},{"lineNumber":98,"author":{"gitId":"nickyfoo"},"content":"                        list.add(new Event(ar[1], LocalDate.parse(ar[2])));"},{"lineNumber":99,"author":{"gitId":"nickyfoo"},"content":"                        break;"},{"lineNumber":100,"author":{"gitId":"nickyfoo"},"content":"                    }"},{"lineNumber":101,"author":{"gitId":"nickyfoo"},"content":"                    case \"deadline\": {"},{"lineNumber":102,"author":{"gitId":"nickyfoo"},"content":"                        list.add(new Deadline(ar[1], LocalDate.parse(ar[2])));"},{"lineNumber":103,"author":{"gitId":"nickyfoo"},"content":"                        break;"},{"lineNumber":104,"author":{"gitId":"nickyfoo"},"content":"                    }"},{"lineNumber":105,"author":{"gitId":"nickyfoo"},"content":"                }"},{"lineNumber":106,"author":{"gitId":"nickyfoo"},"content":"                if (ar[ar.length - 1].equals(\"T\")) list.get(list.size() - 1).done();"},{"lineNumber":107,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"nickyfoo"},"content":"            return list;"},{"lineNumber":109,"author":{"gitId":"nickyfoo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":110,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":111,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"nickyfoo"},"content":"        return new ArrayList\u003c\u003e();"},{"lineNumber":113,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":114}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * Handles the ArrayList representing the list of tasks"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    private ArrayList\u003cTask\u003e list;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for the TaskList"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param list the list comprising the tasks"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public TaskList(ArrayList\u003cTask\u003e list) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        this.list \u003d list;"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * A default constructor for the TaskList to initialise with an empty ArrayList\u003c\u003e"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public TaskList() {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        this.list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * Adds a task to the list"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param t the task to be added"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"    public void addTask(Task t) {"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"        this.list.add(t);"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * Deletes a task from the list"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the list to be deleted"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    public void deleteTask(int index) {"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.list.remove(index);"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"     * Gets the size of the list of tasks"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * @return the size of the list"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"    public int getSize() {"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"        return this.list.size();"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"     * Gets the list of tasks"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * @return the list of tasks"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"        return this.list;"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"     * Gets an item in the list of tasks"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the item"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     * @return the item in that index in the list"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    public Task getItem(int index) {"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"        return this.list.get(index);"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":69}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * Handles the User input and output"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    private static final String logo \u003d \"\\t ____        _        \\n\""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"            + \"\\t|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    private static Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"     * Constructor for a Ui."},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    public Ui(){"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * The welcome prompt when Duke is first initialised"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public void welcome() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        reply(\"Hello from\\n\" + logo + \"\\tHello! I\u0027m Duke\\n\" + \"\\tWhat can I do for you?\");"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * Gets the input from the user"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @return a string comprising of the commands from the user."},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public String getInput() {"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        return sc.nextLine();"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * Prints the error message for a caught CommandException"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     * @param message the error message to be printed"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    public void showError(String message) {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        reply(message);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * Replies with indentation and border lines"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * @param reply content of the reply"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    public void reply(String reply) {"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        System.out.println(\"\\t____________________________________________________________\");"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"        System.out.println(\"\\t\" + reply);"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":"        System.out.println(\"\\t____________________________________________________________\");"},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":54}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A ByeCommand is the command when the uer wants to terminate Duke"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Initialises the reply to a message and notes that this is the ByeCommand"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    public ByeCommand() {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"        super(\"Bye. Hope to see you again soon!\");"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        this.isBye \u003d true;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Executes the ByeCommand"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":29}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":" * Handles the commands input from the user"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"public class Command {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    protected String reply;"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    protected boolean isBye \u003d false;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply of the command"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @param reply the reply of the command"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public Command(String reply) {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d reply;"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * Checks if the command is \"bye\", in which case terminate Duke"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * @return whether the command is a ByeCommand"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    public boolean getIsBye() {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        return this.isBye;"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the tasklist to"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the loading fails"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list)throws IOException {"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":42}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Deadline;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A DeadlineCommand is the command when the user wants to add a deadline task"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class DeadlineCommand extends Command{"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private final LocalDate by;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the description of the task and when it has to be done /by"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param task task description"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param by when the task has to be done /by"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public DeadlineCommand(String task, LocalDate by){"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        this.by \u003d by;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Executes the DeadlineCommand"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the tasklist to"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the list fails to be saved"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        Deadline t \u003d new Deadline(this.description, this.by);"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":45}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":" * A DeleteCommand is when the user wants to delete a task from the list"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    private int index;"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply and the index to be deleted"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @param index the index of the task to be deleted"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        this.index \u003d index;"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the list fails to be saved"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d list.getItem(index);"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        list.deleteTask(index);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Noted. I\u0027ve removed this task:\\n\\t\" + t.toString()"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":41}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A DoneCommand is when the user wants to mark a task as done"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class DoneCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the reply and the index to be marked as done"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * @param index index of task to be marked as done"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public DoneCommand(int index) {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        this.index \u003d index;"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when the file fails to be saved"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d list.getItem(index);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        t.done();"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t  \""},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                + t.toString();"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":43}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * An EventCommand is when the user wants to add an event task to the list"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class EventCommand extends Command{"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    private final LocalDate at;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the task description and when it\u0027s /at"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param task the task description"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param at when the event is /at"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    public EventCommand(String task, LocalDate at) {"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        this.at \u003d at;"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the tasklist to"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when file fails to be saved"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        Event t \u003d new Event(this.description, this.at);"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":50}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A FindCommand is when the user wants to find tasks containing a particular keyword"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    private String keyword;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the keyword to find"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param keyword the keyword to find"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the tasklist to"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"        sb.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"        for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            if (list.getItem(i).getDescription().contains(keyword)) {"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\t\");"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"                sb.append(i + 1).append(\". \").append(list.getItem(i));"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\n\");"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        if (list.getSize() \u003d\u003d 0) {"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\tYour list is empty!\");"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d sb.toString();"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":45}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":" * A ListCommand is when the user wants to view the current list of tasks"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Initialises the reply, for the tasks to be added on to"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public ListCommand() {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the TaskList to"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        sb.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        for (int i \u003d 0; i \u003c list.getSize(); i++) {"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\t\");"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            sb.append(i + 1).append(\". \").append(list.getItem(i));"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            if (i !\u003d list.getSize() - 1) {"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"                sb.append(\"\\n\");"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        if (list.getSize() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"            sb.append(\"\\tYour list is empty!\");"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d sb.toString();"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":42}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":" * A TodoCommand is when the user wants to add a todo task to the list"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"public class TodoCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"    private final String description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise the task description"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     * @param task the description of the task"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public TodoCommand(String task) {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        super(\"\");"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d task;"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"     * Executes the command"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"     * @param ui the ui to respond to the user\u0027s input"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"     * @param s The storage to save the tasklist to"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * @param list The current list of tasks"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * @throws IOException when file fails to be saved"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"    public void execute(Ui ui, Storage s, TaskList list) throws IOException {"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        Todo t \u003d new Todo(this.description);"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"        list.addTask(t);"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        this.reply \u003d \"Got it. I\u0027ve added this task:\\n\\t\" + t.toString()"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                + \"\\n\\tNow you have \" + list.getSize() + \" task\" + (list.getSize() !\u003d 1 ? \"s \" : \" \") + \"in the list.\";"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"        s.storeData(list.getList());"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"        ui.reply(this.reply);"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":"}"},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":50}},{"path":"src/main/java/duke/exception/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A CommandException happens when a command is not understood or is asked to do something erroneous"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class CommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * constructs a new command exception;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param str an error message"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public CommandException(String str) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(str);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":16}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A class of Exceptions unique to Duke"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * Creates a new DukeException"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param str an error message"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public DukeException(String str) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(str);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":15}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * A deadline is a task with a date it must be done /by"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    protected LocalDate by;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise a deadline\u0027s description and by"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * @param description the deadline\u0027s description"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param by when the task must be done /by"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        this.by \u003d by;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"deadline\";"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * Gets the date that the task must be done /by"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @return the date the task must be done /by"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public String getBy() {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        return this.by.toString();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method to include the type of the task"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @return a string with the details of the task"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        return \"[D]\" + super.toString() + String.format(\"(by: %s %s %s)\","},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                        this.by.getMonth(), this.by.getDayOfMonth(), this.by.getYear());"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":40}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":" * An Event is an instance of a task happening /at a particular date"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    protected LocalDate at;"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise an event task"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     * @param description description of the event"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"     * @param at date that the event takes place"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"        this.at \u003d at;"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"event\";"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     * Gets the date the event occurs"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"     * @return the date of the event"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public String getAt() {"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        return this.at.toString();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method which includes the type of the task"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"     * @return string of the details of the task"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        return \"[E]\" + super.toString() + String.format(\"(at: %s %s %s)\","},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"                this.at.getMonth(), this.at.getDayOfMonth(), this.at.getYear());"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":40}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A Task"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    protected String type;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"     * Constructor which initialises the description of a task and sets it as not done"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"     * @param description task description"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"task\";"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"     * Gets an icon based on the status of the task"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"     * @return tick if done, blank if not"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"        //return tick symbol if done"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"     * Sets the task as done"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"    public void done() {"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"        this.isDone \u003d true;"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"     * Gets the type of the task, todo, deadline or event."},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":"     * @return type of the task"},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nickyfoo"},"content":"    public String getType() {"},{"lineNumber":42,"author":{"gitId":"nickyfoo"},"content":"        return this.type;"},{"lineNumber":43,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":45,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nickyfoo"},"content":"     * Gets the description of the task"},{"lineNumber":47,"author":{"gitId":"nickyfoo"},"content":"     * @return the description of the task"},{"lineNumber":48,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nickyfoo"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"nickyfoo"},"content":"        return this.description;"},{"lineNumber":51,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":53,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"nickyfoo"},"content":"     * Gets the done status of the task"},{"lineNumber":55,"author":{"gitId":"nickyfoo"},"content":"     * @return T if done, F if not"},{"lineNumber":56,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nickyfoo"},"content":"    public String getIsDone() {"},{"lineNumber":58,"author":{"gitId":"nickyfoo"},"content":"        return (this.isDone) ? \"T\" : \"F\";"},{"lineNumber":59,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":61,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method that includes the status icon and task description"},{"lineNumber":63,"author":{"gitId":"nickyfoo"},"content":"     * @return a string containing details of the task"},{"lineNumber":64,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"nickyfoo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":68,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":69}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":" * A Todo type of task."},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"     * Constructor to initialise a todo task with a description"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"     * @param description the decription of the task"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"    public Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"        this.type \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"     * Overridden toString() method which includes the type of the task"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"     * @return string with details of the task"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":25}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"public class StorageTest {"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    public void dummyTest(){"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":13}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"public class ListCommandTest {"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public void emptyListTest(){"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        Command cmd \u003d new ListCommand();"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"            cmd.execute(new Ui(), new Storage(), new TaskList());"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"            assertEquals(\"Here are the tasks in your list:\\n\" +"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"                    \"\\tYour list is empty!\",cmd.reply);"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"        } catch (IOException e){"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":"    public void todoListTest(){"},{"lineNumber":28,"author":{"gitId":"nickyfoo"},"content":"        Command cmd \u003d new ListCommand();"},{"lineNumber":29,"author":{"gitId":"nickyfoo"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"nickyfoo"},"content":"            TaskList list \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"nickyfoo"},"content":"            list.addTask(new Todo(\"Homework\"));"},{"lineNumber":32,"author":{"gitId":"nickyfoo"},"content":"            cmd.execute(new Ui(), new Storage(), list);"},{"lineNumber":33,"author":{"gitId":"nickyfoo"},"content":"            assertEquals(\"Here are the tasks in your list:\\n\" +"},{"lineNumber":34,"author":{"gitId":"nickyfoo"},"content":"                    \"\\t1. [T][ ] Homework\",cmd.reply);"},{"lineNumber":35,"author":{"gitId":"nickyfoo"},"content":"        } catch (IOException e){"},{"lineNumber":36,"author":{"gitId":"nickyfoo"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"nickyfoo"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":40,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":40}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"    public void descriptionTest(){"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"Homework\", t.getDescription());"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":"    public void isDoneTest(){"},{"lineNumber":16,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":17,"author":{"gitId":"nickyfoo"},"content":"        t.done();"},{"lineNumber":18,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"T\", t.getIsDone());"},{"lineNumber":19,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nickyfoo"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"nickyfoo"},"content":"    public void typeTest(){"},{"lineNumber":22,"author":{"gitId":"nickyfoo"},"content":"        Task t \u003d new Todo(\"Homework\");"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"        assertEquals(\"todo\", t.getType());"},{"lineNumber":24,"author":{"gitId":"nickyfoo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":26,"author":{"gitId":"nickyfoo"},"content":"}"}],"authorContributionMap":{"nickyfoo":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nickyfoo"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"nickyfoo"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"nickyfoo"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"nickyfoo"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"nickyfoo"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"nickyfoo"},"content":"list"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"nickyfoo"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":9,"author":{"gitId":"nickyfoo"},"content":"list"}],"authorContributionMap":{"nickyfoo":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"nickyfoo"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\exception\\*.java"},{"lineNumber":11,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\task\\*.java"},{"lineNumber":12,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\bin -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\command\\*.java"},{"lineNumber":13,"author":{"gitId":"nickyfoo"},"content":"javac  -cp ..\\bin -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":14,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":15,"author":{"gitId":"nickyfoo"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":")"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"nickyfoo"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"nickyfoo"},"content":""}],"authorContributionMap":{"nickyfoo":9,"-":18}}]
