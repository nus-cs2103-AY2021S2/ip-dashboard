[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Represent a Deadline item, which is a child of Task"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"    private String by;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"     * Initialize a Deadline item with a given end time"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"     * @param name The name of the deadline"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"     * @param by The end time of the item"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"    public Deadline(String name, String by) {"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"        super(name);"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"     * toString method overriding the one in class Task"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"     * @return a user-friendly String representation of the Deadline item"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"        String doneMark \u003d isDone? \"X\": \" \";"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", doneMark, name, by);"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":26}},{"path":"src/main/java/DeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"public class DeadlineException extends LihuaException {"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":2}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Represent an Event item, which is a child of Task"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class Event extends Task {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"    private String period;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"     * Initialize an Event with a time period"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"     * @param name The name of the event"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"     * @param period The time period of the event"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"    public Event(String name, String period) {"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"        super(name);"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        this.period \u003d period;"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"     * toString method overriding the one in class Task"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"     * @return a user-friendly String representation of the Event item"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"        String doneMark \u003d isDone? \"X\": \" \";"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", doneMark, name, period);"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":26}},{"path":"src/main/java/EventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"public class EventException extends LihuaException {"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":2}},{"path":"src/main/java/FormatChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Provide methods for checking input format"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class FormatChecker {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input string is in the format of getting task done"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"     * @return True if the input string is trying to get task done;"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"     * the argument format, however, may be incorrect"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean isTryingToGetTaskDone(String userInput) {"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"            String[] splited \u003d userInput.split(\" \");"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"            boolean isDone \u003d splited[0].equals(\"done\");"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"            return isDone;"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"            return false;"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input string is in the format of listing tasks"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"     * @return true if the input string is in the format of getting task done"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean isPrintingList(String userInput) {"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        return userInput.equals(\"list\");"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user is trying to add a new task"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input string"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     * @return True if the user is trying to add a new task;"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"     * the argument, however, may not be correct and may be subject to exception handling"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean isTryingToAddTask(String userInput) {"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"        return likeAddingToDo(userInput) || likeAddingDeadline(userInput) || likeAddingEvent(userInput);"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input is trying to delete a existing task"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input string"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"     * @return True if the user is trying to add a new task;"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"     * the argument, however, may not be correct and may be subject to exception handling"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean isTryingToDeleteTask(String userInput) {"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"        boolean isDelete \u003d splited[0].equals(\"delete\");"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"        return isDelete;"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input is trying to get help with commands"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"     * @return True if the user input is trying to get help;"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"     * only the first argument will be considered, the rest are ignored"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean isTryingToGetHelp(String userInput) {"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":"        boolean isGettingHelp \u003d splited[0].equals(\"help\");"},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"        return isGettingHelp;"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input string seems to be the format of adding new ToDo task"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"     * @return true if the input string seems to be the format of adding new ToDo task"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean likeAddingToDo(String userInput) {"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"        boolean isToDo \u003d splited[0].equals(\"todo\");"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"        return isToDo;"},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input string seems to be the format of adding new Deadline task"},{"lineNumber":77,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string"},{"lineNumber":78,"author":{"gitId":"Cheng20010201"},"content":"     * @return true if the input string seems to be the format of adding new Deadline task"},{"lineNumber":79,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean likeAddingDeadline(String userInput) {"},{"lineNumber":81,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":82,"author":{"gitId":"Cheng20010201"},"content":"        boolean isDeadline \u003d splited[0].equals(\"deadline\");"},{"lineNumber":83,"author":{"gitId":"Cheng20010201"},"content":"        return isDeadline;"},{"lineNumber":84,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":86,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the user input string seems to be the format of adding new Event task"},{"lineNumber":88,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string"},{"lineNumber":89,"author":{"gitId":"Cheng20010201"},"content":"     * @return true if the input string seems to be the format of adding new Event task"},{"lineNumber":90,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Cheng20010201"},"content":"    public static boolean likeAddingEvent(String userInput) {"},{"lineNumber":92,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":93,"author":{"gitId":"Cheng20010201"},"content":"        boolean isEvent \u003d splited[0].equals(\"event\");"},{"lineNumber":94,"author":{"gitId":"Cheng20010201"},"content":"        return isEvent;"},{"lineNumber":95,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":97,"author":{"gitId":"Cheng20010201"},"content":"    private static boolean isInteger(String toCheck) {"},{"lineNumber":98,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":99,"author":{"gitId":"Cheng20010201"},"content":"            Integer.parseInt(toCheck);"},{"lineNumber":100,"author":{"gitId":"Cheng20010201"},"content":"            return true;"},{"lineNumber":101,"author":{"gitId":"Cheng20010201"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":102,"author":{"gitId":"Cheng20010201"},"content":"            return false;"},{"lineNumber":103,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":105}},{"path":"src/main/java/InputInformationExtractor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Provide methods for extracting information from user input string"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class InputInformationExtractor {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"     * Get the content of the todo item from user input"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in todo format"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"     * @return Content of the todo item"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"     * @throws ToDoException"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"    public static String getToDoContent(String userInput) throws ToDoException {"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.substring(5);"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"            throw new ToDoException();"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     * Get the detail of the deadline item from user input"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in deadline format"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"     * @return Detail of the deadline item"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"     * @throws DeadlineException"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    public static String getDeadlineDetail(String userInput) throws DeadlineException {"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.substring(9);"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"            throw new DeadlineException();"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     * Get the content of the deadline item from user input"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in deadline format"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"     * @return Content of the deadline item"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"     * @throws DeadlineException"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"    public static String getDeadlineContent(String userInput) throws DeadlineException {"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.split(\" /by \")[0].substring(9);"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"            throw new DeadlineException();"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"     * Get the time of the deadline item from user input"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in deadline format"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"     * @return Time of the deadline item"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"     * @throws DeadlineException"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"    public static String getDeadlineTime(String userInput) throws DeadlineException {"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.split(\" /by \")[1];"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"            throw new DeadlineException();"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"     * Get the detail of the event item from user input"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in event format"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"     * @return detail of the event item"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"     * @throws EventException"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"    public static String getEventDetail(String userInput) throws EventException {"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.substring(6);"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"            throw new EventException();"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"     * Get the content of the deadline item from user input"},{"lineNumber":77,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in deadline format"},{"lineNumber":78,"author":{"gitId":"Cheng20010201"},"content":"     * @return Content of the deadline item"},{"lineNumber":79,"author":{"gitId":"Cheng20010201"},"content":"     * @throws EventException"},{"lineNumber":80,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Cheng20010201"},"content":"    public static String getEventContent(String userInput) throws EventException {"},{"lineNumber":82,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.split(\" /at \")[0].substring(6);"},{"lineNumber":84,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":85,"author":{"gitId":"Cheng20010201"},"content":"            throw new EventException();"},{"lineNumber":86,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":89,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"Cheng20010201"},"content":"     * Get the time of the deadline item from user input"},{"lineNumber":91,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in deadline format"},{"lineNumber":92,"author":{"gitId":"Cheng20010201"},"content":"     * @return Time of the deadline item"},{"lineNumber":93,"author":{"gitId":"Cheng20010201"},"content":"     * @throws EventException"},{"lineNumber":94,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"Cheng20010201"},"content":"    public static String getEventTime(String userInput) throws EventException {"},{"lineNumber":96,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"Cheng20010201"},"content":"            return userInput.split(\" /at \")[1];"},{"lineNumber":98,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":99,"author":{"gitId":"Cheng20010201"},"content":"            throw new EventException();"},{"lineNumber":100,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":103,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"Cheng20010201"},"content":"     * Get the index argument (at second place) from user input"},{"lineNumber":105,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input string"},{"lineNumber":106,"author":{"gitId":"Cheng20010201"},"content":"     * @return The index value in integer type, if applicable"},{"lineNumber":107,"author":{"gitId":"Cheng20010201"},"content":"     * @throws Exception If the input does not contain index value at second place,"},{"lineNumber":108,"author":{"gitId":"Cheng20010201"},"content":"     * throws exception"},{"lineNumber":109,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Cheng20010201"},"content":"    public static int getIndexArgument(String userInput) throws Exception {"},{"lineNumber":111,"author":{"gitId":"Cheng20010201"},"content":"        String[] splited \u003d userInput.split(\" \");"},{"lineNumber":112,"author":{"gitId":"Cheng20010201"},"content":"        int index \u003d Integer.parseInt(splited[1]);"},{"lineNumber":113,"author":{"gitId":"Cheng20010201"},"content":"        return index;"},{"lineNumber":114,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":115}},{"path":"src/main/java/Lihua.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":" * Main class for the application"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"public class Lihua {"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"    private static final String EXIT_SIGNAL \u003d \"bye\";"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"    private static Tasks tasks \u003d new Tasks();"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"        // Initialization phase"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        // Print out welcome message"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"        printHello();"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"        // Get user input, perform operations on it"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"        // If the input received is the exit signal, the application exits"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"        String userInput \u003d sc.nextLine();"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"        while (true) {"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"            if (userInput.equals(EXIT_SIGNAL)) {"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"                printGoodbye();"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"                return;"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"            } else if (!userInput.equals(\"\")) {"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"                actionUpon(userInput);"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"            userInput \u003d sc.nextLine();"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"     * Action upon the user input."},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"     * E.g. Add a new task to the list, show the tasks in the list"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput user input string, which is not the exit signal"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"    private static void actionUpon(String userInput) {"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"        if (FormatChecker.isPrintingList(userInput)) {"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"            tasks.printList();"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        } else if (FormatChecker.isTryingToGetTaskDone(userInput)) {"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"            tasks.getTaskDone(userInput);"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"        } else if (FormatChecker.isTryingToAddTask(userInput)) {"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"            tasks.addTask(userInput);"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"        } else if (FormatChecker.isTryingToDeleteTask(userInput)) {"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"            tasks.deleteTask(userInput);"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        } else if (FormatChecker.isTryingToGetHelp(userInput)) {"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"            OperationTypes.printInstructions();"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"            printGetHelpMessage();"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"    private static void printGetHelpMessage() {"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"Sorry, I do not understand your command :\u0027)\");"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"If you are stuck, type \\\u0027help\\\u0027 to get a list of operations available\");"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"    private static void printHello() {"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"        String welcome \u003d \"Hello! My name is Lihua.\\n\""},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"                + \"What can I do for you today? (\u003d~ω~\u003d)\";"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(welcome);"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"    private static void printGoodbye() {"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"Goodbye! Hope to see you again soon! (\u003d~ω~\u003d)\");"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"        printHorizontalLine();"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"    private static void printHorizontalLine() {"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"-------------------------------------------------\");"},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":76}},{"path":"src/main/java/LihuaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"public class LihuaException extends Exception {"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":2}},{"path":"src/main/java/OperationTypes.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"public enum OperationTypes {"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"    LIST {"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"            return \"list----get the current task list\";"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"    TODO{"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"            return \"todo [task description]----add a todo to list\";"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"    EVENT{"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"            return \"event [task description] /at [task time]----add an event to list\";"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"    DEADLINE{"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"            return \"deadline [task description] /by [task time]----add a deadline to list\";"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"    DONE{"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"            return \"done [task number]----get a task done, specified by the task number\";"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"    DELETE{"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"            return \"delete [task number]----delete a task, specified by the task number\";"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"    BYE{"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"            return \"bye----quit the application\";"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"    },"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"    HELP{"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"        @Override"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        public String toString() {"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"            return \"help----get help with the commands\";"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"    };"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"    public static void printInstructions() {"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"Here are a list of commands available :)\");"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"        for (OperationTypes t : OperationTypes.values()) {"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(t.toString());"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":57}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Represent a task in the task list"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"    protected String name;"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"     * Initialize a new undone task"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"     * @param name Name of the task"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"    public Task(String name) {"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"        this.name \u003d name;"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"     * Check whether the task is done or not"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"     * @return true if the task is done, false otherwise"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"    public boolean isDone() {"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"        return isDone;"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"     * Set the status of the task; e.g. done or not done"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"     * @param isDone the status to set to the task"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"     * toString method overriding its predefined one"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"     * @return a user-friendly String representation of the task"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"        String doneMark \u003d isDone? \"X\": \" \";"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"        return String.format(\"[%s] %s\", doneMark, name);"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":42}},{"path":"src/main/java/Tasks.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"import java.util.List;"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":" * Store all the tasks in a list DS"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"public class Tasks {"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"     * Initialize the task list with an empty ArrayList"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"    public Tasks() {"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"        tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"     * Add the given task into the list, with necessary information printed"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput User input is assumed to be in the format of adding new tasks"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"    public void addTask(String userInput) {"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"            Task task \u003d null;"},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"            // It is guaranteed that either one of the three blocks will be entered"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"            // therefore the final value for task can never be null"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"            if (FormatChecker.likeAddingToDo(userInput)) {"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"                // may throw exception"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"                String content \u003d InputInformationExtractor.getToDoContent(userInput);"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"                task \u003d new ToDo(content);"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"            } else if (FormatChecker.likeAddingDeadline(userInput)) {"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"                String content \u003d InputInformationExtractor.getDeadlineContent(userInput);"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"                String by \u003d InputInformationExtractor.getDeadlineTime(userInput);"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"                task \u003d new Deadline(content, by);"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"            } else if (FormatChecker.likeAddingEvent(userInput)) {"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"                String content \u003d InputInformationExtractor.getEventContent(userInput);"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"                String time \u003d InputInformationExtractor.getEventTime(userInput);"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"                task \u003d new Event(content, time);"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"            tasks.add(task);"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Got it. I have added this task to your list:\");"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"            System.out.print(\"---- \");"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(task);"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"            reportTotalNumberOfTasks();"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"        } catch (ToDoException e) {"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Sorry, the format for adding a todo task is \\\u0027todo [task name]\\\u0027. \" +"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"                    \"Please retry :\u0027)\");"},{"lineNumber":49,"author":{"gitId":"Cheng20010201"},"content":"        } catch (DeadlineException e) {"},{"lineNumber":50,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Sorry, the format for adding a deadline task is \\\u0027deadline [task name] /by time\\\u0027. \" +"},{"lineNumber":51,"author":{"gitId":"Cheng20010201"},"content":"                    \"Please retry :\u0027)\");"},{"lineNumber":52,"author":{"gitId":"Cheng20010201"},"content":"        } catch (EventException e) {"},{"lineNumber":53,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Sorry, the format for adding an event task is \\\u0027event [task name] /at time\\\u0027. \" +"},{"lineNumber":54,"author":{"gitId":"Cheng20010201"},"content":"                    \"Please retry :\u0027)\");"},{"lineNumber":55,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":58,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Cheng20010201"},"content":"     * Get the given task done, print out the result for reference"},{"lineNumber":60,"author":{"gitId":"Cheng20010201"},"content":"     * @param index 1-based index number referring to the specific task in the list"},{"lineNumber":61,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Cheng20010201"},"content":"    private void getTaskDone(int index) {"},{"lineNumber":63,"author":{"gitId":"Cheng20010201"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"Cheng20010201"},"content":"            reportNoTaskRightNow();"},{"lineNumber":65,"author":{"gitId":"Cheng20010201"},"content":"            return;"},{"lineNumber":66,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"Cheng20010201"},"content":"            tasks.get(index - 1).setDone(true);"},{"lineNumber":69,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Nice! I have marked this task as done:\");"},{"lineNumber":70,"author":{"gitId":"Cheng20010201"},"content":"            System.out.print(\"---- \");"},{"lineNumber":71,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(tasks.get(index - 1));"},{"lineNumber":72,"author":{"gitId":"Cheng20010201"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":73,"author":{"gitId":"Cheng20010201"},"content":"            reportInvalidIndexNumber();"},{"lineNumber":74,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":77,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"Cheng20010201"},"content":"     * Get the given task done, represented by the user input string"},{"lineNumber":79,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput Assumed to be of the format of trying to get tasks done"},{"lineNumber":80,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Cheng20010201"},"content":"    public void getTaskDone(String userInput) {"},{"lineNumber":82,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"Cheng20010201"},"content":"            int index \u003d InputInformationExtractor.getIndexArgument(userInput);"},{"lineNumber":84,"author":{"gitId":"Cheng20010201"},"content":"            getTaskDone(index);"},{"lineNumber":85,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":86,"author":{"gitId":"Cheng20010201"},"content":"            // index argument not found"},{"lineNumber":87,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Sorry, the format for getting task done is \\\u0027done [a valid task number]\\\u0027. \" +"},{"lineNumber":88,"author":{"gitId":"Cheng20010201"},"content":"                    \"Please retry :\u0027)\");"},{"lineNumber":89,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":92,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"Cheng20010201"},"content":"     * Delete the given task, print out the result for reference"},{"lineNumber":94,"author":{"gitId":"Cheng20010201"},"content":"     * @param index 1-based index number referring to the specific task in the list"},{"lineNumber":95,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Cheng20010201"},"content":"    private void deleteTask(int index) {"},{"lineNumber":97,"author":{"gitId":"Cheng20010201"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":98,"author":{"gitId":"Cheng20010201"},"content":"            reportNoTaskRightNow();"},{"lineNumber":99,"author":{"gitId":"Cheng20010201"},"content":"            return;"},{"lineNumber":100,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"Cheng20010201"},"content":"            Task task \u003d tasks.remove(index - 1);"},{"lineNumber":103,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Noted! The task has successfully been removed.\");"},{"lineNumber":104,"author":{"gitId":"Cheng20010201"},"content":"            System.out.print(\"---- \");"},{"lineNumber":105,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(task);"},{"lineNumber":106,"author":{"gitId":"Cheng20010201"},"content":"            reportTotalNumberOfTasks();"},{"lineNumber":107,"author":{"gitId":"Cheng20010201"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":108,"author":{"gitId":"Cheng20010201"},"content":"            reportInvalidIndexNumber();"},{"lineNumber":109,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":112,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"Cheng20010201"},"content":"     * Get the given task deleted, represented by the user input string"},{"lineNumber":114,"author":{"gitId":"Cheng20010201"},"content":"     * @param userInput Assumed to be of the format of trying to delete a task"},{"lineNumber":115,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"Cheng20010201"},"content":"    public void deleteTask(String userInput) {"},{"lineNumber":117,"author":{"gitId":"Cheng20010201"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"Cheng20010201"},"content":"            int index \u003d InputInformationExtractor.getIndexArgument(userInput);"},{"lineNumber":119,"author":{"gitId":"Cheng20010201"},"content":"            deleteTask(index);"},{"lineNumber":120,"author":{"gitId":"Cheng20010201"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitId":"Cheng20010201"},"content":"            // index argument not found"},{"lineNumber":122,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(\"Sorry, the format for deleting a task is \\\u0027delete [a valid task number]\\\u0027. \" +"},{"lineNumber":123,"author":{"gitId":"Cheng20010201"},"content":"                    \"Please retry :\u0027)\");"},{"lineNumber":124,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":127,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"Cheng20010201"},"content":"     * Print out the list in a user-friendly format"},{"lineNumber":129,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"Cheng20010201"},"content":"    public void printList() {"},{"lineNumber":131,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"These are the tasks in your list so far:\");"},{"lineNumber":132,"author":{"gitId":"Cheng20010201"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"Cheng20010201"},"content":"            System.out.println(String.format(\"%d.%s\", i, tasks.get(i - 1)));"},{"lineNumber":134,"author":{"gitId":"Cheng20010201"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":137,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"Cheng20010201"},"content":"     * Get the total number of tasks now"},{"lineNumber":139,"author":{"gitId":"Cheng20010201"},"content":"     * @return The total number of tasks now, including done and undone tasks"},{"lineNumber":140,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"Cheng20010201"},"content":"    public int getTotalNumberOfTasks() {"},{"lineNumber":142,"author":{"gitId":"Cheng20010201"},"content":"        return tasks.size();"},{"lineNumber":143,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":145,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"Cheng20010201"},"content":"     * Print the report for total number of tasks, including done and undone tasks"},{"lineNumber":147,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"Cheng20010201"},"content":"    public void reportTotalNumberOfTasks() {"},{"lineNumber":149,"author":{"gitId":"Cheng20010201"},"content":"        String noun \u003d tasks.size() \u003c\u003d 1? \"task\": \"tasks\";"},{"lineNumber":150,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(String.format(\"Now you have %d %s in total. Good Luck.\", tasks.size(), noun));"},{"lineNumber":151,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":153,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":154,"author":{"gitId":"Cheng20010201"},"content":"     * Print the report for error message: invalid index number of the list"},{"lineNumber":155,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"Cheng20010201"},"content":"    private void reportInvalidIndexNumber() {"},{"lineNumber":157,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"Sorry, the task number you specified is not valid.\\n\" +"},{"lineNumber":158,"author":{"gitId":"Cheng20010201"},"content":"                \"Try enter \\\u0027list\\\u0027 to see the range of task numbers you can enter.\");"},{"lineNumber":159,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":161,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"Cheng20010201"},"content":"     * Print the report for error message:"},{"lineNumber":163,"author":{"gitId":"Cheng20010201"},"content":"     * no task right now, no delete/get done operation can be performed"},{"lineNumber":164,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"Cheng20010201"},"content":"    private void reportNoTaskRightNow() {"},{"lineNumber":166,"author":{"gitId":"Cheng20010201"},"content":"        System.out.println(\"Sorry, there is no task right now, please add one first :\u0027)\");"},{"lineNumber":167,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":168}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":" * Represent a ToDo item, which is a child of Task"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":" */"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"     * Initialize a ToDo item"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"     * @param name The name of the item"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"    public ToDo(String name) {"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"        super(name);"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"     * toString method overriding the one in class Task"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"     * @return a user-friendly String representation of the ToDo item"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"        String doneMark \u003d isDone? \"X\": \" \";"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"        return String.format(\"[T][%s] %s\", doneMark, name);"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":22}},{"path":"src/main/java/ToDoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"public class ToDoException extends LihuaException {"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"}"}],"authorContributionMap":{"Cheng20010201":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Cheng20010201"},"content":"todo a"},{"lineNumber":2,"author":{"gitId":"Cheng20010201"},"content":"todo a b c"},{"lineNumber":3,"author":{"gitId":"Cheng20010201"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"Cheng20010201"},"content":"todo"},{"lineNumber":5,"author":{"gitId":"Cheng20010201"},"content":"todos haha"},{"lineNumber":6,"author":{"gitId":"Cheng20010201"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Cheng20010201"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"Cheng20010201"},"content":"list"},{"lineNumber":9,"author":{"gitId":"Cheng20010201"},"content":"done 999"},{"lineNumber":10,"author":{"gitId":"Cheng20010201"},"content":"done -1"},{"lineNumber":11,"author":{"gitId":"Cheng20010201"},"content":"deadline have fun /by Sunday 10pm"},{"lineNumber":12,"author":{"gitId":"Cheng20010201"},"content":"deadline cook /by Sunday"},{"lineNumber":13,"author":{"gitId":"Cheng20010201"},"content":"deadline wrong /byy Monday"},{"lineNumber":14,"author":{"gitId":"Cheng20010201"},"content":"deadlinewrong /by Sunday"},{"lineNumber":15,"author":{"gitId":"Cheng20010201"},"content":"event party /at Sunday 2-4 pm"},{"lineNumber":16,"author":{"gitId":"Cheng20010201"},"content":"event wrong /by Sunday"},{"lineNumber":17,"author":{"gitId":"Cheng20010201"},"content":"events wrong /by Sunday"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"list"},{"lineNumber":19,"author":{"gitId":"Cheng20010201"},"content":"wrong"},{"lineNumber":20,"author":{"gitId":"Cheng20010201"},"content":"wrong message"},{"lineNumber":21,"author":{"gitId":"Cheng20010201"},"content":"very wrong message"},{"lineNumber":22,"author":{"gitId":"Cheng20010201"},"content":""},{"lineNumber":23,"author":{"gitId":"Cheng20010201"},"content":"."},{"lineNumber":24,"author":{"gitId":"Cheng20010201"},"content":"done 5"},{"lineNumber":25,"author":{"gitId":"Cheng20010201"},"content":"list"},{"lineNumber":26,"author":{"gitId":"Cheng20010201"},"content":"list all"},{"lineNumber":27,"author":{"gitId":"Cheng20010201"},"content":"list everything"},{"lineNumber":28,"author":{"gitId":"Cheng20010201"},"content":"done"},{"lineNumber":29,"author":{"gitId":"Cheng20010201"},"content":"done"},{"lineNumber":30,"author":{"gitId":"Cheng20010201"},"content":"done haha"},{"lineNumber":31,"author":{"gitId":"Cheng20010201"},"content":"done hahaha12345"},{"lineNumber":32,"author":{"gitId":"Cheng20010201"},"content":"done ha 123"},{"lineNumber":33,"author":{"gitId":"Cheng20010201"},"content":"delete"},{"lineNumber":34,"author":{"gitId":"Cheng20010201"},"content":"delete"},{"lineNumber":35,"author":{"gitId":"Cheng20010201"},"content":"deletes hah"},{"lineNumber":36,"author":{"gitId":"Cheng20010201"},"content":"delete abc"},{"lineNumber":37,"author":{"gitId":"Cheng20010201"},"content":"delete a b c"},{"lineNumber":38,"author":{"gitId":"Cheng20010201"},"content":"delete 5"},{"lineNumber":39,"author":{"gitId":"Cheng20010201"},"content":"delete 1"},{"lineNumber":40,"author":{"gitId":"Cheng20010201"},"content":"delete 4"},{"lineNumber":41,"author":{"gitId":"Cheng20010201"},"content":"delete 0"},{"lineNumber":42,"author":{"gitId":"Cheng20010201"},"content":"delete 3"},{"lineNumber":43,"author":{"gitId":"Cheng20010201"},"content":"delete 1"},{"lineNumber":44,"author":{"gitId":"Cheng20010201"},"content":"delete 1"},{"lineNumber":45,"author":{"gitId":"Cheng20010201"},"content":"delete 9"},{"lineNumber":46,"author":{"gitId":"Cheng20010201"},"content":"done 10"},{"lineNumber":47,"author":{"gitId":"Cheng20010201"},"content":"help"},{"lineNumber":48,"author":{"gitId":"Cheng20010201"},"content":"bye"}],"authorContributionMap":{"Cheng20010201":48}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Cheng20010201"},"content":"java -classpath ..\\bin Lihua \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Cheng20010201":1,"-":20}}]
