[{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    protected LocalDate by;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * Returns a Deadline Task."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * @param by the date that the task has to be done by."},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public Deadline(String description, TaskType taskType, String by) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format\");"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.by;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        return super.toString() "},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                + \" (by: \" "},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":39}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"    private Storage storage;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    private TaskList tasks;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * Creates a Duke Bot that interprets user input."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * @param filePath Location of the storage list"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    public Duke(String[] filePath) {"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d this.storage.load();"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"            ui.showError(e);"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public void run() {"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        this.ui.greet();"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        while (true) {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"            String[] commandArr \u003d Parser.parseCommand(this.ui.readCommand());"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            String[] params;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            int index;"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"            DukeCommand command \u003d DukeCommand.fromString(commandArr[0]);"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"                switch (command) {"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"                case BYE:"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                    this.ui.bye();"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                    return;"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"                case UNKNOWN:"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(\"Command not recognised.\");"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"                case LIST:"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.listTasks());"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                case DELETE:"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"                    index \u003d Parser.parseInt(params[0]);"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.deleteTask(index));"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                case DONE:"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                    index \u003d Parser.parseInt(params[0]);"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.doTask(index));"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                case FIND:"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.findTask(params[0]));"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                case TODO:"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.addTask("},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                        new Todo(params[0], TaskType.TODO)"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                    ));"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                case EVENT:"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.addTask("},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                        new Event(params[0], TaskType.EVENT, params[1])"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                    ));"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                case DEADLINE:"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                    params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"                    this.ui.sendToUser(this.tasks.addTask("},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                        new Deadline(params[0], TaskType.DEADLINE, params[1])"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"                    ));"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"                default:"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"                    this.ui.showError();"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"                this.storage.save(this.tasks);"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"            } catch (DukeException e) {"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"                this.ui.showError(e);"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"    public static void main(String[] args) {"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        new Duke(new String[]{\"data\", \"duke.txt\"}).run();"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"enum DukeCommand {"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"    UNKNOWN,"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"    BYE,"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"    LIST,"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"    DELETE,"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"    DONE,"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"    FIND,"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"    TODO,"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"    EVENT,"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"    DEADLINE;"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"    public static DukeCommand fromString(String command) {"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 1; i \u003c DukeCommand.values().length; i++) {"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"            if (DukeCommand.values()[i].toString().equals(command.toUpperCase())) {"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"                return DukeCommand.values()[i];"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"        return DukeCommand.values()[0];"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"onnwards":108,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * General Exception Handler specific to Duke."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    DukeException(String message) {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":12}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    protected LocalDate at;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * Returns an Event class."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * @param at the date that the task will happen."},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public Event(String description, TaskType taskType, String at) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format\");"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.at;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        return super.toString() "},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                + \" (at: \" "},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                + this.at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":39}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"     * Returns a 2 element String array delimited by a spacebar, regardless of imput"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"     * If input is 1 word, the second element is an empty string."},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"     * If input is 0 words, both elements are empty strings."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     * @param command String to be parsed."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * @return String array with 2 elements."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    public static String[] parseCommand(String command) {"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"        String[] stringArr \u003d command.split(\" \", 2);"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        if (stringArr.length \u003d\u003d 1) {"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"            stringArr \u003d new String[]{command,\"\"};"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        return stringArr;"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * Returns String array with size depending on the command."},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * @param command the command that is given by the user."},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     * @param params String to be parsed."},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     * @return Parsed String array."},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    public static String[] parseParams(DukeCommand command, String params) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        String[] paramArr;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"            if (command \u003d\u003d DukeCommand.DELETE) {"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"A number must be provided.\");"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The description of a \" "},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                    + command.name().toLowerCase() + \" cannot be empty.\");"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        switch (command) {"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        case DELETE:"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        case DONE:"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        case FIND:"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d new String[] {params};"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /at \", 2);"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Event Timing cannot be empty.\");"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /by \", 2);"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Deadline Timing cannot be empty.\");"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid command.\");"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        return paramArr;"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     * Parses input from the file and returns a Task"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     * @param line String repesenting a task."},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * @return Task that the input from the file represents"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    public static Task parseTaskFromFile(String line) throws DukeException {"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"        String[] parsedLine \u003d line.split(\" ~ \");"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        TaskType taskType \u003d TaskType.fromString(parsedLine[0]);"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        Boolean isDone \u003d (Integer.valueOf(parsedLine[1]) \u003d\u003d 1) ? true : false;"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        String description \u003d parsedLine[2];"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"        Task newTask;"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        switch (taskType) {"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Todo(description, taskType);"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Event(description, taskType, parsedLine[3]);"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Deadline(description, taskType, parsedLine[3]);"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid TaskType.\");"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"        if (isDone) {"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"            newTask.markAsDone();"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"        return newTask;"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"     * Parses an int from a string, and throws a DukeException if the input"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"     * is not an integer."},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"     * @param integerString String that represents an integer."},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"     * @return an Integer."},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"    public static int parseInt(String integerString) throws DukeException {"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"            return Integer.parseInt(integerString);"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid Integer\");"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":114}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"public class Storage {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    private String directoryPath;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    private String filePath;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns a Storage object which performs saving and loading functions."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @param filePathArr an Array with the relative file path. "},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * eg. \"data/duke.txt\" would be [\"data\", \"duke.txt\"]"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public Storage(String[] filePathArr) {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        String relativeFilePath \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c filePathArr.length - 1; i++) {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"            relativeFilePath +\u003d filePathArr[i] + File.separator;"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        this.directoryPath \u003d System.getProperty(\"user.dir\") + File.separator + relativeFilePath;"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        this.filePath \u003d this.directoryPath + File.separator + filePathArr[filePathArr.length - 1];"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * Returns a TaskList loaded from the defined filePath"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * If filepath does not exist, returns a TaskList with an empty"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     * list of Tasks."},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * @return TaskList loaded from file"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        File fileDirectory \u003d new File(this.directoryPath);"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        if (!fileDirectory.exists()) {"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            fileDirectory.mkdirs();"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"            file.createNewFile();"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                taskList.addTask(Parser.parseTaskFromFile(line));"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            sc.close();"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"            return taskList;"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The tasks file is not accessible.\");"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(this.filePath + \" cannot be created.\");"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            throw e;"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"     * Saves the tasks to the file with defined filepath."},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"     * If the TaskList is empty, saves an empty file."},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"     * @param taskList Tasklist with the Tasks to be saved"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"    public void save(TaskList taskList) throws DukeException {"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"            FileWriter writer \u003d new FileWriter(filePath, false);"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"            writer.write(taskList.saveTaskListString());"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"            writer.close();"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"File cannot be saved.\");"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":77}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"    protected TaskType taskType;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    public Task(String description, TaskType taskType) {"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public void markAsDone() {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d true;"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * Returns a Unicode representation of Boolean Values."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * @return Unicode Character."},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    public String getStatusIcon() {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"✓\" : \"✘\");"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * Returns a String representing how it will be saved on the disk."},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     * @return String save representation of object."},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        return this.taskType.toString() "},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"                + delimiter "},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"                + ((this.isDone) ? 1 : 0)"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                + delimiter"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                + this.description;"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        return \"[\"+ this.taskType.toString() + \"][\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"enum TaskType {"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    TODO(\"T\"),"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    EVENT(\"E\"),"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    DEADLINE(\"D\");"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    private String type;"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    private TaskType(String type) {"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        this.type \u003d type;"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    public String getType() {"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * Generates a TaskType Object based on the Short-form String version."},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"     * @param type String that represents the type in short-form"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"     * @return TaskType"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"    public static TaskType fromString(String type) {"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        for (TaskType t: TaskType.values()) {"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"            if (t.toString().equals(type)) {"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"                return t;"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"        throw new IllegalArgumentException();"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":88}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    public TaskList() {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d taskList;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * Adds a Task to the TaskList."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * @param task Task to be added."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    public String addTask(Task task) {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        this.tasks.add(task);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        return \"Got it. I\u0027ve added this task:\\n    \""},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"                + task.toString()"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     * Deletes a task from the TaskList, given an index."},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * @return Success Mesasge String."},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    public String deleteTask(int taskIndex) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        Task deletedTask \u003d tasks.remove(taskIndex - 1);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        return \"Noted. I have removed this task:\\n    \""},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"                + deletedTask"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     * Marks a task in the TaskList as done, given an index"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"    public String doTask(int taskIndex) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        Task task \u003d tasks.get(taskIndex - 1);"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        task.markAsDone();"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n      \""},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                + task.toString();"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"     * Returns the tasks that are in the TaskList."},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     * @return String representing the tasks in the TaskList."},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"    public String findTask(String phrase) {"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"Here are the matching tasks in your list:\\n      \";"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"        for (Task t: this.tasks) {"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"            if (t.description.contains(phrase)) {"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                str +\u003d t.toString() + \"\\n      \";"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        return str.substring(0, str.length() - 7);"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"    public String listTasks() {"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        return this.toString();"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"     * Returns the save String representation of a TaskList."},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"     * @return a String representing a TaskList."},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"    public String saveTaskListString() {"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"\";"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"        for (Task t: this.tasks) {"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"            str +\u003d t.saveTaskString();"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"            str +\u003d \"\\n\";"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        return str;"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"     * Returns a String representation of the amount of tasks in the TaskList."},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"     * @return String representation of the amount of tasks in the TaskList."},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"    private String sizeToString() {"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"        return \"\\n    Now you have \" + this.tasks.size() + \" tasks in the list.\";"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"\";"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"            return str;"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"            str +\u003d String.valueOf(i + 1) + \": \" + this.tasks.get(i) + \"\\n    \";"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"        return str.substring(0, str.length() - 5);"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":118}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"     * Returns a Todo Task."},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    public Todo(String description, TaskType taskType) {"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString();"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        return super.toString();"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":24}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"    Scanner sc;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    public Ui() {"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * Prints Text formatted between 2 lines."},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * @param text Text to be printed."},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public void sendToUser(String text) {"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        String line \u003d \"    _______________________________________\\n    \";"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        System.out.println(line + text + \"\\n\" + line);"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    public void showError() {"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        System.out.println(\"Error.\");"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     * Prints the exception."},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * @param e The exception to be printed."},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    public void showError(Exception e) {"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        System.out.println(e);"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     * Reads a line from stdin."},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * "},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     * @return String representing a command."},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public String readCommand() {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        return this.sc.nextLine();"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * Prints a greeting message."},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    public void greet() {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        String logo \u003d "},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"                  \" ____        _        \\n\" "},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\" "},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\" "},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        System.out.println(\"Hello! I\u0027m a bot called Duke. Beep boop. \\nWhat do you want?\\n\");"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     * Prints a closing message."},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    public void bye() {"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        this.sc.close();"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"        this.sendToUser(\"BYE AND HAVE A GOOD DAY. Beep boop.\");"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":66}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    "},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_emptyCommand_emptyTwoElementArray() {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"        // dummyDuke.run()"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"\");"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[0]);"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordCommand_emptySecondElement() {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test\");"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordWithSpaceCommand_emptySecondElement() {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test \");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_manyCommand_twoElementArray() {"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test test2 test3 test4\");"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test2 test3 test4\", actual[1]);"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"blah"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"deadline"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"deadline return book /by 2020-12-11"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"event"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"event project meeting /at 2021-01-01"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"done"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"find"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"find book"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"delete 3"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":21}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"if exist ACTUAL2.TXT del ACTUAL2.TXT"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"REM to test if app can run without savefile existing"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"if exist ..\\bin\\data del ..\\bin\\data"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":15,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":16,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":18,"author":{"gitId":"-"},"content":")"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"REM to test the persistence of the savefile"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input2.txt \u003e ACTUAL2.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"FC ACTUAL2.TXT EXPECTED2.TXT"}],"authorContributionMap":{"onnwards":9,"-":18}}]
