[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"onnwards":16,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"This is a user guide for the users of Duchess, a Chatbot related to Duke."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"# Features "},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"### Keyword: `bye`"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"Exits the app."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"### Keyword: `list`"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"Lists all the tasks currently in the tasklist."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"### Keyword: `undo`"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"Undoes the most recent modification to the tasklist."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"### Keyword: `find`"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"Searches for tasks containing the specified words."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"### Keyword: `delete`"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"Delete the specified task."},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"### Keyword: `done`"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"Marks a specified task as done."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"### Keyword: `todo`"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"Adds a todo task with the specified description to the tasklist."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"### Keyword: `event`"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"Adds a event task with the specified description and time to the tasklist."},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"### Keyword: `deadline`"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"Adds a deadline task with the specified description and time to the tasklist."},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"### Unknown Keyword"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"User is asked to input a recognised command."},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"### Enter or Send with no typed message"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"Nothing happens."},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"# Usage of keywords"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"\u003c!-- ### `Keyword` - Describe action --\u003e"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"### Keyword - `bye`"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"Example of usage: `bye`"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"Expected outcome: App Exits."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"### Keyword - `list`"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"Example of usage: `list`"},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"Expected outcome: All tasks currently in the tasklist will be returned."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"### Keyword - `undo`"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"Example of usage: `undo`"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"Expected outcome: If the previous command was `delete 1`, the deleted task would be restored to the tasklist."},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"### Keyword - `find`"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"Example of usage: `find read book`"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"Expected outcome: All Tasks containing the words `read` or `book` will be returned."},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"### Keyword - `delete`"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"Example of usage: `delete 1`"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"Expected outcome: The first task in the tasklist will be deleted."},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"### Keyword - `done`"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"Example of usage: `done 1`"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"Expected outcome: If the first task in the list was not previously marked as done, it will now be marked as done. Otherwise, nothing happens."},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"### Keyword - `todo`"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"Example of usage: `todo borrow book`"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"Expected outcome: A Todo task with the specified description is added to the tasklist."},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"### Keyword - `event`"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"Example of usage: `event go to a party /at 2021-01-01`"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"Expected outcome: An Event task with the specified time and description is added to the tasklist."},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"### Keyword - `deadline`"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"Example of usage: `deadline finish homework /by 2021-01-01`"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"Expected outcome: A deadline task with the specified time and description is added to the tasklist."},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"\u003cbr\u003e"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"# Example Use of App"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"This is a demonstration of the app, if the taskList started from a clean state when the app starts."},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"### `list`"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command1.png)"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"### `todo borrow book`"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command2.png)"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"### `list`"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command3.png)"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"### `delete 1`"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command4.png)"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"### `list`"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command5.png)"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"### `undo`"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command6.png)"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"### `list`"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command7.png)"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"### `lala`"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command8.png)"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"### `deadline do homework`"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command9.png)"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"### `done 10`"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"![](./screenshots/command10.png)"}],"authorContributionMap":{"onnwards":93,"-":10}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * Represents a Task with a Deadline."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    protected LocalDate by;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns a Deadline Task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * @param by the string representation of the date that the task has to be done by."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the string representation of the date is not in the correct format."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public Deadline(String description, TaskType taskType, String by) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format. Please put it in the form of yyyy-mm-dd.\");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    private Deadline(String description, TaskType taskType, LocalDate by) {"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        this.by \u003d by;"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    public Task copy() {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        Deadline taskCopy \u003d new Deadline(this.description, this.taskType, this.by);"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        taskCopy.isDone \u003d this.isDone;"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        return taskCopy;"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.by;"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        return super.toString()"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                + \" (by: \""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":54}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    private DialogBox(String text, Image img, boolean isError) {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        if (isError) {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"            dialog.setTextFill(Color.RED);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        displayPicture.setImage(img);"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    private void flip() {"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        Collections.reverse(tmp);"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"     * Returns a DialogBox representing the user\u0027s dialog."},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"     * @param text String that the user inputs."},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     * @param img User\u0027s picture."},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"     * @return"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"        return new DialogBox(text, img, false);"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     * Returns a DialogBox representing Duke\u0027s dialog."},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * @param text String that Duke replies."},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     * @param img Duke\u0027s picture."},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"     * @return"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"    public static DialogBox getDukeDialog(String text, Image img, boolean isError) {"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"        var db \u003d new DialogBox(text, img, isError);"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"        db.flip();"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        return db;"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":79}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" * Represents a Chatbot which can interact with the user"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":" * and perform note-taking functions."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_GREET \u003d \"HELLO. I\u0027M A BOT CALLED DUCHESS. Beep boop.\""},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"            + \"\\nWhat do you want?\";"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_BYE \u003d \"BYE AND HAVE A GOOD DAY. Beep boop.\";"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_UNDO \u003d \"Got it. I have undone your most recent change \""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"            + \"to the tasklist.\";"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_UNKNOWN \u003d \"Command not recognised.\";"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_ERROR \u003d \"Error. Beep Boop.\";"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    private Storage storage;"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private TaskList tasks;"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    private List\u003cTaskList\u003e history;"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     * Creates a Duke Bot that interprets user input."},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * @param filePath Location of the storage list"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    public Duke(String... filePath) {"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        this.history \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d this.storage.load();"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"            this.showError(e);"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"     * Gets response in the form of a {@code Pair\u003cDukeStatusCode, String\u003e} given a user input."},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"     * @param input Input from the user."},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e getResponse(String input) {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        if (input.equals(\"\")) {"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            return this.noInput();"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        String[] commandArr \u003d Parser.parseCommand(input);"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        DukeCommand command \u003d DukeCommand.fromString(commandArr[0]);"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        String args \u003d commandArr[1];"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            switch (command) {"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            case BYE:"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"                return this.bye();"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            case UNKNOWN:"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                return this.unknownCommand();"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"            case LIST:"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"                return this.listTask();"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            case UNDO:"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                return this.undoTask();"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            case FIND:"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                return this.findTask(args);"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"            case DELETE:"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                return this.deleteTask(args);"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"            case DONE:"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                return this.doTask(args);"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"            case TODO:"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                return this.addTodoTask(args);"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"            case EVENT:"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                return this.addEventTask(args);"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            case DEADLINE:"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"                return this.addDeadlineTask(args);"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"            default:"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(MESSAGE_COMMAND_ERROR);"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"            return this.error(e);"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"        } finally {"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"            try {"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"                this.saveTasks();"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            } catch (DukeException e) {"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"                return this.error(e);"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"     * Wrapper method if user presses send or enter without any message."},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"     *         The {@code DukeStatusCode} will be {@code DukeStatusCode.NO_ACTION}."},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e noInput() {"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.NO_ACTION, \"\");"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"     * Wrapper method if a bye commands is received."},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"     *         The {@code DukeStatusCode} will be {@code DukeStatusCode.EXIT}."},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e bye() {"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.EXIT, MESSAGE_COMMAND_BYE);"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"     * Wrapper method if unknown commands are received."},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"     *         The {@code DukeStatusCode} will be {@code DukeStatusCode.ERROR}."},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e unknownCommand() {"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.ERROR, MESSAGE_COMMAND_UNKNOWN);"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"     * Wrapper method to list Tasks."},{"lineNumber":122,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cDukeStatusCode, String\u003e} with statuscode representing the result of"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"     *         the method call, and a string representing the message to be displayed."},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e listTask() {"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.OK, this.tasks.listTasks());"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"     * Undo most recent user command."},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cDukeStatusCode, String\u003e} with statuscode representing the result of"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"     *         the method call, and a string representing the message to be displayed."},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if there is nothing to undo."},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e undoTask() throws DukeException {"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"        if (this.history.size() \u003d\u003d 0) {"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"There is nothing to undo.\");"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d this.history.remove(this.history.size() - 1);"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.OK, MESSAGE_COMMAND_UNDO);"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":145,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":146,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of a finding of a task."},{"lineNumber":147,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":149,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":150,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing."},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e findTask(String args) throws DukeException {"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.FIND, args);"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.OK, this.tasks.findTask(params[0]));"},{"lineNumber":156,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of a deletion of a task."},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"     * Also adds the pre-modification state of the TaskList into history so that the command can be undone."},{"lineNumber":161,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":163,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing,"},{"lineNumber":166,"author":{"gitId":"onnwards"},"content":"     *                       or if the index is more than the amount of tasks in the taskList."},{"lineNumber":167,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":168,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e deleteTask(String args) throws DukeException {"},{"lineNumber":169,"author":{"gitId":"onnwards"},"content":"        TaskList oldTaskList \u003d new TaskList(this.tasks);"},{"lineNumber":170,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.DELETE, args);"},{"lineNumber":171,"author":{"gitId":"onnwards"},"content":"        int index \u003d Parser.parseInt(params[0]);"},{"lineNumber":172,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d new Pair\u003cDukeStatusCode, String\u003e ("},{"lineNumber":173,"author":{"gitId":"onnwards"},"content":"                DukeStatusCode.OK, this.tasks.deleteTask(index));"},{"lineNumber":174,"author":{"gitId":"onnwards"},"content":"        this.history.add(oldTaskList);"},{"lineNumber":175,"author":{"gitId":"onnwards"},"content":"        return response;"},{"lineNumber":176,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":177,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":178,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":179,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of marking a task as done."},{"lineNumber":180,"author":{"gitId":"onnwards"},"content":"     * Also adds the pre-modification state of the TaskList into history so that the command can be undone."},{"lineNumber":181,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":182,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":183,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":184,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":185,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing,"},{"lineNumber":186,"author":{"gitId":"onnwards"},"content":"     *                       or if the input cannot be parsed to an integer."},{"lineNumber":187,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e doTask(String args) throws DukeException {"},{"lineNumber":189,"author":{"gitId":"onnwards"},"content":"        TaskList oldTaskList \u003d new TaskList(this.tasks);"},{"lineNumber":190,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.DONE, args);"},{"lineNumber":191,"author":{"gitId":"onnwards"},"content":"        int index \u003d Parser.parseInt(params[0]);"},{"lineNumber":192,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d new Pair\u003cDukeStatusCode, String\u003e ("},{"lineNumber":193,"author":{"gitId":"onnwards"},"content":"                DukeStatusCode.OK, this.tasks.doTask(index));"},{"lineNumber":194,"author":{"gitId":"onnwards"},"content":"        this.history.add(oldTaskList);"},{"lineNumber":195,"author":{"gitId":"onnwards"},"content":"        return response;"},{"lineNumber":196,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":198,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":199,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of adding a"},{"lineNumber":200,"author":{"gitId":"onnwards"},"content":"     * Todo Task into {@code this.tasks}."},{"lineNumber":201,"author":{"gitId":"onnwards"},"content":"     * Also adds the pre-modification state of the TaskList into history so that the command can be undone."},{"lineNumber":202,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":204,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":205,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":206,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing,"},{"lineNumber":207,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e addTodoTask(String args) throws DukeException {"},{"lineNumber":209,"author":{"gitId":"onnwards"},"content":"        TaskList oldTaskList \u003d new TaskList(this.tasks);"},{"lineNumber":210,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.TODO, args);"},{"lineNumber":211,"author":{"gitId":"onnwards"},"content":"        Todo todoTask \u003d new Todo(params[0], TaskType.TODO);"},{"lineNumber":212,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d new Pair\u003cDukeStatusCode, String\u003e ("},{"lineNumber":213,"author":{"gitId":"onnwards"},"content":"                DukeStatusCode.OK, this.tasks.addTask(todoTask));"},{"lineNumber":214,"author":{"gitId":"onnwards"},"content":"        this.history.add(oldTaskList);"},{"lineNumber":215,"author":{"gitId":"onnwards"},"content":"        return response;"},{"lineNumber":216,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":218,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of adding an"},{"lineNumber":220,"author":{"gitId":"onnwards"},"content":"     * Event Task into {@code this.tasks}."},{"lineNumber":221,"author":{"gitId":"onnwards"},"content":"     * Also adds the pre-modification state of the TaskList into history so that the command can be undone."},{"lineNumber":222,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":223,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":224,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":225,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":226,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing,"},{"lineNumber":227,"author":{"gitId":"onnwards"},"content":"     *                       or if the string representation of the date input"},{"lineNumber":228,"author":{"gitId":"onnwards"},"content":"     *                       by the user is not in the correct format."},{"lineNumber":229,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":230,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e addEventTask(String args) throws DukeException {"},{"lineNumber":231,"author":{"gitId":"onnwards"},"content":"        TaskList oldTaskList \u003d new TaskList(this.tasks);"},{"lineNumber":232,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.EVENT, args);"},{"lineNumber":233,"author":{"gitId":"onnwards"},"content":"        Event eventTask \u003d new Event(params[0], TaskType.EVENT, params[1]);"},{"lineNumber":234,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d new Pair\u003cDukeStatusCode, String\u003e ("},{"lineNumber":235,"author":{"gitId":"onnwards"},"content":"                DukeStatusCode.OK, this.tasks.addTask(eventTask));"},{"lineNumber":236,"author":{"gitId":"onnwards"},"content":"        this.history.add(oldTaskList);"},{"lineNumber":237,"author":{"gitId":"onnwards"},"content":"        return response;"},{"lineNumber":238,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":240,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"onnwards"},"content":"     * Parses the input from the user and returns the result of adding a"},{"lineNumber":242,"author":{"gitId":"onnwards"},"content":"     * Deadline Task into {@code this.tasks}."},{"lineNumber":243,"author":{"gitId":"onnwards"},"content":"     * Also adds the pre-modification state of the TaskList into history so that the command can be undone."},{"lineNumber":244,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":245,"author":{"gitId":"onnwards"},"content":"     * @param args The rest of the input from the user, excluding the initial command, representing"},{"lineNumber":246,"author":{"gitId":"onnwards"},"content":"     *             the extra parameters required for the command."},{"lineNumber":247,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":248,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing,"},{"lineNumber":249,"author":{"gitId":"onnwards"},"content":"     *                       or if the string representation of the date input"},{"lineNumber":250,"author":{"gitId":"onnwards"},"content":"     *                       by the user is not in the correct format."},{"lineNumber":251,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":252,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e addDeadlineTask(String args) throws DukeException {"},{"lineNumber":253,"author":{"gitId":"onnwards"},"content":"        TaskList oldTaskList \u003d new TaskList(this.tasks);"},{"lineNumber":254,"author":{"gitId":"onnwards"},"content":"        String[] params \u003d Parser.parseParams(DukeCommand.DEADLINE, args);"},{"lineNumber":255,"author":{"gitId":"onnwards"},"content":"        Deadline deadlineTask \u003d new Deadline(params[0], TaskType.DEADLINE, params[1]);"},{"lineNumber":256,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d new Pair\u003cDukeStatusCode, String\u003e ("},{"lineNumber":257,"author":{"gitId":"onnwards"},"content":"                DukeStatusCode.OK, this.tasks.addTask(deadlineTask));"},{"lineNumber":258,"author":{"gitId":"onnwards"},"content":"        this.history.add(oldTaskList);"},{"lineNumber":259,"author":{"gitId":"onnwards"},"content":"        return response;"},{"lineNumber":260,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":262,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"onnwards"},"content":"     * Returns an error response."},{"lineNumber":264,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":265,"author":{"gitId":"onnwards"},"content":"     * @param e The exception"},{"lineNumber":266,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":267,"author":{"gitId":"onnwards"},"content":"     *         The {@code DukeStatusCode} will be {@code DukeStatusCode.ERROR}."},{"lineNumber":268,"author":{"gitId":"onnwards"},"content":"     *         The String will be a short description of the exception."},{"lineNumber":269,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":270,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cDukeStatusCode, String\u003e error(Exception e) {"},{"lineNumber":271,"author":{"gitId":"onnwards"},"content":"        return new Pair\u003cDukeStatusCode, String\u003e (DukeStatusCode.ERROR, this.showError(e));"},{"lineNumber":272,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":273,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":274,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":275,"author":{"gitId":"onnwards"},"content":"     * Returns a short description of the exception."},{"lineNumber":276,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":277,"author":{"gitId":"onnwards"},"content":"     * @param e The exception."},{"lineNumber":278,"author":{"gitId":"onnwards"},"content":"     * @return a short description of the excception."},{"lineNumber":279,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":280,"author":{"gitId":"onnwards"},"content":"    public String showError(Exception e) {"},{"lineNumber":281,"author":{"gitId":"onnwards"},"content":"        return e.getMessage();"},{"lineNumber":282,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":283,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":284,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":285,"author":{"gitId":"onnwards"},"content":"     * Wrapper method to save tasks to the disk."},{"lineNumber":286,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":287,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the tasks cannot be saved."},{"lineNumber":288,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"onnwards"},"content":"    public void saveTasks() throws DukeException {"},{"lineNumber":290,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":291,"author":{"gitId":"onnwards"},"content":"            this.storage.save(this.tasks);"},{"lineNumber":292,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":293,"author":{"gitId":"onnwards"},"content":"            this.storage.load();"},{"lineNumber":294,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":295,"author":{"gitId":"onnwards"},"content":"        this.storage.save(this.tasks);"},{"lineNumber":296,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":297,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":298,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":299,"author":{"gitId":"onnwards"},"content":"     * Returns a greeting message string."},{"lineNumber":300,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":301,"author":{"gitId":"onnwards"},"content":"    public String greet() {"},{"lineNumber":302,"author":{"gitId":"onnwards"},"content":"        return MESSAGE_COMMAND_GREET;"},{"lineNumber":303,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":305,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":306,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":307,"author":{"gitId":"onnwards"},"content":" * Represents the different commands that the user can input."},{"lineNumber":308,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":309,"author":{"gitId":"onnwards"},"content":"enum DukeCommand {"},{"lineNumber":310,"author":{"gitId":"onnwards"},"content":"    UNKNOWN,"},{"lineNumber":311,"author":{"gitId":"onnwards"},"content":"    BYE,"},{"lineNumber":312,"author":{"gitId":"onnwards"},"content":"    LIST,"},{"lineNumber":313,"author":{"gitId":"onnwards"},"content":"    UNDO,"},{"lineNumber":314,"author":{"gitId":"onnwards"},"content":"    FIND,"},{"lineNumber":315,"author":{"gitId":"onnwards"},"content":"    DELETE,"},{"lineNumber":316,"author":{"gitId":"onnwards"},"content":"    DONE,"},{"lineNumber":317,"author":{"gitId":"onnwards"},"content":"    TODO,"},{"lineNumber":318,"author":{"gitId":"onnwards"},"content":"    EVENT,"},{"lineNumber":319,"author":{"gitId":"onnwards"},"content":"    DEADLINE;"},{"lineNumber":320,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":321,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":322,"author":{"gitId":"onnwards"},"content":"     * Generates a DukeCommand based on the lowecase version of the text."},{"lineNumber":323,"author":{"gitId":"onnwards"},"content":"     * If the command is unknown, returns DukeCommand.UNKNOWN"},{"lineNumber":324,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":325,"author":{"gitId":"onnwards"},"content":"     * @param command String that represents the command in lowercase."},{"lineNumber":326,"author":{"gitId":"onnwards"},"content":"     * @return DukeCommand. If the command is unknown, DukeCommand.UNKNOWN."},{"lineNumber":327,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":328,"author":{"gitId":"onnwards"},"content":"    public static DukeCommand fromString(String command) {"},{"lineNumber":329,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 1; i \u003c DukeCommand.values().length; i++) {"},{"lineNumber":330,"author":{"gitId":"onnwards"},"content":"            if (DukeCommand.values()[i].toString().equals(command.toUpperCase())) {"},{"lineNumber":331,"author":{"gitId":"onnwards"},"content":"                return DukeCommand.values()[i];"},{"lineNumber":332,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":333,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":334,"author":{"gitId":"onnwards"},"content":"        return DukeCommand.values()[0];"},{"lineNumber":335,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":336,"author":{"gitId":"-"},"content":"}"},{"lineNumber":337,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":338,"author":{"gitId":"onnwards"},"content":"enum DukeStatusCode {"},{"lineNumber":339,"author":{"gitId":"onnwards"},"content":"    OK,"},{"lineNumber":340,"author":{"gitId":"onnwards"},"content":"    NO_ACTION,"},{"lineNumber":341,"author":{"gitId":"onnwards"},"content":"    ERROR,"},{"lineNumber":342,"author":{"gitId":"onnwards"},"content":"    EXIT,"},{"lineNumber":343,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":341,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * General Exception Handler specific to Duke."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     * Returns an exception with the specified detail message."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * @param message Exception message."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * Represents an Task which is an Event."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    protected LocalDate at;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns an Event class."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * @param at the string representation of the date that the task will happen."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the string representation of the date is not in the correct format."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public Event(String description, TaskType taskType, String at) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format. Please put it in the form of yyyy-mm-dd.\");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    private Event(String description, TaskType taskType, LocalDate at) {"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        this.at \u003d at;"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    public Task copy() {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        Event taskCopy \u003d new Event(this.description, this.taskType, this.at);"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        taskCopy.isDone \u003d this.isDone;"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        return taskCopy;"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.at;"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        return super.toString()"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                + \" (at: \""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                + this.at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":54}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    private Duke duke \u003d new Duke(\"data\", \"duchess.txt\");"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"            stage.setTitle(\"Duchess\");"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greet();"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":33}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private static final String IMAGE_FILEPATH_USER \u003d \"/images/User.png\";"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private static final String IMAGE_FILEPATH_BOT \u003d \"/images/Bot.png\";"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    private Duke duke;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(IMAGE_FILEPATH_USER));"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(IMAGE_FILEPATH_BOT));"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        this.duke \u003d duke;"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * Sends a greeting dialog."},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    public void greet() {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.greet(), dukeImage, false));"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    private void handleUserInput() {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        // String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e response \u003d duke.getResponse(input);"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        if (response.getKey() \u003d\u003d DukeStatusCode.NO_ACTION) {"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            return;"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        } else if (response.getKey() \u003d\u003d DukeStatusCode.EXIT) {"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            Platform.exit();"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            System.exit(0);"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        String responseString \u003d response.getValue();"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        boolean isError \u003d response.getKey() \u003d\u003d DukeStatusCode.ERROR;"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                DialogBox.getDukeDialog(responseString, dukeImage, isError)"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"        );"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        userInput.clear();"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":74}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Parser which can parse user input."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * Returns a 2 element String array delimited by a spacebar, regardless of input."},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     * If input is 1 word, the second element is an empty string."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * If input is 0 words, both elements are empty strings."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * @param command String to be parsed."},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @return String array with 2 elements."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static String[] parseCommand(String command) {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        assert command.length() !\u003d 0 : \"Command String is empty\";"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        String[] stringArr \u003d command.split(\" \", 2);"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        if (stringArr.length \u003d\u003d 1) {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"            stringArr \u003d new String[]{command, \"\"};"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        return stringArr;"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     * Returns String array with size depending on the command."},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * @param command the command that is given by the user."},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * @param params String to be parsed."},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * @return Parsed String array."},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing."},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    public static String[] parseParams(DukeCommand command, String params) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        String[] paramArr;"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"            if (command \u003d\u003d DukeCommand.DELETE) {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"A number must be provided.\");"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The description of a \""},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                    + command.name().toLowerCase() + \" cannot be empty.\");"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        assert command !\u003d null : \"DukeCommand cannot be null\";"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        switch (command) {"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        case DELETE:"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        case DONE:"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        case FIND:"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d new String[] {params};"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /at \", 2);"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Event Timing cannot be empty.\");"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /by \", 2);"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Deadline Timing cannot be empty.\");"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid command.\");"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        return paramArr;"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"     * Parses input from the file and returns a Task"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"     * @param line String repesenting a task."},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"     * @return Task that the input from the file represents"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the tasktype is invalid."},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"    public static Task parseTaskFromFile(String line) throws DukeException {"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        assert line.length() !\u003d 0 : \"Line cannot be empty\";"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        assert line.contains(\" ~ \") : \"Line must be delimited by \u0027 ~ \u0027\";"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"        String[] parsedLine \u003d line.split(\" ~ \");"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        TaskType taskType \u003d TaskType.fromString(parsedLine[0]);"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        Boolean isDone \u003d (Integer.valueOf(parsedLine[1]) \u003d\u003d 1) ? true : false;"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"        String description \u003d parsedLine[2];"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"        Task newTask;"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        switch (taskType) {"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Todo(description, taskType);"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Event(description, taskType, parsedLine[3]);"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Deadline(description, taskType, parsedLine[3]);"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid TaskType.\");"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"        if (isDone) {"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"            newTask.markAsDone();"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"        return newTask;"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"     * Parses an int from a string, and throws a DukeException if the input"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"     * is not an integer."},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"     * @param integerString String that represents an integer."},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"     * @return an Integer."},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the input cannot be parsed to an integer."},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    public static int parseInt(String integerString) throws DukeException {"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"            return Integer.parseInt(integerString);"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid Integer\");"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":120}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":" * Represents a Storage object which can perform"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" * saving and loading functions."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    private String directoryPath;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * Returns a Storage object which performs saving and loading functions."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * @param filePathArr an Array with the relative file path."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * eg. \"data/duke.txt\" would be [\"data\", \"duke.txt\"]"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    public Storage(String[] filePathArr) {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        String relativeFilePath \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c filePathArr.length - 1; i++) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            relativeFilePath +\u003d filePathArr[i] + File.separator;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        this.directoryPath \u003d System.getProperty(\"user.dir\") + File.separator + relativeFilePath;"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        this.filePath \u003d this.directoryPath + File.separator + filePathArr[filePathArr.length - 1];"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * Returns a TaskList loaded from the defined filePath"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * If filepath does not exist, returns a TaskList with an empty"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * list of Tasks."},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * @return TaskList loaded from file"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the file is not accessible, or cannot be created."},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        File fileDirectory \u003d new File(this.directoryPath);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        if (!fileDirectory.exists()) {"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            fileDirectory.mkdirs();"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"            file.createNewFile();"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                taskList.addTask(Parser.parseTaskFromFile(line));"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            sc.close();"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            return taskList;"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The tasks file is not accessible.\");"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(this.filePath + \" cannot be created.\");"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            throw e;"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * Saves the tasks to the file with defined filepath."},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     * If the TaskList is empty, saves an empty file."},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     * @param taskList Tasklist with the Tasks to be saved"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the file cannot be saved or written to."},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"    public void save(TaskList taskList) throws DukeException {"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            FileWriter writer \u003d new FileWriter(filePath, false);"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"            writer.write(taskList.saveTaskListString());"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"            writer.close();"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"File cannot be saved or written to.\");"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":81}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Task to be recorded in the TaskList."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    protected TaskType taskType;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * Returns a Task."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public Task(String description, TaskType taskType) {"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * Returns a copy of the Task"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     * @return A copy of the Task"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    public Task copy() {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        Task taskCopy \u003d new Task(this.description, this.taskType);"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        taskCopy.isDone \u003d this.isDone;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        return taskCopy;"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * Marks a task as done."},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    public void markAsDone() {"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d true;"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"     * Returns a Unicode representation of Boolean Values."},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"     * @return Unicode Character."},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"    public String getStatusIcon() {"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"✓\" : \"✘\");"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"    public String getDescription() {"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        return this.description;"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"     * Returns a String representing how it will be saved on the disk."},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"     * @return String save representation of object."},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        return this.taskType.toString()"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"                + delimiter"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                + ((this.isDone) ? 1 : 0)"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                + delimiter"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                + this.description;"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        return \"[\" + this.taskType.toString() + \"][\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"enum TaskType {"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"    TODO(\"T\"),"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"    EVENT(\"E\"),"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"    DEADLINE(\"D\");"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"    private String type;"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"    private TaskType(String type) {"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"        this.type \u003d type;"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"    public String getType() {"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"     * Generates a TaskType Object based on the Short-form String version."},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"     * @param type String that represents the type in short-form"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"     * @return TaskType"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"    public static TaskType fromString(String type) {"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"        for (TaskType t: TaskType.values()) {"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"            if (t.toString().equals(type)) {"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"                return t;"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"        throw new IllegalArgumentException();"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":111}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":" * Represents a List of Tasks, and is able to perform"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * operations on the List."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    private static final String NO_TASK_IN_LIST \u003d \"You have no tasks in your list.\";"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    private static final String NO_TASK_FOUND \u003d \"No tasks have been found matching your search terms.\";"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * Returns an empty TaskList that represents a List of Tasks."},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * Returns a copy of the TaskList"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     * @param taskList TaskList"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    public TaskList(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        for (Task task: taskList.tasks) {"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            this.tasks.add(task.copy());"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        // this.tasks \u003d new ArrayList\u003c\u003e(taskList.tasks);"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * Returns a TaskList that represents a List of Tasks."},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     * @param tasks the list of tasks that the TaskList represents"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     * Adds a Task to the TaskList."},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     * @param task Task to be added."},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"    public String addTask(Task task) {"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        this.tasks.add(task);"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        return \"Got it. I\u0027ve added this task:\\n    \""},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                + task.toString()"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"     * Deletes a task from the TaskList, given an index."},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the taskIndex is more than the amount of tasks in the taskList."},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    public String deleteTask(int taskIndex) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        Task deletedTask \u003d tasks.remove(taskIndex - 1);"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        return \"Noted. I have removed this task:\\n    \""},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                + deletedTask"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"     * Marks a task in the TaskList as done, given an index"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the taskIndex is more than the amount of tasks in the taskList."},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"    public String doTask(int taskIndex) throws DukeException {"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        Task task \u003d tasks.get(taskIndex - 1);"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"        task.markAsDone();"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n      \""},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"                + task.toString();"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"     * Returns the tasks that are in the TaskList."},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"     * @return String representing the tasks in the TaskList that match the search terms."},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"    public String findTask(String wordString) {"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"            return NO_TASK_IN_LIST;"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"        String startingString \u003d \"Here are the matching tasks in your list:\\n      \";"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"        String[] words \u003d wordString.split(\" \");"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"        String taskString \u003d this.tasks.stream().filter(task -\u003e {"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"            for (String word: words) {"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"                if (task.description.contains(word)) {"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"                    return true;"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"                }"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"            return false;"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        }).map(task -\u003e {"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"            return task.toString() + \"\\n      \";"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"        }).reduce(\"\", String::concat);"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"        if (taskString.length() \u003d\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"            return NO_TASK_FOUND;"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"        taskString \u003d startingString + taskString;"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"        return taskString.substring(0, taskString.length() - 7);"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"     * Returns the string representation of the TaskList"},{"lineNumber":122,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"     * @return String representation of the taskList."},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"    public String listTasks() {"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"            return NO_TASK_IN_LIST;"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"        return \"Here are the tasks in your list:\\n    \" + this.toString();"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"     * Returns the save String representation of a TaskList."},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"     * @return a String representing a TaskList, in a format that"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"     * is conducive for saving to a text file."},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"    public String saveTaskListString() {"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":"        return this.tasks.stream()"},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"                .map(task -\u003e task.saveTaskString() + \"\\n\")"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"                .reduce(\"\", String::concat);"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":144,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"onnwards"},"content":"     * Returns a String representation of the amount of tasks in the TaskList."},{"lineNumber":146,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":147,"author":{"gitId":"onnwards"},"content":"     * @return String representation of the amount of tasks in the TaskList."},{"lineNumber":148,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"onnwards"},"content":"    private String sizeToString() {"},{"lineNumber":150,"author":{"gitId":"onnwards"},"content":"        return \"\\nNow, you have \" + this.tasks.size() + \" tasks in the list.\";"},{"lineNumber":151,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":153,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":154,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":155,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"\";"},{"lineNumber":156,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":157,"author":{"gitId":"onnwards"},"content":"            return str;"},{"lineNumber":158,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"},{"lineNumber":160,"author":{"gitId":"onnwards"},"content":"            str +\u003d String.valueOf(i + 1) + \": \" + this.tasks.get(i) + \"\\n    \";"},{"lineNumber":161,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":163,"author":{"gitId":"onnwards"},"content":"        return str.substring(0, str.length() - 5);"},{"lineNumber":164,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":165}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Todo Task."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * Returns a Todo Task."},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public Todo(String description, TaskType taskType) {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public Task copy() {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        return new Todo(this.description, this.taskType);"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString();"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"        return super.toString();"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":32}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"70.0\" fitWidth\u003d\"70.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"onnwards":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"onnwards":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class DukeTest {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    public void constructor_filePathProvided_noExceptionThrown() {"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"        assertDoesNotThrow(() -\u003e new Duke(\"bin\", \"test\", \"duke\"));"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public void getResponse_emptyCommand_noActionStatusCode() {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        Pair\u003cDukeStatusCode, String\u003e actual \u003d new Duke(\"bin\", \"test\", \"duke\").getResponse(\"\");"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        assertEquals(DukeStatusCode.NO_ACTION, actual.getKey());"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual.getValue());"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":23}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordCommand_emptySecondElement() {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test\");"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordWithSpaceCommand_emptySecondElement() {"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test \");"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_manyCommand_twoElementArray() {"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test test2 test3 test4\");"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test2 test3 test4\", actual[1]);"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"blah"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"deadline"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"deadline return book /by 2020-12-11"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"event"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"event project meeting /at 2021-01-01"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"done"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"find"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"find book"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"delete 3"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":21}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"if exist ACTUAL2.TXT del ACTUAL2.TXT"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"REM to test if app can run without savefile existing"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"if exist ..\\bin\\data del ..\\bin\\data"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":15,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":16,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":18,"author":{"gitId":"-"},"content":")"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"REM to test the persistence of the savefile"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input2.txt \u003e ACTUAL2.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"FC ACTUAL2.TXT EXPECTED2.TXT"}],"authorContributionMap":{"onnwards":9,"-":18}}]
