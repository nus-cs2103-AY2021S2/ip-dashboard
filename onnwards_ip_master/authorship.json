[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"onnwards":15,"-":46}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * Represents a Task with a Deadline."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    protected LocalDate by;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns a Deadline Task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * @param by the string representation of the date that the task has to be done by."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the string representation of the date is not in the correct format."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public Deadline(String description, TaskType taskType, String by) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format. Please put it in the form of yyyy-mm-dd.\");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.by;"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        return super.toString()"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                + \" (by: \""},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":42}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"     * Returns a DialogBox representing the user\u0027s dialog."},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"     * @param text String that the user inputs."},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"     * @param img User\u0027s picture."},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"     * @return"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        return new DialogBox(text, img);"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     * Returns a DialogBox representing Duke\u0027s dialog."},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * @param text String that Duke replies."},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     * @param img Duke\u0027s picture."},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     * @return"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        db.flip();"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        return db;"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":75}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":" * Represents a Chatbot which can interact with the user"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":" * and perform note-taking functions."},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_GREET \u003d \"HELLO. I\u0027M A BOT CALLED DUCHESS. Beep boop.\""},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"            + \"\\nWhat do you want?\";"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_BYE \u003d \"BYE AND HAVE A GOOD DAY. Beep boop.\";"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_UNKNOWN \u003d \"Command not recognised.\";"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    private static final String MESSAGE_COMMAND_ERROR \u003d \"Error. Beep Boop.\";"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    private TaskList tasks;"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * Creates a Duke Bot that interprets user input."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     * @param filePath Location of the storage list"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public Duke(String... filePath) {"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d this.storage.load();"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"            this.showError(e);"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * Gets response in the form of a {@code Pair\u003cInteger, String\u003e} given a user input."},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * @param input Input from the user."},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     * @return {@code Pair\u003cInteger, String\u003e} representing a statusCode, and the message to be printed."},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public Pair\u003cInteger, String\u003e getResponse(String input) {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        String[] commandArr \u003d Parser.parseCommand(input);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        String[] params;"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"        int index;"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        DukeCommand command \u003d DukeCommand.fromString(commandArr[0]);"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"            switch (command) {"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            case BYE:"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (1, MESSAGE_COMMAND_BYE);"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            case UNKNOWN:"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, MESSAGE_COMMAND_UNKNOWN);"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"            case LIST:"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.listTasks());"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            case DELETE:"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                index \u003d Parser.parseInt(params[0]);"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.deleteTask(index));"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            case DONE:"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"                index \u003d Parser.parseInt(params[0]);"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.doTask(index));"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            case FIND:"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.findTask(params[0]));"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            case TODO:"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.addTask("},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                    new Todo(params[0], TaskType.TODO)"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"                ));"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"            case EVENT:"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.addTask("},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"                    new Event(params[0], TaskType.EVENT, params[1])"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                ));"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            case DEADLINE:"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"                params \u003d Parser.parseParams(command, commandArr[1]);"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.tasks.addTask("},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"                    new Deadline(params[0], TaskType.DEADLINE, params[1])"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"                ));"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"            default:"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(MESSAGE_COMMAND_ERROR);"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"            return new Pair\u003cInteger, String\u003e (0, this.showError(e));"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"        } finally {"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"            try {"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"                this.storage.save(this.tasks);"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"            } catch (DukeException e) {"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"                return new Pair\u003cInteger, String\u003e (0, this.showError(e));"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"     * Returns a short description of the exception."},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"     * @param e The exception."},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"     * @return a short description of the excception."},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"    public String showError(Exception e) {"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"        return e.getMessage();"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"     * Returns a greeting message string."},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"    public String greet() {"},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"        return MESSAGE_COMMAND_GREET;"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"enum DukeCommand {"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"    UNKNOWN,"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"    BYE,"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"    LIST,"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"    DELETE,"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"    DONE,"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"    FIND,"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"    TODO,"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"    EVENT,"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":"    DEADLINE;"},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":122,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"     * Generates a DukeCommand based on the lowecase version of the text."},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"     * If the command is unknown, returns DukeCommand.UNKNOWN"},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"     * @param command String that represents the command in lowercase."},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"     * @return DukeCommand. If the command is unknown, DukeCommand.UNKNOWN."},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":"    public static DukeCommand fromString(String command) {"},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 1; i \u003c DukeCommand.values().length; i++) {"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"            if (DukeCommand.values()[i].toString().equals(command.toUpperCase())) {"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"                return DukeCommand.values()[i];"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"        return DukeCommand.values()[0];"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"onnwards":135,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * General Exception Handler specific to Duke."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     * Returns an exception with the specified detail message."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * @param message Exception message."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":17}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * Represents an Task which is an Event."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    protected LocalDate at;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns an Event class."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * @param at the string representation of the date that the task will happen."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the string representation of the date is not in the correct format."},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    public Event(String description, TaskType taskType, String at) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Date is not in the correct format. Please put it in the form of yyyy-mm-dd.\");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString() + delimiter + this.at;"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        return super.toString()"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                + \" (at: \""},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"                + this.at.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":42}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    private Duke duke \u003d new Duke(\"data\", \"duchess.txt\");"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"            stage.setTitle(\"Duchess\");"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greet();"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":33}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"import javafx.util.Pair;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    private static final String IMAGE_FILEPATH_USER \u003d \"/images/User.png\";"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    private static final String IMAGE_FILEPATH_BOT \u003d \"/images/Bot.png\";"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    private Duke duke;"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(IMAGE_FILEPATH_USER));"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(IMAGE_FILEPATH_BOT));"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        this.duke \u003d duke;"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * Sends a greeting dialog."},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"    public void greet() {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.greet(), dukeImage));"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"    private void handleUserInput() {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        // String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"        Pair\u003cInteger, String\u003e response \u003d duke.getResponse(input);"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        if (response.getKey() !\u003d 0) {"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            Platform.exit();"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            System.exit(0);"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"        String responseString \u003d response.getValue();"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"                DialogBox.getDukeDialog(responseString, dukeImage)"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"        );"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        userInput.clear();"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":71}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Parser which can parse user input."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * Returns a 2 element String array delimited by a spacebar, regardless of imput"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     * If input is 1 word, the second element is an empty string."},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * If input is 0 words, both elements are empty strings."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     * @param command String to be parsed."},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @return String array with 2 elements."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public static String[] parseCommand(String command) {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        String[] stringArr \u003d command.split(\" \", 2);"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        if (stringArr.length \u003d\u003d 1) {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"            stringArr \u003d new String[]{command, \"\"};"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        return stringArr;"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     * Returns String array with size depending on the command."},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"     * @param command the command that is given by the user."},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"     * @param params String to be parsed."},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"     * @return Parsed String array."},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the required parameters for the specific command are missing."},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    public static String[] parseParams(DukeCommand command, String params) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        String[] paramArr;"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        if (params.length() \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"            if (command \u003d\u003d DukeCommand.DELETE) {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"A number must be provided.\");"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The description of a \""},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                    + command.name().toLowerCase() + \" cannot be empty.\");"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        switch (command) {"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        case DELETE:"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        case DONE:"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        case FIND:"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"            // Fallthrough"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d new String[] {params};"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /at \", 2);"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Event Timing cannot be empty.\");"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"            paramArr \u003d params.split(\" /by \", 2);"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            if (paramArr.length !\u003d 2) {"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"                throw new DukeException(\"Deadline Timing cannot be empty.\");"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid command.\");"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"        return paramArr;"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * Parses input from the file and returns a Task"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"     * @param line String repesenting a task."},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"     * @return Task that the input from the file represents"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the tasktype is invalid."},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"    public static Task parseTaskFromFile(String line) throws DukeException {"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        String[] parsedLine \u003d line.split(\" ~ \");"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"        TaskType taskType \u003d TaskType.fromString(parsedLine[0]);"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        Boolean isDone \u003d (Integer.valueOf(parsedLine[1]) \u003d\u003d 1) ? true : false;"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"        String description \u003d parsedLine[2];"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"        Task newTask;"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        switch (taskType) {"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        case TODO:"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Todo(description, taskType);"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"        case EVENT:"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Event(description, taskType, parsedLine[3]);"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"        case DEADLINE:"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            newTask \u003d new Deadline(description, taskType, parsedLine[3]);"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"            break;"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"        default:"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid TaskType.\");"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"        if (isDone) {"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"            newTask.markAsDone();"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        return newTask;"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"     * Parses an int from a string, and throws a DukeException if the input"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"     * is not an integer."},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"     * @param integerString String that represents an integer."},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":"     * @return an Integer."},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the input cannot be parsed to an integer."},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"    public static int parseInt(String integerString) throws DukeException {"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"            return Integer.parseInt(integerString);"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"Invalid Integer\");"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":116}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":" * Represents a Storage object which can perform"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":" * saving and loading functions."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    private String directoryPath;"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"     * Returns a Storage object which performs saving and loading functions."},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"     * @param filePathArr an Array with the relative file path."},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * eg. \"data/duke.txt\" would be [\"data\", \"duke.txt\"]"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    public Storage(String[] filePathArr) {"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"        String relativeFilePath \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c filePathArr.length - 1; i++) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"            relativeFilePath +\u003d filePathArr[i] + File.separator;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        this.directoryPath \u003d System.getProperty(\"user.dir\") + File.separator + relativeFilePath;"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"        this.filePath \u003d this.directoryPath + File.separator + filePathArr[filePathArr.length - 1];"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * Returns a TaskList loaded from the defined filePath"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     * If filepath does not exist, returns a TaskList with an empty"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"     * list of Tasks."},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"     * @return TaskList loaded from file"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the file is not accessible, or cannot be created."},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"        File fileDirectory \u003d new File(this.directoryPath);"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        if (!fileDirectory.exists()) {"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"            fileDirectory.mkdirs();"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"        File file \u003d new File(this.filePath);"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"            file.createNewFile();"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"            Scanner sc \u003d new Scanner(file);"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"                taskList.addTask(Parser.parseTaskFromFile(line));"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"            sc.close();"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"            return taskList;"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"The tasks file is not accessible.\");"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(this.filePath + \" cannot be created.\");"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"            throw e;"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"     * Saves the tasks to the file with defined filepath."},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"     * If the TaskList is empty, saves an empty file."},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"     * @param taskList Tasklist with the Tasks to be saved"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the file cannot be saved or written to."},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"    public void save(TaskList taskList) throws DukeException {"},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"            FileWriter writer \u003d new FileWriter(filePath, false);"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"            writer.write(taskList.saveTaskListString());"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"            writer.close();"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"        } catch (IOException e) {"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"File cannot be saved or written to.\");"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":81}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Task to be recorded in the TaskList."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    protected TaskType taskType;"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * Returns a Task."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    public Task(String description, TaskType taskType) {"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     * Marks a task as done."},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    public void markAsDone() {"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        this.isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     * Returns a Unicode representation of Boolean Values."},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * @return Unicode Character."},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    public String getStatusIcon() {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"✓\" : \"✘\");"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        // return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"        return this.description;"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     * Returns a String representing how it will be saved on the disk."},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     * @return String save representation of object."},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"        String delimiter \u003d \" ~ \";"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        return this.taskType.toString()"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"                + delimiter"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"                + ((this.isDone) ? 1 : 0)"},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                + delimiter"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                + this.description;"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"        return \"[\" + this.taskType.toString() + \"][\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"}"},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"enum TaskType {"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"    TODO(\"T\"),"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"    EVENT(\"E\"),"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"    DEADLINE(\"D\");"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"    private String type;"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"    private TaskType(String type) {"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"        this.type \u003d type;"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"    public String getType() {"},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"     * Generates a TaskType Object based on the Short-form String version."},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"     * @param type String that represents the type in short-form"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"     * @return TaskType"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"    public static TaskType fromString(String type) {"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"        for (TaskType t: TaskType.values()) {"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"            if (t.toString().equals(type)) {"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"                return t;"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"        throw new IllegalArgumentException();"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"        return this.type;"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":100}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":" * Represents a List of Tasks, and is able to perform"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":" * operations on the List."},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"     * Returns an empty TaskList that represents a List of Tasks."},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"     * Returns a TaskList that represents a List of Tasks."},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"     * @param tasks the list of tasks that the TaskList represents"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":"     * Adds a Task to the TaskList."},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"     * @param task Task to be added."},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"    public String addTask(Task task) {"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"        this.tasks.add(task);"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"        return \"Got it. I\u0027ve added this task:\\n    \""},{"lineNumber":38,"author":{"gitId":"onnwards"},"content":"                + task.toString()"},{"lineNumber":39,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":40,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":42,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"onnwards"},"content":"     * Deletes a task from the TaskList, given an index."},{"lineNumber":44,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":46,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":47,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the taskIndex is more than the amount of tasks in the taskList."},{"lineNumber":48,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"onnwards"},"content":"    public String deleteTask(int taskIndex) throws DukeException {"},{"lineNumber":50,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":51,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":52,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"onnwards"},"content":"        Task deletedTask \u003d tasks.remove(taskIndex - 1);"},{"lineNumber":54,"author":{"gitId":"onnwards"},"content":"        return \"Noted. I have removed this task:\\n    \""},{"lineNumber":55,"author":{"gitId":"onnwards"},"content":"                + deletedTask"},{"lineNumber":56,"author":{"gitId":"onnwards"},"content":"                + this.sizeToString();"},{"lineNumber":57,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":59,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"onnwards"},"content":"     * Marks a task in the TaskList as done, given an index"},{"lineNumber":61,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"onnwards"},"content":"     * @param taskIndex 1-based index for the task to be deleted."},{"lineNumber":63,"author":{"gitId":"onnwards"},"content":"     * @return Success Message String."},{"lineNumber":64,"author":{"gitId":"onnwards"},"content":"     * @throws DukeException if the taskIndex is more than the amount of tasks in the taskList."},{"lineNumber":65,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"onnwards"},"content":"    public String doTask(int taskIndex) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"onnwards"},"content":"        if (taskIndex \u003c\u003d 0 || taskIndex \u003e this.tasks.size()) {"},{"lineNumber":68,"author":{"gitId":"onnwards"},"content":"            throw new DukeException(\"A task with this number does not exist.\");"},{"lineNumber":69,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"onnwards"},"content":"        Task task \u003d tasks.get(taskIndex - 1);"},{"lineNumber":71,"author":{"gitId":"onnwards"},"content":"        task.markAsDone();"},{"lineNumber":72,"author":{"gitId":"onnwards"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n      \""},{"lineNumber":73,"author":{"gitId":"onnwards"},"content":"                + task.toString();"},{"lineNumber":74,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":76,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"onnwards"},"content":"     * Returns the tasks that are in the TaskList."},{"lineNumber":78,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"onnwards"},"content":"     * @return String representing the tasks in the TaskList."},{"lineNumber":80,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"onnwards"},"content":"    public String findTask(String words) {"},{"lineNumber":82,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"Here are the matching tasks in your list:\\n      \";"},{"lineNumber":83,"author":{"gitId":"onnwards"},"content":"        String[] wordList \u003d words.split(\" \");"},{"lineNumber":84,"author":{"gitId":"onnwards"},"content":"        for (Task t: this.tasks) {"},{"lineNumber":85,"author":{"gitId":"onnwards"},"content":"            for (String word: wordList) {"},{"lineNumber":86,"author":{"gitId":"onnwards"},"content":"                if (t.description.contains(word)) {"},{"lineNumber":87,"author":{"gitId":"onnwards"},"content":"                    str +\u003d t.toString() + \"\\n      \";"},{"lineNumber":88,"author":{"gitId":"onnwards"},"content":"                    break;"},{"lineNumber":89,"author":{"gitId":"onnwards"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"onnwards"},"content":"            }"},{"lineNumber":91,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"onnwards"},"content":"        return str.substring(0, str.length() - 7);"},{"lineNumber":93,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":95,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"onnwards"},"content":"     * Returns the string representation of the TaskList"},{"lineNumber":97,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"onnwards"},"content":"     * @return the lists of tasks"},{"lineNumber":99,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"onnwards"},"content":"    public String listTasks() {"},{"lineNumber":101,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":102,"author":{"gitId":"onnwards"},"content":"            return \"You have no tasks in your list.\";"},{"lineNumber":103,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"onnwards"},"content":"        return this.toString();"},{"lineNumber":105,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":107,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"onnwards"},"content":"     * Returns the save String representation of a TaskList."},{"lineNumber":109,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"onnwards"},"content":"     * @return a String representing a TaskList."},{"lineNumber":111,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"onnwards"},"content":"    public String saveTaskListString() {"},{"lineNumber":113,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"\";"},{"lineNumber":114,"author":{"gitId":"onnwards"},"content":"        for (Task t: this.tasks) {"},{"lineNumber":115,"author":{"gitId":"onnwards"},"content":"            str +\u003d t.saveTaskString();"},{"lineNumber":116,"author":{"gitId":"onnwards"},"content":"            str +\u003d \"\\n\";"},{"lineNumber":117,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"onnwards"},"content":"        return str;"},{"lineNumber":119,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":121,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"onnwards"},"content":"     * Returns a String representation of the amount of tasks in the TaskList."},{"lineNumber":123,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"onnwards"},"content":"     * @return String representation of the amount of tasks in the TaskList."},{"lineNumber":125,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"onnwards"},"content":"    private String sizeToString() {"},{"lineNumber":127,"author":{"gitId":"onnwards"},"content":"        return \"\\nNow, you have \" + this.tasks.size() + \" tasks in the list.\";"},{"lineNumber":128,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":130,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":131,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":132,"author":{"gitId":"onnwards"},"content":"        String str \u003d \"\";"},{"lineNumber":133,"author":{"gitId":"onnwards"},"content":"        if (this.tasks.size() \u003d\u003d 0) {"},{"lineNumber":134,"author":{"gitId":"onnwards"},"content":"            return str;"},{"lineNumber":135,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"onnwards"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"},{"lineNumber":137,"author":{"gitId":"onnwards"},"content":"            str +\u003d String.valueOf(i + 1) + \": \" + this.tasks.get(i) + \"\\n    \";"},{"lineNumber":138,"author":{"gitId":"onnwards"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":140,"author":{"gitId":"onnwards"},"content":"        return str.substring(0, str.length() - 5);"},{"lineNumber":141,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":142}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":" * Represents a Todo Task."},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":" */"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"     * Returns a Todo Task."},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"     * @param description description of the task."},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"     * @param taskType the type of the task."},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    public Todo(String description, TaskType taskType) {"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        super(description, taskType);"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"    public String saveTaskString() {"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        return super.saveTaskString();"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"        return super.toString();"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":27}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"onnwards":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"onnwards":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_emptyCommand_emptyTwoElementArray() {"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"        // dummyDuke.run()"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"\");"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[0]);"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordCommand_emptySecondElement() {"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test\");"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_oneWordWithSpaceCommand_emptySecondElement() {"},{"lineNumber":26,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test \");"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":28,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"\", actual[1]);"},{"lineNumber":29,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":31,"author":{"gitId":"onnwards"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"onnwards"},"content":"    public void parseCommand_manyCommand_twoElementArray() {"},{"lineNumber":33,"author":{"gitId":"onnwards"},"content":"        String[] actual \u003d Parser.parseCommand(\"test test2 test3 test4\");"},{"lineNumber":34,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test\", actual[0]);"},{"lineNumber":35,"author":{"gitId":"onnwards"},"content":"        assertEquals(\"test2 test3 test4\", actual[1]);"},{"lineNumber":36,"author":{"gitId":"onnwards"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"onnwards"},"content":"}"}],"authorContributionMap":{"onnwards":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"blah"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"deadline"},{"lineNumber":7,"author":{"gitId":"onnwards"},"content":"deadline return book /by Sunday"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"deadline return book /by 2020-12-11"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":"event"},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"event project meeting /at 2021-01-01"},{"lineNumber":12,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":13,"author":{"gitId":"onnwards"},"content":"done"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"done 2"},{"lineNumber":15,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":16,"author":{"gitId":"onnwards"},"content":"find"},{"lineNumber":17,"author":{"gitId":"onnwards"},"content":"find book"},{"lineNumber":18,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"onnwards"},"content":"delete 3"},{"lineNumber":20,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":21,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":21}},{"path":"text-ui-test/input2.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"onnwards"},"content":"list"},{"lineNumber":2,"author":{"gitId":"onnwards"},"content":"delete"},{"lineNumber":3,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":4,"author":{"gitId":"onnwards"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"onnwards"},"content":"delete 1"},{"lineNumber":6,"author":{"gitId":"onnwards"},"content":"bye"}],"authorContributionMap":{"onnwards":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"onnwards"},"content":"if exist ACTUAL2.TXT del ACTUAL2.TXT"},{"lineNumber":9,"author":{"gitId":"onnwards"},"content":""},{"lineNumber":10,"author":{"gitId":"onnwards"},"content":"REM to test if app can run without savefile existing"},{"lineNumber":11,"author":{"gitId":"onnwards"},"content":"if exist ..\\bin\\data del ..\\bin\\data"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":14,"author":{"gitId":"onnwards"},"content":"javac  -cp ..\\src\\main\\java\\duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":15,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":16,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":18,"author":{"gitId":"-"},"content":")"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"onnwards"},"content":"REM to test the persistence of the savefile"},{"lineNumber":24,"author":{"gitId":"onnwards"},"content":"java -classpath ..\\bin duke.Duke \u003c input2.txt \u003e ACTUAL2.TXT"},{"lineNumber":25,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"onnwards"},"content":"FC ACTUAL2.TXT EXPECTED2.TXT"}],"authorContributionMap":{"onnwards":9,"-":18}}]
