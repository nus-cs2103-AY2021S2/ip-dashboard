[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":""},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"linhns":16,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"[D][ ] comeback(by: Jul 04 2024)"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"[T][ ] imprison Joe"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"[E][ ] expose Hunter(at: Jun 22 2023)"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"[T][ ] MAKE AMERICA GREAT AGAIN"}],"authorContributionMap":{"linhns":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"Welcome to *Duke*! A customized task manager with a light political twist."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"To whom politics may concern, Duke will help you laugh while managing your tasks."},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"There are exceptions to Duke, just like politics!"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"## Reading this guide"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"Commands often come in the following format:"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"`command (ARGUMENTS IF ANY)`"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"Dates input only accepted in this form: `YYYY-MM-DD`"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":""},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"Outcomes will be formatted in ``Outcome``"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":""},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"Assume that the task list contains the following tasks:"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"[D][ ] comeback(by: Jul 04 2024)"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"[T][ ] imprison Joe"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"[E][ ] expose Hunter(at: Jun 22 2023)"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"[T][ ] MAKE AMERICA GREAT AGAIN"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"### GUI available "},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"Now you get to see who\u0027s who!"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"### `todo` - Add a todo task"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"Adds a todo task to the list of tasks."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"`todo rally`"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":""},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":""},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"Got it. Now I have added this task:"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"  [T][ ] rally"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"Now you have 5 tasks in the list."},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":""},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"### `deadline` - Add a deadline task"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":""},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"Adds a deadline task to the list of tasks."},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"Remember to follow specified input format given above."},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"The date must follow `/by`"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":""},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":""},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"`deadline raise campaign funds /by 2024-11-03`"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":""},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"Got it. Now I have added this task:"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"  [D][ ] raise campaign funds(by: Nov 03 2024)"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"Now you have 6 tasks in the list."},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":""},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"### `event` - Add an event task"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":""},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"Adds an event task to the list of tasks."},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"Remember to follow specified input format given above."},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"The date must follow `/at`."},{"lineNumber":70,"author":{"gitId":"linhns"},"content":""},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":""},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"`event victory party /at 2024-11-08`"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":""},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":""},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"Got it. Now I have added this task:"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"  [E][ ] victory party(by: Nov 08 2024)"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"Now you have 7 tasks in the list."},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":""},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"### `done` - Mark a task as done"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":""},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"Marks a task at the specified index as done."},{"lineNumber":86,"author":{"gitId":"linhns"},"content":""},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":""},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"`done 4`"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":""},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":""},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"  [T][X] MAKE AMERICA GREAT AGAIN"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":97,"author":{"gitId":"linhns"},"content":""},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"### `delete` - Delete a task"},{"lineNumber":99,"author":{"gitId":"linhns"},"content":""},{"lineNumber":100,"author":{"gitId":"linhns"},"content":"Deletes a task at a specified index."},{"lineNumber":101,"author":{"gitId":"linhns"},"content":""},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":""},{"lineNumber":104,"author":{"gitId":"linhns"},"content":"`delete 6`"},{"lineNumber":105,"author":{"gitId":"linhns"},"content":""},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":""},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":110,"author":{"gitId":"linhns"},"content":"  [D][ ] raise campaign funds(by: Nov 03 2024)"},{"lineNumber":111,"author":{"gitId":"linhns"},"content":"Now you have 6 tasks in the list."},{"lineNumber":112,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":113,"author":{"gitId":"linhns"},"content":""},{"lineNumber":114,"author":{"gitId":"linhns"},"content":"### `list` - List all the tasks"},{"lineNumber":115,"author":{"gitId":"linhns"},"content":""},{"lineNumber":116,"author":{"gitId":"linhns"},"content":"List all the tasks in added order. "},{"lineNumber":117,"author":{"gitId":"linhns"},"content":"Note that when there are many tasks, parts are to be clipped"},{"lineNumber":118,"author":{"gitId":"linhns"},"content":"from display."},{"lineNumber":119,"author":{"gitId":"linhns"},"content":""},{"lineNumber":120,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":121,"author":{"gitId":"linhns"},"content":""},{"lineNumber":122,"author":{"gitId":"linhns"},"content":"`list`"},{"lineNumber":123,"author":{"gitId":"linhns"},"content":""},{"lineNumber":124,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":125,"author":{"gitId":"linhns"},"content":""},{"lineNumber":126,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":127,"author":{"gitId":"linhns"},"content":"Here are the tasks in your list:"},{"lineNumber":128,"author":{"gitId":"linhns"},"content":"1. [D][ ] comeback(by: Jul 04 2024)"},{"lineNumber":129,"author":{"gitId":"linhns"},"content":"2. [T][ ] imprison Joe"},{"lineNumber":130,"author":{"gitId":"linhns"},"content":"3. [E][ ] expose Hunter(at: Jun 22 2023)"},{"lineNumber":131,"author":{"gitId":"linhns"},"content":"4. [T][ ] MAKE AMERICA GREAT AGAIN..."},{"lineNumber":132,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":133,"author":{"gitId":"linhns"},"content":""},{"lineNumber":134,"author":{"gitId":"linhns"},"content":"### `find` - Find tasks with keywords"},{"lineNumber":135,"author":{"gitId":"linhns"},"content":""},{"lineNumber":136,"author":{"gitId":"linhns"},"content":"Finds all tasks that matches input keywords."},{"lineNumber":137,"author":{"gitId":"linhns"},"content":""},{"lineNumber":138,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":139,"author":{"gitId":"linhns"},"content":""},{"lineNumber":140,"author":{"gitId":"linhns"},"content":"`find comeback`"},{"lineNumber":141,"author":{"gitId":"linhns"},"content":""},{"lineNumber":142,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":143,"author":{"gitId":"linhns"},"content":""},{"lineNumber":144,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":145,"author":{"gitId":"linhns"},"content":"Here are the tasks in your list:"},{"lineNumber":146,"author":{"gitId":"linhns"},"content":"1. [D][ ] comeback(by: Jul 04 2024)"},{"lineNumber":147,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":148,"author":{"gitId":"linhns"},"content":""},{"lineNumber":149,"author":{"gitId":"linhns"},"content":""},{"lineNumber":150,"author":{"gitId":"linhns"},"content":"### `empty` - Empty the list"},{"lineNumber":151,"author":{"gitId":"linhns"},"content":""},{"lineNumber":152,"author":{"gitId":"linhns"},"content":"Remove all tasks from the list of tasks."},{"lineNumber":153,"author":{"gitId":"linhns"},"content":""},{"lineNumber":154,"author":{"gitId":"linhns"},"content":"Example of usage:"},{"lineNumber":155,"author":{"gitId":"linhns"},"content":""},{"lineNumber":156,"author":{"gitId":"linhns"},"content":"`empty`"},{"lineNumber":157,"author":{"gitId":"linhns"},"content":""},{"lineNumber":158,"author":{"gitId":"linhns"},"content":"Expected outcome:"},{"lineNumber":159,"author":{"gitId":"linhns"},"content":""},{"lineNumber":160,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":161,"author":{"gitId":"linhns"},"content":"Noted. I\u0027ve emptied the list."},{"lineNumber":162,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":163,"author":{"gitId":"linhns"},"content":""},{"lineNumber":164,"author":{"gitId":"linhns"},"content":"### `bye` - Close Duke"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"linhns"},"content":"Quit Duke."},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"linhns"},"content":"`bye`"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"linhns"},"content":"```"},{"lineNumber":175,"author":{"gitId":"linhns"},"content":"Bye! Hope to see you again soon!"},{"lineNumber":176,"author":{"gitId":"linhns"},"content":"```"}],"authorContributionMap":{"linhns":159,"-":17}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"[T][ ] read book"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"[D][ ] return book(by: Jan 23 2021)"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"[T][ ] join sports club"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"[T][ ] borrow book"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"[E][ ] car sales(at: Nov 11 2020)"}],"authorContributionMap":{"linhns":5}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * The Deadline class extends the Task class and includes a due date"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":" * to represent the time that the deadline must be completed."},{"lineNumber":10,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    static final String DATE_FORMAT \u003d \"MMM dd yyyy\";"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    private LocalDate dueDates;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":""},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"     * Construct a deadline with the specified name and time."},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     * @param task the task to be completed"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"     * @param dueDates the deadline time"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    public Deadline(String task, String dueDates) {"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"        this.dueDates \u003d LocalDate.parse(dueDates);"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":""},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * Overloaded constructor for deadline."},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     * To be used in internal file manipulations"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"     * @param task the task to be completed"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"     * @param dueDates the deadline time"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    protected Deadline(String task, LocalDate dueDates) {"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        this.dueDates \u003d dueDates;"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + dueDates.format(DateTimeFormatter.ofPattern(DATE_FORMAT)) + \")\";"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":39}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":" * Driver program for Duke."},{"lineNumber":10,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    private static final Path storagePath \u003d Paths.get(\".\", \"data\", \"duke.txt\");"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    private TaskList taskList;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":""},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"     * Constructor for Duke"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    public Duke() {"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        this.storage \u003d new Storage(Duke.storagePath);"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"        this.taskList \u003d new TaskList(this.storage.read());"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        Parser.populateCommands();"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":""},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"     * Replace this stub with your completed method."},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    public String getResponse(String input) {"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"            String response \u003d Parser.parse(input, this.taskList, this.storage);"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"            assert response !\u003d null : \"No user input\";"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"            if (response.contains(\"Bye\")) {"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"                Platform.exit();"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"            return response;"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"        } catch (DukeException e) {"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"            return (e.getMessage());"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":""},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":46}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * Represent errors encountered during execution of Duke."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"     * Construct a DukeException with a specified message"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"     * @param message the specified message"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        super(\"OOPS!!! \" + message);"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" * The Event class extends the Task class to store information"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * about an event happening at a specific date."},{"lineNumber":9,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    private LocalDate time;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     * Construct an event."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"     * @param time time of the event"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    public Event(String task, String time) {"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"        this.time \u003d LocalDate.parse(time);"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":""},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"     * Overloaded constructor used for internal date manipulation."},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * @param time time of the event"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    public Event(String task, LocalDate time) {"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        this.time \u003d time;"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":37}},{"path":"src/main/java/duke/Executor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"public class Executor {"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"     * Executes the bye command and quit the program. Also save the current taskList into disk."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"     * @param taskList the taskList"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"     * @param storage storage to be written to"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"     * @return a string containing the goodbye message"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    public static String exit(TaskList taskList, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        storage.write(taskList);"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        return \"Bye! Hope to see you again soon!\";"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     * Executes the add command."},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"     * @param taskList the taskList for the task"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"     * @param args arguments of the tasks"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"     * @return a string signalling a task has been added"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    public static String add(TaskList taskList, String ... args) {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        if (args[0].equals(\"todo\")) {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            taskList.add(new ToDo(args[1]));"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        } else if (args[0].equals(\"deadline\")) {"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"            taskList.add(new Deadline(args[1], args[2]));"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        } else if (args[0].equals(\"event\")) {"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"            taskList.add(new Event(args[1], args[2]));"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        return (\"Got it. Now I have added this \""},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"                + \"task:\\n\" + \"  \" + taskList.get(taskList.size() - 1) + \"\\n\""},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"                + \"Now you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":""},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"     * Executes the markDone command."},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"     * @param taskList the given taskList"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"     * @param index the specified index"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"     * @return a string signalling a task has been marked as done"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"    public static String markDone(TaskList taskList, int index) {"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        taskList.get(index).markDone();"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        return (\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"                + \"  \" + taskList.get(index).toString() + \"\\n\");"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":""},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"     * Executes the delete command."},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"     * @param taskList the given taskList"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"     * @param index the specified index"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"     * @return a string signalling a task has been deleted"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public static String delete(TaskList taskList, int index) {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        Task task \u003d taskList.delete(index);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        return (\"Noted. I\u0027ve removed this \""},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"                + \"task:\\n\" + \"  \" + task + \"\\n\""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                + \"Now you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"     * Executes the empty command."},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"     * @param taskList the given taskList"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"     * @return a string signalling the list has been emptied"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"    public static String empty(TaskList taskList) {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        taskList.empty();"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        return (\"Noted. I\u0027ve emptied the list.\\n\");"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"     * Executes the find command."},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"     * @param taskList the given taskList"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"     * @param keywords the specified keywords"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"     * @return a string containing found tasks"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"    public static String find(TaskList taskList, String ... keywords) {"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        return taskList.find(keywords).toString();"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":""},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"     * Executes the markDone command."},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"     * @param taskList the given taskList"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"     * @return a string containing all tasks from the list"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"    public static String list(TaskList taskList) {"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"        return taskList.toString();"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":""},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":87}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import duke.gui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":""},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":""},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":33}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" * This class translate the user input into commands understandable by Duke."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    private static HashSet\u003cString\u003e acceptedCommands \u003d new HashSet\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    static void populateCommands() {"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"todo\");"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"deadline\");"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"event\");"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"done\");"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"delete\");"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"find\");"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"list\");"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"bye\");"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        acceptedCommands.add(\"empty\");"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"     * Returns the accepted commands"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"     * @return a HashSet containing the accepted commands"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    public static HashSet\u003cString\u003e getAcceptedCommands() {"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        return acceptedCommands;"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"     * Parse the user input."},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"     * @param command input entered by user"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public static String parse(String command, TaskList taskList, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        //command \u003d command.trim()"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        if (command.equals(\"list\")) {"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"            return Executor.list(taskList);"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"        } else if (command.equals(\"bye\")) {"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"            return Executor.exit(taskList, storage);"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"        } else if (command.equals(\"empty\")) {"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"            return Executor.empty(taskList);"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        String type;"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        String desc;"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        String time;"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        if (command.contains(\" \")) {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"            type \u003d command.substring(0, command.indexOf(\" \"));"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"            desc \u003d command.substring(command.indexOf(\" \") + 1);"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"            if (!acceptedCommands.contains(command)) {"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"                throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"                throw new DukeException(\"Missing argument(s)!\");"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"        if (type.equals(\"todo\")) {"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"            return Executor.add(taskList, type, desc);"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"        } else if (type.equals(\"deadline\")) {"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"            if (!desc.contains(\"/\")) {"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"                throw new DukeException(\"Missing argument(s)!\");"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"            } else {"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"                time \u003d desc.substring(desc.indexOf(\"/by\") + 4, desc.length());"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"                desc \u003d desc.substring(0, desc.indexOf(\"/by\") - 1);"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"            return Executor.add(taskList, type, desc, time);"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"        } else if (type.equals(\"event\")) {"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"            if (!desc.contains(\"/\")) {"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"                throw new DukeException(\"Missing argument(s)!\");"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"            } else {"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"                time \u003d desc.substring(desc.indexOf(\"/at\") + 4, desc.length());"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"                desc \u003d desc.substring(0, desc.indexOf(\"/at\") - 1);"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"            return Executor.add(taskList, type, desc, time);"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"            return Executor.markDone(taskList, Integer.parseInt(desc) - 1);"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"            return Executor.delete(taskList, Integer.parseInt(desc) - 1);"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        } else if (type.equals(\"find\")) {"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"            return Executor.find(taskList, desc.split(\" \"));"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":85}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":" * Handle file I/O."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    private final Path storagePath;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    private List\u003cString\u003e taskLst;"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     * Construct a Storage from a specified filepath."},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"     * @param storagePath the specified path"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    public Storage(Path storagePath) {"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        this.storagePath \u003d storagePath;"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"            Path parent \u003d storagePath.getParent();"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"            Files.createDirectories(parent);"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            if (!Files.exists(storagePath)) {"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"                Files.createFile(storagePath);"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":""},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"            assert Files.exists(storagePath);"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"            taskLst \u003d Files.readAllLines(storagePath);"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":""},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        } catch (IOException err) {"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"            System.out.println(\"File read error: \" + err.getMessage());"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":""},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"     * Read tasks stored in the file."},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"     * @return the list of tasks read"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"    public ArrayList\u003cTask\u003e read() {"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"        for (String line: this.taskLst) {"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"            char type \u003d line.charAt(1);"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"            String desc \u003d line.substring(7);"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"            int index;"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"            String name;"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"            String time;"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"            char done \u003d line.charAt(3);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"            switch (type) {"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"            case \u0027T\u0027:"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                lst.add(new ToDo(desc));"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"                break;"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"            case \u0027D\u0027:"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"                index \u003d desc.indexOf(\u0027(\u0027);"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"                name \u003d desc.substring(0, index);"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"                time \u003d desc.substring(index + 5, desc.length() - 1);"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"                lst.add(new Deadline(name, LocalDate.parse(time, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))));"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"                break;"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"            case \u0027E\u0027:"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"                index \u003d desc.indexOf(\u0027(\u0027);"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"                name \u003d desc.substring(0, index);"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"                time \u003d desc.substring(index + 5, desc.length() - 1);"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"                lst.add(new Event(name, LocalDate.parse(time, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))));"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"                break;"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"            default:"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"                System.out.println(\"Task undetermined\");"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"            if (done \u003d\u003d \u0027X\u0027) {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"                lst.get(lst.size() - 1).markDone();"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        return lst;"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":""},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"     * Write all tasks to given file."},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"     * @param taskList list of tasks to be written"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"    public void write(TaskList taskList) {"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"            File storageFile \u003d new File(String.valueOf(storagePath));"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"            FileWriter fileWriter \u003d new FileWriter(storageFile);"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"                fileWriter.write(taskList.get(i).toString() + \u0027\\n\u0027);"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"            fileWriter.close();"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"        } catch (IOException err) {"},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"            System.out.println(err.getMessage());"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":98}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * The task class represents a task. To be inherited by specific types of tasks."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"    private String task;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    private boolean done;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     * Construct a task, which is not done by default"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * @param task the task"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public Task(String task) {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        this.task \u003d task;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        this.done \u003d false;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":""},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"     * Mark a task as done"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    public void markDone() {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        this.done \u003d true;"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":""},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     * Get the task description"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"     * @return the description string of the task"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    public String getTask() {"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        return this.task;"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":""},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        return \"[\" + (this.done ? \"X\" : \" \") + \"] \" + this.getTask();"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":38}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" * Handle all actions regarding tasks."},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    private List\u003cTask\u003e lst;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     * Construct a list of tasks."},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    TaskList() {"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        this.lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":""},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"     * Overloaded constructor, used when reading a TaskList from disk."},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"     * @param lst the TaskList stored in disk"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    TaskList(List\u003cTask\u003e lst) {"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        this.lst \u003d lst;"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":""},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"     * Retrieves a Task from the TaskList at a specified index."},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"     * @param index index of the task to be retrieved"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"     * @return the retrieved task"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public Task get(int index) {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        assert index \u003c lst.size();"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        return this.lst.get(index);"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":""},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"     * Returns the size of the TaskList."},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"     * @return the size of the TaskList"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"    public int size() {"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        return this.lst.size();"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":""},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"     * Inserts a task into the TaskList."},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"     * @param task the task to be added."},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public void add(Task task) {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        this.lst.add(task);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"     * Removes a task at a given index."},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"     * @param index the specified index"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"     * @return the task removed"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"    public Task delete(int index) {"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        assert index \u003c lst.size();"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        return this.lst.remove(index);"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":""},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"     * Empties the TaskList"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"    public void empty() {"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"        for (int i \u003d lst.size() - 1; i \u003e\u003d 0; i--) {"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"            delete(i);"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":""},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"     * Returns every tasks that match several keywords."},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"     * @param keywords the keywords to be searched."},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"     * @return a list of tasks containing the keyword."},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"    public TaskList find(String ... keywords) {"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"        TaskList tasksWithKeyword \u003d new TaskList();"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"        for (Task task : lst) {"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"            boolean hasKey \u003d true;"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"            for (String keyword : keywords) {"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"                if (!task.getTask().contains(keyword)) {"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"                    hasKey \u003d false;"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"                    break;"},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"            if (hasKey) {"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"                tasksWithKeyword.add(task);"},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"        return tasksWithKeyword;"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"linhns"},"content":""},{"lineNumber":100,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"     * Returns String representation of the tasks in TaskList."},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"     * @return strings representing tasks"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":105,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"        StringBuilder sb \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":""},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"            sb.append(String.format(\"%d. %s\\n\", i + 1, lst.get(i)));"},{"lineNumber":110,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"linhns"},"content":"        return sb.toString().trim();"},{"lineNumber":112,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":113}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * An extension of the Task class that represent a specific task type."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"     * Construct a ToDo from a specific description."},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public ToDo(String task) {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":20}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" * Deals with User Interaction jobs."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    protected static final String SEPERATOR_LINE \u003d \"-----------------------------\";"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * Greet user."},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public static void greet() {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        String welcome \u003d \"Hi, I\u0027m Duke and I\u0027m gonna be your assistant. Enjoy!!!\";"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        System.out.println(welcome);"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"        System.out.println();"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     * Say goodbye to user when exit."},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public static void exit() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Bye! Hope to see you again soon!\");"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":""},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"     * Print feedback after an addition of a task."},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    public static void addTask(List\u003cTask\u003e lst) {"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Got it. Now I have added this \""},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"                + \"task:\\n\" + \"  \" + lst.get(lst.size() - 1) + \"\\n\""},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"                + \"Now you have \" + lst.size() + \" tasks in the list.\");"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":""},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"     * Print feedback after marking a task as done."},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    public static void markDone(Task task) {"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"                + \"  \" + task + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":""},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"     * Print feedback after deleting a task."},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public static void delete(List\u003cTask\u003e lst, Task task) {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Noted. I\u0027ve removed this \""},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"                + \"task:\\n\" + \"  \" + task + \"\\n\""},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                + \"Now you have \" + lst.size() + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":""},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"     * List all the tasks stored."},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"    public static void list(List\u003cTask\u003e lst) {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"            System.out.println((i + 1) + \". \" + lst.get(i));"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":""},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"     * Prints feedback of the find command."},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    public void find(List\u003cTask\u003e lst) {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Here are the tasks in your list: \");"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"            System.out.println((i + 1) + \". \" + lst.get(i));"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":""},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"     * Print error message."},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"    public static void printException(DukeException err) {"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"        System.out.println(err.getMessage());"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"        System.out.println(SEPERATOR_LINE);"},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":92}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":""},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"linhns"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":""},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":""},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":""},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":""},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":""},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":61}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke.gui;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":""},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":""},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":""},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":""},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"    private void handleUserInput() {"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":53}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: eaf6f6;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"            \u003cFont name\u003d\"Courier New\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"linhns":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"      \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"         \u003cFont name\u003d\"Courier New\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"      \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"linhns":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"public class DeadlineTest {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    void test() {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        Deadline d1 \u003d new Deadline(\"deadline\", \"2021-01-23\");"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        Deadline d2 \u003d new Deadline(\"deadline\", LocalDate.parse(\"Jan 23 2021\","},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"                DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        System.out.println(d1);"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        System.out.println(d2);"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"        assertEquals(d1.toString(), \"[D][ ] deadline(by: Jan 23 2021)\");"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        assertEquals(d2.toString(), \"[D][ ] deadline(by: Jan 23 2021)\");"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":23}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    public void test() {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"        ToDo t1 \u003d new ToDo(\"play FIFA\");"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"        t1.markDone();"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        assertEquals(t1.toString(), \"[T][X] play FIFA\");"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"deadline return book /by 2021-01-25"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"event project meeting /at 2021-01-21"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"list"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"bye"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":""}],"authorContributionMap":{"linhns":14}}]
