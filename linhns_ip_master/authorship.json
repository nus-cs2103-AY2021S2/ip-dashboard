[{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"[T][ ] read book"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"[D][ ] return book(by: Jan 23 2021)"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"[T][ ] join sports club"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"[T][ ] borrow book"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"[E][ ] car sales(at: Nov 11 2020)"}],"authorContributionMap":{"linhns":5}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" * The Deadline class extends the Task class and includes a due date"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * to represent the time that the deadline must be completed."},{"lineNumber":9,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    private LocalDate dueDates;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     * Construct a deadline with the specified name and time."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"     * @param task the task to be completed"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"     * @param dueDates the deadline time"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    public Deadline(String task, String dueDates) {"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"        this.dueDates \u003d LocalDate.parse(dueDates);"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":""},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"     * Overloaded constructor for deadline."},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"     * To be used in internal file manipulations"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * @param task the task to be completed"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     * @param dueDates the deadline time"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    protected Deadline(String task, LocalDate dueDates) {"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        this.dueDates \u003d dueDates;"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + dueDates.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":37}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" * Driver program for Duke."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     * Run function for Duke."},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * @param parser parser to parse user commands"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     * @param sc a scanner"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"    static void run(Parser parser, Scanner sc) {"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"            String command \u003d sc.nextLine();"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"            parser.parse(command);"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"            if(command.equals(\"bye\")) {"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"                break;"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":""},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * The main driver function."},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    public static void main(String[] args) {"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        Ui.greet();"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        run(new Parser(taskList), sc);"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":34}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * Represent errors encountered during execution of Duke."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"     * Construct a DukeException with a specified message"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"     * @param message the specified message"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        super(\"OOPS!!! \" + message);"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":14}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" * The Event class extends the Task class to store information"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" * about an event happening at a specific date."},{"lineNumber":9,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"public class Event extends Task{"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    private LocalDate time;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     * Construct an event."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"     * @param time time of the event"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    public Event(String task, String time) {"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"        this.time \u003d LocalDate.parse(time);"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":""},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"     * Overloaded constructor used for internal date manipulation."},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"     * @param time time of the event"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    public Event(String task, LocalDate time) {"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"        this.time \u003d time;"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":""},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + time.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":37}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * This class translate the user input into commands understandable by Duke."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"    TaskList taskList;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":""},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     * Construct a Parser from the specified list of task."},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    Parser(TaskList taskList) {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"     * Parse the user input."},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"     * @param command input entered by user"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    void parse(String command) {"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"            Ui.exit();"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            taskList.listTask();"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        } else if (command.startsWith(\"done\")) {"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"            taskList.markDone(command.substring(5));"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        } else if (command.startsWith(\"delete\")) {"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"            taskList.deleteTask(command.substring(7));"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        } else if (command.startsWith(\"find\")){"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            taskList.findTask(command.substring(5));"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"            taskList.addTask(command);"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":35}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":""},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":" * Handle file I/O."},{"lineNumber":14,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    File file;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":""},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"     * Construct a Storage from a specified filename."},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"     * @param name the filename"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    Storage(String name) {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"            this.file \u003d new File(name);"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"            if (file.createNewFile()) {"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"                System.out.println(\"Created file: \" + file.getName());"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":""},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"        } catch (IOException err) {"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"            Ui.printException(new DukeException(err.getMessage()));"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":""},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"     * Read tasks stored in the file."},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"     * @return the list of tasks read"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"    public List\u003cTask\u003e read() {"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"        List\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"            Scanner sc \u003d new Scanner(this.file);"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"                String str \u003d sc.nextLine();"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"                char type \u003d str.charAt(1);"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"                char status \u003d str.charAt(3);"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"                String desc \u003d str.substring(7);"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"                if (type \u003d\u003d \u0027T\u0027) {"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"                    lst.add(new ToDo(desc));"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"                } else if (type \u003d\u003d \u0027D\u0027) {"},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"                    int index \u003d desc.indexOf(\u0027(\u0027);"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"                    String name \u003d desc.substring(0, index);"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"                    String time \u003d desc.substring(index + 5, desc.length() - 1);"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"                    lst.add(new Deadline(name, LocalDate.parse(time, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))));"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"                } else if (type \u003d\u003d \u0027E\u0027) {"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"                    int index \u003d desc.indexOf(\u0027(\u0027);"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"                    String name \u003d desc.substring(0, index);"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                    String time \u003d desc.substring(index + 5, desc.length() - 1);"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"                    lst.add(new Event(name, LocalDate.parse(time, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))));"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"                if (status \u003d\u003d \u0027X\u0027) {"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"                    lst.get(lst.size() - 1).markDone();"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"        } catch (IOException err) {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"            Ui.printException(new DukeException(err.getMessage()));"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"        return lst;"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":""},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"     * Write all tasks to given file."},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"     * @param lst list of tasks to be written"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"    public void write(List\u003cTask\u003e lst) {"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"//            File file \u003d new File(String.valueOf(path));"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"            FileWriter fileWriter \u003d new FileWriter(this.file);"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"            for (Task task: lst) {"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"                fileWriter.write(task.toString() + \u0027\\n\u0027);"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"            fileWriter.close();"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"        } catch (IOException err) {"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"            Ui.printException(new DukeException(err.getMessage()));"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":86}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * The task class represents a task. To be inherited by specific types of tasks."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"    private String task;"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    private boolean done;"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":""},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     * Construct a task, which is not done by default"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * @param task the task"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public Task(String task) {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        this.task \u003d task;"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        this.done \u003d false;"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":""},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"     * Mark a task as done"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    public void markDone() {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        this.done \u003d true;"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":""},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"     * Get the task description"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"     * @return the description string of the task"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    public String getTask() {"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        return this.task;"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":""},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        return \"[\" + (this.done ? \"X\" : \" \") + \"] \" + this.getTask();"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":38}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":""},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" * Handle all actions regarding tasks."},{"lineNumber":8,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    List\u003cTask\u003e lst;"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    Storage storage;"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":""},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"     * Construct a list of tasks."},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    TaskList() {"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"        this.storage \u003d new Storage(\"duke.txt\");"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        this.lst \u003d storage.read();"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":""},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"    private void addToDo(String desc) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"        desc \u003d desc.trim();"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        if (desc.isEmpty()) {"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"        lst.add(new ToDo(desc));"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"linhns"},"content":""},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"    private void addDeadline(String desc) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"        desc \u003d desc.trim();"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"        if (desc.isEmpty()) {"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"        int index \u003d desc.indexOf(\u0027/\u0027);"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"        lst.add(new Deadline(desc.substring(0, index - 1), desc.substring(index + 4)));"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":""},{"lineNumber":39,"author":{"gitId":"linhns"},"content":"    private void addEvent(String desc) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"        desc \u003d desc.trim();"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"        if (desc.isEmpty()) {"},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"            throw new DukeException(\"The description of an event cannot be empty.\");"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        int index \u003d desc.indexOf(\u0027/\u0027);"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        lst.add(new Event(desc.substring(0, index - 1), desc.substring(index + 4)));"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":""},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":"     * Add a tasks to the list."},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"     * @param command the task description"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"    public void addTask(String command) {"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"            if (command.startsWith(\"todo\")) {"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"                addToDo(command.substring(4));"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"            } else if (command.startsWith(\"deadline\")) {"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                addDeadline(command.substring(8));"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"            } else if (command.startsWith(\"event\")) {"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"                addEvent(command.substring(5));"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"                throw new DukeException(\"I have no idea.\");"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"            Ui.addTask(lst);"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"            storage.write(lst);"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        } catch (DukeException err) {"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"            Ui.printException(err);"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":""},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":""},{"lineNumber":71,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"     * Mark a task at the specified index as done."},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"     * @param position the task index"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"    public void markDone(String position) {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"        int index \u003d Integer.parseInt(position) - 1;"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        lst.get(index).markDone();"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        Ui.markDone(lst.get(index));"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"        storage.write(lst);"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"linhns"},"content":""},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"     * Deleting a task at the specified index."},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"     * @param position the task index"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"    public void deleteTask(String position) {"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"        int index \u003d Integer.parseInt(position) - 1;"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"        Task task \u003d lst.remove(index);"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"        Ui.delete(lst, task);"},{"lineNumber":90,"author":{"gitId":"linhns"},"content":"        storage.write(lst);"},{"lineNumber":91,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"linhns"},"content":""},{"lineNumber":93,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"linhns"},"content":"     * List the tasks."},{"lineNumber":95,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"linhns"},"content":"    public void listTask() {"},{"lineNumber":97,"author":{"gitId":"linhns"},"content":"        Ui.list(lst);"},{"lineNumber":98,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"linhns"},"content":""},{"lineNumber":100,"author":{"gitId":"linhns"},"content":"    public void findTask(String keyword) {"},{"lineNumber":101,"author":{"gitId":"linhns"},"content":"        List\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":102,"author":{"gitId":"linhns"},"content":"        for (Task t: lst) {"},{"lineNumber":103,"author":{"gitId":"linhns"},"content":"            if (t.getTask().contains(keyword)) {"},{"lineNumber":104,"author":{"gitId":"linhns"},"content":"                res.add(t);"},{"lineNumber":105,"author":{"gitId":"linhns"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"linhns"},"content":"        Ui.list(res);"},{"lineNumber":108,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":109}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":" * An extension of the Task class that represent a specific task type."},{"lineNumber":5,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"public class ToDo extends Task{"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"     * Construct a ToDo from a specific description."},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"     * @param task the task description"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"    public ToDo(String task) {"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        super(task);"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":""},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":20}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":" * Deals with User Interaction jobs."},{"lineNumber":7,"author":{"gitId":"linhns"},"content":" */"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    protected static final String seperatorLine \u003d \"-----------------------------\";"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":""},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"     * Greet user."},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"    public static void greet() {"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        String welcome \u003d \"Hi, I\u0027m Duke and I\u0027m gonna be your assistant. Enjoy!!!\";"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        System.out.println(welcome);"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"        System.out.println();"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"linhns"},"content":""},{"lineNumber":20,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"linhns"},"content":"     * Say goodbye to user when exit."},{"lineNumber":22,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"linhns"},"content":"    public static void exit() {"},{"lineNumber":24,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":25,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Bye! Hope to see you again soon!\");"},{"lineNumber":26,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":27,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"linhns"},"content":""},{"lineNumber":29,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"linhns"},"content":"     * Print feedback after an addition of a task."},{"lineNumber":31,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"linhns"},"content":"    public static void addTask(List\u003cTask\u003e lst) {"},{"lineNumber":33,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":34,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Got it. Now I have added this \" +"},{"lineNumber":35,"author":{"gitId":"linhns"},"content":"                \"task:\\n\" + \"  \" + lst.get(lst.size() - 1) + \"\\n\" +"},{"lineNumber":36,"author":{"gitId":"linhns"},"content":"                \"Now you have \" + lst.size() + \" tasks in the list.\");"},{"lineNumber":37,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":38,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"linhns"},"content":""},{"lineNumber":40,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"linhns"},"content":"     * Print feedback after marking a task as done."},{"lineNumber":42,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"linhns"},"content":"    public static void markDone(Task task) {"},{"lineNumber":44,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":45,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" +"},{"lineNumber":46,"author":{"gitId":"linhns"},"content":"                \"  \" + task + \"\\n\");"},{"lineNumber":47,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":48,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"linhns"},"content":""},{"lineNumber":50,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"linhns"},"content":"     * Print feedback after deleting a task."},{"lineNumber":52,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"linhns"},"content":"    public static void delete(List\u003cTask\u003e lst, Task task) {"},{"lineNumber":54,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":55,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Noted. I\u0027ve removed this \" +"},{"lineNumber":56,"author":{"gitId":"linhns"},"content":"                \"task:\\n\" + \"  \" + task + \"\\n\" +"},{"lineNumber":57,"author":{"gitId":"linhns"},"content":"                \"Now you have \" + lst.size() + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":59,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"linhns"},"content":""},{"lineNumber":61,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"linhns"},"content":"     * List all the tasks stored."},{"lineNumber":63,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"linhns"},"content":"    public static void list(List\u003cTask\u003e lst) {"},{"lineNumber":65,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":66,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"linhns"},"content":"            System.out.println((i + 1) + \". \" + lst.get(i));"},{"lineNumber":68,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":70,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"linhns"},"content":""},{"lineNumber":72,"author":{"gitId":"linhns"},"content":"    public void find(List\u003cTask\u003e lst) {"},{"lineNumber":73,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":74,"author":{"gitId":"linhns"},"content":"        System.out.println(\"Here are the tasks in your list: \");"},{"lineNumber":75,"author":{"gitId":"linhns"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":76,"author":{"gitId":"linhns"},"content":"            System.out.println((i + 1) + \". \" + lst.get(i));"},{"lineNumber":77,"author":{"gitId":"linhns"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":79,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"linhns"},"content":""},{"lineNumber":81,"author":{"gitId":"linhns"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"linhns"},"content":"     * Print error message."},{"lineNumber":83,"author":{"gitId":"linhns"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"linhns"},"content":"    public static void printException(DukeException err) {"},{"lineNumber":85,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":86,"author":{"gitId":"linhns"},"content":"        System.out.println(err.getMessage());"},{"lineNumber":87,"author":{"gitId":"linhns"},"content":"        System.out.println(seperatorLine);"},{"lineNumber":88,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":89}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":""},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"public class DeadlineTest {"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"    void test() {"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"        Deadline d1 \u003d new Deadline(\"deadline\", \"2021-01-23\");"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        Deadline d2 \u003d new Deadline(\"deadline\", LocalDate.parse(\"Jan 23 2021\", DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"        System.out.println(d1);"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"        System.out.println(d2);"},{"lineNumber":15,"author":{"gitId":"linhns"},"content":"        assertEquals(d1.toString(), \"[D][ ] deadline(by: Jan 23 2021)\");"},{"lineNumber":16,"author":{"gitId":"linhns"},"content":"        assertEquals(d2.toString(), \"[D][ ] deadline(by: Jan 23 2021)\");"},{"lineNumber":17,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":18}},{"path":"src/test/java/duke/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":""},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":""},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":""},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"    public void test() {"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"        ToDo t1 \u003d new ToDo(\"play FIFA\");"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"        t1.markDone();"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"        assertEquals(t1.toString(), \"[T][X] play FIFA\");"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":"}"}],"authorContributionMap":{"linhns":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"linhns"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"linhns"},"content":"deadline return book /by 2021-01-23"},{"lineNumber":3,"author":{"gitId":"linhns"},"content":"event project meeting /at 2021-01-21"},{"lineNumber":4,"author":{"gitId":"linhns"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"linhns"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"linhns"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"linhns"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"linhns"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"linhns"},"content":"list"},{"lineNumber":10,"author":{"gitId":"linhns"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"linhns"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"linhns"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"linhns"},"content":"bye"},{"lineNumber":14,"author":{"gitId":"linhns"},"content":""}],"authorContributionMap":{"linhns":14}}]
