[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"# Duke project Jiaxiang"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"## User Guide"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"You can find the [user guide](https://litone01.github.io/ip/) over here."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` "},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"   to close the existing project first)"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in "},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"   [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. "},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"   If the setup is correct, you should see something like the below:"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    ___________________________________________________________________________"},{"lineNumber":24,"author":{"gitId":"-"},"content":"      ____        _        "},{"lineNumber":25,"author":{"gitId":"-"},"content":"     |  _ \\ _   _| | _____ "},{"lineNumber":26,"author":{"gitId":"-"},"content":"     | | | | | | | |/ / _ \\"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     | |_| | |_| |   \u003c  __/"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     |____/ \\__,_|_|\\_\\___|"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":""},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     Greetings! I\u0027m Your Personal Assistant Duke:)"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     What can I do for you today?"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    ___________________________________________________________________________"},{"lineNumber":33,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"## Acknowledgements"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"The folder structure and certain naming conventions of functions in this project are heavily adapted from"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"[addressbook-level2](https://github.com/se-edu/addressbook-level2) "},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"by the [SE-EDU initiative](https://se-education.org/)."}],"authorContributionMap":{"-":18,"litone01":20}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    archiveBaseName \u003d \"JiaxiangDuke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"litone01":17}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"1. Adding a task, such as todo, event, deadline, to Duke"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"1. Listing all tasks added"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"1. Deleting a task added"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"1. Marking a task added as done"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"1. Finding tasks by searching a keyword"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"1. Updating the by date of a deadline added"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"1. Exiting Duke"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"### Adding a todo: `todo \u003cdescription\u003e`"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"Adds a todo with the given description to Duke."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"`todo complete quiz`"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"![todo demo](images/todo.png)"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"### Adding an event: `event \u003cdescription\u003e /at \u003cdate\u003e`"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"Adds an event with the given description and event date to Duke.  "},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"- Do kindly note that Duke **does not understand** the date entered for **events**.   "},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"It will just display the entered date as it is."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":""},{"lineNumber":33,"author":{"gitId":"litone01"},"content":""},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"`event party /at this sunday`"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":""},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":""},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"![event demo](images/event.png)"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":""},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"### Adding a deadline: `deadline \u003cdescription\u003e /by \u003cdate\u003e`"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":""},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"Adds a deadline with the given description and by date to Duke."},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"- Do kindly note that Duke **understands** the date entered for **deadlines**.   "},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"  Thus, date entered has to be valid and follow a **`yyyy-mm-dd`** format, e.g. `2021-02-17`."},{"lineNumber":47,"author":{"gitId":"litone01"},"content":""},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":""},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"`deadline quiz /by 2021-02-17`"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":""},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"![deadline demo](images/deadline.png)"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":""},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"### Listing all tasks added: `list`  "},{"lineNumber":57,"author":{"gitId":"litone01"},"content":""},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"Lists all tasks added to Duke so far."},{"lineNumber":59,"author":{"gitId":"litone01"},"content":""},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":""},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"`list`"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":""},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":""},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"![list demo](images/list.png)"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":""},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"### Deleting a task: `delete \u003ctask index\u003e`"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":""},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"Deletes a task with the given task index as shown in list."},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"- Do kindly note that the task index given must be valid."},{"lineNumber":72,"author":{"gitId":"litone01"},"content":""},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":""},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"`delete 1`"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":""},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":""},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"![delete demo](images/delete.png)"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":""},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"### Marking a task as done: `done \u003ctask index\u003e`"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":""},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"Marks a task with the given task index as done."},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"- Do kindly note that the task index given must be valid."},{"lineNumber":85,"author":{"gitId":"litone01"},"content":""},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":""},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"`done 1`"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":""},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":""},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"![done demo](images/done.png)"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":""},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"### Finding tasks by searching a keyword: `find \u003ckeyword\u003e`"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":""},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"Finds all tasks with description containing the given keyword."},{"lineNumber":97,"author":{"gitId":"litone01"},"content":""},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":""},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"`find quiz`"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":""},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":""},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"![find demo](images/find.png)"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":""},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"### Updating the date of a deadline: `update \u003cdeadline index\u003e \u003cnew date\u003e`"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":""},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"Updates the date of a deadline (with the given task index) to the given new date."},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"- Do kindly note that the task index given must be valid and referring to a deadline, "},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"  the new date must be valid and follows a **`yyyy-mm-dd`** format, e.g. `2021-02-17`."},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"- Do kindly note that there must be a whitespace between `\u003cdeadline index\u003e` and `\u003cnew date\u003e`. "},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"  Otherwise, it will be understood as an invalid task index."},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"- E.g. `update 22010-01-01` is not allowed, but `update 2 2010-01-01` is allowed."},{"lineNumber":114,"author":{"gitId":"litone01"},"content":""},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":""},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"`update 2 2020-01-01`"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":""},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":""},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"![update demo](images/update.png)"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":""},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"### Exiting Duke: `bye`"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":""},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"Exits the program."},{"lineNumber":126,"author":{"gitId":"litone01"},"content":""},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"Example of usage:"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":""},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"`bye`"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":""},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"Expected outcome:"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":""},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"![exit demo](images/bye.png)"}],"authorContributionMap":{"-":14,"litone01":119}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Main class for the duke project."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" * This file is heavily influenced by coding style of the Main.java file"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" *      from addressbook-level2. The link is:"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" *      https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/Main.java"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    private Ui ui;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    public Duke() {"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * Main method for the code to start running."},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     * @param args user input."},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    public static void main(String[] args) {"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        new Duke().run(args);"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":""},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    private void run(String[] args) {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        start();"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        runUntilExit();"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        exit();"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":""},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    private void start() {"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"            Ui.greet();"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"            loadUiAndStorage();"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"            Ui.printMessage(new String[] {e.getMessage()});"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"            Ui.printMessage(new String[] {\"Closing...\"});"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"            System.exit(-1);"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":""},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    private void runUntilExit() {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        String message \u003d ui.getUserInput();"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        while (!message.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"                Command command \u003d new Parser().parseMessage(message);"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"                String[] result \u003d command.execute();"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"                Ui.printMessage(result);"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"            } catch (DukeException e) {"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"                Ui.printMessage(new String[] {e.getMessage()});"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"            message \u003d ui.getUserInput();"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":""},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"    private void exit() {"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        Ui.exit();"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        System.exit(-1);"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":""},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     * Returns the response from user input to GUI."},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"     * @param input user input."},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"     * @return response after input is executed."},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"    public String getResponse(String input) {"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"        if (input.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"            return Ui.getExitGui();"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"            try {"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"                Command command \u003d new Parser().parseMessage(input);"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"                String[] result \u003d command.execute();"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"                return Ui.formatMessageGui(result);"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"            } catch (DukeException e) {"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"                return Ui.formatMessageGui(new String[] {e.getMessage()});"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":""},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"     * Returns the greet message."},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"     * @return the greet message."},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"    public String getGreetMessage() {"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        return Ui.getGreetGui();"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":""},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"     * Loads Ui and storage for duke created."},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when unable to load storage."},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"    public void loadUiAndStorage() throws DukeException {"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":""},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":109}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Launches the application."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param args user input."},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":18}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":""},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     * Starts the GUI interface."},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * @param stage an Stage object for GUI."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            stage.setTitle(\"Mr. Duke\");"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            stage.setScene(scene);"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            scene.getStylesheets().add("},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"                    Main.class.getResource(\"/view/Style.css\").toExternalForm());"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":41}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" * Adds a task to the taskList."},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    private Task taskToAdd;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":""},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * Constructor for the AddCommand class."},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @param taskToAdd a Task object to be added."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public AddCommand(Task taskToAdd) {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        this.taskToAdd \u003d taskToAdd;"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        String[] executionResult;"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            executionResult \u003d TaskList.addTask(taskToAdd);"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            Storage.saveDataToStorage();"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"            return executionResult;"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":39}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Parent class for all commands ued in Duke."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Command {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    protected Command() {"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * This method should only be called in its child classes."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when the method is called in a Command class object rather than its"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     *          specific child class."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    public String[] execute() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"        throw new DukeException(\"Parent command class does not have this method.\");"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":28}},{"path":"src/main/java/duke/command/CommandOption.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Lists all the commands allowed for Duke."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public enum CommandOption {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND, UPDATE;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":8}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Deletes a task to the taskList."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    private int taskIndexToDelete;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for the DeleteCommand class."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * @param taskIndexToDelete an index for the Task object to be deleted."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public DeleteCommand(int taskIndexToDelete) {"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        this.taskIndexToDelete \u003d taskIndexToDelete;"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * Executes the action of deleting the task."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        String[] executionResult;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            executionResult \u003d TaskList.deleteTask(taskIndexToDelete);"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            Storage.saveDataToStorage();"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return executionResult;"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":38}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Complete a task to the taskList."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    private int taskIndexToComplete;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for the DoneCommand class."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * @param taskIndexToComplete an index for the Task object to be done."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public DoneCommand(int taskIndexToComplete) {"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        this.taskIndexToComplete \u003d taskIndexToComplete;"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * Executes the action of completing the task."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        String[] executionResult;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            executionResult \u003d TaskList.completeTask(taskIndexToComplete);"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            Storage.saveDataToStorage();"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return executionResult;"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":38}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Finds all tasks containing the given description."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class FindCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * @param keyword keyword of the task description."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":""},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * Executes the action of finding required tasks."},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks containing the given keyword."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        return TaskList.getTasksFound(keyword);"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":29}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Lists all tasks in the taskList."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    public ListCommand() {"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        return TaskList.getAllTasksInfo();"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":25}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Updates the task at given index."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" * Currently, it only updates the by date for deadline objects."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    private int taskIndexToUpdate;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    private LocalDate newDate;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * Constructor for the DoneCommand class."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @param taskIndexToUpdate an index for the Task object to be done."},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    public UpdateCommand(int taskIndexToUpdate, LocalDate newDate) {"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"        this.taskIndexToUpdate \u003d taskIndexToUpdate;"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        this.newDate \u003d newDate;"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":""},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * Executes the action of updating the task."},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        String[] executionResult;"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"            executionResult \u003d TaskList.updateTaskDate(taskIndexToUpdate, newDate);"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"            Storage.saveDataToStorage();"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"            return executionResult;"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":44}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Exception class for project duke."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"     * @param errorMessage specific error message for the exception created."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        super(\"Oh no :( \" + errorMessage);"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.command.AddCommand;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import duke.command.CommandOption;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import duke.command.DoneCommand;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import duke.command.UpdateCommand;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"import duke.tasks.Deadline;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"import duke.tasks.Event;"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"import duke.tasks.Task;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"import duke.tasks.Todo;"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":" * Parses the user input and return corresponding Command objects for execution."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":" * The naming convention for all functions with name prefixed with \"prepare\" in this file"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":" *       is adapted from the parser.java file from addressbook-level2. The link is:"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":" *      https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/parser/Parser.java"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"public class Parser {"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    public Parser() {"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * Returns the Task based on taskinfo stored in storage."},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * @param taskInfo information stored in storage."},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * @return the Task."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when information in storage is corrupted."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    public static Task getTaskFromTaskInfo(String taskInfo) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        String[] taskInfoArr \u003d taskInfo.split(\"\\\\|\");"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":""},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        String type \u003d taskInfoArr[0].strip();"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        boolean isDone \u003d taskInfoArr[1].strip().equals(\"1\");"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        String description \u003d taskInfoArr[2].strip();"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":""},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"        Task task;"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        switch(type) {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        case \"T\":"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            task \u003d new Todo(description, isDone);"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"        case \"E\":"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"            String at \u003d taskInfoArr[3].strip();"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"            task \u003d new Event(description, isDone, at);"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"        case \"D\":"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"            LocalDate by \u003d parseByDate(taskInfoArr[3].strip());"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"            task \u003d new Deadline(description, isDone, by);"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Invalid task info found in storage.\");"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":""},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"        return task;"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":""},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     * Parses the user input."},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"     * Takes in the first word from user input and carries out relevant actions based on"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"     *      the word by printing out corresponding replies."},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     * Disclaimer: the idea of using .valueOf and convert to UpperCase is inspired"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"     *      based on discussion of #Issue 14 in forum."},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"     *      Credit to @samuelfangjw who mentioned it first."},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"     * @param userInput user input"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"     * @throws DukeException thrown if user enters a valid command but invalid related information"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"     *                       or an invalid command"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"    public Command parseMessage(String userInput) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        String[] processedUserInput \u003d processUserInput(userInput);"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        return getCommand(processedUserInput);"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":""},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"    private String[] processUserInput(String userInput) {"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"        String[] msgArray \u003d userInput.split(\" \", 2);"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"        String commandWord \u003d msgArray[0].strip();"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        String otherInfo \u003d null;"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"        boolean isDateProvided \u003d msgArray.length \u003e 1;"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        if (isDateProvided) {"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"            otherInfo \u003d msgArray[1].strip();"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        return new String[] {commandWord, otherInfo};"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":""},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"    private Command getCommand(String[] processedUserInput) throws DukeException {"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"        String commandWord \u003d processedUserInput[0];"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"        String otherInfo \u003d processedUserInput[1];"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"        Command command;"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"            command \u003d getCommandFromCommandWord(commandWord, otherInfo);"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"I do not understand this command.\");"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"        return command;"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":""},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"    private Command getCommandFromCommandWord(String commandWord, String otherInfo) throws DukeException {"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"        CommandOption commandEnum \u003d getCommandOption(commandWord);"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"        return createCommandFromCommandEnum(otherInfo, commandEnum);"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":""},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"     * Creates the respective command based on the given information and commandEnum(command option)."},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"     * This structure for this function is adapted from the parser.java file"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"     *      from addressbook-level2. The link is:"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"     *      https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/parser/Parser.java"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"     * @param otherInfo information relevant to the command."},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"     * @param commandEnum the command entered by user, an Enum."},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"     * @return the corresponding command."},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"     * @throws DukeException if the command given is invalid (eg. does not exist among all command options)."},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"    private Command createCommandFromCommandEnum(String otherInfo, CommandOption commandEnum) throws DukeException {"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"        Command command;"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"        switch (commandEnum) {"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"        case LIST:"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"            command \u003d new ListCommand();"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"        case DONE:"},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"            command \u003d prepareCompleteTask(otherInfo);"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"        case TODO:"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":"            command \u003d prepareTodoTask(otherInfo);"},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"        case EVENT:"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":"            command \u003d prepareEventTask(otherInfo);"},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"        case DEADLINE:"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"            command \u003d prepareDeadlineTask(otherInfo);"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"        case DELETE:"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"            command \u003d prepareDeleteTask(otherInfo);"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"        case FIND:"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"            command \u003d prepareFindTask(otherInfo);"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":151,"author":{"gitId":"litone01"},"content":"        case UPDATE:"},{"lineNumber":152,"author":{"gitId":"litone01"},"content":"            command \u003d prepareUpdateTask(otherInfo);"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":154,"author":{"gitId":"litone01"},"content":"        default:"},{"lineNumber":155,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Unexpected value: \" + commandEnum);"},{"lineNumber":156,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"litone01"},"content":"        return command;"},{"lineNumber":158,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"litone01"},"content":""},{"lineNumber":160,"author":{"gitId":"litone01"},"content":"    private CommandOption getCommandOption(String commandWord) {"},{"lineNumber":161,"author":{"gitId":"litone01"},"content":"        return CommandOption.valueOf(commandWord.toUpperCase(Locale.ROOT));"},{"lineNumber":162,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"litone01"},"content":""},{"lineNumber":164,"author":{"gitId":"litone01"},"content":"    private Command prepareCompleteTask(String taskIndex) throws DukeException {"},{"lineNumber":165,"author":{"gitId":"litone01"},"content":"        int index \u003d parseTaskIndex(taskIndex);"},{"lineNumber":166,"author":{"gitId":"litone01"},"content":"        return new DoneCommand(index);"},{"lineNumber":167,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"litone01"},"content":""},{"lineNumber":169,"author":{"gitId":"litone01"},"content":"    private Command prepareDeleteTask(String taskIndex) throws DukeException {"},{"lineNumber":170,"author":{"gitId":"litone01"},"content":"        int index \u003d parseTaskIndex(taskIndex);"},{"lineNumber":171,"author":{"gitId":"litone01"},"content":"        return new DeleteCommand(index);"},{"lineNumber":172,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"litone01"},"content":""},{"lineNumber":174,"author":{"gitId":"litone01"},"content":"    private Command prepareTodoTask(String description) throws DukeException {"},{"lineNumber":175,"author":{"gitId":"litone01"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":176,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide a description when creating todo.\");"},{"lineNumber":177,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"litone01"},"content":"        return new AddCommand(new Todo(description));"},{"lineNumber":179,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"litone01"},"content":""},{"lineNumber":181,"author":{"gitId":"litone01"},"content":"    private Command prepareDeadlineTask(String otherInfo) throws DukeException {"},{"lineNumber":182,"author":{"gitId":"litone01"},"content":"        String[] validatedInfo \u003d getValidatedOtherInfo(otherInfo, \"/by\");"},{"lineNumber":183,"author":{"gitId":"litone01"},"content":"        String description \u003d validatedInfo[0];"},{"lineNumber":184,"author":{"gitId":"litone01"},"content":"        LocalDate byDate \u003d parseByDate(validatedInfo[1]);"},{"lineNumber":185,"author":{"gitId":"litone01"},"content":"        Task deadline \u003d new Deadline(description, byDate);"},{"lineNumber":186,"author":{"gitId":"litone01"},"content":"        return new AddCommand(deadline);"},{"lineNumber":187,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":188,"author":{"gitId":"litone01"},"content":""},{"lineNumber":189,"author":{"gitId":"litone01"},"content":"    private Command prepareEventTask(String otherInfo) throws DukeException {"},{"lineNumber":190,"author":{"gitId":"litone01"},"content":"        String[] validatedInfo \u003d getValidatedOtherInfo(otherInfo, \"/at\");"},{"lineNumber":191,"author":{"gitId":"litone01"},"content":"        String description \u003d validatedInfo[0];"},{"lineNumber":192,"author":{"gitId":"litone01"},"content":"        String at \u003d validatedInfo[1];"},{"lineNumber":193,"author":{"gitId":"litone01"},"content":"        Task event \u003d new Event(description, at);"},{"lineNumber":194,"author":{"gitId":"litone01"},"content":"        return new AddCommand(event);"},{"lineNumber":195,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"litone01"},"content":""},{"lineNumber":197,"author":{"gitId":"litone01"},"content":"    private Command prepareFindTask(String keyword) throws DukeException {"},{"lineNumber":198,"author":{"gitId":"litone01"},"content":"        if (keyword \u003d\u003d null || keyword.equals(\" \") || keyword.equals(\"\")) {"},{"lineNumber":199,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please enter a keyword when finding the task.\");"},{"lineNumber":200,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"litone01"},"content":"        return new FindCommand(keyword);"},{"lineNumber":202,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"litone01"},"content":""},{"lineNumber":204,"author":{"gitId":"litone01"},"content":"    private Command prepareUpdateTask(String otherInfo) throws DukeException {"},{"lineNumber":205,"author":{"gitId":"litone01"},"content":"        String[] validatedInfo \u003d getValidatedOtherInfoForUpdate(otherInfo);"},{"lineNumber":206,"author":{"gitId":"litone01"},"content":"        int taskIndexToUpdate \u003d parseTaskIndex(validatedInfo[0]);"},{"lineNumber":207,"author":{"gitId":"litone01"},"content":"        LocalDate byDate \u003d parseByDate(validatedInfo[1]);"},{"lineNumber":208,"author":{"gitId":"litone01"},"content":"        return new UpdateCommand(taskIndexToUpdate, byDate);"},{"lineNumber":209,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"litone01"},"content":""},{"lineNumber":211,"author":{"gitId":"litone01"},"content":"    private String[] getValidatedOtherInfoForUpdate(String otherInfo) throws DukeException {"},{"lineNumber":212,"author":{"gitId":"litone01"},"content":"        String[] validatedOtherInfo;"},{"lineNumber":213,"author":{"gitId":"litone01"},"content":"        String splitBy \u003d \" \";"},{"lineNumber":214,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"litone01"},"content":"            validatedOtherInfo \u003d prepareValidatedOtherInfo(otherInfo, splitBy);"},{"lineNumber":216,"author":{"gitId":"litone01"},"content":"            return validatedOtherInfo;"},{"lineNumber":217,"author":{"gitId":"litone01"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":218,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the relevant information \""},{"lineNumber":219,"author":{"gitId":"litone01"},"content":"                    + \"when updating a task.\");"},{"lineNumber":220,"author":{"gitId":"litone01"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":221,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the required information or \""},{"lineNumber":222,"author":{"gitId":"litone01"},"content":"                    + \"ensure there is a whitespace between the task index and new date.\");"},{"lineNumber":223,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"litone01"},"content":""},{"lineNumber":226,"author":{"gitId":"litone01"},"content":"    private String[] getValidatedOtherInfo(String otherInfo, String splitBy) throws DukeException {"},{"lineNumber":227,"author":{"gitId":"litone01"},"content":"        String[] validatedOtherInfo;"},{"lineNumber":228,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":229,"author":{"gitId":"litone01"},"content":"            validatedOtherInfo \u003d prepareValidatedOtherInfo(otherInfo, splitBy);"},{"lineNumber":230,"author":{"gitId":"litone01"},"content":"            return validatedOtherInfo;"},{"lineNumber":231,"author":{"gitId":"litone01"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":232,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the relevant information \""},{"lineNumber":233,"author":{"gitId":"litone01"},"content":"                    + \"when creating a task.\");"},{"lineNumber":234,"author":{"gitId":"litone01"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":235,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Pleasure provide the required information or ensure \""},{"lineNumber":236,"author":{"gitId":"litone01"},"content":"                    + \"/by is used when creating a deadline and \""},{"lineNumber":237,"author":{"gitId":"litone01"},"content":"                    + \"/at is used when creating an event.\");"},{"lineNumber":238,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"litone01"},"content":""},{"lineNumber":241,"author":{"gitId":"litone01"},"content":"    private String[] prepareValidatedOtherInfo(String otherInfo, String splitBy) throws DukeException {"},{"lineNumber":242,"author":{"gitId":"litone01"},"content":"        String[] splitOtherInfo \u003d otherInfo.split(splitBy, 2);"},{"lineNumber":243,"author":{"gitId":"litone01"},"content":"        String description \u003d splitOtherInfo[0].strip();"},{"lineNumber":244,"author":{"gitId":"litone01"},"content":"        String date \u003d splitOtherInfo[1].strip();"},{"lineNumber":245,"author":{"gitId":"litone01"},"content":""},{"lineNumber":246,"author":{"gitId":"litone01"},"content":"        boolean noDescriptionOrDate \u003d description.equals(\"\") || date.equals(\"\");"},{"lineNumber":247,"author":{"gitId":"litone01"},"content":"        if (noDescriptionOrDate) {"},{"lineNumber":248,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the required information.\");"},{"lineNumber":249,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":250,"author":{"gitId":"litone01"},"content":"            return new String[] {description, date};"},{"lineNumber":251,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":252,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":253,"author":{"gitId":"litone01"},"content":""},{"lineNumber":254,"author":{"gitId":"litone01"},"content":"    private int parseTaskIndex(String taskIndex) throws DukeException {"},{"lineNumber":255,"author":{"gitId":"litone01"},"content":"        int unvalidatedIndex;"},{"lineNumber":256,"author":{"gitId":"litone01"},"content":"        if (taskIndex \u003d\u003d null) {"},{"lineNumber":257,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please enter a task index.\");"},{"lineNumber":258,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"litone01"},"content":""},{"lineNumber":260,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":261,"author":{"gitId":"litone01"},"content":"            unvalidatedIndex \u003d Integer.parseInt(taskIndex);"},{"lineNumber":262,"author":{"gitId":"litone01"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":263,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task index entered is not an integer.\");"},{"lineNumber":264,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":265,"author":{"gitId":"litone01"},"content":"        return unvalidatedIndex;"},{"lineNumber":266,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"litone01"},"content":""},{"lineNumber":268,"author":{"gitId":"litone01"},"content":""},{"lineNumber":269,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":270,"author":{"gitId":"litone01"},"content":"     * Parses the given by date for deadline."},{"lineNumber":271,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":272,"author":{"gitId":"litone01"},"content":"     * @param dateInString by date in String."},{"lineNumber":273,"author":{"gitId":"litone01"},"content":"     * @return a parsed local date object."},{"lineNumber":274,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when given date is invalid."},{"lineNumber":275,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":276,"author":{"gitId":"litone01"},"content":"    private static LocalDate parseByDate(String dateInString) throws DukeException {"},{"lineNumber":277,"author":{"gitId":"litone01"},"content":"        LocalDate date;"},{"lineNumber":278,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":279,"author":{"gitId":"litone01"},"content":"            date \u003d LocalDate.parse(dateInString);"},{"lineNumber":280,"author":{"gitId":"litone01"},"content":"            assert !dateInString.isEmpty() : \"deadline cannot be created without a by date!\";"},{"lineNumber":281,"author":{"gitId":"litone01"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":282,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Invalid deadline date given. \""},{"lineNumber":283,"author":{"gitId":"litone01"},"content":"                    + \"Please ensure date given is valid and follows the yyyy-mm-dd format, e.g. 2021-02-17.\");"},{"lineNumber":284,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":285,"author":{"gitId":"litone01"},"content":"        return date;"},{"lineNumber":286,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":287}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import duke.parser.Parser;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import duke.tasks.Task;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":" * Stores the task list and implements functions for saving and loading."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    private static TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    private static final String PROJECT_ROOT \u003d System.getProperty(\"user.dir\");"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    private static Path dataFilePath \u003d"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        Paths.get(PROJECT_ROOT, \"data\", \"duke.txt\");"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    private static Path dataFolderPath \u003d"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        Paths.get(PROJECT_ROOT, \"data\");"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     * Initializes the storage class."},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an error happens when loading data from storage."},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    public Storage() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"        init();"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    private static void init() throws DukeException {"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        createStorageIfNotPresent();"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        taskList \u003d getTaskListFromStorage();"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    private static TaskList getTaskListFromStorage() throws DukeException {"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cTask\u003e tasks \u003d getTasksStored(dataFilePath);"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        return new TaskList(tasks);"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":""},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"     * Saves the current task list into storage, used by the public."},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an error occurs while saving data, eg. no access rights."},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    public static void saveDataToStorage() throws DukeException {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getAllTasks();"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        saveDataToStorage(dataFilePath, tasks);"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":""},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"    private static void saveDataToStorage(Path filePath, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"            ArrayList\u003cString\u003e tasksInfoToStore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"            for (Task task : tasks) {"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"                tasksInfoToStore.add(task.getTaskInfoToStore());"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"            Files.write(filePath, tasksInfoToStore);"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"error in saving data.\""},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":""},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"    private static ArrayList\u003cTask\u003e getTasksStored(Path filePath) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":""},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"            loadDataFromStorage(filePath, tasks);"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"error when loading Data. Closing...\""},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":""},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"        return tasks;"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":""},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"    private static void loadDataFromStorage(Path filePath, ArrayList\u003cTask\u003e tasks)"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"            throws IOException, DukeException {"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"        BufferedReader br \u003d Files.newBufferedReader(filePath);"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        String taskInfoInString;"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"        while ((taskInfoInString \u003d br.readLine()) !\u003d null) {"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"            Task task \u003d Parser.getTaskFromTaskInfo(taskInfoInString);"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"            if (task !\u003d null) {"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"                tasks.add(task);"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":""},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"    private static void createStorageIfNotPresent() throws DukeException {"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"            if (Files.notExists(dataFilePath)) {"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"                if (Files.notExists(dataFolderPath)) {"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"                    dataFolderPath \u003d Files.createDirectories(dataFolderPath);"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"                }"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"                dataFilePath \u003d Files.createFile(dataFilePath);"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Unable to access data stored, access rights issue. Closing...\""},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":110}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" * Deadlines are tasks that need to be done before a specific date/time."},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027deadline\u0027."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    protected LocalDate by;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for Deadline class object."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * @param description deadline description."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @param by a string that represents timing to be completed by."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     *           Currently, only \"yyyy-mm-dd\" format is supported."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"        this.by \u003d by;"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * Constructor for Deadline class object, used for storage."},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     * @param description deadline description."},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * @param isDone if the deadline is done."},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * @param by a string that represents timing to be completed by."},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     *           Currently, only \"yyyy-mm-dd\" format is supported."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    public Deadline(String description, boolean isDone, LocalDate by) {"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        this.by \u003d by;"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":""},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * Returns the details of the deadline."},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @return the details of the deadline."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        assert by !\u003d null : \"deadline does not have an by date!\";"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(formatter) + \")\";"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":""},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"     * Gets the details of the deadline to be stored."},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     * @return the details of the deadline to be stored."},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    public String getTaskInfoToStore() {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        assert !description.isEmpty() : \"deadline does not have a description!\";"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        assert by !\u003d null : \"deadline does not have an by date!\";"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":""},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"        return \"D\" + divider"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"                + description + divider"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"                + by;"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":""},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"     * Updates the by date of the deadline."},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     * @param newDate new date to be updated."},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"    public void updateDate(LocalDate newDate) {"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"        this.by \u003d newDate;"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":77}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Events are tasks that start at a specific time and ends at a specific time."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027Event\u0027."},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"    private String at;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor for Event class object."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param description event description."},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * @param at starting and ending time."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        assert !at.isEmpty() : \"event cannot be created without an at date!\";"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * Constructor for Event class object, used for storage."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * @param description event description."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * @param at starting and ending time."},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        this.at \u003d at;"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        assert !at.isEmpty() : \"event cannot be created without an at date!\";"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     * Returns the details of the event."},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * @return the details of the event."},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":""},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"     * Gets the details of the event to be stored."},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * @return the details of the event to be stored."},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    public String getTaskInfoToStore() {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        assert !description.isEmpty() : \"event does not have a description!\";"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        assert !at.isEmpty() : \"event does not have an at date!\";"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":""},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"        return \"E\" + divider"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"                + description + divider"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"                + at;"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":61}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Parent class for all tasks in Duke."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class Task {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":""},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * Constructor for Task class objects."},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @param description description for the task created."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public Task(String description) {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * Returns a cross if the current task is done, otherwise, \" \"."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     * @return a cross if the task is done, otherwise, \" \"."},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    public String getStatusIcon() {"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":""},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"     * Updates the isDone status of the current task to be true."},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    public void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":""},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * Gets the isDone of the task."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @return the isDone of the task."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    public boolean getIsDone() {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        return isDone;"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * Returns the details of the task."},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"     * @return the details of the task."},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"        assert !description.isEmpty() : \"task does not have a description!\";"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":""},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"     * Gets the details of the task for storage."},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"     * @return the details of the task for storage."},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"    public String getTaskInfoToStore() {"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"        return (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"                + description;"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":""},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"     * Updates the date of a task, if applicable."},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     * Currently only supports for deadline."},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"     * @param newDate newDate new date to be updated."},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"     * @throws DukeException if the method is called on an non-deadline object."},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"    public void updateDate(LocalDate newDate) throws DukeException {"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"        throw new DukeException(\"Only deadlines can be update currently.\");"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":79}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Contains the task list and functions related to modifying it."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * Constructor for the tasklist class object."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     * @param tasks parsed tasks from storage."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * Gets all tasks of the tasklist."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * @return all tasks of the tasklist."},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public static ArrayList\u003cTask\u003e getAllTasks() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        return tasks;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":""},{"lineNumber":32,"author":{"gitId":"litone01"},"content":""},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"     * Verifies if the given taskIndex is valid."},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"     * One possible error is handled here. It is:"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     *      1. taskIndex is out of bound;"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input after being parsed."},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * @return index in int if it is valid."},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * @throws DukeException if invalid index is provided."},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"    private static int verifyTaskIndex(int taskIndex) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        int index \u003d taskIndex - 1;"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":""},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        if (index \u003e\u003d tasks.size() || index \u003c 0) {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index does not exist.\");"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":""},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        return index;"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"     * Removes the task with the given index and print the confirmation message."},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input."},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users."},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered."},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    public static String[] deleteTask(int taskIndex) throws DukeException {"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.remove(index);"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":""},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        String[] successMessage \u003d new String[] {"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"            \"On your command! I have removed this task:\","},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"            \"  \" + task.toString(),"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"            \"Now you have \" + tasks.size() + \" \""},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"                + (tasks.size() \u003e 1 ? \"tasks\" : \"task\")"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"                + \" in the list.\""},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":""},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"        return successMessage;"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":""},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     * Completes the task with the given index and print the confirmation message."},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"     * One possible error is handled. Namely, it is:"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"     *      1. the task has been completed;"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input."},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users."},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered."},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"    public static String[] completeTask(int taskIndex) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"        boolean isDone \u003d task.getIsDone();"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        if (isDone) {"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index has been completed.\");"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"            task.markAsDone();"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":""},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        String[] successMessage \u003d new String[] {"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"            \"Wonderful! You have completed this task:\","},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"            \"  \" + task.toString()"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"        return successMessage;"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":""},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"     * Adds the task given to the task list."},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"     * @param newTask a new task to be added."},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users."},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"    public static String[] addTask(Task newTask) {"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"        tasks.add(newTask);"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":""},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"        String[] successMessage \u003d new String[] {"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"            \"Roger that! Added new task:\","},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"            \" \" + newTask.toString(),"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"            \"Now you have \" + tasks.size() + \" \""},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"                + (tasks.size() \u003e 1 ? \"tasks\" : \"task\")"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"                + \" in the list.\""},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"        return successMessage;"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":""},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"     * Gets the information of tasks in the task list."},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks present."},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"    public static String[] getAllTasksInfo() {"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"        String[] allTasksInfo;"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":""},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"            allTasksInfo \u003d new String[] {\"Hi! Your todo list is currently empty.\"};"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"            allTasksInfo \u003d new String[tasks.size() + 1];"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"            allTasksInfo[0] \u003d \"Hi! This is your todo list:\";"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"                allTasksInfo[i + 1] \u003d \" \" + (i + 1) + \".\" + task.toString();"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":""},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"        return allTasksInfo;"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":""},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"     * Gets all tasks containing the given keyword."},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"     * @param keyword user input, a keyword of task description to be searched."},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks containing the given keyword in array for printing."},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"    public static String[] getTasksFound(String keyword) {"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cString\u003e matchedTasksInfo \u003d new ArrayList\u003c\u003e();"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"        String[] matchedTasksInfoInArray;"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":""},{"lineNumber":151,"author":{"gitId":"litone01"},"content":"        findTasks(keyword, matchedTasksInfo);"},{"lineNumber":152,"author":{"gitId":"litone01"},"content":"        matchedTasksInfoInArray \u003d convertTasksFoundToArray(matchedTasksInfo);"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":""},{"lineNumber":154,"author":{"gitId":"litone01"},"content":"        return matchedTasksInfoInArray;"},{"lineNumber":155,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"litone01"},"content":""},{"lineNumber":157,"author":{"gitId":"litone01"},"content":"    private static String[] convertTasksFoundToArray(ArrayList\u003cString\u003e matchedTasksInfo) {"},{"lineNumber":158,"author":{"gitId":"litone01"},"content":"        boolean noMatchedTasksFound \u003d (matchedTasksInfo.size() \u003d\u003d 1);"},{"lineNumber":159,"author":{"gitId":"litone01"},"content":""},{"lineNumber":160,"author":{"gitId":"litone01"},"content":"        if (noMatchedTasksFound) {"},{"lineNumber":161,"author":{"gitId":"litone01"},"content":"            matchedTasksInfo.clear();"},{"lineNumber":162,"author":{"gitId":"litone01"},"content":"            matchedTasksInfo.add(\"Sorry, no relevant tasks found:(\");"},{"lineNumber":163,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"litone01"},"content":""},{"lineNumber":165,"author":{"gitId":"litone01"},"content":"        return matchedTasksInfo.toArray(new String[0]);"},{"lineNumber":166,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"litone01"},"content":""},{"lineNumber":168,"author":{"gitId":"litone01"},"content":"    private static void findTasks(String keyword, ArrayList\u003cString\u003e matchedTasksInfo) {"},{"lineNumber":169,"author":{"gitId":"litone01"},"content":"        matchedTasksInfo.add(\"Here are the matching tasks in your list:\");"},{"lineNumber":170,"author":{"gitId":"litone01"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":171,"author":{"gitId":"litone01"},"content":"            Task task \u003d tasks.get(i);"},{"lineNumber":172,"author":{"gitId":"litone01"},"content":"            int index \u003d i + 1;"},{"lineNumber":173,"author":{"gitId":"litone01"},"content":"            if (task.toString().contains(keyword)) {"},{"lineNumber":174,"author":{"gitId":"litone01"},"content":"                String description \u003d \" \" + index + \".\" + task.toString();"},{"lineNumber":175,"author":{"gitId":"litone01"},"content":"                matchedTasksInfo.add(description);"},{"lineNumber":176,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":177,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"litone01"},"content":""},{"lineNumber":180,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"litone01"},"content":"     * Updates the deadline object at the given index with the new by date."},{"lineNumber":182,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"litone01"},"content":"     * @param taskIndex the index of the deadline object to be updated."},{"lineNumber":184,"author":{"gitId":"litone01"},"content":"     * @param newDate new date to update."},{"lineNumber":185,"author":{"gitId":"litone01"},"content":"     * @return the successful message if update is successful."},{"lineNumber":186,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when the task at the given index is not an deadline object."},{"lineNumber":187,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"litone01"},"content":"    public static String[] updateTaskDate(int taskIndex, LocalDate newDate) throws DukeException {"},{"lineNumber":189,"author":{"gitId":"litone01"},"content":"        int verifiedTaskIndex \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":190,"author":{"gitId":"litone01"},"content":"        Task taskToBeUpdated \u003d tasks.get(verifiedTaskIndex);"},{"lineNumber":191,"author":{"gitId":"litone01"},"content":"        taskToBeUpdated.updateDate(newDate);"},{"lineNumber":192,"author":{"gitId":"litone01"},"content":""},{"lineNumber":193,"author":{"gitId":"litone01"},"content":"        String[] successMessage \u003d new String[] {"},{"lineNumber":194,"author":{"gitId":"litone01"},"content":"            \"Wonderful! You have updated the by date:\","},{"lineNumber":195,"author":{"gitId":"litone01"},"content":"            \"  \" + taskToBeUpdated.toString()"},{"lineNumber":196,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":197,"author":{"gitId":"litone01"},"content":""},{"lineNumber":198,"author":{"gitId":"litone01"},"content":"        return successMessage;"},{"lineNumber":199,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":200}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Todos are tasks without any date/time attached to it."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" * An todo object is used to store information related to tasks of type \u0027todo\u0027."},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"     * Constructor for todo class object."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * @param description description for the todo to be created."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    public Todo(String description) {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * Constructor for todo class object, used for storage."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @param description description for the todo to be created."},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * @param isDone if the todo is done."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * Returns the details of the todo."},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * @return the details of the todo."},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":""},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * Gets the details of the todo task for storage."},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @return the details of the todo task to be stored."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    public String getTaskInfoToStore() {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        assert !description.isEmpty() : \"todo does not have a description!\";"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":""},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        return \"T\" + divider"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"                + description;"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":53}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":" * Controller for DialogBox."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":" * Consists of an ImageView to represent the speaker\u0027s face and a label containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":""},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":""},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":""},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"     * Gets the required user dialog."},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"     * @param text text from the user in String."},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     * @param img image of the user as an image object."},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"     * @return the user dialog."},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        return new DialogBox(text, img);"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":""},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"     * Gets the required duke dialog."},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"     * @param text results of the user\u0027s input."},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"     * @param img image of duke as an image object."},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"     * @return the duke dialog."},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"        return db;"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":73}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.util.Timer;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.util.TimerTask;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":" * Controller for MainWindow."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":" * Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    private Duke duke;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":""},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    private Image userImage \u003d"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    private Image dukeImage \u003d"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    public void initialize() {"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * Completes the init of duke object by loading Ui and storage."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     * This can be improved to follow OOP better."},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"     * @param duke duke object created from Main class."},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    public void setDuke(Duke duke) {"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        this.duke \u003d duke;"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"            duke.loadUiAndStorage();"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"            printResponse(duke.getGreetMessage());"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            String message \u003d e.getMessage() + \"\\n\""},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"                + \"Closing...\";"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"            printResponse(message);"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":""},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"     * Creates two dialog boxes, and clears the user input after processing."},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"     * One echoing user input and the other containing Duke\u0027s reply and then appends them to the dialog container."},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"    private void handleUserInput() {"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"        boolean isExitCalled \u003d input.equalsIgnoreCase(\"bye\");"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"        );"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":""},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"        if (isExitCalled) {"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"            exit();"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"        userInput.clear();"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":""},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"     * Exits program for GUI."},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"     * Delays the closing of GUI for 1.5 seconds so that users can see the exit message."},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"    private void exit() {"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        new Timer().schedule(new TimerTask() {"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"            public void run () {"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"                System.exit(0);"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"        }, 1500);"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":""},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"    @FXML"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"    private void printResponse(String response) {"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"        );"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":97}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Interacts with user by receiving input and printing results from user commands."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    private static final String[] greet \u003d {"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"        \" ____        _        \","},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"        \"|  _ \\\\ _   _| | _____ \","},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        \"| | | | | | | |/ / _ \\\\\","},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        \"| |_| | |_| |   \u003c  __/\","},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"        \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\","},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"        \"Greetings! I\u0027m Your Personal Assistant Duke:)\","},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"        \"What can I do for you today?\""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    private static final String[] exit \u003d {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        \"Bye. Nice to meet you and hope to see you again soon!\""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    private static final String border \u003d"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"        \"    ____________________________________________________________\""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"            + \"_______________\\n\";"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    private static final String indent \u003d \"     \";"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    private final Scanner in;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":""},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * Constructor and inits the scanner for input."},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    public Ui() {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        this.in \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":""},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * Returns the formatted message to be printed."},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * @param messages an array of strings, main body of the message to be formatted."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @return the formatted message to be printed."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    public static String formatMessage(String[] messages) {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        StringBuilder res \u003d new StringBuilder(border);"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        for (String message : messages) {"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"            res.append(indent).append(message).append(\"\\n\");"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        res.append(border);"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"        return res.toString();"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":""},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     * Returns the formatted message to be printed for GUI."},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"     * @param messages an array of strings, main body of the message to be formatted."},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"     * @return the formatted message to be printed."},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    public static String formatMessageGui(String[] messages) {"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"        StringBuilder res \u003d new StringBuilder();"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        for (String message : messages) {"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"            res.append(message).append(\"\\n\");"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        return res.toString();"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":""},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"     * Returns the greet message to be printed for GUI."},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"     * @return the greet message to be printed."},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"    public static String getGreetGui() {"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"        return \"Greetings! I\u0027m Your Personal Assistant Duke:)\\n\""},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"            + \"What can I do for you today?\";"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":""},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"     * Returns the exit message to be printed for GUI."},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"     * @return the exit message to be printed."},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"    public static String getExitGui() {"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"        return \"Bye. Nice to meet you and hope to see you again soon!\\n\""},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"                + \"Closing...\";"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":""},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"     * Prints the welcome message when duke starts."},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"    public static void greet() {"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(greet));"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":""},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"     * Prints the exit message when duke closes."},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"    public static void exit() {"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(exit));"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":""},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"     * Prints the message or reply after the user command is executed."},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"     * @param msg message to be printed."},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"    private static void printReply(String msg) {"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"        System.out.println(msg);"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":""},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"     * Obtains the user input."},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"     * @return user input as String."},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"    public String getUserInput() {"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"        return in.nextLine();"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":""},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"     * Prints the result after the command is executed."},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"     * @param msg result from Command class after execution."},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"    public static void printMessage(String[] msg) {"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"        printReply(formatMessage(msg));"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":127}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"  \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        wrapText\u003d\"true\"\u003e"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"        \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"          \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"        \u003c/padding\u003e"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    \u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"  \u003c/children\u003e"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"  \u003cpadding\u003e"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"  \u003c/padding\u003e"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"litone01":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"  \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\""},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"        prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"        onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"      \u003ccontent\u003e"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"      \u003c/content\u003e"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"  \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"litone01":24}},{"path":"src/test/java/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" * Unit test for Task class."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"public class TaskTest {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public void testStringConversion() {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[ ] test\", task.toString());"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    public void testInfoToStoreConversion() {"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"        assertEquals(\"0 | test\", task.getTaskInfoToStore());"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public void testMarkAsDone() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[ ] test\", task.toString());"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        task.markAsDone();"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[X] test\", task.toString());"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     * This method is adapted from AddCommandTest.java of addressbook-level2. The link is:"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"     * github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/commands/AddCommandTest.java"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    public void testUpdateDate_nonDeadlineObject_throwsException() {"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"        LocalDate testDate \u003d LocalDate.parse(\"2021-02-17\");"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        assertUpdatingDateForNonDeadlineObjectThrowsException(task, testDate);"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":""},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":""},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * Asserts that updating the date of an non-deadline object, here the task object,"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     * throws a DukeException."},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"     * This method is adapted from AddCommandTest.java of addressbook-level2. The link is:"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"     * github.com/se-edu/addressbook-level2/blob/master/test/java/seedu/addressbook/commands/AddCommandTest.java"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"     * @param task task to be tested."},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     * @param testDate testDate for the update."},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"    private void assertUpdatingDateForNonDeadlineObjectThrowsException(Task task, LocalDate testDate) {"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"            task.updateDate(testDate);"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"            return;"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":""},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        String error \u003d \"A non-deadline object (task object) successfully updates its date to 2020-02-17.\";"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        fail(error);"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":66}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Unit test for Todo class."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class TodoTest {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    public void testStringConversion() {"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        Todo todo \u003d new Todo(\"test\");"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[T][ ] test\", todo.toString());"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public void testInfoToStoreConversion() {"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        Todo todo \u003d new Todo(\"test\");"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        assertEquals(\"T | 0 | test\", todo.getTaskInfoToStore());"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"todo test"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"event exam2 /at monday 12-2pm"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"deadline assignment /by monday"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"todo"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /at monday"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /by"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"deadline cannotCreate"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"deadline /by monday"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"event cannotCreate /by monday"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"event cannotCreate /at"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"event cannotCreate"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"event /at Monday"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"event"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"done 99"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"delete 99"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"bye"}],"authorContributionMap":{"litone01":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\Duke.java"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"litone01":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":36,"litone01":2}}]
