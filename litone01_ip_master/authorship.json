[{"path":"src/main/java/duke/command/CommandOption.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * enum class that lists all the commands allowed for Duke"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public enum CommandOption {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    LIST, DONE, TODO, DEADLINE, EVENT, DELETE;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":8}},{"path":"src/main/java/duke/main/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027deadline\u0027."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Deadlines are tasks that need to be done before a specific date/time"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Deadline extends Task{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    protected String by;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * Constructor for Deadline class object"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param description deadline description"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * @param by timing to be completed by"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":25}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.util.Locale;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.command.CommandOption;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Main class for project duke."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" * Takes in an user command (within the exclusive list) and react accordingly."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    private static final String[] greet \u003d {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"            \" ____        _        \","},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"            \"|  _ \\\\ _   _| | _____ \","},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"            \"| | | | | | | |/ / _ \\\\\","},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"            \"| |_| | |_| |   \u003c  __/\","},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"            \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\","},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"            \"Greetings! I\u0027m Your Personal Assistant Duke:)\","},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"            \"What can I do for you today?\""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    private static final String[] exit \u003d {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"            \"Bye. Nice to meet you and hope to see you again soon!\""},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":""},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    private static final String border \u003d"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"            \"    ____________________________________________________________\" +"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"                    \"_______________\\n\";"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":""},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    private static final String indent \u003d \"     \";"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":""},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":""},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    public static void main(String[] args) {"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(greet));"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"        String message \u003d sc.nextLine();"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"        while(!message.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"            printReply(message);"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"            message \u003d sc.nextLine();"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(exit));"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":""},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * Print the corresponding reply based on user input."},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     * @param message first (String) word from user input"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    private static void printReply(String message) {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        System.out.print(border);"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            parseMessage(message);"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"        catch (DukeException dukeExp) {"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"            System.out.println(indent + dukeExp.getMessage());"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        System.out.println(border);"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":""},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"     * 1. Takes in the first word from user input and carries out relevant actions based on"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"     *      the word by printing out corresponding replies."},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"     * 2. A command is NOT case sensitive."},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"     *      For example, \"LIST\"/\"list\"/\"List\" will have the same effect."},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"     * 3. However, no additional whitespaces should be entered."},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"     *      For example, \"LIST \"/\"list \"/\"List \" will not work."},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"     * 4. Disclaimer: the idea of using .valueOf and convert to UpperCase is inspired"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"     *      based on discussion of #Issue 14 in forum."},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     *      Credit to @samuelfangjw who mentioned it first."},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     * @param message user input"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"     * @throws IllegalArgumentException thrown if user enters an invalid command"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"     * @throws DukeException thrown if user enters a valid command but invalid related information"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"    private static void parseMessage(String message)"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"            throws DukeException{"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"        String[] msgArray \u003d message.split(\" \", 2);"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        String commandWord \u003d msgArray[0];"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"        String otherInfo \u003d null;"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"        if (msgArray.length \u003e 1) {"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"            otherInfo \u003d msgArray[1];"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":""},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"            CommandOption command \u003d CommandOption.valueOf(commandWord.toUpperCase(Locale.ROOT));"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"            switch (command) {"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"                case LIST:"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"                    printList();"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"                case DONE:"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"                    completeTask(otherInfo);"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"                case TODO:"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"                    if (otherInfo \u003d\u003d null) {"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"                        throw new DukeException(\"Please provide a description when creating todo.\");"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"                    }"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"                    addTask(new Todo(otherInfo));"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"                case EVENT:"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"                    String[] temp \u003d otherInfo.split(\"/at\", 2);"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"                    String description \u003d temp[0].trim();"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"                    String at \u003d temp[1].trim();"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"                    if (description.equals(\"\") || at.equals(\"\")) {"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"                        throw new DukeException(\"Please provide a description or an at period\" +"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"                                \" when creating event.\");"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"                    addTask(new Event(description, at));"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"                case DEADLINE:"},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"                    temp \u003d otherInfo.split(\"/by\", 2);"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"                    description \u003d temp[0].trim();"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"                    String by \u003d temp[1].trim();"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"                    if (description.equals(\"\") || by.equals(\"\")) {"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"                        throw new DukeException(\"Please provide a description or a by date \" +"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"                                \"when creating deadline.\");"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"                    }"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"                    addTask(new Deadline(description, by));"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"                case DELETE:"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"                    deleteTask(otherInfo);"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"                    break;"},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"        catch (IllegalArgumentException e) {"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"I do not understand this command.\");"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"        catch (NullPointerException e) {"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the relevant information \" +"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"                    \"when creating a task.\");"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"        catch (IndexOutOfBoundsException e) {"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please use /by when creating deadline or \" +"},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"                    \"/at when creating event.\");"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":""},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"     * Returns the formatted message (specifically, greet and bye) to be printed."},{"lineNumber":140,"author":{"gitId":"litone01"},"content":"     * @param messages an array of strings, main body of the message to be formatted."},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"     * @return the formatted message (specifically, greet and bye) to be printed."},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"    private static String formatMessage(String[] messages) {"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"        StringBuilder res \u003d new StringBuilder(border);"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"        for (String message : messages) {"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"            res.append(indent).append(message).append(\"\\n\");"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"        res.append(border);"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"        return res.toString();"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"litone01"},"content":""},{"lineNumber":152,"author":{"gitId":"litone01"},"content":"    private static void printList() {"},{"lineNumber":153,"author":{"gitId":"litone01"},"content":"        StringBuilder res \u003d new StringBuilder();"},{"lineNumber":154,"author":{"gitId":"litone01"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":155,"author":{"gitId":"litone01"},"content":"            res.append(indent)"},{"lineNumber":156,"author":{"gitId":"litone01"},"content":"                    .append(\"Hi! Your todo list is currently empty.\\n\");"},{"lineNumber":157,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":158,"author":{"gitId":"litone01"},"content":"            res.append(indent)"},{"lineNumber":159,"author":{"gitId":"litone01"},"content":"                    .append(\"Hi! This is your todo list:\\n\");"},{"lineNumber":160,"author":{"gitId":"litone01"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":161,"author":{"gitId":"litone01"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":162,"author":{"gitId":"litone01"},"content":"                res.append(indent)"},{"lineNumber":163,"author":{"gitId":"litone01"},"content":"                        .append(\" \")"},{"lineNumber":164,"author":{"gitId":"litone01"},"content":"                        .append(i + 1)"},{"lineNumber":165,"author":{"gitId":"litone01"},"content":"                        .append(\".\")"},{"lineNumber":166,"author":{"gitId":"litone01"},"content":"                        .append(task.toString())"},{"lineNumber":167,"author":{"gitId":"litone01"},"content":"                        .append(\"\\n\");"},{"lineNumber":168,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":170,"author":{"gitId":"litone01"},"content":"        System.out.print(res.toString());"},{"lineNumber":171,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"litone01"},"content":""},{"lineNumber":173,"author":{"gitId":"litone01"},"content":""},{"lineNumber":174,"author":{"gitId":"litone01"},"content":"    private static void addTask(Task newTask) {"},{"lineNumber":175,"author":{"gitId":"litone01"},"content":"        tasks.add(newTask);"},{"lineNumber":176,"author":{"gitId":"litone01"},"content":""},{"lineNumber":177,"author":{"gitId":"litone01"},"content":"        String res \u003d indent + \"Roger that! Added new task:\\n\" +"},{"lineNumber":178,"author":{"gitId":"litone01"},"content":"                indent + \" \" + newTask.toString() + \"\\n\" +"},{"lineNumber":179,"author":{"gitId":"litone01"},"content":"                indent + \"Now you have \" + tasks.size() + \" \" +"},{"lineNumber":180,"author":{"gitId":"litone01"},"content":"                (tasks.size() \u003e 1 ? \"tasks\" : \"task\") +"},{"lineNumber":181,"author":{"gitId":"litone01"},"content":"                \" in the list.\";"},{"lineNumber":182,"author":{"gitId":"litone01"},"content":"        System.out.println(res);"},{"lineNumber":183,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":184,"author":{"gitId":"litone01"},"content":""},{"lineNumber":185,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":186,"author":{"gitId":"litone01"},"content":"     * Complete the task with the given index and print the confirmation message."},{"lineNumber":187,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":188,"author":{"gitId":"litone01"},"content":"     * One possible error is handled. Namely, it is:"},{"lineNumber":189,"author":{"gitId":"litone01"},"content":"     *      1. the task has been completed;"},{"lineNumber":190,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input, in String."},{"lineNumber":191,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered"},{"lineNumber":192,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":193,"author":{"gitId":"litone01"},"content":"    private static void completeTask(String taskIndex) throws DukeException {"},{"lineNumber":194,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":195,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":196,"author":{"gitId":"litone01"},"content":""},{"lineNumber":197,"author":{"gitId":"litone01"},"content":"        if (!task.markAsDone()) {"},{"lineNumber":198,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index has been completed.\");"},{"lineNumber":199,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"litone01"},"content":""},{"lineNumber":201,"author":{"gitId":"litone01"},"content":"        String res \u003d indent +"},{"lineNumber":202,"author":{"gitId":"litone01"},"content":"                \"Wonderful! You have completed this task:\\n\" +"},{"lineNumber":203,"author":{"gitId":"litone01"},"content":"                indent + \"  \" + task.toString();"},{"lineNumber":204,"author":{"gitId":"litone01"},"content":"        System.out.println(res);"},{"lineNumber":205,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":206,"author":{"gitId":"litone01"},"content":""},{"lineNumber":207,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":208,"author":{"gitId":"litone01"},"content":"     * Remove the task with the given index and print the confirmation message."},{"lineNumber":209,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input, in String."},{"lineNumber":210,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered"},{"lineNumber":211,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"litone01"},"content":"    private static void deleteTask(String taskIndex) throws DukeException {"},{"lineNumber":213,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":214,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.remove(index);"},{"lineNumber":215,"author":{"gitId":"litone01"},"content":""},{"lineNumber":216,"author":{"gitId":"litone01"},"content":"        String res \u003d indent +"},{"lineNumber":217,"author":{"gitId":"litone01"},"content":"                \"On your command! I have removed this task:\\n\" +"},{"lineNumber":218,"author":{"gitId":"litone01"},"content":"                indent + \"  \" + task.toString() + \"\\n\" +"},{"lineNumber":219,"author":{"gitId":"litone01"},"content":"                indent + \"Now you have \" + tasks.size() + \" \" +"},{"lineNumber":220,"author":{"gitId":"litone01"},"content":"                (tasks.size() \u003e 1 ? \"tasks\" : \"task\") +"},{"lineNumber":221,"author":{"gitId":"litone01"},"content":"                \" in the list.\";"},{"lineNumber":222,"author":{"gitId":"litone01"},"content":"        System.out.println(res);"},{"lineNumber":223,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":224,"author":{"gitId":"litone01"},"content":""},{"lineNumber":225,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":226,"author":{"gitId":"litone01"},"content":"     * Verify if the given taskIndex is valid."},{"lineNumber":227,"author":{"gitId":"litone01"},"content":"     * Three possible errors are handled. Namely, they are:"},{"lineNumber":228,"author":{"gitId":"litone01"},"content":"     *      1. no taskIndex;"},{"lineNumber":229,"author":{"gitId":"litone01"},"content":"     *      2. taskIndex is not an integer;"},{"lineNumber":230,"author":{"gitId":"litone01"},"content":"     *      3. taskIndex is out of bound;"},{"lineNumber":231,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input, in String."},{"lineNumber":232,"author":{"gitId":"litone01"},"content":"     * @return index in int if it is valid"},{"lineNumber":233,"author":{"gitId":"litone01"},"content":"     * @throws DukeException if invalid index is provided"},{"lineNumber":234,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"litone01"},"content":"    private static int verifyTaskIndex(String taskIndex) throws DukeException {"},{"lineNumber":236,"author":{"gitId":"litone01"},"content":"        int index;"},{"lineNumber":237,"author":{"gitId":"litone01"},"content":"        if (taskIndex \u003d\u003d null) {"},{"lineNumber":238,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please enter a task index.\");"},{"lineNumber":239,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"litone01"},"content":""},{"lineNumber":241,"author":{"gitId":"litone01"},"content":"        try{"},{"lineNumber":242,"author":{"gitId":"litone01"},"content":"            index \u003d Integer.parseInt(taskIndex) - 1;"},{"lineNumber":243,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":244,"author":{"gitId":"litone01"},"content":"        catch (NumberFormatException e) {"},{"lineNumber":245,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task index entered is not an integer.\");"},{"lineNumber":246,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"litone01"},"content":""},{"lineNumber":248,"author":{"gitId":"litone01"},"content":"        if (index \u003e\u003d tasks.size()) {"},{"lineNumber":249,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index does not exist.\");"},{"lineNumber":250,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"litone01"},"content":""},{"lineNumber":252,"author":{"gitId":"litone01"},"content":"        return index;"},{"lineNumber":253,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"litone01"},"content":""},{"lineNumber":255,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":255}},{"path":"src/main/java/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Exception class for project duke."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"     * @param errorMessage specific error message for the exception created"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        super(\"Oh no :( \" + errorMessage);"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":14}},{"path":"src/main/java/duke/main/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027Event\u0027."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Events are tasks that start at a specific time and ends at a specific time"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Event extends Task{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    protected String at;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * Constructor for Event class object."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param description event description"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * @param at starting and ending time"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":25}},{"path":"src/main/java/duke/main/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Parent class for all tasks in Duke"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * Returns a String tick if the current task is done, otherwise, \" \"."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @return a String tick if the task is done, otherwise, \" \"."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public String getStatusIcon() {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     * Updates the isDone status of the current task to be true."},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * @return if isDone is currently false, set it to true and return true;"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     *              otherwise, return false;"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public boolean markAsDone() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        if (isDone) {"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":41}},{"path":"src/main/java/duke/main/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027todo\u0027."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Todos are tasks without any date/time attached to it."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Todo extends Task{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor for todo class object"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * @param description todo description"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    public Todo(String description) {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"todo test"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"event exam2 /at monday 12-2pm"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"deadline assignment /by monday"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"todo"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /at monday"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /by"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"deadline cannotCreate"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"deadline /by monday"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"event cannotCreate /by monday"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"event cannotCreate /at"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"event cannotCreate"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"event /at Monday"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"event"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"done 99"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"delete 99"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"bye"}],"authorContributionMap":{"litone01":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"javac -cp ..\\bin -d ..\\bin ..\\src\\main\\java\\duke\\command\\*.java"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"javac -cp ..\\bin -d ..\\bin ..\\src\\main\\java\\duke\\main\\*.java"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":16,"author":{"gitId":"-"},"content":")"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"java -classpath ..\\bin duke.main.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"litone01":4}}]
