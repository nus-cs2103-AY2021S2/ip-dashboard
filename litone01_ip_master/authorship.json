[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"# Duke project Jiaxiang"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"   "},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"## Message regarding the ordering of tags"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"Hi Prof, TAs and friends,"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"If you happen to be wandering why are the ordering of tags for the first 10 tags (speciafically level-2, level-4, A-textUI-test) messy and not at an incremental way, please let me explain."},{"lineNumber":30,"author":{"gitId":"litone01"},"content":""},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"I did develop the levels at an incremental way and commited accordingly as reflected in the commit history. However, I made some mistakes by tagging the commit on the respective branches where I developed level-2 and level-4 and A-textUI-test. Thus, after I merged these branches and deleted them, some of the tags are not captured by the plugin to capture iP progress."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":""},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"As such, I decided to remove the old and incorrect tags and retagged those commits. A side effect is that the tags are now showing in a messy ordering."},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"Hope you can understand and have a nice day:)"}],"authorContributionMap":{"-":22,"litone01":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.ui.UI;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":""},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Main class for the duke project."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" * Disclaimer: This iteration of folder is heavily influenced by the folder structure"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":" *      and coding style of se-edu/addressbook-level2"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    private UI ui;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public Duke() {"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":""},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * Main method for the code to start running."},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     * @param args user input"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public static void main(String[] args) {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        new Duke().run(args);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":""},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    private void run(String[] args) {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"        start();"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        runUntilExit();"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        exit();"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":""},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    private void start() {"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"            UI.greet();"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"            this.ui \u003d new UI();"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"            this.storage \u003d new Storage();"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"            UI.printMessage(new String[] {e.getMessage()});"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"            UI.printMessage(new String[] {\"Closing...\"});"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"            System.exit(-1);"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":""},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    private void runUntilExit() {"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"        String message \u003d ui.getUserInput();"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        while(!message.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            try {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"                Command command \u003d new Parser().parseMessage(message);"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"                String[] result \u003d command.execute();"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"                UI.printMessage(result);"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"            } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"                UI.printMessage(new String[] {e.getMessage()});"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"            message \u003d ui.getUserInput();"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":""},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"    private void exit() {"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"        UI.bye();"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"        System.exit(-1);"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":""},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":69}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.main.Task;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":""},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" * Adds a task to the taskList."},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    private Task taskToAdd;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":""},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * Constructor for the AddCommand class."},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * @param taskToAdd a Task object to be added"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    public AddCommand(Task taskToAdd) {"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        this.taskToAdd \u003d taskToAdd;"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"        String[] res;"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            res \u003d TaskList.addTask(taskToAdd);"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            Storage.saveData();"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            return res;"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":37}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Parent class for all commands ued in Duke"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Command {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    protected Command() {"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * Only used in the child classes"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when the method is called in a Command class object rather than its"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     *          specific child class"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    public String[] execute() throws DukeException {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        throw new DukeException(\"Parent command class does not have this method.\");"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":27}},{"path":"src/main/java/duke/command/CommandOption.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * enum class that lists all the commands allowed for Duke"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public enum CommandOption {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    LIST, DONE, TODO, DEADLINE, EVENT, DELETE, FIND;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":8}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Deletes a task to the taskList."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    private int taskIndexToDelete;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for the DeleteCommand class."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * @param taskIndexToDelete an index for the Task object to be deleted"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    public DeleteCommand(int taskIndexToDelete) {"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.taskIndexToDelete \u003d taskIndexToDelete;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * Executes the action of deleting the task."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        String[] res;"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"            res \u003d TaskList.deleteTask(taskIndexToDelete);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            Storage.saveData();"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            return res;"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":36}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Complete a task to the taskList."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class DoneCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    private int taskToComplete;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for the DoneCommand class."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * @param taskToComplete an index for the Task object to be done"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    public DoneCommand(int taskToComplete) {"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.taskToComplete \u003d taskToComplete;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * Executes the action of completing the task."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        String[] res;"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"            res \u003d TaskList.completeTask(taskToComplete);"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            Storage.saveData();"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"            return res;"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        } catch (DukeException e) {"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return new String[]{e.getMessage()};"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":36}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Finds all tasks containing the given description."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class FindCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param keyword keyword of the task description"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     * Executes the action of finding required tasks."},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks containing the given keyword"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        return TaskList.findTasks(keyword);"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":27}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Lists all tasks in the taskList."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class ListCommand extends Command{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    public ListCommand() {"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * Executes the action of adding the task."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to user"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public String[] execute() {"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"        return TaskList.getAllTaskListInfo();"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":24}},{"path":"src/main/java/duke/main/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027deadline\u0027."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":" * Deadlines are tasks that need to be done before a specific date/time."},{"lineNumber":11,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"public class Deadline extends Task{"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    protected LocalDate by;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * Constructor for Deadline class object."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @param description deadline description"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     * @param by a string that represents timing to be completed by"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     *           currently, only \"yyyy-mm-dd\" format is supported."},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public Deadline(String description, String by) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"invalid deadline date given.\");"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":""},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     * Constructor for Deadline class object, used for storage."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * @param description deadline description"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     * @param isDone if the deadline is done"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"     * @param by a string that represents timing to be completed by"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"     *           currently, only \"yyyy-mm-dd\" format is supported."},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    public Deadline(String description, boolean isDone, String by) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"invalid deadline date given.\");"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":""},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * Acts as a helper method to print out the details of the deadline."},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     * @return the details of the deadline"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(formatter) + \")\";"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":""},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"     * Helper method to get the details of the deadline to be stored."},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"     * @returnthe the details of the deadline to be stored"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    public String infoToStore() {"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        return \"D\" +  divider"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"                + description + divider"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"                + by;"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":69}},{"path":"src/main/java/duke/main/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Exception class for project duke."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"     * Constructor."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"     * @param errorMessage specific error message for the exception created"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        super(\"Oh no :( \" + errorMessage);"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":14}},{"path":"src/main/java/duke/main/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027Event\u0027."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Events are tasks that start at a specific time and ends at a specific time"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Event extends Task{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    protected String at;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":""},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * Constructor for Event class object."},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     * @param description event description"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * @param at starting and ending time"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    public Event(String description, String at) {"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     * Constructor for Event class object, used for storage."},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * @param description event description"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     * @param at starting and ending time"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"        this.at \u003d at;"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":""},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     * Acts as a helper method to print out the details of the event."},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"     * @return the details of the event"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * Helper method to get the details of the event to be stored."},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     * @returnthe the details of the event to be stored"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    public String infoToStore() {"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        return \"E\" +  divider"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"                + description + divider"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"                + at;"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":53}},{"path":"src/main/java/duke/main/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Parent class for all tasks in Duke"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":""},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     * Returns a String tick if the current task is done, otherwise, \" \"."},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"     * @return a String tick if the task is done, otherwise, \" \"."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    public String getStatusIcon() {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"        return (isDone ? \"X\" : \" \");"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     * Updates the isDone status of the current task to be true."},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"     * @return if isDone is currently false, set it to true and return true;"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"     *              otherwise, return false;"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    public boolean markAsDone() {"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"        if (isDone) {"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"            return false;"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"            isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * Acts as a helper method to print out the details of the task"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * @return the details of the task"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":""},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"     * Helper method to get the details of the task to be stored"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * @returnthe the details of the task to be stored"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    public String infoToStore() {"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        return (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"                + description;"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":55}},{"path":"src/main/java/duke/main/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":" * Inherited from Task, used to store information related to tasks of type \u0027todo\u0027."},{"lineNumber":5,"author":{"gitId":"litone01"},"content":" *"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Todos are tasks without any date/time attached to it."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class Todo extends Task{"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":""},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"     * Constructor for todo class object"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"     * @param description todo description"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    public Todo(String description) {"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":""},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"     * Constructor for todo class object, used for storage"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"     * @param description todo description"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"     * @param isDone if the todo is done"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":""},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * Acts as a helper method to print out the details of the todo"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * @return the details of the todo"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     * Helper method to get the details of the todo task to be stored"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * @returnthe the details of the todo task to be stored"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"    public String infoToStore() {"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"        String divider \u003d \" | \";"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        return \"T\" +  divider"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"                + (isDone ? \"1\" : \"0\") + divider"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"                + description;"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":48}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.command.CommandOption;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import duke.main.Deadline;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import duke.main.Event;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import duke.main.Task;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import duke.main.Todo;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"import java.util.Locale;"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":" * Parses the user input and return corresponding Command objects for execution."},{"lineNumber":19,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"     * Constructor"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"    public Parser() {"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * Parses the user input."},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * 1. Takes in the first word from user input and carries out relevant actions based on"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     *      the word by printing out corresponding replies."},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * 2. A command is NOT case sensitive."},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     *      For example, \"LIST\"/\"list\"/\"List\" will have the same effect."},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"     * 3. However, no additional whitespaces should be entered."},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"     *      For example, \"LIST \"/\"list \"/\"List \" will not work."},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"     * 4. Disclaimer: the idea of using .valueOf and convert to UpperCase is inspired"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"     *      based on discussion of #Issue 14 in forum."},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"     *      Credit to @samuelfangjw who mentioned it first."},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * @param message user input"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * @throws DukeException thrown if user enters a valid command but invalid related information"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     *                       or an invalid command"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    public Command parseMessage(String message) throws DukeException{"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        String[] msgArray \u003d message.split(\" \", 2);"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        String commandWord \u003d msgArray[0].strip();"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"        String otherInfo \u003d null;"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        if (msgArray.length \u003e 1) {"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"            otherInfo \u003d msgArray[1].strip();"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"        Command command;"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"            CommandOption commandEnum \u003d CommandOption.valueOf(commandWord.toUpperCase(Locale.ROOT));"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            switch (commandEnum) {"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            case LIST:"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"                command \u003d new ListCommand();"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"            case DONE:"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"                command \u003d preCompleteTask(otherInfo);"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"            case TODO:"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"                command \u003d preTodoTask(otherInfo);"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"            case EVENT:"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"                command \u003d preEventTask(otherInfo);"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"            case DEADLINE:"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"                command \u003d preDeadlineTask(otherInfo);"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"            case DELETE:"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"                command \u003d preDeleteTask(otherInfo);"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"            case FIND:"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"                command \u003d preFindTask(otherInfo);"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"                break;"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"            default:"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"                throw new DukeException(\"Unexpected value: \" + commandEnum);"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        catch (IllegalArgumentException e) {"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"I do not understand this command.\");"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":""},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"        return command;"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":""},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"    private Command preCompleteTask(String taskIndex) throws DukeException {"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        int index \u003d validateInteger(taskIndex);"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"        return new DoneCommand(index);"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":""},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"    private Command preDeleteTask(String taskIndex) throws DukeException {"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"        int index \u003d validateInteger(taskIndex);"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"        return new DeleteCommand(index);"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":""},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"    private int validateInteger(String taskIndex) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"        int index;"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"        if (taskIndex \u003d\u003d null) {"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please enter a task index.\");"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":""},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"        try{"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"            index \u003d Integer.parseInt(taskIndex);"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"        catch (NumberFormatException e) {"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task index entered is not an integer.\");"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"        return index;"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":""},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"    private Command preTodoTask(String description) throws DukeException {"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"        if (description \u003d\u003d null) {"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide a description when creating todo.\");"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"        return new AddCommand(new Todo(description));"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":""},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"    private Command preDeadlineTask(String otherInfo) throws DukeException {"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"        String[] validatedInfo \u003d validateOtherInfo(otherInfo, \"/by\");"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"        String description \u003d validatedInfo[0];"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"        String by \u003d validatedInfo[1];"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"        Task deadline \u003d new Deadline(description, by);"},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"        return new AddCommand(deadline);"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"litone01"},"content":""},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"    private Command preEventTask(String otherInfo) throws DukeException {"},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"        String[] validatedInfo \u003d validateOtherInfo(otherInfo, \"/at\");"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"        String description \u003d validatedInfo[0];"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"        String at \u003d validatedInfo[1];"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"        Task event \u003d new Event(description, at);"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"        return new AddCommand(event);"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":""},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"    private String[] validateOtherInfo(String otherInfo, String splitBy) throws DukeException {"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"            String[] temp \u003d otherInfo.split(splitBy, 2);"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":"            String description \u003d temp[0].strip();"},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"            String time \u003d temp[1].strip();"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"            if (description.equals(\"\") || time.equals(\"\")) {"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":"                throw new DukeException(\"Please provide a description or a by date \" +"},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"                        \"when creating deadline.\");"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"            return new String[] {description, time};"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please provide the relevant information \" +"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"                    \"when creating a task.\");"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please use /by when creating deadline or \" +"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"                    \"/at when creating event.\");"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"litone01"},"content":""},{"lineNumber":153,"author":{"gitId":"litone01"},"content":"    private Command preFindTask(String keyword) throws DukeException {"},{"lineNumber":154,"author":{"gitId":"litone01"},"content":"        if (keyword \u003d\u003d null || keyword.equals(\" \") || keyword.equals(\"\") ) {"},{"lineNumber":155,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Please enter a keyword when finding the task.\");"},{"lineNumber":156,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"litone01"},"content":"        return new FindCommand(keyword);"},{"lineNumber":158,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":159}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.Deadline;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import duke.main.Event;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"import duke.main.Task;"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"import duke.main.Todo;"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"import java.io.BufferedReader;"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"import java.nio.file.Files;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"import java.nio.file.Paths;"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"import java.util.ArrayList;"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":" * Stores the task list and implements functions for saving and loading."},{"lineNumber":18,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    private static TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    private static String rootProject \u003d System.getProperty(\"user.dir\");"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    private static Path dataFilePath \u003d"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"            Paths.get(rootProject,\"src\", \"main\", \"java\", \"duke\", \"data\", \"duke.txt\");"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"    private static Path dataFolderPath \u003d"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"            Paths.get(rootProject,\"src\", \"main\", \"java\", \"duke\", \"data\");"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     * Initializes the storage class"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an error happens when loading data from storage"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    public Storage() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"        init();"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":""},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"    private static void init() throws DukeException {"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"        storageExistOrCreate();"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        taskList \u003d new TaskList(loadData(dataFilePath));"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":""},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * Saves the current task list into storage, used by the public."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an error occurs while saving data, eg. no access rights"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    public static void saveData() throws DukeException {"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        saveData(dataFilePath, TaskList.getAllTasks());"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":""},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"    private static void saveData(Path filePath, ArrayList\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"            ArrayList\u003cString\u003e tasksInfoToStore \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"            for(Task task : tasks) {"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"                tasksInfoToStore.add(task.infoToStore());"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"            Files.write(filePath, tasksInfoToStore);"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"error in saving data.\""},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":""},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    private static ArrayList\u003cTask\u003e loadData(Path filePath) throws DukeException {"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"            BufferedReader br \u003d Files.newBufferedReader(filePath);"},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"            String line;"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"            while((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"                Task task \u003d stringToTask(line);"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"                if(task !\u003d null) {"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"                    res.add(task);"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"error when loading Data. Closing...\""},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":""},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"    private static Task stringToTask(String taskInfo) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"        String[] taskInfoArr \u003d taskInfo.split(\"\\\\|\");"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"        String type \u003d taskInfoArr[0].strip();"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        boolean isDone \u003d taskInfoArr[1].strip().equals(\"1\");"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        String description \u003d taskInfoArr[2].strip();"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"        Task res \u003d null;"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        switch(type) {"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"        case \"T\":"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"            res \u003d new Todo(description, isDone);"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"        case \"E\":"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"            String at \u003d taskInfoArr[3].strip();"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"            res \u003d new Event(description, isDone, at);"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":"        case \"D\":"},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"            String by \u003d taskInfoArr[3].strip();"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"            res \u003d new Deadline(description, isDone, by);"},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"litone01"},"content":""},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"    private static void storageExistOrCreate()"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"            throws DukeException{"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":"        try {"},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"            if (Files.notExists(dataFilePath)) {"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"                if (Files.notExists(dataFolderPath)) {"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"                    dataFolderPath \u003d Files.createDirectories(dataFolderPath);"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"                dataFilePath \u003d Files.createFile(dataFilePath);"},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Unable to access data stored, access rights issue. Closing...\""},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"                    + System.lineSeparator()"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"                    + \"      \" + e);"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":118}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import duke.main.DukeException;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import duke.main.Task;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Contains the task list and functions related to modifying it."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    private static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":""},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"     * Constructor for the tasklist class object."},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"     * @param tasks parsed tasks from storage"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    public static ArrayList\u003cTask\u003e getAllTasks() {"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"        return tasks;"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":""},{"lineNumber":25,"author":{"gitId":"litone01"},"content":""},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"     * Verifies if the given taskIndex is valid."},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"     * One possible errors are handled. Namely, they are:"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"     *      1. taskIndex is out of bound;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input after parsed"},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"     * @return index in int if it is valid"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * @throws DukeException if invalid index is provided"},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    private static int verifyTaskIndex(int taskIndex) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        int index \u003d taskIndex - 1;"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":""},{"lineNumber":37,"author":{"gitId":"litone01"},"content":"        if (index \u003e\u003d tasks.size()) {"},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index does not exist.\");"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"litone01"},"content":""},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"        return index;"},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":""},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"     * Removes the task with the given index and print the confirmation message."},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    public static String[] deleteTask(int taskIndex) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.remove(index);"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":""},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"        String[] res \u003d new String[] {"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"                \"On your command! I have removed this task:\","},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"                \"  \" + task.toString(),"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"                \"Now you have \" + tasks.size() + \" \" +"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":"                        (tasks.size() \u003e 1 ? \"tasks\" : \"task\") +"},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"                        \" in the list.\""},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":""},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":"     * Completes the task with the given index and print the confirmation message."},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"     * One possible error is handled. Namely, it is:"},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"     *      1. the task has been completed;"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"     * @param taskIndex taskIndex from user input"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"     * @throws DukeException when an invalid taskIndex is entered"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":"    public static String[] completeTask(int taskIndex) throws DukeException {"},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"        int index \u003d verifyTaskIndex(taskIndex);"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"        Task task \u003d tasks.get(index);"},{"lineNumber":76,"author":{"gitId":"litone01"},"content":""},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"        if (!task.markAsDone()) {"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"            throw new DukeException(\"Task with the given index has been completed.\");"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":""},{"lineNumber":81,"author":{"gitId":"litone01"},"content":"        String[] res \u003d new String[] {"},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"                \"Wonderful! You have completed this task:\","},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"                \"  \" + task.toString()"},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":""},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"     * Adds the task given to the task list"},{"lineNumber":90,"author":{"gitId":"litone01"},"content":"     * @param newTask a new task to be added"},{"lineNumber":91,"author":{"gitId":"litone01"},"content":"     * @return the corresponding results to be printed to users"},{"lineNumber":92,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"litone01"},"content":"    public static String[] addTask(Task newTask) {"},{"lineNumber":94,"author":{"gitId":"litone01"},"content":"        tasks.add(newTask);"},{"lineNumber":95,"author":{"gitId":"litone01"},"content":""},{"lineNumber":96,"author":{"gitId":"litone01"},"content":"        String[] res \u003d new String[] {"},{"lineNumber":97,"author":{"gitId":"litone01"},"content":"                \"Roger that! Added new task:\","},{"lineNumber":98,"author":{"gitId":"litone01"},"content":"                \" \" + newTask.toString(),"},{"lineNumber":99,"author":{"gitId":"litone01"},"content":"                \"Now you have \" + tasks.size() + \" \" +"},{"lineNumber":100,"author":{"gitId":"litone01"},"content":"                        (tasks.size() \u003e 1 ? \"tasks\" : \"task\") +"},{"lineNumber":101,"author":{"gitId":"litone01"},"content":"                        \" in the list.\""},{"lineNumber":102,"author":{"gitId":"litone01"},"content":"        };"},{"lineNumber":103,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":104,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"litone01"},"content":""},{"lineNumber":106,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"litone01"},"content":"     * Lists the tasks in the task list"},{"lineNumber":108,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks present"},{"lineNumber":109,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"litone01"},"content":"    public static String[] getAllTaskListInfo() {"},{"lineNumber":111,"author":{"gitId":"litone01"},"content":"        String[] res;"},{"lineNumber":112,"author":{"gitId":"litone01"},"content":"        if (tasks.isEmpty()) {"},{"lineNumber":113,"author":{"gitId":"litone01"},"content":"            res \u003d new String[] {\"Hi! Your todo list is currently empty.\"};"},{"lineNumber":114,"author":{"gitId":"litone01"},"content":"        } else {"},{"lineNumber":115,"author":{"gitId":"litone01"},"content":"            res \u003d new String[tasks.size() + 1];"},{"lineNumber":116,"author":{"gitId":"litone01"},"content":"            res[0] \u003d \"Hi! This is your todo list:\";"},{"lineNumber":117,"author":{"gitId":"litone01"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"litone01"},"content":"                Task task \u003d tasks.get(i);"},{"lineNumber":119,"author":{"gitId":"litone01"},"content":"                res[i+1] \u003d \" \" + (i + 1) + \".\" + task.toString();"},{"lineNumber":120,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"litone01"},"content":"        return res;"},{"lineNumber":123,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"litone01"},"content":""},{"lineNumber":125,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"litone01"},"content":"     * Finds all tasks containing the given keyword."},{"lineNumber":127,"author":{"gitId":"litone01"},"content":"     * @param keyword user input, a keyword of task description to be searched"},{"lineNumber":128,"author":{"gitId":"litone01"},"content":"     * @return the information of the tasks containing the given keyword"},{"lineNumber":129,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"litone01"},"content":"    public static String[] findTasks(String keyword) {"},{"lineNumber":131,"author":{"gitId":"litone01"},"content":"        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitId":"litone01"},"content":"        res.add(\"Here are the matching tasks in your list:\");"},{"lineNumber":133,"author":{"gitId":"litone01"},"content":""},{"lineNumber":134,"author":{"gitId":"litone01"},"content":"        int i \u003d 1;"},{"lineNumber":135,"author":{"gitId":"litone01"},"content":"        for (Task task : tasks) {"},{"lineNumber":136,"author":{"gitId":"litone01"},"content":"            if (task.toString().contains(keyword)) {"},{"lineNumber":137,"author":{"gitId":"litone01"},"content":"                String description \u003d \" \" + i + \".\" + task.toString();"},{"lineNumber":138,"author":{"gitId":"litone01"},"content":"                res.add(description);"},{"lineNumber":139,"author":{"gitId":"litone01"},"content":"                i++;"},{"lineNumber":140,"author":{"gitId":"litone01"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"litone01"},"content":""},{"lineNumber":143,"author":{"gitId":"litone01"},"content":"        if (res.size() \u003d\u003d 1) {"},{"lineNumber":144,"author":{"gitId":"litone01"},"content":"            res.clear();"},{"lineNumber":145,"author":{"gitId":"litone01"},"content":"            res.add(\"Sorry, no relevant tasks found:(\");"},{"lineNumber":146,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"litone01"},"content":""},{"lineNumber":148,"author":{"gitId":"litone01"},"content":"        return res.toArray(new String[0]);"},{"lineNumber":149,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":150}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":" * Interacts with user by receiving input and printing results from user commands."},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"public class UI {"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"    private static final String[] greet \u003d {"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"            \" ____        _        \","},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"            \"|  _ \\\\ _   _| | _____ \","},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"            \"| | | | | | | |/ / _ \\\\\","},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"            \"| |_| | |_| |   \u003c  __/\","},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"            \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\","},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"            \"Greetings! I\u0027m Your Personal Assistant Duke:)\","},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"            \"What can I do for you today?\""},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":""},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"    private static final String[] exit \u003d {"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"            \"Bye. Nice to meet you and hope to see you again soon!\""},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"    };"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":""},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    private static final String border \u003d"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"            \"    ____________________________________________________________\" +"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"                    \"_______________\\n\";"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":""},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"    private static final String indent \u003d \"     \";"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":""},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"    private final Scanner in;"},{"lineNumber":30,"author":{"gitId":"litone01"},"content":""},{"lineNumber":31,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"litone01"},"content":"     * Constructor and inits the scanner for input."},{"lineNumber":33,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"litone01"},"content":"    public UI() {"},{"lineNumber":35,"author":{"gitId":"litone01"},"content":"        this.in \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"litone01"},"content":""},{"lineNumber":38,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"litone01"},"content":"     * Returns the formatted message to be printed."},{"lineNumber":40,"author":{"gitId":"litone01"},"content":"     * @param messages an array of strings, main body of the message to be formatted."},{"lineNumber":41,"author":{"gitId":"litone01"},"content":"     * @return the formatted message (specifically, greet and bye) to be printed."},{"lineNumber":42,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"litone01"},"content":"    public static String formatMessage(String[] messages) {"},{"lineNumber":44,"author":{"gitId":"litone01"},"content":"        StringBuilder res \u003d new StringBuilder(border);"},{"lineNumber":45,"author":{"gitId":"litone01"},"content":"        for (String message : messages) {"},{"lineNumber":46,"author":{"gitId":"litone01"},"content":"            res.append(indent).append(message).append(\"\\n\");"},{"lineNumber":47,"author":{"gitId":"litone01"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"litone01"},"content":"        res.append(border);"},{"lineNumber":49,"author":{"gitId":"litone01"},"content":"        return res.toString();"},{"lineNumber":50,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"litone01"},"content":""},{"lineNumber":52,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"litone01"},"content":"     * Prints the welcome message when duke starts."},{"lineNumber":54,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"litone01"},"content":"    public static void greet() {"},{"lineNumber":56,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(greet));"},{"lineNumber":57,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"litone01"},"content":""},{"lineNumber":59,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"litone01"},"content":"     * Prints the exit message when duke closes."},{"lineNumber":61,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"litone01"},"content":"    public static void bye() {"},{"lineNumber":63,"author":{"gitId":"litone01"},"content":"        System.out.println(formatMessage(exit));"},{"lineNumber":64,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"litone01"},"content":""},{"lineNumber":66,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"litone01"},"content":"     * Helper method that prints the message or reply after the user command is executed."},{"lineNumber":68,"author":{"gitId":"litone01"},"content":"     * @param msg"},{"lineNumber":69,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"litone01"},"content":"    private static void printReply(String msg) {"},{"lineNumber":71,"author":{"gitId":"litone01"},"content":"        System.out.println(msg);"},{"lineNumber":72,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"litone01"},"content":""},{"lineNumber":74,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"litone01"},"content":"     * Takes in user input."},{"lineNumber":76,"author":{"gitId":"litone01"},"content":"     * @return user input as String"},{"lineNumber":77,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"litone01"},"content":"    public String getUserInput() {"},{"lineNumber":79,"author":{"gitId":"litone01"},"content":"        return in.nextLine();"},{"lineNumber":80,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"litone01"},"content":""},{"lineNumber":82,"author":{"gitId":"litone01"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"litone01"},"content":"     * Prints the result after the command is executed."},{"lineNumber":84,"author":{"gitId":"litone01"},"content":"     * @param msg result from Command class .execute method"},{"lineNumber":85,"author":{"gitId":"litone01"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"litone01"},"content":"    public static void printMessage(String[] msg) {"},{"lineNumber":87,"author":{"gitId":"litone01"},"content":"        printReply(formatMessage(msg));"},{"lineNumber":88,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":89}},{"path":"src/test/java/duke/main/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":""},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":""},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":" * Unit test for Task class."},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"public class TaskTest {"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    public void testStringConversion(){"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[ ] test\", task.toString());"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":""},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    public void testInfoToStoreConversion(){"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        assertEquals(\"0 | test\", task.infoToStore());"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":""},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"    public void testMarkAsDone() {"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[ ] test\", task.toString());"},{"lineNumber":26,"author":{"gitId":"litone01"},"content":"        task.markAsDone();"},{"lineNumber":27,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[X] test\", task.toString());"},{"lineNumber":28,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":29}},{"path":"src/test/java/duke/main/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":""},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":""},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":""},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":" * Unit test for Todo class."},{"lineNumber":9,"author":{"gitId":"litone01"},"content":" */"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"public class TodoTest {"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"    public void testStringConversion(){"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"        Todo todo \u003d new Todo(\"test\");"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"        assertEquals(\"[T][ ] test\", todo.toString());"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"    public void testInfoToStoreConversion(){"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"        Todo todo \u003d new Todo(\"test\");"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"        assertEquals(\"T | 0 | test\", todo.infoToStore());"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"}"}],"authorContributionMap":{"litone01":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"litone01"},"content":"todo test"},{"lineNumber":2,"author":{"gitId":"litone01"},"content":"event exam2 /at monday 12-2pm"},{"lineNumber":3,"author":{"gitId":"litone01"},"content":"deadline assignment /by monday"},{"lineNumber":4,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":5,"author":{"gitId":"litone01"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":7,"author":{"gitId":"litone01"},"content":"delete 1"},{"lineNumber":8,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":9,"author":{"gitId":"litone01"},"content":"todo"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /at monday"},{"lineNumber":12,"author":{"gitId":"litone01"},"content":"deadline cannotCreate /by"},{"lineNumber":13,"author":{"gitId":"litone01"},"content":"deadline cannotCreate"},{"lineNumber":14,"author":{"gitId":"litone01"},"content":"deadline /by monday"},{"lineNumber":15,"author":{"gitId":"litone01"},"content":"deadline"},{"lineNumber":16,"author":{"gitId":"litone01"},"content":"event cannotCreate /by monday"},{"lineNumber":17,"author":{"gitId":"litone01"},"content":"event cannotCreate /at"},{"lineNumber":18,"author":{"gitId":"litone01"},"content":"event cannotCreate"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"event /at Monday"},{"lineNumber":20,"author":{"gitId":"litone01"},"content":"event"},{"lineNumber":21,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":22,"author":{"gitId":"litone01"},"content":"done 99"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"delete 99"},{"lineNumber":24,"author":{"gitId":"litone01"},"content":"list"},{"lineNumber":25,"author":{"gitId":"litone01"},"content":"bye"}],"authorContributionMap":{"litone01":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"litone01"},"content":"javac -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"litone01"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"litone01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"litone01":3}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"litone01"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"litone01":1}}]
