[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"deadline­false­a­2020-11-01T10:15:30"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"event­false­b­2020-11-01T10:15:30­2020-11-01T10:15:31"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"todo­false­a"}],"authorContributionMap":{"JoelHo":3}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeBot;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * Duke is a chatbot that manages your tasks with persistent storage."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * The entry point for the Duke chatbot."},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * @param args the command line args passed to Duke"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        new DukeBot(new Scanner(System.in), \"data/duke.txt\").run();"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"JoelHo":12}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"public abstract class AddCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    private final Task task;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * Constructor accessible by subclasses."},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param task the task to be added to the task list"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    protected AddCommand(final Task task) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        this.task \u003d task;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * Adds the associated task to the task list."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        taskList.addTask(task);"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.MESSAGE_ADDED, task.toString(), taskList.size());"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":28}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"public interface Command {"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"     * Returns the result to be printed on executing the command."},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     * @return the result of the command to be printed"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    String execute(TaskList taskList);"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":12}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new deadline command with the associated content and date, in a deadline task."},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the task"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * @param date the deadline of the task"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public DeadlineCommand(final String content, final LocalDateTime date) {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        super(new DeadlineTask(content, date));"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":16}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    private final int index;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new delete command with the specified index."},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be deleted"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public DeleteCommand(final int idx) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * Deletes the task associated with the index, if valid."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        if (index \u003e taskList.size()) {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.MESSAGE_DELETE, taskList.deleteTask(index), taskList.size());"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":30}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"public class DoneCommand implements Command {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    private final int index;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new done command with the specified index."},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be marked as done"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public DoneCommand(final int idx) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * Marks the task associated with the index as done, if valid."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        if (index \u003e taskList.size()) {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        return String.format(\"%s\\n%s\", DukeString.MESSAGE_DONE, taskList.doneTask(index));"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":30}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.EventTask;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new event command with the associated content and dates, in a event task."},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the event"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * @param startDate the start of the event"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param endDate the end of the event"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public EventCommand(final String content, final LocalDateTime startDate, final LocalDateTime endDate) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        super(new EventTask(content, startDate, endDate));"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":17}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public class ExitCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"     * Return the shutdown message."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * @return the shutdown message for Duke"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_BYE;"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":16}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public class FindCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    private final String string;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    public FindCommand(String str) {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        this.string \u003d str;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public String execute(TaskList taskList) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_FIND + taskList.tasksContaining(this.string);"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":17}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public class ListCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     * Formats the task list into a human readable format"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be read by the command"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted version of the task list, as a String"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        if (taskList.size() !\u003d 0) {"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"            return DukeString.MESSAGE_LIST + taskList.toString();"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_LIST_EMPTY;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":20}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.task.TodoTask;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new todo command with the associated content, in a todo task."},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the todo"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    public TodoCommand(final String content) {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"        super(new TodoTask(content));"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":13}},{"path":"src/main/java/duke/common/DukeBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Parser;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Storage;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Ui;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":" * Instance of duke that keeps track of the current state."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"public class DukeBot {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    private final Scanner scanner;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    private final Parser parser;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    private final TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new DukeBot with the associated input scanner, saving to the specified path."},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     * @param sc the scanner with the input stream to be parsed"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     * @param path the path of the save file for persistent storage"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public DukeBot(final Scanner sc, final String path) {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        this.scanner \u003d sc;"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        this.storage \u003d new Storage(path);"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        this.taskList \u003d this.storage.readTasks();"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     * Starts the input loop with the associated input stream, ending only on a bye command."},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        Command command;"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        Ui.printOut(DukeString.MESSAGE_WELCOME);"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        while (!parser.isBye()) {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"                command \u003d parser.parseInput(scanner.nextLine());"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"                Ui.printOut(command.execute(taskList));"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"                this.storage.writeTasks(taskList);"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"            } catch (DukeException.InvalidCommand"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.InvalidTask"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyDescription"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyDeadlineDate"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyEventDate"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.InvalidEventEnd e) {"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                Ui.printErr(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":56}},{"path":"src/main/java/duke/common/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":" * A utility class to consolidate all exceptions related to Duke."},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public class DukeException {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidCommand extends IllegalArgumentException {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        public InvalidCommand() {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_COMMAND);"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyDescription extends IllegalArgumentException {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        public EmptyDescription(final String type) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"            super(String.format(DukeString.EXCEPTION_EMPTY_DESCRIPTION, type));"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidTask extends IllegalArgumentException {"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        public InvalidTask() {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_TASK);"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyDeadlineDate extends IllegalArgumentException {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        public EmptyDeadlineDate() {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_EMPTY_DEADLINE_DATE);"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyEventDate extends IllegalArgumentException {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        public EmptyEventDate() {"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_EMPTY_EVENT_DATE);"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidEventEnd extends IllegalArgumentException {"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        public InvalidEventEnd() {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_EVENT_END);"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    public static class StorageReadError extends IllegalArgumentException {"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        public StorageReadError() {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_STORAGE_READ_ERROR);"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    "},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"    public static class StorageWriteError extends IllegalArgumentException {"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"        public StorageWriteError() {"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_STORAGE_WRITE_ERROR);"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":55}},{"path":"src/main/java/duke/common/DukeString.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":" * A utility class that consolidates strings used by Duke."},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public final class DukeString {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    public static final String SEPARATOR \u003d \"--------------------------------------\";"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    public static final String SEPARATOR_ERR \u003d \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\";"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_BYE \u003d \"Goodbye!\";"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this as done: \";"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks.\";"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_LIST_EMPTY \u003d \"You have no tasks.\";"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_DELETE \u003d \"Got it. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d tasks.\";"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_NONE_FOUND \u003d \"Sorry, I did not find any tasks matching %s.\";"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_LIST \u003d \"list\";"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DONE \u003d \"done\";"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DEADLINE_SEP \u003d \"/by\";"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT_SEP \u003d \"/at\";"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT_TO \u003d \"/to\";"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_FIND \u003d \"find\";"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_COMMAND \u003d \"Sorry, I did not understand that.\";"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \"Sorry, the description of a %s cannot be empty.\";"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_TASK \u003d \"Sorry, I could not find that task.\";"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_DEADLINE_DATE \u003d \"Sorry, the date of a deadline must be specified.\";"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_EVENT_DATE \u003d"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, the start and end date of an event must be specified.\";"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_EVENT_END \u003d"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, the end date of an event must be after the start date.\";"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_STORAGE_READ_ERROR \u003d"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, there has been an error reading your tasks.\\nMaking a copy of your tasks at data/duke.bak.\";"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_STORAGE_WRITE_ERROR \u003d \"Sorry, there has been an error writing your tasks.\";"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    private DukeString() {"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":47}},{"path":"src/main/java/duke/interaction/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import duke.command.EventCommand;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"import duke.command.ListCommand;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"import duke.command.TodoCommand;"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    private boolean isBye;"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new Parser."},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public Parser() {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        this.isBye \u003d false;"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * Getter for the bye field."},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     * Used to indicate that the parser received a bye."},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * @return the value of bye"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    public boolean isBye() {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        return this.isBye;"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"     * Parse the input as given, construct the appropriate command with content, if any."},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"     * @param input the command string to be parsed from the user"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"     * @return the appropriate command with content and dates, if any"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidCommand if there is no command found"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidTask if the task specified for done or delete is invalid"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyDescription if the description for a task is empty"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyDeadlineDate if the command is deadline and no date is specified"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyEventDate if the command is event and both dates are not specified"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidEventEnd if the command is event and the end is before the start"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    public Command parseInput(final String input) throws"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidCommand,"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidTask,"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyDescription,"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyDeadlineDate,"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyEventDate,"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidEventEnd {"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"        Scanner scanner \u003d new Scanner(input);"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"        String[] tokens;"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidCommand();"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        switch (scanner.next().toLowerCase()) {"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_BYE:"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"            this.isBye \u003d true;"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"            return new ExitCommand();"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_LIST:"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"            return new ListCommand();"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DONE:"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNextInt()) {"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.InvalidTask();"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"            return new DoneCommand(scanner.nextInt());"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DELETE:"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNextInt()) {"},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.InvalidTask();"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"            return new DeleteCommand(scanner.nextInt());"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DEADLINE:"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNext()) {"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyDescription(DukeString.COMMAND_DEADLINE);"},{"lineNumber":81,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":83,"author":{"gitId":"JoelHo"},"content":"            tokens \u003d scanner.nextLine().split(DukeString.COMMAND_DEADLINE_SEP);"},{"lineNumber":84,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":85,"author":{"gitId":"JoelHo"},"content":"            if (tokens.length \u003c 2 || tokens[1].isBlank()) {"},{"lineNumber":86,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyDeadlineDate();"},{"lineNumber":87,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":89,"author":{"gitId":"JoelHo"},"content":"            return new DeadlineCommand(tokens[0].trim(), LocalDateTime.parse(tokens[1].trim()));"},{"lineNumber":90,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_EVENT:"},{"lineNumber":91,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNext()) {"},{"lineNumber":92,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyDescription(DukeString.COMMAND_EVENT);"},{"lineNumber":93,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":95,"author":{"gitId":"JoelHo"},"content":"            tokens \u003d scanner.nextLine().split(DukeString.COMMAND_EVENT_SEP);"},{"lineNumber":96,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":97,"author":{"gitId":"JoelHo"},"content":"            if (tokens.length \u003c 2 || tokens[1].isBlank()) {"},{"lineNumber":98,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyEventDate();"},{"lineNumber":99,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":101,"author":{"gitId":"JoelHo"},"content":"            String[] dates \u003d tokens[1].split(DukeString.COMMAND_EVENT_TO);"},{"lineNumber":102,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":103,"author":{"gitId":"JoelHo"},"content":"            if (dates.length \u003c 2 || dates[0].isBlank() || dates[1].isBlank()) {"},{"lineNumber":104,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyEventDate();"},{"lineNumber":105,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"JoelHo"},"content":"            if (LocalDateTime.parse(dates[0].trim()).compareTo(LocalDateTime.parse(dates[1].trim())) \u003e\u003d 0) {"},{"lineNumber":107,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.InvalidEventEnd();"},{"lineNumber":108,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":110,"author":{"gitId":"JoelHo"},"content":"            return new EventCommand("},{"lineNumber":111,"author":{"gitId":"JoelHo"},"content":"                    tokens[0].trim(),"},{"lineNumber":112,"author":{"gitId":"JoelHo"},"content":"                    LocalDateTime.parse(dates[0].trim()),"},{"lineNumber":113,"author":{"gitId":"JoelHo"},"content":"                    LocalDateTime.parse(dates[1].trim())"},{"lineNumber":114,"author":{"gitId":"JoelHo"},"content":"            );"},{"lineNumber":115,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_TODO:"},{"lineNumber":116,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNext()) {"},{"lineNumber":117,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyDescription(DukeString.COMMAND_TODO);"},{"lineNumber":118,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"JoelHo"},"content":"            return new TodoCommand(scanner.nextLine().trim());"},{"lineNumber":120,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_FIND:"},{"lineNumber":121,"author":{"gitId":"JoelHo"},"content":"            if (!scanner.hasNext()) {"},{"lineNumber":122,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.EmptyDescription(DukeString.COMMAND_FIND);"},{"lineNumber":123,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"JoelHo"},"content":"            return new FindCommand(scanner.next());"},{"lineNumber":125,"author":{"gitId":"JoelHo"},"content":"        default:"},{"lineNumber":126,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidCommand();"},{"lineNumber":127,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":128,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":130}},{"path":"src/main/java/duke/interaction/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    private final File saveFile;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * Construct a new Storage object with the associated save path."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * Does not attempt to create file until a write is called."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @param filePath the path of the file to be used for persistent storage"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    public Storage(String filePath) {"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        this.saveFile \u003d new File(filePath);"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"     * Read the tasks from the given save file, if it exists and can be read. Otherwise, return an empty TaskList."},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     * If the file is malformed, create a backup of the file before proceeding with empty TaskList."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * @return the TaskList as read from the save file, if it exists and can be read. Otherwise, return empty TaskList"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public TaskList readTasks() {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        try (Scanner sc \u003d new Scanner(saveFile)) {"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"            return TaskList.deserialise(sc);"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        } catch (DukeException.StorageReadError e) {"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"            System.err.println(e);"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"                Files.copy(saveFile.toPath(), Path.of(\"data/duke.bak\"), StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"            } catch (IOException ex) {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"                System.err.println(ex);"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"            return new TaskList();"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"            return new TaskList();"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"     * Writes the given TaskList out to file, if valid. Otherwise, creates a new file."},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be written out"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"    public void writeTasks(TaskList taskList) {"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"        this.saveFile.getParentFile().mkdirs();"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"            this.saveFile.createNewFile();"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"            FileWriter fw \u003d new FileWriter(saveFile);"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"            fw.write(taskList.serialise());"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"            fw.close();"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.StorageWriteError();"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":68}},{"path":"src/main/java/duke/interaction/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    private Ui() {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * Prints the given message with a separator."},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * @param msg the message to be printed."},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public static void printOut(final String msg) {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR);"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        System.out.println(msg);"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR);"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * Prints the given error with a special separator."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @param msg the message to be printed."},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    public static void printErr(final String msg) {"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR_ERR);"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        System.out.println(msg);"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR_ERR);"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":28}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime deadline;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new deadline task with the given description and date."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @param date the date of the deadline"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    public DeadlineTask(final String desc, final LocalDateTime date) {"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        this.deadline \u003d date;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    private DeadlineTask(boolean done, String desc, LocalDateTime date) {"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d done;"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        this.deadline \u003d date;"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\\255%s\","},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_DEADLINE,"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"                super.description,"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"                deadline.toString()"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new DeadlineTask given the serialised input read from storage."},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"     * @return a new DeadlineTask with the associated fields"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"    public static DeadlineTask deserialise(String input) {"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        return new DeadlineTask(tokens[1].equals(\"true\"), tokens[2], LocalDateTime.parse(tokens[3]));"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                \"[D]%s (by: %s)\","},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"                super.toString(),"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"                deadline.format(DateTimeFormatter.ofPattern(\"dd LLL uu hhmma\"))"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":56}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class EventTask extends Task {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime startDate;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime endDate;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new event task with the given description and dates."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @param start the start date of the event"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * @param end the end date of the event"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public EventTask(final String desc, final LocalDateTime start, final LocalDateTime end) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d start;"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d end;"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    private EventTask(boolean done, String desc, final LocalDateTime start, final LocalDateTime end) {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d done;"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d start;"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d end;"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\\255%s\\255%s\","},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_EVENT,"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"                super.description,"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"                startDate.toString(),"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"                endDate.toString()"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new EventTask given the serialised input read from storage."},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"     * @return a new EventTask with the associated fields"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"    public static EventTask deserialise(String input) {"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"        return new EventTask("},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                tokens[1].equals(\"true\"),"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"                tokens[2],"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(tokens[3]),"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(tokens[4])"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"                \"[E]%s (from: %s to %s)\","},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"                super.toString(),"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"                startDate.format(DateTimeFormatter.ofPattern(\"dd LLL uu hhmma\")),"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"                endDate.format(DateTimeFormatter.ofPattern(\"dd LLL uu hhmma\"))"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":67}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"    protected final String description;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    protected Task(final String desc) {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        this.description \u003d desc;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * Serialise this task into a format that can be saved."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * Implementation dependent."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @return a serialised version of the task, implementation dependent."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public abstract String serialise();"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * Marks this task as done."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    public void markDone() {"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"        isDone \u003d true;"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public boolean containsTerm(String term) {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        return this.description.contains(term);"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"        return String.format(\"[%c] %s\", isDone ? \u0027✓\u0027 : \u0027X\u0027, description);"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":34}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TaskList with an empty list."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    private TaskList(List\u003cTask\u003e list) {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        this.tasks \u003d list;"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TaskList with the given input read from storage."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised save file as read from storage"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     * @return a new TaskList populated with the Tasks as read from storage"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.StorageReadError if the serialised save file is malformed"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    public static TaskList deserialise(Scanner input) throws DukeException.StorageReadError {"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        String line;"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        while (input.hasNextLine()) {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"            line \u003d input.nextLine();"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"            if (line.equals(\"\\n\")) {"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"            switch (line.split(\"\\255\")[0]) {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_DEADLINE :"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"                list.add(DeadlineTask.deserialise(line));"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_EVENT :"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"                list.add(EventTask.deserialise(line));"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_TODO :"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"                list.add(TodoTask.deserialise(line));"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"            default:"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.StorageReadError();"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"        return new TaskList(list);"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"     * Adds the given task to the list."},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"     * @param task the task to be added to the list"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"    public void addTask(final Task task) {"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        tasks.add(task);"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"     * Marks the task at the given index as done."},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be marked as done"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the specified task"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"    public String doneTask(final int idx) {"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"        tasks.get(idx - 1).markDone();"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"        return tasks.get(idx - 1).toString();"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"     * Deletes the task at the given index."},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be deleted"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the deleted task"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":"    public String deleteTask(final int idx) {"},{"lineNumber":81,"author":{"gitId":"JoelHo"},"content":"        return tasks.remove(idx - 1).toString();"},{"lineNumber":82,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":84,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"JoelHo"},"content":"     * Getter for the size of the list."},{"lineNumber":86,"author":{"gitId":"JoelHo"},"content":"     * @return the number of tasks in the list"},{"lineNumber":87,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"JoelHo"},"content":"    public int size() {"},{"lineNumber":89,"author":{"gitId":"JoelHo"},"content":"        return tasks.size();"},{"lineNumber":90,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":92,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"JoelHo"},"content":"     * Serialises the tasks in the list, each task on a newline."},{"lineNumber":94,"author":{"gitId":"JoelHo"},"content":"     * @return the serialised version of the tasks in the list"},{"lineNumber":95,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":97,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":98,"author":{"gitId":"JoelHo"},"content":"        for (Task task : tasks) {"},{"lineNumber":99,"author":{"gitId":"JoelHo"},"content":"            out.append(task.serialise());"},{"lineNumber":100,"author":{"gitId":"JoelHo"},"content":"            out.append(\u0027\\n\u0027);"},{"lineNumber":101,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":103,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":104,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":106,"author":{"gitId":"JoelHo"},"content":"    public String tasksContaining(String str) {"},{"lineNumber":107,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":108,"author":{"gitId":"JoelHo"},"content":"        int i \u003d 1;"},{"lineNumber":109,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":110,"author":{"gitId":"JoelHo"},"content":"        for (Task task : taskList) {"},{"lineNumber":111,"author":{"gitId":"JoelHo"},"content":"            if (task.containsTerm(str)) {"},{"lineNumber":112,"author":{"gitId":"JoelHo"},"content":"                out.append(i++);"},{"lineNumber":113,"author":{"gitId":"JoelHo"},"content":"                out.append(\". \");"},{"lineNumber":114,"author":{"gitId":"JoelHo"},"content":"                out.append(task.toString());"},{"lineNumber":115,"author":{"gitId":"JoelHo"},"content":"                out.append(\u0027\\n\u0027);"},{"lineNumber":116,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":119,"author":{"gitId":"JoelHo"},"content":"        if (out.length() \u003d\u003d 0) {"},{"lineNumber":120,"author":{"gitId":"JoelHo"},"content":"            out.append(DukeString.MESSAGE_NONE_FOUND);"},{"lineNumber":121,"author":{"gitId":"JoelHo"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"JoelHo"},"content":"            out.deleteCharAt(out.length() - 1);"},{"lineNumber":123,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":125,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":126,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":128,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":129,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":130,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":131,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":132,"author":{"gitId":"JoelHo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"JoelHo"},"content":"            out.append(i + 1);"},{"lineNumber":134,"author":{"gitId":"JoelHo"},"content":"            out.append(\". \");"},{"lineNumber":135,"author":{"gitId":"JoelHo"},"content":"            out.append(tasks.get(i));"},{"lineNumber":136,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":137,"author":{"gitId":"JoelHo"},"content":"            if (i !\u003d tasks.size() - 1) {"},{"lineNumber":138,"author":{"gitId":"JoelHo"},"content":"                out.append(\u0027\\n\u0027);"},{"lineNumber":139,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":142,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":143,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":144}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"public class TodoTask extends Task {"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new todo task with the given description"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    public TodoTask(final String desc) {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    private TodoTask(boolean done, String desc) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d done;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\","},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_TODO,"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"                super.description"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TodoTask given the serialised input read from storage."},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * @return a new TodoTask with the associated fields"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    public static TodoTask deserialise(String input) {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        return new TodoTask(tokens[1].equals(\"true\"), tokens[2]);"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":43}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Parser;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.task.EventTask;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TodoTask;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"public class DukeTest {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    public void deadlineSerialisationTest() {"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"test\", LocalDateTime.parse(\"2020-11-01T10:15:30\"));"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        DeadlineTask newTask \u003d DeadlineTask.deserialise(task.serialise());"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        assertEquals(task.toString(), newTask.toString());"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        task.markDone();"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        assertNotEquals(task.toString(), newTask.toString());"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public void eventSerialisationTest() {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        EventTask task \u003d new EventTask(\"test\", LocalDateTime.parse(\"2020-11-01T10:15:30\"), LocalDateTime.parse(\"2020-11-01T10:16:30\"));"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        EventTask newTask \u003d EventTask.deserialise(task.serialise());"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        assertEquals(task.toString(), newTask.toString());"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        task.markDone();"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        assertNotEquals(task.toString(), newTask.toString());"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"    public void parserTest() {"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        parser.parseInput(\"todo a\").execute(taskList);"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"        assertEquals(new TodoTask(\"a\").serialise() + \"\\n\", taskList.serialise());"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        parser.parseInput(\"delete 1\").execute(taskList);"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        assertEquals(\"\", taskList.serialise());"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":42}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"deadline return book /by 2020-11-01T10:15:30"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"event project meeting /at 2020-11-01T10:15:30 /to 2020-11-01T10:20:30"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"todo borrow other book"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"dummyCommand"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"deadline\t"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"deadline a /by"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"event"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"event /at"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"event /at /to"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"event a /at"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"event a /at 2020-11-01T10:15:30 /to"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"event a /at /to 2020-11-01T10:15:30"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"event a /at 2020-11-01T10:15:30 /to 2020-11-01T10:15:00"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"done a"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"delete"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"delete a"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"bye"}],"authorContributionMap":{"JoelHo":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"javac -encoding \"UTF-8\" -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"JoelHo":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"if ! javac -encoding \"UTF-8\" -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"JoelHo":1}}]
