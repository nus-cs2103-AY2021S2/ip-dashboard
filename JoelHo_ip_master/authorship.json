[{"path":".github/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"done"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"exit $ret"}],"authorContributionMap":{"JoelHo":18}},{"path":".github/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"\u0027"}],"authorContributionMap":{"JoelHo":19}},{"path":".github/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"\u0027"}],"authorContributionMap":{"JoelHo":26}},{"path":".github/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"done"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"exit $ret"}],"authorContributionMap":{"JoelHo":11}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"compileJava.options.encoding \u003d \u0027utf-8\u0027"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"javadoc {"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"    options.encoding \u003d \u0027UTF-8\u0027"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"-":45,"JoelHo":23}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"todo�true�read book"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"deadline�false�return book�2026-06-06T23:59"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"event�true�project meeting�2021-04-20T16:20�2021-04-20T17:20"}],"authorContributionMap":{"JoelHo":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"# Duke User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"Duke is a chat-bot that can help you with organising your tasks of different formats. Duke is optimised for those who prefer to work with a CLI while being able to see the responses in a GUI."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"## Table of Contents"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"{:toc}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"## Features"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"**Notes about the command format:**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"* Commands come in the format: `command [args]`"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"* Words in `[brackets]` are optional and may not be required"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"* Words with a `bar|seperating` indicate one, or the other may be used  "},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"* Words in `UPPERCASE` are arguments to be supplied by the user."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"* Date and time is expected in `dd-MM-yy HHmm` format"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"* Extra arguments supplied will be ignored"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"### `bye` - Exit the program"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"Exits the program."},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"Format: `bye`"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"### `list` - Lists the tasks stored"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"Lists the tasks currently stored."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"Format: `list`"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"Example:"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"\u003elist"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"Here are the tasks in your list:"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"1. [T][✓] read book"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"2. [D][X] return book (by: 06 Jun 26 1159PM)"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"3. [E][✓] project meeting (from: 20 Apr 21 0420PM to 20 Apr 21 0520PM)"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"### `todo` - Add a todo task"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"Add a todo task. Todo tasks have no due date."},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"Format: `todo TASK_DESCRIPTION`"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"\u003etodo read book"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"\t[T][X] read book"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"Now you have 2 tasks."},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"### `deadline` - Add a deadline task"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"Add a deadline task. Deadline tasks are tasks that need to be done before a certain date."},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"Format: `deadline TASK_DESCRIPTION /by DD-MM-YY HHMM`"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"\u003edeadline return book /by 06-06-26 2359"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"\t[D][X] return book (by: 06 Jun 26 1159PM)"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"Now you have 3 tasks."},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"### `event` - Add an event task"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"Add an event task. Event tasks are tasks that start and end at specific times."},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"Format: `event TASK_DESCRIPTION /at DD-MM-YY HHMM /to DD-MM-YY HHMM`"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":81,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":82,"author":{"gitId":"JoelHo"},"content":"\u003eevent project meeting /at 20-04-21 1620 /to 20-04-21 1720"},{"lineNumber":83,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":84,"author":{"gitId":"JoelHo"},"content":"\t[E][X] project meeting (from: 20 Apr 21 0420PM to 20 Apr 21 0520PM)"},{"lineNumber":85,"author":{"gitId":"JoelHo"},"content":"Now you have 4 tasks."},{"lineNumber":86,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":87,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":88,"author":{"gitId":"JoelHo"},"content":"### `done` - Mark a task as done"},{"lineNumber":89,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":90,"author":{"gitId":"JoelHo"},"content":"Mark the specified task as done. Takes in the index of the task."},{"lineNumber":91,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":92,"author":{"gitId":"JoelHo"},"content":"Format: `done INDEX`"},{"lineNumber":93,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":94,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":95,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":96,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":97,"author":{"gitId":"JoelHo"},"content":"\u003edone 1"},{"lineNumber":98,"author":{"gitId":"JoelHo"},"content":"Nice! I\u0027ve marked this as done: "},{"lineNumber":99,"author":{"gitId":"JoelHo"},"content":"[T][✓] read book"},{"lineNumber":100,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":101,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":102,"author":{"gitId":"JoelHo"},"content":"### `snooze` - Snooze a task"},{"lineNumber":103,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":104,"author":{"gitId":"JoelHo"},"content":"Snooze/postpone a task. Follows a similar format to deadline/event tasks, takes in an index."},{"lineNumber":105,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":106,"author":{"gitId":"JoelHo"},"content":"Format: `snooze INDEX /at|/by DD-MM-YY HHMM [/to DD-MM-YY HHMM]`"},{"lineNumber":107,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":108,"author":{"gitId":"JoelHo"},"content":"Example outcomes:"},{"lineNumber":109,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":110,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":111,"author":{"gitId":"JoelHo"},"content":"\u003esnooze 2 /by 06-06-21 2359"},{"lineNumber":112,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve snoozed this task:"},{"lineNumber":113,"author":{"gitId":"JoelHo"},"content":"\t[D][X] return book (by: 06 Jun 21 1159PM)"},{"lineNumber":114,"author":{"gitId":"JoelHo"},"content":"\t"},{"lineNumber":115,"author":{"gitId":"JoelHo"},"content":"\u003esnooze 3 /at 04-02-21 1620 /to 04-02-21 1720"},{"lineNumber":116,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve snoozed this task:"},{"lineNumber":117,"author":{"gitId":"JoelHo"},"content":"\t[E][✓] project meeting (from: 04 Feb 21 0420PM to 04 Feb 21 0520PM)"},{"lineNumber":118,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":119,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":120,"author":{"gitId":"JoelHo"},"content":"### `delete` - Delete a task"},{"lineNumber":121,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":122,"author":{"gitId":"JoelHo"},"content":"Delete the specified task. Takes in the index of the task."},{"lineNumber":123,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":124,"author":{"gitId":"JoelHo"},"content":"Format: `delete INDEX`"},{"lineNumber":125,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":126,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":127,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":128,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":129,"author":{"gitId":"JoelHo"},"content":"\u003edelete 1"},{"lineNumber":130,"author":{"gitId":"JoelHo"},"content":"Got it. I\u0027ve removed this task:"},{"lineNumber":131,"author":{"gitId":"JoelHo"},"content":"\t[T][✓] read book"},{"lineNumber":132,"author":{"gitId":"JoelHo"},"content":"Now you have 5 tasks."},{"lineNumber":133,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"JoelHo"},"content":"### `find` - Find a task"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"JoelHo"},"content":"Finds a task with a given keyword(s). Does complete matching (i.e. searches for the whole phrase)"},{"lineNumber":138,"author":{"gitId":"-"},"content":""},{"lineNumber":139,"author":{"gitId":"JoelHo"},"content":"Format: `find KEYWORD`"},{"lineNumber":140,"author":{"gitId":"-"},"content":""},{"lineNumber":141,"author":{"gitId":"JoelHo"},"content":"Example outcome:"},{"lineNumber":142,"author":{"gitId":"-"},"content":""},{"lineNumber":143,"author":{"gitId":"JoelHo"},"content":"```"},{"lineNumber":144,"author":{"gitId":"JoelHo"},"content":"\u003efind book"},{"lineNumber":145,"author":{"gitId":"JoelHo"},"content":"Here are the matching tasks in your list:"},{"lineNumber":146,"author":{"gitId":"JoelHo"},"content":"1. [D][X] return book (by: 06 Jun 21 1159PM)"},{"lineNumber":147,"author":{"gitId":"JoelHo"},"content":"2. [T][X] read book"},{"lineNumber":148,"author":{"gitId":"JoelHo"},"content":"```"}],"authorContributionMap":{"-":11,"JoelHo":137}},{"path":"src/main/java/duke/DukeCli.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeBot;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * A CLI interface for Duke. Deprecated."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class DukeCli {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * The entry point for the Duke chatbot."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @param args the command line args passed to Duke."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        new DukeBot(\"data/duke.txt\").run(new Scanner(System.in));"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"JoelHo":16}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeBot;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.MainWindow;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    private DukeBot duke \u003d new DukeBot(\"data/duke.txt\");"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":33}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * An abstract class that, when executed, will add the given Task to the given TaskList."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public abstract class AddCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    private final Task task;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * Constructor accessible by subclasses."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * @param task the task to be added to the task list."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    protected AddCommand(final Task task) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        this.task \u003d task;"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     * Adds the associated task to the task list."},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user."},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"        taskList.addTask(task);"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.MESSAGE_ADDED, task.toString(), taskList.getSize());"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":33}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * An interface that represents a command that applies when executed."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public interface Command {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * Returns the result to be printed on executing the command."},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * @return the result of the command to be printed."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    String execute(TaskList taskList);"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":16}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * Represents a command that adds a DeadlineTask to the given TaskList."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new deadline command with the associated content and date, in a deadline task."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the task."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @param date the deadline of the task."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public DeadlineCommand(final String content, final LocalDateTime date) {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        super(new DeadlineTask(content, date));"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":20}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * Represents a command that deletes a given Task from a given TaskList."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    private final int index;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new delete command with the specified index."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be deleted."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public DeleteCommand(final int idx) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     * Deletes the task associated with the index, if valid."},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user."},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"        if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.MESSAGE_DELETE, taskList.deleteTask(index), taskList.getSize());"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * Represents a command that marks a given Task as done from a given TaskList."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class DoneCommand implements Command {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    private final int index;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new done command with the specified index."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be marked as done."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public DoneCommand(final int idx) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     * Marks the task associated with the index as done, if valid."},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted message to be output to the user."},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"        if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        return String.format(\"%s\\n%s\", DukeString.MESSAGE_DONE, taskList.markTaskDone(index));"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":35}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.task.EventTask;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" * Represents a command that adds a EventTask to the given TaskList."},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new event command with the associated content and dates, in a event task."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the event."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @param startDate the start of the event."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * @param endDate the end of the event."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public EventCommand(final String content, final LocalDateTime startDate, final LocalDateTime endDate) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        super(new EventTask(content, startDate, endDate));"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":21}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" * Represents a command that tells the parser to exit."},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"public class ExitCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * Returns the shutdown message."},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be modified by the command."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @return the shutdown message for Duke."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_BYE;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":20}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" * Represents a command that adds a finds a String in Tasks from the given TaskList."},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"public class FindCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    private final String string;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new FindCommand with the given String to search for."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @param str the string to search the TaskList for."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public FindCommand(String str) {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        this.string \u003d str;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     * Finds the given String in Tasks from the given TaskList."},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the TaskList to search through."},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted String, that contains the matching tasks, if any."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    public String execute(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_FIND + taskList.tasksContaining(this.string);"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":31}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" * Represents a command that lists the given tasks in the TaskList."},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"public class ListCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     * Formats the task list into a human readable format"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be read by the command."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted version of the task list, as a String."},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public String execute(final TaskList taskList) {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        if (taskList.getSize() !\u003d 0) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"            return DukeString.MESSAGE_LIST + taskList.toString();"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        return DukeString.MESSAGE_LIST_EMPTY;"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":23}},{"path":"src/main/java/duke/command/SnoozeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"public class SnoozeCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    private final int index;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime startDate;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime endDate;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new SnoozeCommand with the associated index and date, to modify deadline tasks."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the deadline task to modify."},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"     * @param date the amended date."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public SnoozeCommand(final int idx, final LocalDateTime date) {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d date;"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d LocalDateTime.MIN;"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new SnoozeCommand with the associated index and dates, to modify event tasks."},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the event task to modify."},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     * @param startDate the amended start date."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * @param endDate the amended end date."},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public SnoozeCommand(final int idx, final LocalDateTime startDate, final LocalDateTime endDate) {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        this.index \u003d idx;"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d startDate;"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d endDate;"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    public String execute(TaskList taskList) {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        if (index \u003e taskList.getSize() || index \u003c\u003d 0) {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"        if (this.endDate \u003d\u003d LocalDateTime.MIN) {"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"            return String.format(DukeString.MESSAGE_SNOOZED_TASK, taskList.snoozeDeadlineTask(index, startDate));"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.MESSAGE_SNOOZED_TASK, taskList.snoozeEventTask(index, startDate, endDate));"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":48}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.task.TodoTask;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * Represents a command that adds a TodoTask to the given TaskList."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new todo command with the associated content, in a todo task."},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param content the content of the todo."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public TodoCommand(final String content) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        super(new TodoTask(content));"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":17}},{"path":"src/main/java/duke/common/DukeBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Parser;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Storage;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Ui;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":" * Instance of duke that keeps track of the current state."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"public class DukeBot {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    private final Parser parser;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    private final Storage storage;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    private final TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new DukeBot with the associated input scanner, saving to the specified path."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     * @param path the path of the save file for persistent storage"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    public DukeBot(final String path) {"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        this.storage \u003d new Storage(path);"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        this.taskList \u003d this.storage.readTasks();"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * Starts the input loop with the associated input stream, ending only on a bye command."},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * @param scanner the scanner for the input stream."},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    public void run(Scanner scanner) {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        Command command;"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"        Ui.printOut(DukeString.MESSAGE_WELCOME);"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        while (!parser.isBye()) {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"                command \u003d parser.parseInput(scanner.nextLine());"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"                Ui.printOut(command.execute(taskList));"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"                this.storage.writeTasks(taskList);"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"            } catch (DukeException.InvalidCommand"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.InvalidTask"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.InvalidDateFormat"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyDescription"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyDeadlineDate"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.EmptyEventDate"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"                    | DukeException.InvalidEventEnd e) {"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                Ui.printErr(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"     * Gets the appropriate response from Duke given an input."},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"     * @param input the input to Duke"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"     * @return the reply from Duke, if applicable. Otherwise, the error from Duke"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"    public String getResponse(String input) {"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"            Command command \u003d parser.parseInput(input);"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"            String out \u003d command.execute(taskList);"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"            this.storage.writeTasks(taskList);"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"            return out;"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"        } catch (DukeException.InvalidCommand"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"                | DukeException.InvalidTask"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"                | DukeException.InvalidDateFormat"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"                | DukeException.EmptyDescription"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"                | DukeException.EmptyDeadlineDate"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"                | DukeException.EmptyEventDate"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":"                | DukeException.InvalidEventEnd"},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"                | DukeException.InvalidDateForTask e) {"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"            return e.getMessage();"},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":79}},{"path":"src/main/java/duke/common/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":" * A utility class to consolidate all exceptions related to Duke."},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public class DukeException {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidCommand extends IllegalArgumentException {"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"        public InvalidCommand() {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_COMMAND);"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyDescription extends IllegalArgumentException {"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        public EmptyDescription(final String type) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"            super(String.format(DukeString.EXCEPTION_EMPTY_DESCRIPTION, type));"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidTask extends IllegalArgumentException {"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        public InvalidTask() {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_TASK);"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidDateFormat extends IllegalArgumentException {"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"        public InvalidDateFormat() {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_DATE);"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyDeadlineDate extends IllegalArgumentException {"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"        public EmptyDeadlineDate() {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_EMPTY_DEADLINE_DATE);"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    public static class EmptyEventDate extends IllegalArgumentException {"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        public EmptyEventDate() {"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_EMPTY_EVENT_DATE);"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidEventEnd extends IllegalArgumentException {"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"        public InvalidEventEnd() {"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_INVALID_EVENT_END);"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    public static class InvalidDateForTask extends UnsupportedOperationException {"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"        public InvalidDateForTask(String task) {"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"            super(String.format(DukeString.EXCEPTION_INVALID_DATE_FOR_TASK, task));"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    public static class StorageReadError extends IllegalArgumentException {"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"        public StorageReadError() {"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_STORAGE_READ_ERROR);"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"    public static class StorageWriteError extends IllegalArgumentException {"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        public StorageWriteError() {"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"            super(DukeString.EXCEPTION_STORAGE_WRITE_ERROR);"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":66}},{"path":"src/main/java/duke/common/DukeString.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.common;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":" * A utility class that consolidates strings used by Duke."},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public final class DukeString {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    public static final String SEPARATOR \u003d \"--------------------------------------\\n\";"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    public static final String SEPARATOR_ERR \u003d \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\";"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Duke\\nWhat can I do for you?\";"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_BYE \u003d \"Goodbye!\";"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_DONE \u003d \"Nice! I\u0027ve marked this as done: \";"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_ADDED \u003d \"Got it. I\u0027ve added this task:\\n\\t%s\\nNow you have %d tasks.\";"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_LIST \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_LIST_EMPTY \u003d \"You have no tasks.\";"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_DELETE \u003d \"Got it. I\u0027ve removed this task:\\n\\t%s\\nNow you have %d tasks.\";"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_FIND \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_NONE_FOUND \u003d \"Sorry, I did not find any tasks matching %s.\";"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    public static final String MESSAGE_SNOOZED_TASK \u003d \"Got it. I\u0027ve snoozed this task:\\n\\t%s\";"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_BYE \u003d \"bye\";"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_LIST \u003d \"list\";"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DONE \u003d \"done\";"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DEADLINE \u003d \"deadline\";"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DEADLINE_SEP \u003d \"/by\";"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT \u003d \"event\";"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT_SEP \u003d \"/at\";"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_EVENT_TO \u003d \"/to\";"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_TODO \u003d \"todo\";"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_DELETE \u003d \"delete\";"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_FIND \u003d \"find\";"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_SNOOZE \u003d \"snooze\";"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"    public static final String COMMAND_SNOOZE_REGEX \u003d COMMAND_DEADLINE_SEP + \u0027|\u0027 + COMMAND_EVENT_SEP;"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    public static final String FORMAT_DATE_INPUT \u003d \"dd-MM-yy HHmm\";"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    public static final String FORMAT_DATE_OUTPUT \u003d \"dd LLL uu hhmma\";"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    public static final String FORMAT_DEADLINE \u003d \"[D]%s (by: %s)\";"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    public static final String FORMAT_EVENT \u003d \"[E]%s (from: %s to %s)\";"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    public static final String FORMAT_TODO \u003d \"[T]%s\";"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_COMMAND \u003d \"Sorry, I did not understand that.\";"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_DESCRIPTION \u003d \"Sorry, the description of a %s cannot be empty.\";"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_TASK \u003d \"Sorry, I could not find that task.\";"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_DATE \u003d"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, I did not understand that date. Please use dd-MM-yy HHmm.\";"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_DEADLINE_DATE \u003d \"Sorry, the date of a deadline must be specified.\";"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_EMPTY_EVENT_DATE \u003d"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, the start and end date of an event must be specified.\";"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_EVENT_END \u003d"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, the end date of an event must be after the start date.\";"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_INVALID_DATE_FOR_TASK \u003d"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, the task\\n\\t%s\\ndoes not support these dates.\";"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_STORAGE_READ_ERROR \u003d"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"            \"Sorry, there has been an error reading your tasks.\\nMaking a copy of your tasks at data/duke.bak.\";"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    public static final String EXCEPTION_STORAGE_WRITE_ERROR \u003d \"Sorry, there has been an error writing your tasks.\";"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"    private DukeString() {"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":60}},{"path":"src/main/java/duke/interaction/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"     * Factory method to create a DialogBox formatted for the user."},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"     * @param text the text to print as the user"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"     * @param img the image to show as the user"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"     * @return a DialogBox formatted as the user"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"        return new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"     * Factory method to create a DialogBox formatted for Duke."},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"     * @param text the text to print as Duke"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"     * @param img the image to show as Duke"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"     * @return a DialogBox formatted as Duke"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"        return db;"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":73}},{"path":"src/main/java/duke/interaction/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeBot;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    private DukeBot duke;"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"     * Method to insert DukeBot into the window."},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"     * @param d the DukeBot to insert"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    public void setDuke(DukeBot d) {"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"        userInput.clear();"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":56}},{"path":"src/main/java/duke/interaction/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import java.util.Timer;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import java.util.TimerTask;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import duke.command.Command;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"import duke.command.DoneCommand;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"import duke.command.EventCommand;"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"import duke.command.ExitCommand;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"import duke.command.FindCommand;"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"import duke.command.ListCommand;"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"import duke.command.SnoozeCommand;"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"import duke.command.TodoCommand;"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"import javafx.application.Platform;"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":" * A class that handles the interpretation of the given command to DukeBot."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"public class Parser {"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    private boolean isBye;"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    private final DateTimeFormatter formatter;"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new Parser."},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"    public Parser() {"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        this.isBye \u003d false;"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        this.formatter \u003d DateTimeFormatter.ofPattern(DukeString.FORMAT_DATE_INPUT);"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"     * Getter for the bye field."},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"     * Used to indicate that the parser received a bye."},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"     * @return the value of bye."},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"    public boolean isBye() {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        return this.isBye;"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"     * Parse the input as given, construct the appropriate command with content, if any."},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"     * @param input the command string to be parsed from the user."},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"     * @return the appropriate command with content and dates, if any."},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidCommand if there is no command found."},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidTask if the task specified for done or delete is invalid."},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidDateFormat if the date format for an event or deadline is invalid."},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyDescription if the description for a task is empty."},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyDeadlineDate if the command is deadline and no date is specified."},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.EmptyEventDate if the command is event and both dates are not specified."},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidEventEnd if the command is event and the end is before the start."},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"    public Command parseInput(final String input) throws"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidCommand,"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidTask,"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidDateFormat,"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyDescription,"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyDeadlineDate,"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"            DukeException.EmptyEventDate,"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"            DukeException.InvalidEventEnd {"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"        Scanner scanner \u003d new Scanner(input);"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidCommand();"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"        switch (scanner.next().toLowerCase()) {"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_BYE:"},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"            return getExitCommand();"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_LIST:"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"            return getListCommand();"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DONE:"},{"lineNumber":81,"author":{"gitId":"JoelHo"},"content":"            return getDoneCommand(scanner);"},{"lineNumber":82,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DELETE:"},{"lineNumber":83,"author":{"gitId":"JoelHo"},"content":"            return getDeleteCommand(scanner);"},{"lineNumber":84,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_DEADLINE:"},{"lineNumber":85,"author":{"gitId":"JoelHo"},"content":"            return getDeadlineCommand(scanner);"},{"lineNumber":86,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_EVENT:"},{"lineNumber":87,"author":{"gitId":"JoelHo"},"content":"            return getEventCommand(scanner);"},{"lineNumber":88,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_TODO:"},{"lineNumber":89,"author":{"gitId":"JoelHo"},"content":"            return getTodoCommand(scanner);"},{"lineNumber":90,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_FIND:"},{"lineNumber":91,"author":{"gitId":"JoelHo"},"content":"            return getFindCommand(scanner);"},{"lineNumber":92,"author":{"gitId":"JoelHo"},"content":"        case DukeString.COMMAND_SNOOZE:"},{"lineNumber":93,"author":{"gitId":"JoelHo"},"content":"            return getSnoozeCommand(scanner);"},{"lineNumber":94,"author":{"gitId":"JoelHo"},"content":"        default:"},{"lineNumber":95,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidCommand();"},{"lineNumber":96,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"JoelHo"},"content":"    private ExitCommand getExitCommand() {"},{"lineNumber":99,"author":{"gitId":"JoelHo"},"content":"        new Timer().schedule(new TimerTask() {"},{"lineNumber":100,"author":{"gitId":"JoelHo"},"content":"            @Override"},{"lineNumber":101,"author":{"gitId":"JoelHo"},"content":"            public void run() {"},{"lineNumber":102,"author":{"gitId":"JoelHo"},"content":"                Platform.exit();"},{"lineNumber":103,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"JoelHo"},"content":"        }, 2000);"},{"lineNumber":105,"author":{"gitId":"JoelHo"},"content":"        this.isBye \u003d true;"},{"lineNumber":106,"author":{"gitId":"JoelHo"},"content":"        return new ExitCommand();"},{"lineNumber":107,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":109,"author":{"gitId":"JoelHo"},"content":"    private ListCommand getListCommand() {"},{"lineNumber":110,"author":{"gitId":"JoelHo"},"content":"        return new ListCommand();"},{"lineNumber":111,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":113,"author":{"gitId":"JoelHo"},"content":"    private DoneCommand getDoneCommand(Scanner scanner) {"},{"lineNumber":114,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNextInt()) {"},{"lineNumber":115,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":116,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"JoelHo"},"content":"        return new DoneCommand(scanner.nextInt());"},{"lineNumber":118,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":120,"author":{"gitId":"JoelHo"},"content":"    private DeleteCommand getDeleteCommand(Scanner scanner) {"},{"lineNumber":121,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNextInt()) {"},{"lineNumber":122,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":123,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"JoelHo"},"content":"        return new DeleteCommand(scanner.nextInt());"},{"lineNumber":125,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":127,"author":{"gitId":"JoelHo"},"content":"    private DeadlineCommand getDeadlineCommand(Scanner scanner) {"},{"lineNumber":128,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":129,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDescription(DukeString.COMMAND_DEADLINE);"},{"lineNumber":130,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":132,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d scanner.nextLine().split(DukeString.COMMAND_DEADLINE_SEP);"},{"lineNumber":133,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":134,"author":{"gitId":"JoelHo"},"content":"        if (tokens.length \u003c 2 || tokens[1].isBlank()) {"},{"lineNumber":135,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDeadlineDate();"},{"lineNumber":136,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":138,"author":{"gitId":"JoelHo"},"content":"        LocalDateTime startDate;"},{"lineNumber":139,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"JoelHo"},"content":"            startDate \u003d LocalDateTime.parse(tokens[1].trim(), formatter);"},{"lineNumber":141,"author":{"gitId":"JoelHo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":142,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateFormat();"},{"lineNumber":143,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":145,"author":{"gitId":"JoelHo"},"content":"        return new DeadlineCommand(tokens[0].trim(), startDate);"},{"lineNumber":146,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":148,"author":{"gitId":"JoelHo"},"content":"    private EventCommand getEventCommand(Scanner scanner) {"},{"lineNumber":149,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":150,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDescription(DukeString.COMMAND_EVENT);"},{"lineNumber":151,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":153,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d scanner.nextLine().split(DukeString.COMMAND_EVENT_SEP);"},{"lineNumber":154,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":155,"author":{"gitId":"JoelHo"},"content":"        if (tokens.length \u003c 2 || tokens[1].isBlank()) {"},{"lineNumber":156,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyEventDate();"},{"lineNumber":157,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":159,"author":{"gitId":"JoelHo"},"content":"        String[] dates \u003d tokens[1].split(DukeString.COMMAND_EVENT_TO);"},{"lineNumber":160,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":161,"author":{"gitId":"JoelHo"},"content":"        if (dates.length \u003c 2 || dates[0].isBlank() || dates[1].isBlank()) {"},{"lineNumber":162,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyEventDate();"},{"lineNumber":163,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":165,"author":{"gitId":"JoelHo"},"content":"        LocalDateTime startDate;"},{"lineNumber":166,"author":{"gitId":"JoelHo"},"content":"        LocalDateTime endDate;"},{"lineNumber":167,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":168,"author":{"gitId":"JoelHo"},"content":"            startDate \u003d LocalDateTime.parse(dates[0].trim(), formatter);"},{"lineNumber":169,"author":{"gitId":"JoelHo"},"content":"            endDate \u003d LocalDateTime.parse(dates[1].trim(), formatter);"},{"lineNumber":170,"author":{"gitId":"JoelHo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":171,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateFormat();"},{"lineNumber":172,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":174,"author":{"gitId":"JoelHo"},"content":"        if (startDate.compareTo(endDate) \u003e\u003d 0) {"},{"lineNumber":175,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidEventEnd();"},{"lineNumber":176,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":178,"author":{"gitId":"JoelHo"},"content":"        return new EventCommand(tokens[0].trim(), startDate, endDate);"},{"lineNumber":179,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":181,"author":{"gitId":"JoelHo"},"content":"    private TodoCommand getTodoCommand(Scanner scanner) {"},{"lineNumber":182,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":183,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDescription(DukeString.COMMAND_TODO);"},{"lineNumber":184,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"JoelHo"},"content":"        return new TodoCommand(scanner.nextLine().trim());"},{"lineNumber":186,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":187,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":188,"author":{"gitId":"JoelHo"},"content":"    private FindCommand getFindCommand(Scanner scanner) {"},{"lineNumber":189,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":190,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDescription(DukeString.COMMAND_FIND);"},{"lineNumber":191,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":192,"author":{"gitId":"JoelHo"},"content":"        return new FindCommand(scanner.next());"},{"lineNumber":193,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":195,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":196,"author":{"gitId":"JoelHo"},"content":"    private SnoozeCommand getSnoozeCommand(Scanner scanner) {"},{"lineNumber":197,"author":{"gitId":"JoelHo"},"content":"        if (!scanner.hasNext()) {"},{"lineNumber":198,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":199,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":201,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d scanner.nextLine().split(DukeString.COMMAND_SNOOZE_REGEX);"},{"lineNumber":202,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":203,"author":{"gitId":"JoelHo"},"content":"        if (tokens.length \u003c 2 || tokens[1].isBlank()) {"},{"lineNumber":204,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.EmptyDeadlineDate();"},{"lineNumber":205,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"JoelHo"},"content":"        //Check if first token is a valid digit"},{"lineNumber":207,"author":{"gitId":"JoelHo"},"content":"        if (!tokens[0].trim().matches(\"\\\\d+\")) {"},{"lineNumber":208,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidTask();"},{"lineNumber":209,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":211,"author":{"gitId":"JoelHo"},"content":"        String[] dates \u003d tokens[1].split(DukeString.COMMAND_EVENT_TO);"},{"lineNumber":212,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":213,"author":{"gitId":"JoelHo"},"content":"        LocalDateTime startDate;"},{"lineNumber":214,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":215,"author":{"gitId":"JoelHo"},"content":"            startDate \u003d LocalDateTime.parse(dates[0].trim(), formatter);"},{"lineNumber":216,"author":{"gitId":"JoelHo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":217,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateFormat();"},{"lineNumber":218,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":220,"author":{"gitId":"JoelHo"},"content":"        if (dates.length \u003c 2 || !tokens[1].contains(\"/to\")) {"},{"lineNumber":221,"author":{"gitId":"JoelHo"},"content":"            return new SnoozeCommand(Integer.parseInt(tokens[0].trim()), startDate);"},{"lineNumber":222,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":224,"author":{"gitId":"JoelHo"},"content":"        LocalDateTime endDate;"},{"lineNumber":225,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":226,"author":{"gitId":"JoelHo"},"content":"            endDate \u003d LocalDateTime.parse(dates[1].trim(), formatter);"},{"lineNumber":227,"author":{"gitId":"JoelHo"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":228,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateFormat();"},{"lineNumber":229,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":231,"author":{"gitId":"JoelHo"},"content":"        if (startDate.compareTo(endDate) \u003e\u003d 0) {"},{"lineNumber":232,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidEventEnd();"},{"lineNumber":233,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":235,"author":{"gitId":"JoelHo"},"content":"        return new SnoozeCommand(Integer.parseInt(tokens[0].trim()), startDate, endDate);"},{"lineNumber":236,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":238,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":238}},{"path":"src/main/java/duke/interaction/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import java.nio.file.StandardCopyOption;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":" * A class that handles the read and write of Tasks to disk."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    private final File saveFile;"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     * Construct a new Storage object with the associated save path."},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     * Does not attempt to create file until a write is called."},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     * @param filePath the path of the file to be used for persistent storage."},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"    public Storage(String filePath) {"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"        this.saveFile \u003d new File(filePath);"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * Read the tasks from the given save file, if it exists and can be read. Otherwise, return an empty TaskList."},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     * If the file is malformed, create a backup of the file before proceeding with empty TaskList."},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"     * @return the TaskList as read from the save file, if it exists and can be read. Otherwise, return empty TaskList."},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    public TaskList readTasks() {"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        try (Scanner sc \u003d new Scanner(saveFile)) {"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"            return TaskList.deserialise(sc);"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        } catch (DukeException.StorageReadError e) {"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"            System.err.println(e);"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"                Files.copy(saveFile.toPath(), Path.of(\"data/duke.bak\"), StandardCopyOption.REPLACE_EXISTING);"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"            } catch (IOException ex) {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"                System.err.println(ex);"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"            return new TaskList();"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"            return new TaskList();"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"     * Writes the given TaskList out to file, if valid. Otherwise, creates a new file."},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"     * @param taskList the task list to be written out."},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"    public void writeTasks(TaskList taskList) {"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"        this.saveFile.getParentFile().mkdirs();"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        assert this.saveFile.getParentFile() !\u003d null;"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"            this.saveFile.createNewFile();"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"            assert this.saveFile !\u003d null;"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"            FileWriter fw \u003d new FileWriter(saveFile);"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"            fw.write(taskList.serialise());"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"            fw.close();"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"        } catch (IOException e) {"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.StorageWriteError();"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":76}},{"path":"src/main/java/duke/interaction/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.interaction;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * A class that handles the output to user."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    private Ui() {"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     * Prints the given message with a separator."},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * @param msg the message to be printed."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public static void printOut(final String msg) {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR + msg + DukeString.SEPARATOR);"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"     * Prints the given error with a special separator."},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     * @param msg the message to be printed."},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public static void printErr(final String msg) {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        System.out.println(DukeString.SEPARATOR_ERR + msg + DukeString.SEPARATOR_ERR);"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":29}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" * A class that represents a Task with a given deadline."},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime deadline;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new deadline task with the given description and date."},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task."},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"     * @param date the date of the deadline."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public DeadlineTask(final String desc, final LocalDateTime date) {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        this.deadline \u003d date;"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new deadline task with the given status, description, and date."},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"     * @param isDone the done status of the task."},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     * @param date the date of the deadline."},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"    DeadlineTask(boolean isDone, String desc, LocalDateTime date) {"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d isDone;"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        this.deadline \u003d date;"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\\255%s\","},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_DEADLINE,"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"                super.description,"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"                deadline.toString()"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new DeadlineTask given the serialised input read from storage."},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed."},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"     * @return a new DeadlineTask with the associated fields."},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    public static DeadlineTask deserialise(String input) {"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"        return new DeadlineTask(tokens[1].equals(\"true\"), tokens[2], LocalDateTime.parse(tokens[3]));"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"                DukeString.FORMAT_DEADLINE,"},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"                super.toString(),"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"                deadline.format(DateTimeFormatter.ofPattern(DukeString.FORMAT_DATE_OUTPUT))"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":68}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":" * A class that represents a Task that has a start and end date."},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"public class EventTask extends Task {"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime startDate;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    private final LocalDateTime endDate;"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new event task with the given description and dates."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * @param start the start date of the event."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     * @param end the end date of the event."},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    public EventTask(final String desc, final LocalDateTime start, final LocalDateTime end) {"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d start;"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d end;"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new event task with the given status, description and dates."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     * @param done the done status of the task."},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task."},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     * @param start the start date of the event."},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     * @param end the end date of the event."},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    EventTask(boolean done, String desc, final LocalDateTime start, final LocalDateTime end) {"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d done;"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        this.startDate \u003d start;"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        this.endDate \u003d end;"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\\255%s\\255%s\","},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_EVENT,"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"                super.description,"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"                startDate.toString(),"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                endDate.toString()"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new EventTask given the serialised input read from storage."},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed."},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"     * @return a new EventTask with the associated fields."},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"    public static EventTask deserialise(String input) {"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":"        return new EventTask("},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"                tokens[1].equals(\"true\"),"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"                tokens[2],"},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(tokens[3]),"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(tokens[4])"},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":"                DukeString.FORMAT_EVENT,"},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"                super.toString(),"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"                startDate.format(DateTimeFormatter.ofPattern(DukeString.FORMAT_DATE_OUTPUT)),"},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"                endDate.format(DateTimeFormatter.ofPattern(DukeString.FORMAT_DATE_OUTPUT))"},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":80}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":" * An abstract class that contains a pair of description and done status, and the related logic."},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    protected Task(final String desc) {"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"        this.description \u003d desc;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"     * Serialises this task into a format that can be saved."},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"     * Implementation dependent."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     * @return a serialised version of the task, implementation dependent."},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    public abstract String serialise();"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"     * Marks this task as done."},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public void markDone() {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     * Returns the description of the task."},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     * @return the description of the task."},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    public String getDescription() {"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        return this.description;"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"     * Returns the done status of the task."},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"     * @return the done status of the task."},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    public boolean getIsDone() {"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        return this.isDone;"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"     * Searches the description for the given term."},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"     * @param keyword the term to search for."},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"     * @return a boolean containing whether the description contains the term."},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"    public boolean containsKeyword(String keyword) {"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"        return this.description.contains(keyword);"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":"        return String.format(\"[%c] %s\", isDone ? \u0027✓\u0027 : \u0027X\u0027, description);"},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":62}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeException;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":" * A class that holds a list of Tasks, and the related logic."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TaskList with an empty list."},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    private TaskList(List\u003cTask\u003e list) {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        this.tasks \u003d list;"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TaskList with the given input read from storage."},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised save file as read from storage."},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"     * @return a new TaskList populated with the Tasks as read from storage."},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.StorageReadError if the serialised save file is malformed."},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"    public static TaskList deserialise(Scanner input) throws DukeException.StorageReadError {"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"        String line;"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"        while (input.hasNextLine()) {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"            line \u003d input.nextLine();"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"            assert !line.isEmpty();"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"            if (line.equals(\"\\n\")) {"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"            switch (line.split(\"\\255\")[0]) {"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_DEADLINE :"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"                list.add(DeadlineTask.deserialise(line));"},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_EVENT :"},{"lineNumber":51,"author":{"gitId":"JoelHo"},"content":"                list.add(EventTask.deserialise(line));"},{"lineNumber":52,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"JoelHo"},"content":"            case DukeString.COMMAND_TODO :"},{"lineNumber":54,"author":{"gitId":"JoelHo"},"content":"                list.add(TodoTask.deserialise(line));"},{"lineNumber":55,"author":{"gitId":"JoelHo"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"JoelHo"},"content":"            default:"},{"lineNumber":57,"author":{"gitId":"JoelHo"},"content":"                throw new DukeException.StorageReadError();"},{"lineNumber":58,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":61,"author":{"gitId":"JoelHo"},"content":"        return new TaskList(list);"},{"lineNumber":62,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":64,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"JoelHo"},"content":"     * Adds the given task to the list."},{"lineNumber":66,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"JoelHo"},"content":"     * @param task the task to be added to the list."},{"lineNumber":68,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JoelHo"},"content":"    public void addTask(final Task task) {"},{"lineNumber":70,"author":{"gitId":"JoelHo"},"content":"        tasks.add(task);"},{"lineNumber":71,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":73,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"JoelHo"},"content":"     * Marks the task at the given index as done."},{"lineNumber":75,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be marked as done."},{"lineNumber":77,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the specified task."},{"lineNumber":78,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"JoelHo"},"content":"    public String markTaskDone(final int idx) {"},{"lineNumber":80,"author":{"gitId":"JoelHo"},"content":"        tasks.get(idx - 1).markDone();"},{"lineNumber":81,"author":{"gitId":"JoelHo"},"content":"        return tasks.get(idx - 1).toString();"},{"lineNumber":82,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":84,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"JoelHo"},"content":"     * Deletes the task at the given index."},{"lineNumber":86,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index of the task to be deleted."},{"lineNumber":88,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the deleted task."},{"lineNumber":89,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"JoelHo"},"content":"    public String deleteTask(final int idx) {"},{"lineNumber":91,"author":{"gitId":"JoelHo"},"content":"        return tasks.remove(idx - 1).toString();"},{"lineNumber":92,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":94,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"JoelHo"},"content":"     * Getter for the size of the list."},{"lineNumber":96,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"JoelHo"},"content":"     * @return the number of tasks in the list."},{"lineNumber":98,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"JoelHo"},"content":"    public int getSize() {"},{"lineNumber":100,"author":{"gitId":"JoelHo"},"content":"        return tasks.size();"},{"lineNumber":101,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":103,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"JoelHo"},"content":"     * Serialises the tasks in the list, each task on a newline."},{"lineNumber":105,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"JoelHo"},"content":"     * @return the serialised version of the tasks in the list."},{"lineNumber":107,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":109,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitId":"JoelHo"},"content":"        for (Task task : tasks) {"},{"lineNumber":111,"author":{"gitId":"JoelHo"},"content":"            out.append(task.serialise());"},{"lineNumber":112,"author":{"gitId":"JoelHo"},"content":"            out.append(\u0027\\n\u0027);"},{"lineNumber":113,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":115,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":116,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":118,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"JoelHo"},"content":"     * Finds tasks that contain the given string, and outputs a formatted String with the tasks."},{"lineNumber":120,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"JoelHo"},"content":"     * @param str the string to search for."},{"lineNumber":122,"author":{"gitId":"JoelHo"},"content":"     * @return a formatted version of the tasks."},{"lineNumber":123,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"JoelHo"},"content":"    public String tasksContaining(String str) {"},{"lineNumber":125,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":126,"author":{"gitId":"JoelHo"},"content":"        int i \u003d 1;"},{"lineNumber":127,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":128,"author":{"gitId":"JoelHo"},"content":"        for (Task task : tasks) {"},{"lineNumber":129,"author":{"gitId":"JoelHo"},"content":"            if (task.containsKeyword(str)) {"},{"lineNumber":130,"author":{"gitId":"JoelHo"},"content":"                out.append(i++);"},{"lineNumber":131,"author":{"gitId":"JoelHo"},"content":"                out.append(\". \");"},{"lineNumber":132,"author":{"gitId":"JoelHo"},"content":"                out.append(task.toString());"},{"lineNumber":133,"author":{"gitId":"JoelHo"},"content":"                out.append(\u0027\\n\u0027);"},{"lineNumber":134,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":137,"author":{"gitId":"JoelHo"},"content":"        if (out.length() \u003d\u003d 0) {"},{"lineNumber":138,"author":{"gitId":"JoelHo"},"content":"            out.append(DukeString.MESSAGE_NONE_FOUND);"},{"lineNumber":139,"author":{"gitId":"JoelHo"},"content":"        } else {"},{"lineNumber":140,"author":{"gitId":"JoelHo"},"content":"            out.deleteCharAt(out.length() - 1);"},{"lineNumber":141,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":143,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":144,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":146,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"JoelHo"},"content":"     * Replaces the DeadlineTask at the given index, if any, with a new DeadlineTask with an amended date."},{"lineNumber":148,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index to replace the DeadlineTask at, if any."},{"lineNumber":150,"author":{"gitId":"JoelHo"},"content":"     * @param date the new date to amend the task to."},{"lineNumber":151,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the amended task."},{"lineNumber":152,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidDateForTask if the task at the given index is not a DeadlineTask."},{"lineNumber":153,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"JoelHo"},"content":"    public String snoozeDeadlineTask(int idx, LocalDateTime date) throws DukeException.InvalidDateForTask {"},{"lineNumber":155,"author":{"gitId":"JoelHo"},"content":"        if (!(tasks.get(idx - 1) instanceof DeadlineTask)) {"},{"lineNumber":156,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateForTask(tasks.get(idx - 1).toString());"},{"lineNumber":157,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"JoelHo"},"content":"        DeadlineTask currentTask \u003d (DeadlineTask) tasks.get(idx - 1);"},{"lineNumber":159,"author":{"gitId":"JoelHo"},"content":"        Task newTask \u003d new DeadlineTask(currentTask.getIsDone(), currentTask.getDescription(), date);"},{"lineNumber":160,"author":{"gitId":"JoelHo"},"content":"        tasks.set(idx - 1, newTask);"},{"lineNumber":161,"author":{"gitId":"JoelHo"},"content":"        return newTask.toString();"},{"lineNumber":162,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":164,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"JoelHo"},"content":"     * Replaces the EventTask at the given index, if any, with a new EventTask with amended dates."},{"lineNumber":166,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"JoelHo"},"content":"     * @param idx the index to replace the EventTask at, if any."},{"lineNumber":168,"author":{"gitId":"JoelHo"},"content":"     * @param startDate the new start date to amend the task to."},{"lineNumber":169,"author":{"gitId":"JoelHo"},"content":"     * @param endDate the new end date to amend the task to."},{"lineNumber":170,"author":{"gitId":"JoelHo"},"content":"     * @return the String format of the amended task."},{"lineNumber":171,"author":{"gitId":"JoelHo"},"content":"     * @throws DukeException.InvalidDateForTask if the task at the given index is not a EventTask."},{"lineNumber":172,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"JoelHo"},"content":"    public String snoozeEventTask(int idx, LocalDateTime startDate, LocalDateTime endDate)"},{"lineNumber":174,"author":{"gitId":"JoelHo"},"content":"            throws DukeException.InvalidDateForTask {"},{"lineNumber":175,"author":{"gitId":"JoelHo"},"content":"        if (!(tasks.get(idx - 1) instanceof EventTask)) {"},{"lineNumber":176,"author":{"gitId":"JoelHo"},"content":"            throw new DukeException.InvalidDateForTask(tasks.get(idx - 1).toString());"},{"lineNumber":177,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"JoelHo"},"content":"        EventTask currentTask \u003d (EventTask) tasks.get(idx - 1);"},{"lineNumber":179,"author":{"gitId":"JoelHo"},"content":"        Task newTask \u003d new EventTask(currentTask.getIsDone(), currentTask.getDescription(), startDate, endDate);"},{"lineNumber":180,"author":{"gitId":"JoelHo"},"content":"        tasks.set(idx - 1, newTask);"},{"lineNumber":181,"author":{"gitId":"JoelHo"},"content":"        return newTask.toString();"},{"lineNumber":182,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":184,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":185,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":186,"author":{"gitId":"JoelHo"},"content":"        StringBuilder out \u003d new StringBuilder();"},{"lineNumber":187,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":188,"author":{"gitId":"JoelHo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":189,"author":{"gitId":"JoelHo"},"content":"            out.append(i + 1);"},{"lineNumber":190,"author":{"gitId":"JoelHo"},"content":"            out.append(\". \");"},{"lineNumber":191,"author":{"gitId":"JoelHo"},"content":"            out.append(tasks.get(i));"},{"lineNumber":192,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":193,"author":{"gitId":"JoelHo"},"content":"            if (i !\u003d tasks.size() - 1) {"},{"lineNumber":194,"author":{"gitId":"JoelHo"},"content":"                out.append(\u0027\\n\u0027);"},{"lineNumber":195,"author":{"gitId":"JoelHo"},"content":"            }"},{"lineNumber":196,"author":{"gitId":"JoelHo"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":198,"author":{"gitId":"JoelHo"},"content":"        return out.toString();"},{"lineNumber":199,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":200}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"import duke.common.DukeString;"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":" * A class that represents a class with only a description."},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"public class TodoTask extends Task {"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new todo task with the given description."},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"     * @param desc the description of the task."},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"    public TodoTask(final String desc) {"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    private TodoTask(boolean isDone, String desc) {"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        super(desc);"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        super.isDone \u003d isDone;"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"    public String serialise() {"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"        return String.format("},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"                \"%s\\255%b\\255%s\","},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"                DukeString.COMMAND_TODO,"},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"                super.isDone,"},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"                super.description"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"     * Constructs a new TodoTask given the serialised input read from storage."},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"     * @param input the serialised input to be parsed."},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":"     * @return a new TodoTask with the associated fields."},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    public static TodoTask deserialise(String input) {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        String[] tokens \u003d input.split(\"\\255\");"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"        return new TodoTask(tokens[1].equals(\"true\"), tokens[2]);"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        return String.format(DukeString.FORMAT_TODO, super.toString());"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":48}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JoelHo":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.interaction.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"JoelHo":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"import duke.interaction.Parser;"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"import duke.task.EventTask;"},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"import duke.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"import duke.task.TodoTask;"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"public class DukeTest {"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"    public void deadlineSerialisationTest() {"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"        DeadlineTask task \u003d new DeadlineTask(\"test\", LocalDateTime.parse(\"2020-11-01T10:15:30\"));"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"        DeadlineTask newTask \u003d DeadlineTask.deserialise(task.serialise());"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"        assertEquals(task.toString(), newTask.toString());"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"        task.markDone();"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"        assertNotEquals(task.toString(), newTask.toString());"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"    public void eventSerialisationTest() {"},{"lineNumber":27,"author":{"gitId":"JoelHo"},"content":"        EventTask task \u003d new EventTask("},{"lineNumber":28,"author":{"gitId":"JoelHo"},"content":"                \"test\","},{"lineNumber":29,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(\"2020-11-01T10:15:30\"),"},{"lineNumber":30,"author":{"gitId":"JoelHo"},"content":"                LocalDateTime.parse(\"2020-11-01T10:16:30\")"},{"lineNumber":31,"author":{"gitId":"JoelHo"},"content":"        );"},{"lineNumber":32,"author":{"gitId":"JoelHo"},"content":"        EventTask newTask \u003d EventTask.deserialise(task.serialise());"},{"lineNumber":33,"author":{"gitId":"JoelHo"},"content":"        assertEquals(task.toString(), newTask.toString());"},{"lineNumber":34,"author":{"gitId":"JoelHo"},"content":"        task.markDone();"},{"lineNumber":35,"author":{"gitId":"JoelHo"},"content":"        assertNotEquals(task.toString(), newTask.toString());"},{"lineNumber":36,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":38,"author":{"gitId":"JoelHo"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"JoelHo"},"content":"    public void parserTest() {"},{"lineNumber":40,"author":{"gitId":"JoelHo"},"content":"        Parser parser \u003d new Parser();"},{"lineNumber":41,"author":{"gitId":"JoelHo"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"JoelHo"},"content":"        parser.parseInput(\"todo a\").execute(taskList);"},{"lineNumber":43,"author":{"gitId":"JoelHo"},"content":"        assertEquals(new TodoTask(\"a\").serialise() + \"\\n\", taskList.serialise());"},{"lineNumber":44,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":45,"author":{"gitId":"JoelHo"},"content":"        parser.parseInput(\"delete 1\").execute(taskList);"},{"lineNumber":46,"author":{"gitId":"JoelHo"},"content":"        assertEquals(\"\", taskList.serialise());"},{"lineNumber":47,"author":{"gitId":"JoelHo"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":49,"author":{"gitId":"JoelHo"},"content":"}"}],"authorContributionMap":{"JoelHo":49}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":2,"author":{"gitId":"JoelHo"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"JoelHo"},"content":"deadline return book /by 2020-11-01T10:15:30"},{"lineNumber":4,"author":{"gitId":"JoelHo"},"content":"event project meeting /at 2020-11-01T10:15:30 /to 2020-11-01T10:20:30"},{"lineNumber":5,"author":{"gitId":"JoelHo"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"JoelHo"},"content":"todo borrow other book"},{"lineNumber":7,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JoelHo"},"content":"delete 1"},{"lineNumber":9,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":""},{"lineNumber":11,"author":{"gitId":"JoelHo"},"content":"dummyCommand"},{"lineNumber":12,"author":{"gitId":"JoelHo"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"JoelHo"},"content":"deadline"},{"lineNumber":14,"author":{"gitId":"JoelHo"},"content":"deadline a /by"},{"lineNumber":15,"author":{"gitId":"JoelHo"},"content":"event"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"event /at"},{"lineNumber":17,"author":{"gitId":"JoelHo"},"content":"event /at /to"},{"lineNumber":18,"author":{"gitId":"JoelHo"},"content":"event a /at"},{"lineNumber":19,"author":{"gitId":"JoelHo"},"content":"event a /at 2020-11-01T10:15:30 /to"},{"lineNumber":20,"author":{"gitId":"JoelHo"},"content":"event a /at /to 2020-11-01T10:15:30"},{"lineNumber":21,"author":{"gitId":"JoelHo"},"content":"event a /at 2020-11-01T10:15:30 /to 2020-11-01T10:15:00"},{"lineNumber":22,"author":{"gitId":"JoelHo"},"content":"done a"},{"lineNumber":23,"author":{"gitId":"JoelHo"},"content":"delete"},{"lineNumber":24,"author":{"gitId":"JoelHo"},"content":"delete a"},{"lineNumber":25,"author":{"gitId":"JoelHo"},"content":"list"},{"lineNumber":26,"author":{"gitId":"JoelHo"},"content":"bye"}],"authorContributionMap":{"JoelHo":26}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"JoelHo"},"content":"javac -encoding \"UTF-8\" -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":20,"JoelHo":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"JoelHo"},"content":"if ! javac -encoding \"UTF-8\" -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"JoelHo":1}}]
