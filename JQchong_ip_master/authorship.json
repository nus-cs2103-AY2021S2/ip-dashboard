[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"import controller.*;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"    private static final String FILENAME \u003d \"duke.csv\";"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"        run();"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Runs the application."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    public static void run() {"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"        ui.initialize();"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"        Storage storage \u003d new Storage(FILENAME);"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        TaskList listOfTasks \u003d null;"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"            listOfTasks \u003d storage.handleLoad();"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"            System.out.println(e.toString());"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"            System.exit(1);"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"        Parser parser \u003d new Parser(ui);"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"        System.out.print(\"\u003e\u003e\u003e \");"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        while (!input.equals(\"bye\")) {"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"            try {"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"                if (input.equals(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"                    parser.handleList(listOfTasks);"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"                } else {"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"                    // handle the commands with arguments"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"                    int spaceIndex \u003d input.indexOf(\" \");"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"                    int cutOffPoint \u003d spaceIndex \u003d\u003d -1 ? input.length() : spaceIndex;"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"                    String command \u003d input.substring(0, cutOffPoint);"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"                    switch (command) {"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"                    case \"done\":"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"                        parser.handleDone(input, listOfTasks);"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"                    case \"todo\":"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"                        parser.handleTodo(input, listOfTasks);"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"                    case \"delete\":"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"                        parser.handleDelete(input, listOfTasks);"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"                    case \"deadline\":"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"                    case \"event\":"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"                        parser.handleTasksWithTime(command, input, listOfTasks);"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"                    case \"find\":"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"                        parser.handleFind(input, listOfTasks);"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"                    default:"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"                        System.out.println(\"I have no idea what that means, what do you want?\");"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"                    }"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"                storage.handleSave(listOfTasks);"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"            } catch (DukeException e) {"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"                System.out.println(e.toString());"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"            System.out.print(\"\u003e\u003e\u003e \");"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"        ui.exit();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JQchong":69,"-":4}},{"path":"src/main/java/controller/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":" * Exception class to handle errors, especially user input errors."},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"public class DukeException extends Exception{"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"     * Constructs an exception with an error message."},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"     * @param errorMessage Error message."},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"        super(errorMessage);"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"        return super.getMessage();"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":19}},{"path":"src/main/java/controller/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import task.Event;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import task.Task;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import task.ToDo;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":" * A class to parse user inputs."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"    Ui ui;"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     * Constructs a parser given the application."},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"     * @param ui Application."},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    public Parser(Ui ui) {"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"        this.ui \u003d ui;"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     * Prints out the current list of Tasks."},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    public void handleList(TaskList taskList) {"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Here are the tasks in your list:\\n\" + taskList.toString());"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     * Marks a Task as done given the command. It is assumed that the command is correct,"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     * in the sense that the command the method will receive is \u0027done\u0027 and not something"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     * else."},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     * @param input User input."},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"    public void handleDone(String input, TaskList taskList) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"            int index \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"            taskList.markAsDone(index);"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"            System.out.println(taskList.getTaskAtIndex(index));"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"            System.out.println("},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"                    \"You have \" + taskList.getNumberOfTasks()"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"                            + \" tasks in your list. Please check your input.\");"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The input must be a positive integer!\");"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     * Adds a ToDo Task into the list."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"     * @param input User input"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"    public void handleTodo(String input, TaskList taskList) throws DukeException {"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"        if (!input.contains(\" \")) {"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"        String task \u003d input.substring(input.indexOf(\" \") + 1);"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"        Task temp \u003d new ToDo(task);"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"        taskList.addTask(temp);"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"        this.ui.printOnListChange("},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"                \"Got it. I have added the following task:\","},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"                temp,"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"                taskList.getNumberOfTasks());"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     * Adds either a Deadline Task or Event Task based on the command."},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"     * @param command Command."},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"     * @param input User input."},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"    public void handleTasksWithTime(String command, String input, TaskList taskList) throws DukeException {"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"            String taskName \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"            Task temp;"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"            String timing \u003d input.substring(input.indexOf(\"/\") + 4);"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"            LocalDate date \u003d LocalDate.parse(timing);"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"            if (command.startsWith(\"deadline\")) {"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"                temp \u003d new Deadline(taskName, date);"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"            } else {"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"                temp \u003d new Event(taskName, date);"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(temp);"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"            this.ui.printOnListChange("},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"                    \"Got it. I have added the following task:\","},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"                    temp,"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"                    taskList.getNumberOfTasks());"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The timing of the task is not included. Please check your input.\");"},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"        } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Please input a date with correct format (yyyy-mm-dd).\");"},{"lineNumber":106,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"     * Deletes the Task at the specified index (indexed from 1)."},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"     * @param input User input."},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"JQchong"},"content":"    public void handleDelete(String input, TaskList taskList) throws DukeException {"},{"lineNumber":117,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"JQchong"},"content":"            int index \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"},{"lineNumber":119,"author":{"gitId":"JQchong"},"content":"            this.ui.printOnListChange("},{"lineNumber":120,"author":{"gitId":"JQchong"},"content":"                    \"Noted. I have removed the following task:\","},{"lineNumber":121,"author":{"gitId":"JQchong"},"content":"                    taskList.deleteTask(index),"},{"lineNumber":122,"author":{"gitId":"JQchong"},"content":"                    taskList.getNumberOfTasks()"},{"lineNumber":123,"author":{"gitId":"JQchong"},"content":"            );"},{"lineNumber":124,"author":{"gitId":"JQchong"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":125,"author":{"gitId":"JQchong"},"content":"            throw new DukeException("},{"lineNumber":126,"author":{"gitId":"JQchong"},"content":"                    \"You have \" + taskList.getNumberOfTasks() +"},{"lineNumber":127,"author":{"gitId":"JQchong"},"content":"                            \" tasks in your list. Please check your input.\");"},{"lineNumber":128,"author":{"gitId":"JQchong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":129,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The input must be a positive integer!\");"},{"lineNumber":130,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":133,"author":{"gitId":"JQchong"},"content":"    public void handleFind(String input, TaskList taskList) throws DukeException {"},{"lineNumber":134,"author":{"gitId":"JQchong"},"content":"        if(input.split(\" \").length \u003c 2) {"},{"lineNumber":135,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Please provide a keyword.\");"},{"lineNumber":136,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"JQchong"},"content":"        String keyword \u003d input.substring(input.indexOf(\" \"));"},{"lineNumber":138,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Here are the tasks that I can find:\");"},{"lineNumber":139,"author":{"gitId":"JQchong"},"content":"        System.out.println(taskList.find(keyword).toString());"},{"lineNumber":140,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":141}},{"path":"src/main/java/controller/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import task.Deadline;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import task.Event;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import task.ToDo;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import java.io.BufferedReader;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"import java.io.FileReader;"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":" * A class to handle storing data into an external CSV file."},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"    private final String fileName;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     * Constructs a Storage class with a file name."},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * @param fileName Name of the file."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    public Storage(String fileName){"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"     * Saves data into the file."},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while saving data."},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    public void handleSave(TaskList taskList) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"            FileWriter csvWriter \u003d new FileWriter(fileName);"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.getNumberOfTasks(); i++) {"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"                csvWriter.append(taskList.getTaskAtIndex(i).parseToCSVRow());"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"                csvWriter.append(\"\\n\");"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"            csvWriter.flush();"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"            csvWriter.close();"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"An error occurred while saving your changes. Please try again later.\");"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"     * Loads the data into a TaskList object."},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"     * @return A list of Tasks based on the file."},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while loading the data."},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"    public TaskList handleLoad() throws DukeException {"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"            TaskList listOfTasks \u003d new TaskList();"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(fileName));"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"            String line \u003d reader.readLine();"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"            while(line !\u003d null) {"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"                String[] details \u003d line.split(\",\");"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"                switch (details[0]){"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"                    case \"T\":"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"                        listOfTasks.addTask(new ToDo(details[2], Boolean.parseBoolean(details[1])));"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"                    case \"D\":"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"                        LocalDate dateD \u003d LocalDate.parse(details[3]);"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"                        listOfTasks.addTask(new Deadline(details[2], Boolean.parseBoolean(details[1]), dateD));"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"                    case \"E\":"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"                        LocalDate dateE \u003d LocalDate.parse(details[3]);"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"                        listOfTasks.addTask(new Event(details[2], Boolean.parseBoolean(details[1]), dateE));"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"                        break;"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"                line \u003d reader.readLine();"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"            return listOfTasks;"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"            System.out.println(\"It seems like you do not have a save file. A new one will be created.\");"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"            makeNewFile();"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"            return new TaskList();"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"            throw new DukeException( \"An error occurred while loading. Please try again later.\");"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"     * Makes a new CSV file if there is no file initially."},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while making a new file."},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"    private void makeNewFile() throws DukeException {"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"        try{"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"            new File(fileName).createNewFile();"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"An error occurred while loading. Please try again later.\");"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":101}},{"path":"src/main/java/controller/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":" * A class to hold list of Tasks."},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    private final ArrayList\u003cTask\u003e listOfTasks;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * Creates an empty list of Tasks."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"        this(new ArrayList\u003c\u003e());"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     * Creates a list of Tasks based on the collection of Tasks inputted."},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * @param listOfTasks List of Tasks."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks \u003d listOfTasks;"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"     * Adds a Task into the current list."},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"     * @param t New Task."},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    public void addTask(Task t) {"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks.add(t);"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * Removes Task from the specified index (indexed from 1)."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be removed."},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"     * @return The removed Task."},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    public Task deleteTask(int number) {"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.remove(number - 1);"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"     * Marks a Task as done based on the specified index (indexed from 1)."},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be marked."},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"    public void markAsDone(int number) {"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks.get(number - 1).setDone(true);"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     * Obtains the Task from the specified index (indexed from 1)."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be obtained."},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"     * @return The Task at the index."},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"    public Task getTaskAtIndex(int number) {"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.get(number - 1);"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"     * Returns the number of tasks in the current list."},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"     * @return The number of tasks in the current list."},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"    public int getNumberOfTasks(){"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.size();"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the current list of Tasks."},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the current list of Tasks."},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"        for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"            result.append(i + 1).append(\". \").append(listOfTasks.get(i)).append(\"\\n\");"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"        return result.toString();"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"     * Find the Tasks which names contain the keyword."},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"     * @param keyword Keyword to be searched against."},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"     * @return New TaskList containing filtered results."},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"        return new TaskList(this.listOfTasks.stream()"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"                .filter((task) -\u003e task.getTaskName()."},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"                        toLowerCase().contains(keyword.toLowerCase()))"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"                .collect(Collectors.toCollection(ArrayList::new)));"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":101}},{"path":"src/main/java/controller/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import task.Task;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * A class to handle the printing of the current status"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * of the list of Tasks."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     * Prints the startup message."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"    public void initialize() {"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"------------------------\");"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Hello! I\u0027m Duke\u0027s friend, Ekud.\" +"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"                \"\\nDuke\u0027s dead, so I\u0027m here to take his job.\" +"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"                \"\\nYou want to jot down some tasks?\");"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * Prints the current status of the list of Tasks."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     * @param preMessage Response when user\u0027s requested action is successful."},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     * @param t Task involved in the action."},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"     * @param size Number of Tasks in the list."},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"    public void printOnListChange(String preMessage, Task t, int size) {"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"        System.out.println(preMessage);"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"        System.out.println(t);"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * Prints the exit message."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    public void exit() {"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        System.out.println(\"Bye Bye. Please give me 5-star rating, I still need this job.\" +"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"                \"\\nMuch thanks.\");"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":46}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * Class for tasks with a deadline."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Deadline extends Task{"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    LocalDate deadLine;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Deadline task with a deadline and a name."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Deadline task."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     * @param deadLine Deadline of the Deadline task."},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    public Deadline(String taskName, LocalDate deadLine) {"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        this.deadLine \u003d deadLine;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * Constructs a Deadline task with a deadline, a name and status."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Deadline task."},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the task, done or not done."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * @param deadLine Deadline of the Deadline task."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    public Deadline(String taskName, boolean done, LocalDate deadLine) {"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        this.deadLine \u003d deadLine;"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the Deadline task."},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the Deadline task."},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        String formattedDate \u003d this.deadLine.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"     * Parse the task to comply with CSV format."},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"    public String parseToCSVRow() {"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        return \"D,\" + super.isDone() + \",\" + super.getTaskName() + \",\" + this.deadLine;"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"     * Returns the deadline of the Task."},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     * @return Deadline of the Task."},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime(){"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"        return deadLine;"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":62}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * Class for tasks that are events."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Event extends Task{"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    LocalDate eventTime;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Event with a name and time."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Event."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     * @param eventTime Time of the Event."},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    public Event(String taskName, LocalDate eventTime) {"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * Constructs an Event with a name, time and status."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Event."},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the Event, done or not done."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * @param eventTime Time of the Event."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    public Event(String taskName, boolean done, LocalDate eventTime) {"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of Event."},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of Event."},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        String formattedDate \u003d this.eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"     * Parse the task to comply with CSV format."},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"    public String parseToCSVRow() {"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        return \"E,\" + super.isDone() + \",\" + super.getTaskName() + \",\" + this.eventTime;"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"     * Returns the deadline of the Event."},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     * @return Time of the Event."},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime(){"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"        return eventTime;"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":62}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * Class for general tasks. Not instantiable as it is an abstract class."},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"    private String taskName;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    private boolean done;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Task with a name."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    Task (String taskName){"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"        this(taskName, false);"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     * Constructs a Task with a name and status."},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the Task, done or not done."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    Task(String taskName, boolean done) {"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"        this.done \u003d done;"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"     * Returns the name of the Task."},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     * @return The name of the Task."},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    public String getTaskName() {"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"        return taskName;"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     * Returns status of the Task."},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"     * @return Status of the Task."},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"    public boolean isDone() {"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"        return done;"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"     * Sets status of the Task."},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the Task."},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"    public void setDone(boolean done) {"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"        this.done \u003d done;"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the Task."},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the Task."},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"        String checkBox \u003d this.done ? \"[X]\" : \"[ ]\";"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"        return checkBox + \" \" + this.taskName;"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"     * Parse the task to comply with CSV format."},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"    public abstract String parseToCSVRow();"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"     * Returns the time of the Task."},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"     * @return Time of the Task."},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime(){"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"        return null;"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":83}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * Class for ToDo tasks."},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone ToDo task with a name."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the task."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    public ToDo(String taskName) {"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"     * Constructs a ToDo task with a name with status."},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the task."},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the task, done or not done."},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"    public ToDo(String taskName, boolean done) {"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the ToDo task."},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"     * @return String representation of the ToDo task."},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     * Parse the task to comply with CSV format."},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"    public String parseToCSVRow() {"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        return \"T,\" + super.isDone() + \",\" + super.getTaskName();"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":46}},{"path":"src/main/java/test/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package test;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import controller.DukeException;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import controller.Parser;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import controller.TaskList;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import controller.Ui;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import task.Deadline;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import task.Event;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import task.ToDo;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"public class DukeTest {"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    public void testTodo_emptyDescription_exceptionThrown() {"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"            parser.handleTodo(\"todo\", taskList);"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    public void testTodo_nonEmptyDescription_success() {"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"            parser.handleTodo(\"todo a\", taskList);"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"            String result \u003d taskList.toString();"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"            String expected \u003d \"1. [T][ ] a\\n\";"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"            assertEquals(result, expected);"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"            fail();"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"    public void testDeadLine_noDeadLine_exceptionThrown() {"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"            parser.handleTasksWithTime(\"deadline\", \"deadline a\", taskList);"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"            assertEquals("},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"                    \"The timing of the task is not included. Please check your input.\","},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"                    e.getMessage());"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    public void testDeadLine_wrongDateFormat_exceptionThrown() {"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"            parser.handleTasksWithTime(\"deadline\", \"deadline a /by jlhsfadjkbhsfdajk\", taskList);"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"            assertEquals("},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"                    \"Please input a date with correct format (yyyy-mm-dd).\","},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"                    e.getMessage());"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"    public void testDelete_indexOutOfBounds_exceptionThrown() {"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"        try{"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"            parser.handleDelete(\"delete 2\", taskList);"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"You have 0 tasks in your list. Please check your input.\", e.getMessage());"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"    public void testDelete_correctInput_success() {"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"        try{"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new Event(\"a\", LocalDate.of(2021, 9,1)));"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new Deadline(\"b\", LocalDate.of(1999,3,2)));"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new ToDo(\"c\"));"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"            parser.handleDelete(\"delete 2\", taskList);"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"a\", taskList.getTaskAtIndex(1).getTaskName());"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"            assertEquals(LocalDate.of(2021, 9, 1),"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"                    taskList.getTaskAtIndex(1).getTaskTime());"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"c\", taskList.getTaskAtIndex(2).getTaskName());"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"            e.printStackTrace();"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"            fail();"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":105}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"todo haha"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":"todo haha"},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"deadline return book /by Sunday"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"done 3"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"bye"}],"authorContributionMap":{"JQchong":12}}]
