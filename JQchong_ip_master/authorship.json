[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"}"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"checkstyle {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"}"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"mainClassName \u003d \u0027duke.Launcher\u0027"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"repositories {"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    mavenCentral()"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"}"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"dependencies {"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    implementation \u0027org.junit.jupiter:junit-jupiter:5.4.2\u0027"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":38}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"# User Guide for Duke App"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"**Duke App** is a chatbot for managing daily tasks. Since it is a chatbot, the main interaction will be done through a Command Line Interface (CLI), though it still furnished with a Graphical User Interface (GUI) for easy viewing."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"## Contents"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"- [Quick Start](#quick-start)"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"- [Features](#features)"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"    - [`list`: Listing all tasks](#list-listing-all-tasks)"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"    - [`todo`: Adding a todo task](#todo-adding-a-todo-task)"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    - [`event`: Adding an event](#event-adding-an-event)"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"    - [`deadline`: Adding a task with a deadline](#deadline-adding-a-task-with-a-deadline)"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    - [`delete`: Deleting a task](#delete-deleting-a-task)"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"    - [`find`: Finding tasks](#find-finding-tasks)"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"    - [`remind`: Reminding upcoming tasks](#remind-reminding-upcoming-tasks)"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    - [`bye`: Exiting the application](#bye-exiting-the-application)"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"- [Command Summary](#command-summary)"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"## Quick Start"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"1. Ensure you have Java `11` installed in your machine."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"2. Download the latest release from [here](https://github.com/JQChong/ip/releases/tag/v0.4)."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"3. (Optional) Copy the application to your desired folder."},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"4. Run the application by double clicking the application. You should see the following after a few seconds."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"   ![Start](image/StartPage.png)"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"   "},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"5. Type the command in the text field and press Enter to execute it. You may press the `Submit` button to execute it as well."},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"\u003cbr\u003e You may wish to try the commands below."},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"   - `list`: List all tasks."},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"   - `todo Buy book`: Adds a Todo task titled `Buy book`."},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"   - `bye`: Exits the application."},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    "},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"6. Refer to [Features](#features) for details of the available commands."},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"### Notes for each command"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"- All commands are **not** to include commas (,) as part of the input."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"- Parameters will be specified within angle brackets, e.g. `\u003cname\u003e`."},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"- If a parameter is expected only once but is specified more than once, the system will recognize it as an error."},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"### `list`: Listing all tasks"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"Showing the list of the available tasks saved in the system. \u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"Format: `list`"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"### `todo`: Adding a todo task"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"Adds a task to be done some (unspecified) time in the future. \u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"Format: `todo \u003ctaskName\u003e`\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"Example: `todo Visit Ekud`"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"### `event`: Adding an event"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"Adds an event scheduled on a specified date. \u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"Format: `event \u003ctaskName\u003e /at \u003cdate\u003e`"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":" - The `\u003cdate\u003e` must be in the format **yyyy-mm-dd**. To insert 2nd March 2021 as the date, one must input 2021-03-02."},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"Example: `event Duke\u0027s funeral /at 2021-02-19`"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"### `deadline`: Adding a task with a deadline"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"Adds a task to be done by a specified date. \u003cbr\u003e"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"Format: `deadline \u003ctaskName\u003e /by \u003cdate\u003e`"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"- The `\u003cdate\u003e` must be in the format **yyyy-mm-dd**. To insert 2nd March 2021 as the date, one must input 2021-03-02."},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"Example: `deadline Buy flowers for Duke /by 2021-02-17`"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"### `delete`: Deleting a task"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"Deletes a task at a specified index. \u003cbr\u003e"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"Format: `delete \u003cindex\u003e`"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"- The `\u003cindex\u003e` refers to the index of the tasks saved in the system."},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"- The `\u003cindex\u003e` must be a **positve integer**, e.g. 1, 2, 3,...."},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"Example: `delete 2` will delete the second task saved in the system."},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"### `find`: Finding tasks"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"Finds the tasks matching the keyword. \u003cbr\u003e"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"Format: `find \u003ckeyword\u003e`"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"To demonstrate, we will be working with the following list of tasks."},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"![list](image/list.png)"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"- The system will find tasks containing the inputted `keyword`. If, for instance, the user inputs `find buy`, the system will return list of tasks containing the word `buy`."},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"  "},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"  ![find](image/find.png)"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"- This feature is case-insensitive. The result will be the same if the user inputs `find BOOK` instead of `find book`."},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"    `find book` | `find BOOK`"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"    :-------------------:|:-------------------:"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"    ![](image/find2.png) | ![](image/find3.png)"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"### `remind`: Reminding upcoming tasks"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"Reminds user about the upcoming tasks within the next few days. \u003cbr\u003e"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"Format: `remind` or `remind \u003cdays\u003e`"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"- The parameter `\u003cdays\u003e` is optional. If provided, it must be a **positive integer**, e.g. 1,2,3,.... If not provided, it will default to finding the tasks within the next week."},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"Example: `remind 4` will return tasks scheduled within the next 4 days."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"### `bye`: Exiting the application"},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"Exits the application. \u003cbr\u003e"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"Format: `bye`"},{"lineNumber":106,"author":{"gitId":"-"},"content":""},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"## Command Summary"},{"lineNumber":108,"author":{"gitId":"-"},"content":""},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"Action | Format, Examples"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"------- | ----------------"},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"List | `list`"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"Add a todo task | `todo \u003ctaskName\u003e` \u003cbr\u003e e.g. `todo Buy flowers`"},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":"Add an event | `event \u003ctaskName\u003e /at \u003cdate\u003e` \u003cbr\u003e e.g. `event Duke\u0027s funeral /at 2020-02-19`"},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"Add a task with deadline | `deadline \u003ctaskName\u003e /by \u003cdate\u003e` \u003cbr\u003e e.g. `deadline Buy flowes for Duke /by 2021-02-17`"},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"Delete | `delete \u003cindex\u003e` \u003cbr\u003e e.g. `delete 2`"},{"lineNumber":116,"author":{"gitId":"JQchong"},"content":"Find | `find \u003ckeyword\u003e` \u003cbr\u003e e.g. `find buy`"},{"lineNumber":117,"author":{"gitId":"JQchong"},"content":"Remind | `remind` or `remind \u003cdays\u003e` \u003cbr\u003e e.g. `remind 4`"},{"lineNumber":118,"author":{"gitId":"JQchong"},"content":"Exit | `bye`"},{"lineNumber":119,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"JQchong":102,"-":17}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":":end"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":":omega"}],"authorContributionMap":{"JQchong":89}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import javafx.geometry.Insets;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import javafx.geometry.Pos;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import javafx.scene.paint.Paint;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"import javafx.scene.text.Font;"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":" * Class for dialog boxes."},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    private final Label label;"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    private final boolean isDuke;"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    private final boolean hasError;"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    private DialogBox(Label label, boolean isDuke, boolean hasError) {"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"        assert label !\u003d null;"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"        assert !(!isDuke \u0026\u0026 hasError);"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"        this.label \u003d label;"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        this.isDuke \u003d isDuke;"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        this.hasError \u003d hasError;"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"        this.setPadding(new Insets(10));"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"        this.getChildren().add(makeContent());"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    private VBox makeContent() {"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"        VBox container \u003d new VBox(5);"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        label.setWrapText(true);"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        String timestamp \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date());"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        Label timestampLabel \u003d new Label(timestamp);"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"        timestampLabel.setFont(Font.font(10));"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"        timestampLabel.setTextFill(Color.gray(0.3));"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"        timestampLabel.setWrapText(true);"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"        container.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"        container.getChildren().addAll(label, timestampLabel);"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"        Paint background;"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        if (isDuke) {"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"            background \u003d hasError ? Color.rgb(255, 100, 100) : Color.LIGHTBLUE;"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"            background \u003d Color.GAINSBORO;"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"        container.setBackground(new Background("},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"                new BackgroundFill(background, new CornerRadii(5), Insets.EMPTY)));"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"        container.setPadding(new Insets(10));"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        container.setMaxWidth(450);"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"        return container;"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"     * Constructs a user\u0027s dialog box."},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     * @param text Text to be inserted into the dialog."},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"     * @return A user\u0027s dialog box."},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"    public static DialogBox userDialogMaker(String text) {"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"        Label label \u003d new Label(text);"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"        return new DialogBox(label, false, false);"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     * Constructs a system\u0027s dialog box. The colour of the dialog box"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"     * will change depending if the dialog box shows an error message"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"     * or not."},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"     * @param text Text to be inserted into the dialog."},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"     * @param hasError Whether the system throws an error or not."},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"     * @return A system\u0027s dialog box."},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"    public static DialogBox dukeDialogMaker(String text, boolean hasError) {"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"        Label label \u003d new Label(text);"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"        DialogBox temp \u003d new DialogBox(label, true, hasError);"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"        temp.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"        return temp;"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":93}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.controller.Parser;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import duke.controller.Storage;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import duke.controller.TaskList;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import duke.controller.Ui;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"    private VBox content;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    private TextField input;"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    private Button submit;"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    private Parser parser;"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    private TaskList listOfTasks;"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    private static final String FILENAME \u003d \"duke.csv\";"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    private final Storage storage \u003d new Storage(FILENAME);"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    private void initialize() {"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"        initializeScreen();"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"        initializeInputField();"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    private void initializeScreen() {"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        parser \u003d new Parser(ui);"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"        scrollPane.setContent(content);"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"        content.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        content.heightProperty().addListener(observable -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        content.getChildren().add(DialogBox.dukeDialogMaker(ui.initialize() + \"\\n\", false));"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"            listOfTasks \u003d storage.handleLoad();"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"            System.out.println(e.toString());"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"            System.exit(1);"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        content.getChildren().add(DialogBox.dukeDialogMaker("},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"                \"Also, in case you forgot, here are the tasks in the next week:\\n\" +"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"                        listOfTasks.remind(7).toString(), false));"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"    private void initializeInputField() {"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"        submit.setDisable(true);"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"        input.textProperty().addListener((observable, oldValue, newValue) -\u003e"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"                submit.setDisable(newValue.equals(\"\")));"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"        input.setOnKeyPressed((ke) -\u003e {"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"            if (ke.getCode().equals(KeyCode.ENTER) \u0026\u0026 input.getText().length() \u003e 0) {"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"                onSubmit();"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"        });"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"    @FXML"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"    private void onSubmit() {"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"        String userInput \u003d input.getText();"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"        assert (userInput !\u003d null \u0026\u0026 userInput.length() \u003e 0);"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"        content.getChildren().add(DialogBox.userDialogMaker(userInput));"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"            if (userInput.equals(\"list\")) {"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"                content.getChildren().add("},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"                        DialogBox.dukeDialogMaker("},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"                                parser.handleList(listOfTasks), false));"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"            } else {"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"                // handle the commands with arguments"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"                int spaceIndex \u003d userInput.indexOf(\" \");"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"                int cutOffPoint \u003d spaceIndex \u003d\u003d -1 ? userInput.length() : spaceIndex;"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"                String command \u003d userInput.substring(0, cutOffPoint);"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"                String textToAppend \u003d \"\";"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"                boolean defaultCase \u003d false;"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"                switch (command) {"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"                case \"done\":"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleDone(userInput, listOfTasks);"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"                case \"todo\":"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleTodo(userInput, listOfTasks);"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"                case \"delete\":"},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleDelete(userInput, listOfTasks);"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":106,"author":{"gitId":"JQchong"},"content":"                case \"deadline\":"},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"                case \"event\":"},{"lineNumber":108,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleTasksWithTime(command, userInput, listOfTasks);"},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"                case \"find\":"},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleFind(userInput, listOfTasks);"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":"                case \"remind\":"},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d parser.handleRemind(userInput, listOfTasks);"},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":116,"author":{"gitId":"JQchong"},"content":"                case \"bye\":"},{"lineNumber":117,"author":{"gitId":"JQchong"},"content":"                    System.exit(0);"},{"lineNumber":118,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":119,"author":{"gitId":"JQchong"},"content":"                default:"},{"lineNumber":120,"author":{"gitId":"JQchong"},"content":"                    textToAppend \u003d \"I have no idea what that means, what do you want?\\n\";"},{"lineNumber":121,"author":{"gitId":"JQchong"},"content":"                    defaultCase \u003d true;"},{"lineNumber":122,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":123,"author":{"gitId":"JQchong"},"content":"                }"},{"lineNumber":124,"author":{"gitId":"JQchong"},"content":"                content.getChildren().add(DialogBox.dukeDialogMaker(textToAppend, defaultCase));"},{"lineNumber":125,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"JQchong"},"content":"            storage.handleSave(listOfTasks);"},{"lineNumber":127,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":128,"author":{"gitId":"JQchong"},"content":"            content.getChildren().add(DialogBox.dukeDialogMaker(e.toString(), true));"},{"lineNumber":129,"author":{"gitId":"JQchong"},"content":"        } finally {"},{"lineNumber":130,"author":{"gitId":"JQchong"},"content":"            input.clear();"},{"lineNumber":131,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JQchong":130,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":" * Exception class to handle errors, especially user input errors."},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"     * Constructs an exception with an error message."},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"     * @param errorMessage Error message."},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"        super(errorMessage);"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     * Returns the message of the exception."},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     * @return Message of the exception."},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        return super.getMessage();"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":23}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * Application launcher class."},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"     * Launches the application."},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     * @param args Command line arguments."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":16}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":" * Class to initialize the application."},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     * Initializes the application and load the user interface."},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     * @param primaryStage Main window."},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"            fxmlLoader.setLocation(getClass().getResource(\"/view/interface.fxml\"));"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"            AnchorPane pane \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"            Scene scene \u003d new Scene(pane);"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"            primaryStage.setTitle(\"Duke App\");"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"            primaryStage.setResizable(false);"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"            primaryStage.setScene(scene);"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"            primaryStage.show();"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":35}},{"path":"src/main/java/duke/controller/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":" * A class to parse user inputs."},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    Ui ui;"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     * Constructs a parser given the application."},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"     * @param ui Application."},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    public Parser(Ui ui) {"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"        assert ui !\u003d null;"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"        this.ui \u003d ui;"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * Prints out the current list of Tasks."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    public String handleList(TaskList taskList) {"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"        return \"Here are the tasks in your list:\\n\" + taskList.toString() + \"\\n\";"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     * Marks a Task as done given the command. It is assumed that the command is correct,"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     * in the sense that the command the method will receive is \u0027done\u0027 and not something"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * else."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     * @param input    User input."},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"    public String handleDone(String input,"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"                             TaskList taskList)"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"            int index \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"            taskList.markAsDone(index);"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"            return \"Nice! I\u0027ve marked this task as done:\\n\" +"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"                    (taskList.getTaskAtIndex(index));"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"            return \"You have \" + taskList.getNumberOfTasks()"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"                            + \" tasks in your list. Please check your input.\";"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The input must be a positive integer!\");"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"     * Adds a ToDo Task into the list."},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"     * @param input    User input"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"    public String handleTodo(String input,"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"                             TaskList taskList)"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"        if (!input.contains(\" \")) {"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"        String task \u003d input.substring(input.indexOf(\" \") + 1);"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"        if (findComma(task)) {"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Your task name should not include commas. \""},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"                    + \"Are you trying to confuse me when I load your data?\");"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"        Task temp \u003d new ToDo(task);"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"        taskList.addTask(temp);"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"        return this.ui.printOnListChange("},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"                \"Got it. I have added the following task:\","},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"                temp,"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"                taskList.getNumberOfTasks());"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"     * Adds either a Deadline Task or Event Task based on the command."},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"     * @param command  Command."},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"     * @param input    User input."},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"    public String handleTasksWithTime(String command,"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"                                      String input,"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"                                      TaskList taskList)"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"        assert (command !\u003d null \u0026\u0026 command.length() \u003e 0);"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":106,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"JQchong"},"content":"            String taskName \u003d input.substring(input.indexOf(\" \") + 1, input.indexOf(\"/\") - 1);"},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"            if (findComma(taskName)) {"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"                throw new DukeException(\"Your task name should not include commas. \""},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"                        + \"Are you trying to confuse me when I load your data?\");"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":"            Task temp;"},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"            String timing \u003d input.substring(input.indexOf(\"/\") + 4);"},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"            LocalDate date \u003d LocalDate.parse(timing);"},{"lineNumber":116,"author":{"gitId":"JQchong"},"content":"            if (command.startsWith(\"deadline\")) {"},{"lineNumber":117,"author":{"gitId":"JQchong"},"content":"                temp \u003d new Deadline(taskName, date);"},{"lineNumber":118,"author":{"gitId":"JQchong"},"content":"            } else {"},{"lineNumber":119,"author":{"gitId":"JQchong"},"content":"                temp \u003d new Event(taskName, date);"},{"lineNumber":120,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(temp);"},{"lineNumber":122,"author":{"gitId":"JQchong"},"content":"            return this.ui.printOnListChange("},{"lineNumber":123,"author":{"gitId":"JQchong"},"content":"                    \"Got it. I have added the following task:\","},{"lineNumber":124,"author":{"gitId":"JQchong"},"content":"                    temp,"},{"lineNumber":125,"author":{"gitId":"JQchong"},"content":"                    taskList.getNumberOfTasks());"},{"lineNumber":126,"author":{"gitId":"JQchong"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":127,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The timing of the task is not included. \" +"},{"lineNumber":128,"author":{"gitId":"JQchong"},"content":"                    \"Please check your input. \\n\");"},{"lineNumber":129,"author":{"gitId":"JQchong"},"content":"        } catch (java.time.format.DateTimeParseException e) {"},{"lineNumber":130,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Please input a date with correct format (yyyy-mm-dd).\\n\");"},{"lineNumber":131,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":134,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"JQchong"},"content":"     * Deletes the Task at the specified index (indexed from 1)."},{"lineNumber":136,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"JQchong"},"content":"     * @param input    User input."},{"lineNumber":138,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":139,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If the user input is incorrect."},{"lineNumber":140,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"JQchong"},"content":"    public String handleDelete(String input,"},{"lineNumber":142,"author":{"gitId":"JQchong"},"content":"                               TaskList taskList)"},{"lineNumber":143,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":144,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":145,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":146,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":147,"author":{"gitId":"JQchong"},"content":"            int index \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"},{"lineNumber":148,"author":{"gitId":"JQchong"},"content":"            return this.ui.printOnListChange("},{"lineNumber":149,"author":{"gitId":"JQchong"},"content":"                    \"Noted. I have removed the following task:\","},{"lineNumber":150,"author":{"gitId":"JQchong"},"content":"                    taskList.deleteTask(index),"},{"lineNumber":151,"author":{"gitId":"JQchong"},"content":"                    taskList.getNumberOfTasks()"},{"lineNumber":152,"author":{"gitId":"JQchong"},"content":"            );"},{"lineNumber":153,"author":{"gitId":"JQchong"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":154,"author":{"gitId":"JQchong"},"content":"            throw new DukeException("},{"lineNumber":155,"author":{"gitId":"JQchong"},"content":"                    \"You have \" + taskList.getNumberOfTasks() +"},{"lineNumber":156,"author":{"gitId":"JQchong"},"content":"                            \" tasks in your list. Please check your input.\\n\");"},{"lineNumber":157,"author":{"gitId":"JQchong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":158,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"The input must be a positive integer!\\n\");"},{"lineNumber":159,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":162,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"JQchong"},"content":"     * Filters Tasks based on user input."},{"lineNumber":164,"author":{"gitId":"JQchong"},"content":"     * @param input     User input."},{"lineNumber":165,"author":{"gitId":"JQchong"},"content":"     * @param taskList  List of Tasks"},{"lineNumber":166,"author":{"gitId":"JQchong"},"content":"     * @return Filtered list of Tasks matching the keyword."},{"lineNumber":167,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If there is an error in user input."},{"lineNumber":168,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"JQchong"},"content":"    public String handleFind(String input,"},{"lineNumber":170,"author":{"gitId":"JQchong"},"content":"                             TaskList taskList)"},{"lineNumber":171,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":172,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":173,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":174,"author":{"gitId":"JQchong"},"content":"        if (input.split(\" \").length \u003c 2) {"},{"lineNumber":175,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Please provide a keyword.\\n\");"},{"lineNumber":176,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"JQchong"},"content":"        String keyword \u003d input.substring(input.indexOf(\" \") + 1);"},{"lineNumber":178,"author":{"gitId":"JQchong"},"content":"        return \"Here are the tasks that I can find:\\n\" + taskList.find(keyword).toString();"},{"lineNumber":179,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":181,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"JQchong"},"content":"     * Returns a list of Tasks which occurs in the next few days."},{"lineNumber":183,"author":{"gitId":"JQchong"},"content":"     * @param input    User input."},{"lineNumber":184,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks"},{"lineNumber":185,"author":{"gitId":"JQchong"},"content":"     * @return Lists of Tasks within the next few days."},{"lineNumber":186,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If there is an error in user input."},{"lineNumber":187,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":188,"author":{"gitId":"JQchong"},"content":"    public String handleRemind(String input,"},{"lineNumber":189,"author":{"gitId":"JQchong"},"content":"                               TaskList taskList)"},{"lineNumber":190,"author":{"gitId":"JQchong"},"content":"            throws DukeException {"},{"lineNumber":191,"author":{"gitId":"JQchong"},"content":"        assert (input !\u003d null \u0026\u0026 input.length() \u003e 0);"},{"lineNumber":192,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":193,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":194,"author":{"gitId":"JQchong"},"content":"            if (input.split(\" \").length \u003c 2) {"},{"lineNumber":195,"author":{"gitId":"JQchong"},"content":"                return \"Here are the tasks in the next week:\\n\""},{"lineNumber":196,"author":{"gitId":"JQchong"},"content":"                        + taskList.remind(7);"},{"lineNumber":197,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":198,"author":{"gitId":"JQchong"},"content":"            int numberOfDays \u003d Integer.parseInt(input.substring(input.indexOf(\" \") + 1));"},{"lineNumber":199,"author":{"gitId":"JQchong"},"content":"            if (numberOfDays \u003c\u003d 0) {"},{"lineNumber":200,"author":{"gitId":"JQchong"},"content":"                throw new NumberFormatException();"},{"lineNumber":201,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":202,"author":{"gitId":"JQchong"},"content":"            return \"Here are the tasks in the next \" + numberOfDays + \" days:\\n\""},{"lineNumber":203,"author":{"gitId":"JQchong"},"content":"                    + taskList.remind(numberOfDays);"},{"lineNumber":204,"author":{"gitId":"JQchong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":205,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"Please input a positive integer, \" +"},{"lineNumber":206,"author":{"gitId":"JQchong"},"content":"                    \"so that I know how many days after today I should look into \" +"},{"lineNumber":207,"author":{"gitId":"JQchong"},"content":"                    \"and remind your tasks, you forgetful :P.\");"},{"lineNumber":208,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":209,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":211,"author":{"gitId":"JQchong"},"content":"    private boolean findComma(String task) {"},{"lineNumber":212,"author":{"gitId":"JQchong"},"content":"        return task.contains(\",\");"},{"lineNumber":213,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":214}},{"path":"src/main/java/duke/controller/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import java.io.FileReader;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":" * A class to handle storing data into an external CSV file."},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"public class Storage {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    private final String fileName;"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * Constructs a Storage class with a file name."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     * @param fileName Name of the file."},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    public Storage(String fileName) {"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"        assert fileName !\u003d null;"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"     * Saves data into the file."},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     * @param taskList List of Tasks."},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while saving data."},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    public void handleSave(TaskList taskList) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"        assert taskList !\u003d null;"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"            FileWriter csvWriter \u003d new FileWriter(fileName);"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.getNumberOfTasks(); i++) {"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"                csvWriter.append(taskList.getTaskAtIndex(i).parseToCsvRow());"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"                csvWriter.append(\"\\n\");"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"            csvWriter.flush();"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"            csvWriter.close();"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"An error occurred while saving your changes.\" +"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"                    \"Please try again later.\");"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"     * Loads the data into a TaskList object."},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     * @return A list of Tasks based on the file."},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while loading the data."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    public TaskList handleLoad() throws DukeException {"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"            TaskList listOfTasks \u003d new TaskList();"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(fileName));"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"            String line \u003d reader.readLine();"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"            while (line !\u003d null) {"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"                String[] details \u003d line.split(\",\");"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"                switch (details[0]) {"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"                case \"T\":"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"                    listOfTasks.addTask(new ToDo(details[2],"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"                            Boolean.parseBoolean(details[1])));"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"                case \"D\":"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"                    LocalDate dateD \u003d LocalDate.parse(details[3]);"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"                    listOfTasks.addTask(new Deadline(details[2],"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"                            Boolean.parseBoolean(details[1]),"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"                            dateD));"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"                case \"E\":"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"                    LocalDate dateE \u003d LocalDate.parse(details[3]);"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"                    listOfTasks.addTask(new Event(details[2],"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"                            Boolean.parseBoolean(details[1]),"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"                            dateE));"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"                default:"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"                    break;"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"                }"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"                line \u003d reader.readLine();"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"            return listOfTasks;"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"            System.out.println(\"It seems like you do not have a save file.\" +"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"                    \"A new one will be created.\");"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"            makeNewFile();"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"            return new TaskList();"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"An error occurred while loading.\" +"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"                    \"Please try again later.\");"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"     * Makes a new CSV file if there is no file initially."},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"     * @throws DukeException If an error occurs while making a new file."},{"lineNumber":106,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"    private void makeNewFile() throws DukeException {"},{"lineNumber":108,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"            new File(fileName).createNewFile();"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"        } catch (IOException e) {"},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"            throw new DukeException(\"An error occurred while loading.\" +"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"                    \"Please try again later.\");"},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":115}},{"path":"src/main/java/duke/controller/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":" * A class to hold list of Tasks."},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    private final ArrayList\u003cTask\u003e listOfTasks;"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     * Creates an empty list of Tasks."},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"    public TaskList() {"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        this(new ArrayList\u003c\u003e());"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * Creates a list of Tasks based on the collection of Tasks inputted."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * @param listOfTasks List of Tasks."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    public TaskList(ArrayList\u003cTask\u003e listOfTasks) {"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"        assert listOfTasks !\u003d null;"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks \u003d listOfTasks;"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     * Adds a Task into the current list."},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     * @param t New Task."},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    public void addTask(Task t) {"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"        assert t !\u003d null;"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks.add(t);"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"     * Removes Task from the specified index (indexed from 1)."},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be removed."},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"     * @return The removed Task."},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"    public Task deleteTask(int number) {"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        assert number \u003e 1;"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.remove(number - 1);"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"     * Marks a Task as done based on the specified index (indexed from 1)."},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be marked."},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"    public void markAsDone(int number) {"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"        assert number \u003e 1;"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        this.listOfTasks.get(number - 1).setDone(true);"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"     * Obtains the Task from the specified index (indexed from 1)."},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"     * @param number Index of the Task to be obtained."},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"     * @return The Task at the index."},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"    public Task getTaskAtIndex(int number) {"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"        assert number \u003e 1;"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.get(number - 1);"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"     * Returns the number of tasks in the current list."},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     * @return The number of tasks in the current list."},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"    public int getNumberOfTasks() {"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"        return this.listOfTasks.size();"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the current list of Tasks."},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the current list of Tasks."},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"        if (listOfTasks.isEmpty()) {"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"            return \"There are no tasks.\";"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"        StringBuilder result \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"        for (int i \u003d 0; i \u003c this.listOfTasks.size(); i++) {"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"            result.append(i + 1).append(\". \").append(listOfTasks.get(i)).append(\"\\n\");"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"        return result.toString();"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"     * Find the Tasks which names contain the keyword."},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"     * @param keyword Keyword to be searched against."},{"lineNumber":104,"author":{"gitId":"JQchong"},"content":"     * @return New TaskList containing filtered results."},{"lineNumber":105,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"JQchong"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":107,"author":{"gitId":"JQchong"},"content":"        assert keyword !\u003d null;"},{"lineNumber":108,"author":{"gitId":"JQchong"},"content":"        return new TaskList(this.listOfTasks.stream()"},{"lineNumber":109,"author":{"gitId":"JQchong"},"content":"                .filter((task) -\u003e task.getTaskName()"},{"lineNumber":110,"author":{"gitId":"JQchong"},"content":"                        .toLowerCase().contains(keyword.toLowerCase()))"},{"lineNumber":111,"author":{"gitId":"JQchong"},"content":"                .collect(Collectors.toCollection(ArrayList::new)));"},{"lineNumber":112,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":114,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"JQchong"},"content":"     * Remind users the undone Tasks in the next few days as requested by the user."},{"lineNumber":116,"author":{"gitId":"JQchong"},"content":"     * @param days Number of days"},{"lineNumber":117,"author":{"gitId":"JQchong"},"content":"     * @return The undone tasks within the next \u003ccode\u003edays\u003c/code\u003e days after today."},{"lineNumber":118,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"JQchong"},"content":"    public TaskList remind(int days) {"},{"lineNumber":120,"author":{"gitId":"JQchong"},"content":"        assert days \u003e 0;"},{"lineNumber":121,"author":{"gitId":"JQchong"},"content":"        return new TaskList(this.listOfTasks.stream()"},{"lineNumber":122,"author":{"gitId":"JQchong"},"content":"                .filter(task -\u003e task instanceof Event || task instanceof Deadline)"},{"lineNumber":123,"author":{"gitId":"JQchong"},"content":"                .filter(task -\u003e // filter overdue tasks"},{"lineNumber":124,"author":{"gitId":"JQchong"},"content":"                        LocalDate.now().compareTo(task.getTaskTime()) \u003c 0)"},{"lineNumber":125,"author":{"gitId":"JQchong"},"content":"                .filter(task -\u003e // filter upcoming tasks"},{"lineNumber":126,"author":{"gitId":"JQchong"},"content":"                        LocalDate.now().plusDays(days).compareTo(task.getTaskTime()) \u003e 0)"},{"lineNumber":127,"author":{"gitId":"JQchong"},"content":"                .filter(task -\u003e !task.isDone())"},{"lineNumber":128,"author":{"gitId":"JQchong"},"content":"                .collect(Collectors.toCollection(ArrayList::new)));"},{"lineNumber":129,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":130,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":131}},{"path":"src/main/java/duke/controller/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * A class to handle the printing of the current status"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * of the list of Tasks."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     * Prints the startup message."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"    public String initialize() {"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"        return \"Hello! I\u0027m Duke\u0027s friend, Ekud.\""},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"                + \"\\nDuke\u0027s dead, so I\u0027m here to take his job.\""},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"                + \"\\nYou want to jot down some tasks?\\n\";"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"     * Prints the current status of the list of Tasks."},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     * @param preMessage Response when user\u0027s requested action is successful."},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     * @param t Task involved in the action."},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * @param size Number of Tasks in the list."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    public String printOnListChange(String preMessage, Task t, int size) {"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"        return preMessage + \"\\n\" + t + \"\\n\""},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"                + \"Now you have \" + size + \" tasks in the list.\\n\";"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":30}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * Class for tasks with a deadline."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    LocalDate deadLine;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Deadline java.duke.controller.task with a deadline and a name."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Deadline java.duke.controller.task."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     * @param deadLine Deadline of the Deadline java.duke.controller.task."},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    public Deadline(String taskName, LocalDate deadLine) {"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        assert deadLine !\u003d null;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        this.deadLine \u003d deadLine;"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * Constructs a Deadline java.duke.controller.task with a deadline, a name and status."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Deadline java.duke.controller.task."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * @param isDone Status of the java.duke.controller.task, done or not done."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     * @param deadLine Deadline of the Deadline java.duke.controller.task."},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    public Deadline(String taskName, boolean done, LocalDate deadLine) {"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"        assert deadLine !\u003d null;"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"        this.deadLine \u003d deadLine;"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the Deadline java.duke.controller.task."},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the Deadline java.duke.controller.task."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        String formattedDate \u003d this.deadLine.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"     * Parse the java.duke.controller.task to comply with CSV format."},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"    public String parseToCsvRow() {"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        return \"D,\" + super.isDone() + \",\" + super.getTaskName() + \",\" + this.deadLine;"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     * Returns the deadline of the Task."},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     * @return Deadline of the Task."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime() {"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        return deadLine;"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":64}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" * Class for tasks that are events."},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    LocalDate eventTime;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Event with a name and time."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Event."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     * @param eventTime Time of the Event."},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"    public Event(String taskName, LocalDate eventTime) {"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        assert eventTime !\u003d null;"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * Constructs an Event with a name, time and status."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Event."},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * @param isDone Status of the Event, done or not done."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     * @param eventTime Time of the Event."},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"    public Event(String taskName, boolean done, LocalDate eventTime) {"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"        assert eventTime !\u003d null;"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of Event."},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of Event."},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"        String formattedDate \u003d this.eventTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + formattedDate + \")\";"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"     * Parse the java.duke.controller.task to comply with CSV format."},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"    public String parseToCsvRow() {"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"        return \"E,\" + super.isDone() + \",\" + super.getTaskName() + \",\" + this.eventTime;"},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"     * Returns the deadline of the Event."},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"     * @return Time of the Event."},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime() {"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"        return eventTime;"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":64}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":" * Class for general tasks. Not instantiable as it is an abstract class."},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"    private final String taskName;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"    private boolean isDone;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone Task with a name."},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    Task(String taskName) {"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"        this(taskName, false);"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     * Constructs a Task with a name and status."},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"     * @param isDone Status of the Task, done or not done."},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    Task(String taskName, boolean isDone) {"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"     * Returns the name of the Task."},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"     * @return The name of the Task."},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"    public String getTaskName() {"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"        return taskName;"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"     * Returns status of the Task."},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"     * @return Status of the Task."},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"    public boolean isDone() {"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"        return isDone;"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"     * Sets status of the Task."},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"     * @param isDone Status of the Task."},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the Task."},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"     * @return A string representation of the Task."},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"        String checkBox \u003d this.isDone ? \"[X]\" : \"[ ]\";"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"        return checkBox + \" \" + this.taskName;"},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"     * Parse the Task to comply with CSV format."},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"    public abstract String parseToCsvRow();"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"     * Returns the time of the Task."},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"     * @return Time of the Task."},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"    public LocalDate getTaskTime() {"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"        return null;"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":84}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":" * Class for ToDo tasks."},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"     * Constructs an undone ToDo Task with a name."},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"    public ToDo(String taskName) {"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"        super(taskName);"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"     * Constructs a ToDo Task with a name with status."},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"     * @param taskName Name of the Task."},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"     * @param done Status of the Task, done or not done."},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"    public ToDo(String taskName, boolean done) {"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"        super(taskName, done);"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"     * Returns a string representation of the ToDo Task."},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"     * @return String representation of the ToDo Task."},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"     * Parse the java.duke.controller.task to comply with CSV format."},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"     * @return A string that complies with CSV format."},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"    public String parseToCsvRow() {"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"        return \"T,\" + super.isDone() + \",\" + super.getTaskName();"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":44}},{"path":"src/main/resources/view/interface.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.layout.GridPane?\u003e"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.layout.RowConstraints?\u003e"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.Duke\"\u003e"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":"   \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"      \u003cGridPane layoutX\u003d\"14.0\" layoutY\u003d\"341.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"572.0\" AnchorPane.bottomAnchor\u003d\"14.0\" AnchorPane.leftAnchor\u003d\"14.0\" AnchorPane.rightAnchor\u003d\"14.0\"\u003e"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"        \u003ccolumnConstraints\u003e"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"484.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"456.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" maxWidth\u003d\"281.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"116.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"        \u003c/columnConstraints\u003e"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"        \u003crowConstraints\u003e"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"        \u003c/rowConstraints\u003e"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"         \u003cchildren\u003e"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"            \u003cTextField fx:id\u003d\"input\" /\u003e"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"            \u003cButton fx:id\u003d\"submit\" mnemonicParsing\u003d\"false\" onAction\u003d\"#onSubmit\" prefHeight\u003d\"22.0\" prefWidth\u003d\"101.0\" text\u003d\"Submit\" GridPane.columnIndex\u003d\"1\"\u003e"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"               \u003cGridPane.margin\u003e"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":"                  \u003cInsets left\u003d\"15.0\" /\u003e"},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"               \u003c/GridPane.margin\u003e"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"            \u003c/Button\u003e"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"         \u003c/children\u003e"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"      \u003c/GridPane\u003e"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"      \u003cScrollPane fx:id\u003d\"scrollPane\" fitToWidth\u003d\"true\" prefHeight\u003d\"344.0\" prefWidth\u003d\"600.0\" vbarPolicy\u003d\"ALWAYS\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"         \u003ccontent\u003e"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"            \u003cVBox fx:id\u003d\"content\" prefWidth\u003d\"100.0\" spacing\u003d\"10.0\"\u003e"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"               \u003cpadding\u003e"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"                  \u003cInsets bottom\u003d\"7.0\" left\u003d\"7.0\" right\u003d\"7.0\" top\u003d\"7.0\" /\u003e"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"               \u003c/padding\u003e"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"            \u003c/VBox\u003e"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"         \u003c/content\u003e"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"      \u003c/ScrollPane\u003e"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"   \u003c/children\u003e"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"JQchong":42}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"import duke.controller.Parser;"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"import duke.controller.TaskList;"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"import duke.controller.Ui;"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"import java.time.LocalDate;"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"JQchong"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":14,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":15,"author":{"gitId":"JQchong"},"content":"public class DukeTest {"},{"lineNumber":16,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"JQchong"},"content":"    public void testTodo_emptyDescription_exceptionThrown() {"},{"lineNumber":18,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":21,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":22,"author":{"gitId":"JQchong"},"content":"            parser.handleTodo(\"todo\", taskList);"},{"lineNumber":23,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());"},{"lineNumber":25,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":28,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"JQchong"},"content":"    public void testTodo_nonEmptyDescription_success() {"},{"lineNumber":30,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":32,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":33,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"JQchong"},"content":"            parser.handleTodo(\"todo a\", taskList);"},{"lineNumber":35,"author":{"gitId":"JQchong"},"content":"            String result \u003d taskList.toString();"},{"lineNumber":36,"author":{"gitId":"JQchong"},"content":"            String expected \u003d \"1. [T][ ] a\\n\";"},{"lineNumber":37,"author":{"gitId":"JQchong"},"content":"            assertEquals(result, expected);"},{"lineNumber":38,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":39,"author":{"gitId":"JQchong"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"JQchong"},"content":"            fail();"},{"lineNumber":41,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":44,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"JQchong"},"content":"    public void testDeadLine_noDeadLine_exceptionThrown() {"},{"lineNumber":46,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":48,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":49,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":50,"author":{"gitId":"JQchong"},"content":"            parser.handleTasksWithTime(\"deadline\", \"deadline a\", taskList);"},{"lineNumber":51,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"JQchong"},"content":"            assertEquals("},{"lineNumber":53,"author":{"gitId":"JQchong"},"content":"                    \"The timing of the java.duke.controller.task is not included. Please check your input.\","},{"lineNumber":54,"author":{"gitId":"JQchong"},"content":"                    e.getMessage());"},{"lineNumber":55,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":58,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"JQchong"},"content":"    public void testDeadLine_wrongDateFormat_exceptionThrown() {"},{"lineNumber":60,"author":{"gitId":"JQchong"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":62,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":63,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":64,"author":{"gitId":"JQchong"},"content":"            parser.handleTasksWithTime(\"deadline\", \"deadline a /by jlhsfadjkbhsfdajk\", taskList);"},{"lineNumber":65,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":66,"author":{"gitId":"JQchong"},"content":"            assertEquals("},{"lineNumber":67,"author":{"gitId":"JQchong"},"content":"                    \"Please input a date with correct format (yyyy-mm-dd).\","},{"lineNumber":68,"author":{"gitId":"JQchong"},"content":"                    e.getMessage());"},{"lineNumber":69,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":72,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"JQchong"},"content":"    public void testDelete_indexOutOfBounds_exceptionThrown() {"},{"lineNumber":74,"author":{"gitId":"JQchong"},"content":"        try{"},{"lineNumber":75,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":76,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":77,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":78,"author":{"gitId":"JQchong"},"content":"            parser.handleDelete(\"delete 2\", taskList);"},{"lineNumber":79,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":80,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"You have 0 tasks in your list. Please check your input.\", e.getMessage());"},{"lineNumber":81,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"JQchong"},"content":""},{"lineNumber":84,"author":{"gitId":"JQchong"},"content":"    @Test"},{"lineNumber":85,"author":{"gitId":"JQchong"},"content":"    public void testDelete_correctInput_success() {"},{"lineNumber":86,"author":{"gitId":"JQchong"},"content":"        try{"},{"lineNumber":87,"author":{"gitId":"JQchong"},"content":"            Ui ui \u003d new Ui();"},{"lineNumber":88,"author":{"gitId":"JQchong"},"content":"            Parser parser \u003d new Parser(ui);"},{"lineNumber":89,"author":{"gitId":"JQchong"},"content":"            TaskList taskList \u003d new TaskList();"},{"lineNumber":90,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new Event(\"a\", LocalDate.of(2021, 9,1)));"},{"lineNumber":91,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new Deadline(\"b\", LocalDate.of(1999,3,2)));"},{"lineNumber":92,"author":{"gitId":"JQchong"},"content":"            taskList.addTask(new ToDo(\"c\"));"},{"lineNumber":93,"author":{"gitId":"JQchong"},"content":"            parser.handleDelete(\"delete 2\", taskList);"},{"lineNumber":94,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"a\", taskList.getTaskAtIndex(1).getTaskName());"},{"lineNumber":95,"author":{"gitId":"JQchong"},"content":"            assertEquals(LocalDate.of(2021, 9, 1),"},{"lineNumber":96,"author":{"gitId":"JQchong"},"content":"                    taskList.getTaskAtIndex(1).getTaskTime());"},{"lineNumber":97,"author":{"gitId":"JQchong"},"content":"            assertEquals(\"c\", taskList.getTaskAtIndex(2).getTaskName());"},{"lineNumber":98,"author":{"gitId":"JQchong"},"content":"        } catch (DukeException e) {"},{"lineNumber":99,"author":{"gitId":"JQchong"},"content":"            e.printStackTrace();"},{"lineNumber":100,"author":{"gitId":"JQchong"},"content":"            fail();"},{"lineNumber":101,"author":{"gitId":"JQchong"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"JQchong"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"JQchong"},"content":"}"}],"authorContributionMap":{"JQchong":103}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JQchong"},"content":"todo haha"},{"lineNumber":2,"author":{"gitId":"JQchong"},"content":"todo haha"},{"lineNumber":3,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":4,"author":{"gitId":"JQchong"},"content":"todo borrow book"},{"lineNumber":5,"author":{"gitId":"JQchong"},"content":"deadline return book /by Sunday"},{"lineNumber":6,"author":{"gitId":"JQchong"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":7,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":8,"author":{"gitId":"JQchong"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"JQchong"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"JQchong"},"content":"done 3"},{"lineNumber":11,"author":{"gitId":"JQchong"},"content":"list"},{"lineNumber":12,"author":{"gitId":"JQchong"},"content":"bye"}],"authorContributionMap":{"JQchong":12}}]
