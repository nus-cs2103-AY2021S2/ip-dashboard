[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke{"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"    enum Command{"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"        list,done,delete,todo,deadline,event,bye;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"            Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"            String logo \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"                    + \"What can I do for you?\\n\";"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"            System.out.println(logo);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":""},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"            while (sc.hasNext()) {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"                    String line \u003d sc.nextLine();"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"                    String[] lineSplit \u003d line.split(\" \", 2);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"                    Command command \u003d Command.valueOf(lineSplit[0]);"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"                    if (command.equals(Command.bye)) {"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"                    break;"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"                    } else {"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"                        if (command.equals(Command.list)) {"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"                            System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"                                    \"Here are the tasks in your list\");"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"                            for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"                                Task curTask \u003d taskList.get(i - 1);"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"                                System.out.println(i + \".\" + curTask.toString());"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"                            System.out.println(\"____________________________________________________________\");"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"                        } else if (command.equals(Command.done)) {"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"                            try {"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"                            int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"                            Task curTask \u003d taskList.get(index);"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"                            curTask.markAsDone();"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"                            System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"                                    \"Nice! I\u0027ve marked this task as done:\\n\" + curTask.toString() +"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"                                    \"\\n____________________________________________________________\");"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"                            }catch (ArrayIndexOutOfBoundsException ex){"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! The description of a done cannot be empty.\");"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"                        } else if (command.equals(Command.delete)) {"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"                            try {"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"                                int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"                                Task curTask \u003d taskList.get(index);"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"                                taskList.remove(index);"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"                                        \"Noted. I\u0027ve removed this task:\\n  \" + curTask.toString() +"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"                                        \"\\nNow you have \"+ taskList.size() +\" tasks in the list.\\n\"+"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"                                        \"____________________________________________________________\");"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"                            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! The description of a delete cannot be empty.\");"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"                            } catch (IndexOutOfBoundsException ex){"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! There is nothing to delete at \"+lineSplit[1]);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"                        } else {"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"                            if (command.equals(Command.todo)) {"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"                                    String[] item \u003d lineSplit[1].split(\"/\");"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"                                    Task newTask \u003d new ToDos(item[0]);"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"                                    taskList.add(newTask);"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"                                    System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"                                            \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString() +"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"                                            \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\" +"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"                                            \"____________________________________________________________\");"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"                                }catch (ArrayIndexOutOfBoundsException ex){"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException(\"\\u00a9 OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"                            } else if (command.equals(Command.deadline)) {"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"                                String[] item \u003d lineSplit[1].split(\"/by \");"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"                                Task newTask \u003d new Deadline(item[0], item[1]);"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"                                taskList.add(newTask);"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"                                        \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString() +"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"                                        \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\" +"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"                                        \"____________________________________________________________\");"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                                }catch (ArrayIndexOutOfBoundsException ex){"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException(\"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                            } else if (command.equals(Command.event)) {"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"                                String[] item \u003d lineSplit[1].split(\"/at \");"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"                                Task newTask \u003d new Events(item[0], item[1]);"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"                                taskList.add(newTask);"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\" +"},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"                                        \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString() +"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":"                                        \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\" +"},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"                                        \"____________________________________________________________\");"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"                                }catch (ArrayIndexOutOfBoundsException ex){"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException(\"\\u00a9 OOPS!!! The description of a event cannot be empty.\");"},{"lineNumber":92,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":93,"author":{"gitId":"habi39"},"content":"                            } else{"},{"lineNumber":94,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":"                        }"},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":"                } catch(DukeException ex){"},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"                System.out.println( \"____________________________________________________________\\n\"+"},{"lineNumber":100,"author":{"gitId":"habi39"},"content":"                        ex.getMessage() +"},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"                        \"\\n____________________________________________________________\" );"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":"            System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":105,"author":{"gitId":"habi39"},"content":"                    + \"Bye. Hope to see you again soon!\""},{"lineNumber":106,"author":{"gitId":"habi39"},"content":"                    + \"\\n____________________________________________________________\");"},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"class Task {"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":"    protected String description;"},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"    protected boolean isDone;"},{"lineNumber":112,"author":{"gitId":"habi39"},"content":""},{"lineNumber":113,"author":{"gitId":"habi39"},"content":"    public Task(String description) {"},{"lineNumber":114,"author":{"gitId":"habi39"},"content":"        this.description \u003d description;"},{"lineNumber":115,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d false;"},{"lineNumber":116,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"habi39"},"content":""},{"lineNumber":118,"author":{"gitId":"habi39"},"content":"    public String getStatusIcon() {"},{"lineNumber":119,"author":{"gitId":"habi39"},"content":"        return (isDone ? \"\\u2718\" : \" \"); //return tick or X symbols"},{"lineNumber":120,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"habi39"},"content":""},{"lineNumber":122,"author":{"gitId":"habi39"},"content":"    public void markAsDone(){"},{"lineNumber":123,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d true;"},{"lineNumber":124,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"habi39"},"content":""},{"lineNumber":126,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":127,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":128,"author":{"gitId":"habi39"},"content":"        return \"[\"+this.getStatusIcon()+\"] \"+ this.description;"},{"lineNumber":129,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"habi39"},"content":""},{"lineNumber":131,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":132,"author":{"gitId":"habi39"},"content":"class Deadline extends Task{"},{"lineNumber":133,"author":{"gitId":"habi39"},"content":""},{"lineNumber":134,"author":{"gitId":"habi39"},"content":"    protected String by;"},{"lineNumber":135,"author":{"gitId":"habi39"},"content":""},{"lineNumber":136,"author":{"gitId":"habi39"},"content":"    public Deadline(String description, String by){"},{"lineNumber":137,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":138,"author":{"gitId":"habi39"},"content":"        this.by \u003d by;"},{"lineNumber":139,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"habi39"},"content":""},{"lineNumber":141,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":142,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":143,"author":{"gitId":"habi39"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by + \")\";"},{"lineNumber":144,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":146,"author":{"gitId":"habi39"},"content":"class ToDos extends Task {"},{"lineNumber":147,"author":{"gitId":"habi39"},"content":""},{"lineNumber":148,"author":{"gitId":"habi39"},"content":"    protected String by;"},{"lineNumber":149,"author":{"gitId":"habi39"},"content":""},{"lineNumber":150,"author":{"gitId":"habi39"},"content":"    public ToDos(String description)  {"},{"lineNumber":151,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":152,"author":{"gitId":"habi39"},"content":""},{"lineNumber":153,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"habi39"},"content":""},{"lineNumber":155,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":156,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":157,"author":{"gitId":"habi39"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":158,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"-"},"content":"}"},{"lineNumber":160,"author":{"gitId":"habi39"},"content":"class Events extends Task {"},{"lineNumber":161,"author":{"gitId":"habi39"},"content":""},{"lineNumber":162,"author":{"gitId":"habi39"},"content":"    protected String duration;"},{"lineNumber":163,"author":{"gitId":"habi39"},"content":""},{"lineNumber":164,"author":{"gitId":"habi39"},"content":"    public Events(String description,String duration){"},{"lineNumber":165,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":166,"author":{"gitId":"habi39"},"content":"        this.duration \u003d duration;"},{"lineNumber":167,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"habi39"},"content":""},{"lineNumber":169,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":170,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":171,"author":{"gitId":"habi39"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + duration + \")\";"},{"lineNumber":172,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":174,"author":{"gitId":"habi39"},"content":"class DukeException extends Exception{"},{"lineNumber":175,"author":{"gitId":"habi39"},"content":"    public DukeException(String message){"},{"lineNumber":176,"author":{"gitId":"habi39"},"content":"        super(message);"},{"lineNumber":177,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"habi39"},"content":""},{"lineNumber":179,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":173,"-":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"delete 5"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"deadline return book /by june 6th"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"event project meeting /at Aug6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"list"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"list"}],"authorContributionMap":{"habi39":12}}]
