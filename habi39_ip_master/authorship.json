[{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"1.[T][✘] hi"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"2.[T][✘] me"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"3.[D][✘] hello(by: Feb 2 2019)"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"4.[D][✘] jk(by: Feb 2 2019)"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"5.[D][✘] todo(by: Feb 2 2019)"}],"authorContributionMap":{"habi39":5}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class AddCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public AddCommand(String command, String task, String date) {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated constructor stub"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        if (this.command.equals(\"todo\")) {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new ToDos(task);"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        } else if ( this.command.equals(\"deadline\")){"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new Deadline(this.task, this.date);"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"            ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":""},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        } else if (this.command.equals(\"event\")) {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new Events(this.task, this.date);"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            System.out.println(\"openis\");"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":""},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":40}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"    String command, task, date;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    public Command(String command, String task, String date) {"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        this.command \u003d command;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"        this.task \u003d task;"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"        this.date \u003d date;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    abstract void execute(TaskList taskList, Ui ui, Storage storage) throws IOException;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    abstract boolean isExit();"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":15}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":""},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    protected LocalDate by;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        return this.by;"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":21}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public DeleteCommand(String command, String task, String date) {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated constructor stub"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub "},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(task);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"            Task curTask \u003d taskList.get(index);"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"            taskList.delete(index);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            ui.addDeleteString(taskList.size(), curTask.toString());"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            storage.rewrite(taskList);"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":26}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class DoneCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public DoneCommand(String command, String task, String date) {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated constructor stub"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"       "},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(task);"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"            Task curTask \u003d taskList.get(index);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            curTask.markAsDone();"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            ui.addDoneString(curTask.toString());"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"            storage.rewrite(taskList);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":""},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":""},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    public Duke(String filePath) {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        ui \u003d new Ui();"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        } catch (DukeException | IOException | ParseException e) {"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"            ui.showLoadingError();"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    public void run() {"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        ui.showWelcome();"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        boolean isExit \u003d false;"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        while (!isExit) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"                ui.showLine(); // show the divider line (\"_______\")"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"            } catch (DukeException | IOException e) {"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"            } catch (NullPointerException e) {"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"            } finally {"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"                ui.showLine();"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":""},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"    public static void main(String[] args) throws IOException, ParseException {"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"        new Duke(\"data.txt\").run();"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"        /*List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"        String filePath \u003d \"data.txt\";"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"        PrintWriter pw \u003d new PrintWriter(bw);"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"        String readLine \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"        while ((readLine \u003d br.readLine()) !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"            String[] read \u003d readLine.split(\"]\", 2);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"            String type \u003d read[0].replace(\"[\", \"\");"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"            if (type.contains(\"T\")) {"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new ToDos(data[1]);"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"                    newTask.markAsDone();"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"            } else if (type.contains(\"D\")) {"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"                try{"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"                String secondData \u003d data[1].replace(\"(by: \", \"\").replace(\")\", \"\");"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"                String[] seperateTime \u003d secondData.split(\" \", 2);"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"                Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"                DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new Deadline(seperateTime[0], dateFormat.format(date));"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"                    newTask.markAsDone();"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"            } catch (ParseException ex) {"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"                String secondData \u003d data[1].replace(\"(by: \", \"\").replace(\")\", \"\");"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"                Date date \u003d formatter.parse(secondData);"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"                DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new Deadline(data[0], dateFormat.format(date));"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"                    newTask.markAsDone();"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":92,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":94,"author":{"gitId":"habi39"},"content":"        } else if (type.contains(\"E\")) {"},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"            try{"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":"                String secondData \u003d data[1].replace(\"(at: \", \"\").replace(\")\", \"\");"},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"                String[] seperateTime \u003d secondData.split(\" \", 2);"},{"lineNumber":100,"author":{"gitId":"habi39"},"content":"                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"                Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":"                DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new Events(seperateTime[0], dateFormat.format(date));"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":105,"author":{"gitId":"habi39"},"content":"                   newTask.markAsDone();"},{"lineNumber":106,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":108,"author":{"gitId":"habi39"},"content":"            } catch (ParseException ex) {"},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"                String secondData \u003d data[1].replace(\"(at: \", \"\").replace(\")\", \"\");"},{"lineNumber":112,"author":{"gitId":"habi39"},"content":"                SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":113,"author":{"gitId":"habi39"},"content":"                Date date \u003d formatter.parse(secondData);"},{"lineNumber":114,"author":{"gitId":"habi39"},"content":"                DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":115,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new Events(data[0], dateFormat.format(date));"},{"lineNumber":116,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":117,"author":{"gitId":"habi39"},"content":"                   newTask.markAsDone();"},{"lineNumber":118,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":119,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":120,"author":{"gitId":"habi39"},"content":"                "},{"lineNumber":121,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":122,"author":{"gitId":"habi39"},"content":"                "},{"lineNumber":123,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":126,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":127,"author":{"gitId":"habi39"},"content":"        br.close();"},{"lineNumber":128,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":129,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":130,"author":{"gitId":"habi39"},"content":"        // inserts correct file path separator on *nix and Windows"},{"lineNumber":131,"author":{"gitId":"habi39"},"content":"        // works on *nix"},{"lineNumber":132,"author":{"gitId":"habi39"},"content":"        // works on Windows"},{"lineNumber":133,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":134,"author":{"gitId":"habi39"},"content":"            Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":135,"author":{"gitId":"habi39"},"content":"            String logo \u003d \"Hello! I\u0027m Duke\\n\""},{"lineNumber":136,"author":{"gitId":"habi39"},"content":"                    + \"What can I do for you?\\n\";"},{"lineNumber":137,"author":{"gitId":"habi39"},"content":"            System.out.println(logo);"},{"lineNumber":138,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":139,"author":{"gitId":"habi39"},"content":"            while (sc.hasNext()) {"},{"lineNumber":140,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":141,"author":{"gitId":"habi39"},"content":"                    String line \u003d sc.nextLine();"},{"lineNumber":142,"author":{"gitId":"habi39"},"content":"                    String[] lineSplit \u003d line.split(\" \", 2);"},{"lineNumber":143,"author":{"gitId":"habi39"},"content":"                    Command command \u003d Command.valueOf(lineSplit[0]);"},{"lineNumber":144,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":145,"author":{"gitId":"habi39"},"content":"                    Scanner fileScanner \u003d new Scanner(new File(filePath));"},{"lineNumber":146,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":147,"author":{"gitId":"habi39"},"content":"                    if (command.equals(Command.bye)) {"},{"lineNumber":148,"author":{"gitId":"habi39"},"content":"                        break;"},{"lineNumber":149,"author":{"gitId":"habi39"},"content":"                    } else {"},{"lineNumber":150,"author":{"gitId":"habi39"},"content":"                        if (command.equals(Command.list)) {"},{"lineNumber":151,"author":{"gitId":"habi39"},"content":"                            int length \u003d lineSplit.length;"},{"lineNumber":152,"author":{"gitId":"habi39"},"content":"                            if (length \u003e 1) {"},{"lineNumber":153,"author":{"gitId":"habi39"},"content":"                                String[] item \u003d lineSplit[1].split(\"/by \");"},{"lineNumber":154,"author":{"gitId":"habi39"},"content":"                                LocalDate date \u003d LocalDate.parse(item[0]);"},{"lineNumber":155,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":156,"author":{"gitId":"habi39"},"content":"                                        + \"Here are the tasks in your list due on \""},{"lineNumber":157,"author":{"gitId":"habi39"},"content":"                                        + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":158,"author":{"gitId":"habi39"},"content":"                                while (fileScanner.hasNext()) {"},{"lineNumber":159,"author":{"gitId":"habi39"},"content":"                                    String curTask \u003d fileScanner.nextLine();"},{"lineNumber":160,"author":{"gitId":"habi39"},"content":"                                    String[] string \u003d curTask.split(\": \");"},{"lineNumber":161,"author":{"gitId":"habi39"},"content":"                                    if (string.length \u003e 1) {"},{"lineNumber":162,"author":{"gitId":"habi39"},"content":"                                        String dueDate \u003d string[1].replace(\")\", \"\");"},{"lineNumber":163,"author":{"gitId":"habi39"},"content":"                                        if (dueDate.equals(date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))) {"},{"lineNumber":164,"author":{"gitId":"habi39"},"content":"                                            System.out.println(curTask);"},{"lineNumber":165,"author":{"gitId":"habi39"},"content":"                                        }"},{"lineNumber":166,"author":{"gitId":"habi39"},"content":"                                    }"},{"lineNumber":167,"author":{"gitId":"habi39"},"content":"                                "},{"lineNumber":168,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":169,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\");"},{"lineNumber":170,"author":{"gitId":"habi39"},"content":"                            } else {"},{"lineNumber":171,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":172,"author":{"gitId":"habi39"},"content":"                                        + \"Here are the tasks in your list\");"},{"lineNumber":173,"author":{"gitId":"habi39"},"content":"                                /*for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":174,"author":{"gitId":"habi39"},"content":"                                    Task curTask \u003d taskList.get(i - 1);"},{"lineNumber":175,"author":{"gitId":"habi39"},"content":"                                    System.out.println(i + \".\" + curTask.toString());"},{"lineNumber":176,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":177,"author":{"gitId":"habi39"},"content":"                                while (fileScanner.hasNext()) {"},{"lineNumber":178,"author":{"gitId":"habi39"},"content":"                                    System.out.println(fileScanner.nextLine());"},{"lineNumber":179,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":180,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\");"},{"lineNumber":181,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":182,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":183,"author":{"gitId":"habi39"},"content":"                        } else if (command.equals(Command.done)) {"},{"lineNumber":184,"author":{"gitId":"habi39"},"content":"                            try {"},{"lineNumber":185,"author":{"gitId":"habi39"},"content":"                                FileWriter tfw \u003d new FileWriter(filePath);"},{"lineNumber":186,"author":{"gitId":"habi39"},"content":"                                BufferedWriter tbw \u003d new BufferedWriter(tfw);"},{"lineNumber":187,"author":{"gitId":"habi39"},"content":"                                PrintWriter tpw \u003d new PrintWriter(tbw);"},{"lineNumber":188,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":189,"author":{"gitId":"habi39"},"content":"                                int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":190,"author":{"gitId":"habi39"},"content":"                                System.out.println(taskList.size());"},{"lineNumber":191,"author":{"gitId":"habi39"},"content":"                                Task curTask \u003d taskList.get(index);"},{"lineNumber":192,"author":{"gitId":"habi39"},"content":"                                curTask.markAsDone();"},{"lineNumber":193,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":194,"author":{"gitId":"habi39"},"content":"                                        + \"Nice! I\u0027ve marked this task as done:\\n\" + curTask.toString()"},{"lineNumber":195,"author":{"gitId":"habi39"},"content":"                                        + \"\\n____________________________________________________________\");"},{"lineNumber":196,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":197,"author":{"gitId":"habi39"},"content":"                                for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":198,"author":{"gitId":"habi39"},"content":"                                    Task writeTask \u003d taskList.get(i - 1);"},{"lineNumber":199,"author":{"gitId":"habi39"},"content":"                                    tpw.println(i + \".\" + writeTask.toString());"},{"lineNumber":200,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":201,"author":{"gitId":"habi39"},"content":"                                tpw.flush();"},{"lineNumber":202,"author":{"gitId":"habi39"},"content":"                                tpw.close();"},{"lineNumber":203,"author":{"gitId":"habi39"},"content":"                                "},{"lineNumber":204,"author":{"gitId":"habi39"},"content":"                            "},{"lineNumber":205,"author":{"gitId":"habi39"},"content":"                            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":206,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! The description of a done cannot be empty.\");"},{"lineNumber":207,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":208,"author":{"gitId":"habi39"},"content":"                        } else if (command.equals(Command.delete)) {"},{"lineNumber":209,"author":{"gitId":"habi39"},"content":"                            try {"},{"lineNumber":210,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":211,"author":{"gitId":"habi39"},"content":"                    "},{"lineNumber":212,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":213,"author":{"gitId":"habi39"},"content":"                                FileWriter tfw \u003d new FileWriter(filePath);"},{"lineNumber":214,"author":{"gitId":"habi39"},"content":"                                BufferedWriter tbw \u003d new BufferedWriter(tfw);"},{"lineNumber":215,"author":{"gitId":"habi39"},"content":"                                PrintWriter tpw \u003d new PrintWriter(tbw);"},{"lineNumber":216,"author":{"gitId":"habi39"},"content":"                                "},{"lineNumber":217,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":218,"author":{"gitId":"habi39"},"content":"                                int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":219,"author":{"gitId":"habi39"},"content":"                                Task curTask \u003d taskList.get(index);"},{"lineNumber":220,"author":{"gitId":"habi39"},"content":"                                taskList.remove(index);"},{"lineNumber":221,"author":{"gitId":"habi39"},"content":"                                System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":222,"author":{"gitId":"habi39"},"content":"                                        + \"Noted. I\u0027ve removed this task:\\n  \" + curTask.toString() + \"\\nNow you have \""},{"lineNumber":223,"author":{"gitId":"habi39"},"content":"                                        + taskList.size() + \" tasks in the list.\\n\""},{"lineNumber":224,"author":{"gitId":"habi39"},"content":"                                        + \"____________________________________________________________\");"},{"lineNumber":225,"author":{"gitId":"habi39"},"content":"                                for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":226,"author":{"gitId":"habi39"},"content":"                                    Task writeTask \u003d taskList.get(i-1);"},{"lineNumber":227,"author":{"gitId":"habi39"},"content":"                                    tpw.println(i + \".\" + writeTask.toString());"},{"lineNumber":228,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":229,"author":{"gitId":"habi39"},"content":"                                tpw.close();"},{"lineNumber":230,"author":{"gitId":"habi39"},"content":"                            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":231,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! The description of a delete cannot be empty.\");"},{"lineNumber":232,"author":{"gitId":"habi39"},"content":"                            } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":233,"author":{"gitId":"habi39"},"content":"                                throw new DukeException(\"\\u00a9 OOPS!!! There is nothing to delete at \" + lineSplit[1]);"},{"lineNumber":234,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":235,"author":{"gitId":"habi39"},"content":"                        } else {"},{"lineNumber":236,"author":{"gitId":"habi39"},"content":"                            if (command.equals(Command.todo)) {"},{"lineNumber":237,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":238,"author":{"gitId":"habi39"},"content":"                                    String[] item \u003d lineSplit[1].split(\"/\");"},{"lineNumber":239,"author":{"gitId":"habi39"},"content":"                                    Task newTask \u003d new ToDos(item[0]);"},{"lineNumber":240,"author":{"gitId":"habi39"},"content":"                                    taskList.add(newTask);"},{"lineNumber":241,"author":{"gitId":"habi39"},"content":"                                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":242,"author":{"gitId":"habi39"},"content":"                                            + \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString()"},{"lineNumber":243,"author":{"gitId":"habi39"},"content":"                                            + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\""},{"lineNumber":244,"author":{"gitId":"habi39"},"content":"                                            + \"____________________________________________________________\");"},{"lineNumber":245,"author":{"gitId":"habi39"},"content":"                                    pw.println(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":246,"author":{"gitId":"habi39"},"content":"                                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":247,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException("},{"lineNumber":248,"author":{"gitId":"habi39"},"content":"                                            \"\\u00a9 OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":249,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":250,"author":{"gitId":"habi39"},"content":"                            } else if (command.equals(Command.deadline)) {"},{"lineNumber":251,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":252,"author":{"gitId":"habi39"},"content":"                                    String[] item \u003d lineSplit[1].split(\"/by \");"},{"lineNumber":253,"author":{"gitId":"habi39"},"content":"                                    Task newTask \u003d new Deadline(item[0], item[1]);"},{"lineNumber":254,"author":{"gitId":"habi39"},"content":"                                    taskList.add(newTask);"},{"lineNumber":255,"author":{"gitId":"habi39"},"content":"                                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":256,"author":{"gitId":"habi39"},"content":"                                            + \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString()"},{"lineNumber":257,"author":{"gitId":"habi39"},"content":"                                            + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\""},{"lineNumber":258,"author":{"gitId":"habi39"},"content":"                                            + \"____________________________________________________________\");"},{"lineNumber":259,"author":{"gitId":"habi39"},"content":"                                    pw.println(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":260,"author":{"gitId":"habi39"},"content":"                                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":261,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException("},{"lineNumber":262,"author":{"gitId":"habi39"},"content":"                                            \"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":263,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":264,"author":{"gitId":"habi39"},"content":"                            } else if (command.equals(Command.event)) {"},{"lineNumber":265,"author":{"gitId":"habi39"},"content":"                                try {"},{"lineNumber":266,"author":{"gitId":"habi39"},"content":"                                    String[] item \u003d lineSplit[1].split(\"/at \");"},{"lineNumber":267,"author":{"gitId":"habi39"},"content":"                                    Task newTask \u003d new Events(item[0], item[1]);"},{"lineNumber":268,"author":{"gitId":"habi39"},"content":"                                    taskList.add(newTask);"},{"lineNumber":269,"author":{"gitId":"habi39"},"content":"                                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":270,"author":{"gitId":"habi39"},"content":"                                            + \"Got it. I\u0027ve added this task:\\n  \" + newTask.toString()"},{"lineNumber":271,"author":{"gitId":"habi39"},"content":"                                            + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\\n\""},{"lineNumber":272,"author":{"gitId":"habi39"},"content":"                                            + \"____________________________________________________________\");"},{"lineNumber":273,"author":{"gitId":"habi39"},"content":"                                    pw.println(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":274,"author":{"gitId":"habi39"},"content":"                                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":275,"author":{"gitId":"habi39"},"content":"                                    throw new DukeException("},{"lineNumber":276,"author":{"gitId":"habi39"},"content":"                                            \"\\u00a9 OOPS!!! The description of a event cannot be empty.\");"},{"lineNumber":277,"author":{"gitId":"habi39"},"content":"                                }"},{"lineNumber":278,"author":{"gitId":"habi39"},"content":"                            } else {"},{"lineNumber":279,"author":{"gitId":"habi39"},"content":"                                throw new DukeException("},{"lineNumber":280,"author":{"gitId":"habi39"},"content":"                                        \"\\u00a9 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":281,"author":{"gitId":"habi39"},"content":"                            }"},{"lineNumber":282,"author":{"gitId":"habi39"},"content":"                            pw.flush();"},{"lineNumber":283,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":284,"author":{"gitId":"habi39"},"content":"                        }"},{"lineNumber":285,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":286,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":287,"author":{"gitId":"habi39"},"content":"                } catch (DukeException ex) {"},{"lineNumber":288,"author":{"gitId":"habi39"},"content":"                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":289,"author":{"gitId":"habi39"},"content":"                            + ex.getMessage() + \"\\n____________________________________________________________\");"},{"lineNumber":290,"author":{"gitId":"habi39"},"content":"                } catch (IllegalArgumentException ex) {"},{"lineNumber":291,"author":{"gitId":"habi39"},"content":"                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":292,"author":{"gitId":"habi39"},"content":"                            + \"\\u00a9 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\""},{"lineNumber":293,"author":{"gitId":"habi39"},"content":"                            + \"\\n____________________________________________________________\");"},{"lineNumber":294,"author":{"gitId":"habi39"},"content":"                } catch (DateTimeParseException ex) {"},{"lineNumber":295,"author":{"gitId":"habi39"},"content":"                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":296,"author":{"gitId":"habi39"},"content":"                            + \"\\u00a9 OOPS!!! I\u0027m sorry, but I don\u0027t know what the date means :-(\""},{"lineNumber":297,"author":{"gitId":"habi39"},"content":"                            + \"\\n____________________________________________________________\");"},{"lineNumber":298,"author":{"gitId":"habi39"},"content":"                } catch (NullPointerException ex) {"},{"lineNumber":299,"author":{"gitId":"habi39"},"content":"                    System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":300,"author":{"gitId":"habi39"},"content":"                            + \"\\u00a9 OOPS!!! Nothing found :-(\""},{"lineNumber":301,"author":{"gitId":"habi39"},"content":"                            + \"\\n____________________________________________________________\");"},{"lineNumber":302,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":303,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":304,"author":{"gitId":"habi39"},"content":"            pw.close();"},{"lineNumber":305,"author":{"gitId":"habi39"},"content":"            sc.close();"},{"lineNumber":306,"author":{"gitId":"habi39"},"content":"            System.out.println(\"____________________________________________________________\\n\""},{"lineNumber":307,"author":{"gitId":"habi39"},"content":"                    + \"Bye. Hope to see you again soon!\""},{"lineNumber":308,"author":{"gitId":"habi39"},"content":"                    + \"\\n____________________________________________________________\");"},{"lineNumber":309,"author":{"gitId":"habi39"},"content":"        }*/"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"habi39":307,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"public class DukeException extends Exception{"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"     *"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"     */"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":""},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":""},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":11}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":""},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"public class Events extends Task {"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    protected LocalDate duration;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    public Events(String description, String duration) {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        this.duration \u003d LocalDate.parse(duration);"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        return this.duration;"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + duration.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":21}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"public class ExitCommand extends Command{"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"    public ExitCommand(String command, String task, String date) {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated constructor stub"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        ui.exitCommandString();"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        return true;"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":20}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class ListCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public ListCommand(String command, String task, String date) {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated constructor stub"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    void execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"            ui.list(storage.read(),this.date);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":""},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":22}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        String[] lineSplit \u003d command.split(\" \", 2);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        if (lineSplit[0].equals(\"bye\")) {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"            Command exit \u003d new ExitCommand(\"\", \"\", \"\");"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"            return exit;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"            //exitcommand"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        } else if (lineSplit[0].equals(\"list\")) {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"            int length \u003d lineSplit.length;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"            if (length \u003e 1) {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"                Command list \u003d new ListCommand(\"list\", \"\", lineSplit[1]);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"                return list;"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            } else {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"                Command list \u003d new ListCommand(\"list\", \"\", \"\");"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"                return list;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        } else if (lineSplit[0].equals(\"done\")) {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"            Command done \u003d new DoneCommand(\"done\", Integer.toString(index), \"\");"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"            return done;"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        } else if (lineSplit[0].equals(\"delete\")) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"            Command delete \u003d new DeleteCommand(\"delete\", Integer.toString(index), \"\");"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            return delete;"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        } else if (lineSplit[0].equals(\"todo\")) {"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"                String[] item \u003d lineSplit[1].split(\"/\");"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"                Command todo \u003d new AddCommand(\"todo\", item[0], \"\");"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"                return todo;   "},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"               } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"                    throw new DukeException("},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"                            \"\\u00a9 OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"            } else if (lineSplit[0].equals(\"deadline\")) {"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"                    String[] item \u003d lineSplit[1].split(\"/by \");"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"                    Command deadline \u003d new AddCommand(\"deadline\", item[0], item[1]);"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"                    return deadline;"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"                    throw new DukeException("},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"                            \"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"            } else if (lineSplit[0].equals(\"event\")) {"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"                    String[] item \u003d lineSplit[1].split(\"/at \");"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"                    Command deadline \u003d new AddCommand(\"event\", item[0], item[1]);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"                    return deadline;"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"                } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"                    throw new DukeException("},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"                            \"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"        return null;"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":""},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":68}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.io.BufferedReader;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.io.BufferedWriter;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"import java.io.FileReader;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"import java.io.PrintWriter;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"import java.text.DateFormat;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"import java.text.ParseException;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    String filePath;"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    public Storage(String filePath) {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    public void store(String line) throws IOException {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath, true);"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        PrintWriter pw \u003d new PrintWriter(bw);"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        pw.println(line);"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        pw.close();"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":""},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    public Scanner read() throws FileNotFoundException {"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"        Scanner fileScanner \u003d new Scanner(new File(this.filePath));"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        return fileScanner;"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":""},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    public void rewrite(TaskList taskList) throws IOException {"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"        FileWriter tfw \u003d new FileWriter(this.filePath);"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        BufferedWriter tbw \u003d new BufferedWriter(tfw);"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"        PrintWriter tpw \u003d new PrintWriter(tbw);"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"            Task writeTask \u003d taskList.get(i-1);"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"            tpw.println(i + \".\" + writeTask.toString());"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"        tpw.close();"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":""},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"    public List\u003cTask\u003e load() throws IOException, ParseException , DukeException{"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath, true);"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"        PrintWriter pw \u003d new PrintWriter(bw);"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"        String readLine \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"        while ((readLine \u003d br.readLine()) !\u003d null) {"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"            String[] read \u003d readLine.split(\"]\", 2);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"            String type \u003d read[0].replace(\"[\", \"\");"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"            if (type.contains(\"T\")) {"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new ToDos(data[1]);"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"                    newTask.markAsDone();"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"            } else if (type.contains(\"D\")) {"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(by: \", \"\").replace(\")\", \"\");"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"                    String[] seperateTime \u003d secondData.split(\" \", 2);"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":""},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Deadline(seperateTime[0], dateFormat.format(date));"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"                } catch (ParseException ex) {"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(by: \", \"\").replace(\")\", \"\");"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(secondData);"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":""},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Deadline(data[0], dateFormat.format(date));"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":92,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"habi39"},"content":""},{"lineNumber":94,"author":{"gitId":"habi39"},"content":"            } else if (type.contains(\"E\")) {"},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(at: \", \"\").replace(\")\", \"\");"},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"                    String[] seperateTime \u003d secondData.split(\" \", 2);"},{"lineNumber":100,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Events(seperateTime[0], dateFormat.format(date));"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":105,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":106,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":107,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":108,"author":{"gitId":"habi39"},"content":"                } catch (ParseException ex) {"},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(at: \", \"\").replace(\")\", \"\");"},{"lineNumber":112,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":113,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(secondData);"},{"lineNumber":114,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":115,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Events(data[0], dateFormat.format(date));"},{"lineNumber":116,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":117,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":118,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":119,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":120,"author":{"gitId":"habi39"},"content":""},{"lineNumber":121,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":122,"author":{"gitId":"habi39"},"content":""},{"lineNumber":123,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"habi39"},"content":"        pw.close();"},{"lineNumber":126,"author":{"gitId":"habi39"},"content":"        br.close();"},{"lineNumber":127,"author":{"gitId":"habi39"},"content":"        return taskList;"},{"lineNumber":128,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"habi39"},"content":""},{"lineNumber":130,"author":{"gitId":"habi39"},"content":"\tpublic void delete() {"},{"lineNumber":131,"author":{"gitId":"habi39"},"content":"\t} "},{"lineNumber":132,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":133,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":134,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":134}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":""},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    public String getStatusIcon() {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        return (isDone ? \"\\u2718\" : \" \"); //return tick or X symbols"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":""},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    public void markAsDone() {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d true;"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        return null;"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":""},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        return \"[\"+this.getStatusIcon()+\"] \"+ this.description;"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":""},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":29}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"public class TaskList {"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"    public List\u003cTask\u003e taskList;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public TaskList() {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    int size() {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        return this.taskList.size();"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    void add(Task task) {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        this.taskList.add(task);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    void delete(int index) {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        this.taskList.remove(index);"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":""},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    void done(int index) {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        Task curTask \u003d this.taskList.get(index);"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        curTask.markAsDone();"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":""},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"\tpublic Task get(int i) {"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"\t\treturn this.taskList.get(i);"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":""},{"lineNumber":34,"author":{"gitId":"habi39"},"content":""},{"lineNumber":35,"author":{"gitId":"habi39"},"content":""},{"lineNumber":36,"author":{"gitId":"habi39"},"content":""},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"\t"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":39}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"class ToDos extends Task {"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"    public ToDos(String description)  {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":12}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"    String welcome;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    public Ui() {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"        this.welcome \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    void showWelcome() {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        System.out.println(this.welcome);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":""},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    void showLine() {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    void showLoadingError() {"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        System.out.println(\"ERROR\");"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":""},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    public String readCommand() {"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        String line \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        line \u003d sc.nextLine();"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"        return line;"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":""},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    public void addCommandString(int size, String string) {"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + string + \"\\nNow you have \" + size + \" tasks in the list.\");"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":""},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"    public void showError(String message) {"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"        System.out.println(\"Error\");"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":""},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    public void exitCommandString() {"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"        System.out.println( \"Bye. Hope to see you again soon!\");"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":""},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"    public void addDeleteString(int size, String string) {"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"        System.out.println("},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"                                     \"Noted. I\u0027ve removed this task:\\n  \" + string + \"\\nNow you have \""},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"                                        + size + \" tasks in the list.\""},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"                                );"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":""},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"    public void addDoneString(String string) {"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + string);"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":""},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"    public void list(Scanner scanner) {"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"        System.out.println(\"Here are the tasks in your list\");"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"            System.out.println(scanner.nextLine());"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":""},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":""},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"    public void list(Scanner scanner, String date) {"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"        if (date.equals(\"\")) {"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"            System.out.println(\"Here are the tasks in your list\");"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"            System.out.println(scanner.nextLine());"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"    } else {"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"        LocalDate thisDate \u003d LocalDate.parse(date);"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"        System.out.println("},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"                \"Here are the tasks in your list due on \" + thisDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"            String curTask \u003d scanner.nextLine();"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"            String[] string \u003d curTask.split(\": \");"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"            if (string.length \u003e 1) {"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                String dueDate \u003d string[1].replace(\")\", \"\");"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"                if (dueDate.equals(thisDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))) {"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                    System.out.println(curTask);"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":""},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":"                                "},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":88,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"habi39"},"content":""},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":90}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"delete 5"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"deadline return book /by june 6th"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"event project meeting /at Aug6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"list"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"list"}],"authorContributionMap":{"habi39":12}}]
