[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"habi39"},"content":" *"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":" * This is a general purpose Gradle build."},{"lineNumber":5,"author":{"gitId":"habi39"},"content":" * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.8.1/samples"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":7,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00276.1.0\u0027"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.9\u0027"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"checkstyle {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"repositories{"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":21,"author":{"gitId":"-"},"content":"}"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"javafx {"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    modules \u003d [\u0027javafx.controls\u0027,\u0027javafx.fxml\u0027]"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    version \u003d \u002715.0.1\u0027"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":""},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":""},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"sourceCompatibility \u003d 11"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    String javaFxVersion \u003d \u002715\u0027"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":""},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"sourceSets {"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"    main {"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"        output.resourcesDir \u003d file(\u0027build/classes/java/main/main/java\u0027)"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"    archiveBaseName \u003d \"Launcher\""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"run {"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"    enableAssertions \u003d true"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"jar {"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"    manifest {"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"        attributes("},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"                \u0027Main-Class\u0027: \u0027Launcher\u0027"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"        )"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"-"},"content":"}"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":""},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"mainClassName \u003d \u0027Launcher\u0027"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":""}],"authorContributionMap":{"habi39":53,"-":24}},{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"1.[T][âœ˜] 2103T Homework"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"2.[D][ ] Team Project (by: May 13 2021)"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"3.[E][ ] Team meeting (at: Apr 30 2021)"}],"authorContributionMap":{"habi39":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"### Add Task"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"Users can add Task under 3 different categories."},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"1. ToDos: tasks without any date/time attached to it"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"2. Deadlines: tasks that need to be done before a specific date"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"3. Events: tasks that start at a specific date"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"### List "},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"Users can view their entered task in a list format."},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"### Mark as Done"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"User has the ability to mark task as done within the Task List."},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"### Delete"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"Users can delete their entered task in the list of Task List."},{"lineNumber":22,"author":{"gitId":"habi39"},"content":""},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"### Find"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"Users can find task from the list with certain keywords."},{"lineNumber":25,"author":{"gitId":"habi39"},"content":""},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"### Undo"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"Users undo their latest add command."},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"### `todo` - Adds Todo Task"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"Adds a Todo Task to the Task List."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"`Todo (arguments)`"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":""},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":""},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":""},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"`[T][] (arguments)`"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":""},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"`Now you have 1 tasks in the list`"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":""},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"### `deadline` - Adds Deadline Task"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":""},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"Adds a Deadline Task to the Task List."},{"lineNumber":50,"author":{"gitId":"habi39"},"content":""},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":""},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"`deadline (arguments) /by YYYY-MM-DD`"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":""},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":""},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":""},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"`[D][] (arguments) (by: Month Day Year)`"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":""},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"`Now you have 2 tasks in the list`"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":""},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"### `event` - Adds Event Task"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":""},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"Adds a Event Task to the Task List."},{"lineNumber":66,"author":{"gitId":"habi39"},"content":""},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":""},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"`event (arguments) /at YYYY-MM-DD`"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":""},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":""},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"`Got it. I\u0027ve added this task:`"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":""},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"`[E][] (arguments) (by: Month Day Year)`"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":""},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"`Now you have 3 tasks in the list`"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":""},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"### `list` - Displays Task List"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":""},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"Allows user to view the current Task List."},{"lineNumber":82,"author":{"gitId":"habi39"},"content":""},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":""},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"`list`"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":""},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":""},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"`Here are the tasks in your list:`"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":""},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"`1. [T][] (arguments)`"},{"lineNumber":92,"author":{"gitId":"habi39"},"content":""},{"lineNumber":93,"author":{"gitId":"habi39"},"content":"`2. [D][] (arguments) (by: Month Day Year)`"},{"lineNumber":94,"author":{"gitId":"habi39"},"content":""},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"`3. [E][] (arguments) (by: Month Day Year)`"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":""},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"### `done` - Marks a task as done"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":""},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"Allows user to mark task as done within the Task List."},{"lineNumber":100,"author":{"gitId":"habi39"},"content":""},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":""},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"`done 1`"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":""},{"lineNumber":105,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":106,"author":{"gitId":"habi39"},"content":""},{"lineNumber":107,"author":{"gitId":"habi39"},"content":"`Nice! I\u0027ve marked this task as done:`"},{"lineNumber":108,"author":{"gitId":"habi39"},"content":""},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"`[T][x] (arguments)`"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":""},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"### `delete` - deletes a task"},{"lineNumber":112,"author":{"gitId":"habi39"},"content":""},{"lineNumber":113,"author":{"gitId":"habi39"},"content":"Allows user to remove a task within the Task List."},{"lineNumber":114,"author":{"gitId":"habi39"},"content":""},{"lineNumber":115,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":116,"author":{"gitId":"habi39"},"content":""},{"lineNumber":117,"author":{"gitId":"habi39"},"content":"`delete 1`"},{"lineNumber":118,"author":{"gitId":"habi39"},"content":""},{"lineNumber":119,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":120,"author":{"gitId":"habi39"},"content":""},{"lineNumber":121,"author":{"gitId":"habi39"},"content":"`Noted! I\u0027ve removed this task:`"},{"lineNumber":122,"author":{"gitId":"habi39"},"content":""},{"lineNumber":123,"author":{"gitId":"habi39"},"content":"`[T][x] (arguments)`"},{"lineNumber":124,"author":{"gitId":"habi39"},"content":""},{"lineNumber":125,"author":{"gitId":"habi39"},"content":"`Now you have 2 tasks in the list`"},{"lineNumber":126,"author":{"gitId":"habi39"},"content":""},{"lineNumber":127,"author":{"gitId":"habi39"},"content":"### `find` - find a task with certain keywords"},{"lineNumber":128,"author":{"gitId":"habi39"},"content":""},{"lineNumber":129,"author":{"gitId":"habi39"},"content":"Allows user to find a task within the TaskList with a keyword."},{"lineNumber":130,"author":{"gitId":"habi39"},"content":""},{"lineNumber":131,"author":{"gitId":"habi39"},"content":"Example of usage:"},{"lineNumber":132,"author":{"gitId":"habi39"},"content":""},{"lineNumber":133,"author":{"gitId":"habi39"},"content":"`find (argument)`"},{"lineNumber":134,"author":{"gitId":"habi39"},"content":""},{"lineNumber":135,"author":{"gitId":"habi39"},"content":"Expected outcome:"},{"lineNumber":136,"author":{"gitId":"habi39"},"content":""},{"lineNumber":137,"author":{"gitId":"habi39"},"content":"`Noted! I\u0027ve removed this task:`"},{"lineNumber":138,"author":{"gitId":"habi39"},"content":""},{"lineNumber":139,"author":{"gitId":"habi39"},"content":"`[T][x] (arguments)`"},{"lineNumber":140,"author":{"gitId":"habi39"},"content":""},{"lineNumber":141,"author":{"gitId":"habi39"},"content":"`Now you have 2 tasks in the list`"},{"lineNumber":142,"author":{"gitId":"habi39"},"content":""},{"lineNumber":143,"author":{"gitId":"habi39"},"content":"### `Undo` - Undo an add command"},{"lineNumber":144,"author":{"gitId":"-"},"content":""},{"lineNumber":145,"author":{"gitId":"habi39"},"content":"Allows user to undo their latest add command."},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"habi39"},"content":"`undo`"},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":152,"author":{"gitId":"-"},"content":""},{"lineNumber":153,"author":{"gitId":"habi39"},"content":"`Undo-ed the latest AddCommand`"}],"authorContributionMap":{"habi39":135,"-":18}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"-"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"-"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"-"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"-"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"-"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"-"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"-"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"-"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"-"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"-"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"-"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"-"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"-"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" local"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":28,"author":{"gitId":"-"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e a75fceeb74708da6ac524c08ef526d38e60ee56b"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":33,"author":{"gitId":"-"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":34,"author":{"gitId":"-"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":37,"author":{"gitId":"-"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":40,"author":{"gitId":"-"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":41,"author":{"gitId":"-"},"content":""},{"lineNumber":42,"author":{"gitId":"-"},"content":"@rem Find java.exe"},{"lineNumber":43,"author":{"gitId":"-"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":46,"author":{"gitId":"-"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"if \"%ERRORLESS%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":50,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":51,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":52,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":53,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":":findJavaFromJavaHome"},{"lineNumber":58,"author":{"gitId":"-"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":59,"author":{"gitId":"-"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":64,"author":{"gitId":"-"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":65,"author":{"gitId":"-"},"content":"echo."},{"lineNumber":66,"author":{"gitId":"-"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":67,"author":{"gitId":"-"},"content":"echo location of your Java installation."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"goto fail"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":":execute"},{"lineNumber":72,"author":{"gitId":"-"},"content":"@rem Setup the command line"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"habi39"},"content":""},{"lineNumber":77,"author":{"gitId":"-"},"content":"@rem Execute Gradle"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":":end"},{"lineNumber":81,"author":{"gitId":"-"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"if \"%ERRORLESS%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"-"},"content":":fail"},{"lineNumber":85,"author":{"gitId":"-"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":86,"author":{"gitId":"-"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":87,"author":{"gitId":"-"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":88,"author":{"gitId":"-"},"content":"exit /b 1"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":":mainEnd"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" local"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"-"},"content":":omega"}],"authorContributionMap":{"habi39":10,"-":83}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":" * This file was generated by the Gradle \u0027init\u0027 task."},{"lineNumber":3,"author":{"gitId":"habi39"},"content":" *"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":" * The settings file is used to specify which projects to include in your build."},{"lineNumber":5,"author":{"gitId":"habi39"},"content":" *"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":" * Detailed information about configuring a multi-project build in Gradle can be found"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":" * in the user manual at https://docs.gradle.org/6.8.1/userguide/multi_project_builds.html"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"rootProject.name \u003d \u0027ip\u0027"}],"authorContributionMap":{"habi39":10}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * AddCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command (todo,deadline,event)"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task the description of the task"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date the due date specified by user"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"public class AddCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    public AddCommand(String command, String task, String date) {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        if (this.command.equals(\"todo\")) {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new ToDos(task);"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            return ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"            "},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        } else if ( this.command.equals(\"deadline\")){"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new Deadline(this.task, this.date);"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"            return ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":""},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        } else if (this.command.equals(\"event\")) {"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            Task newTask \u003d new Events(this.task, this.date);"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            taskList.add(newTask);"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"            storage.store(taskList.size() + \".\" + newTask.toString());"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"            return ui.addCommandString(taskList.size(), newTask.toString());"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"            assert false;"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"            return \"error\";"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":""},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":44}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * Command is an abstract class"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   *"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param task the description of the task"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * @param date the due date specified by user"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"  "},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"public abstract class Command {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    String command, task, date;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    public Command(String command, String task, String date) {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        assert (command !\u003d null);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        this.command \u003d command;"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        this.task \u003d task;"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    abstract boolean isExit();"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":22}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * Deadline inherits Task"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * @param description the description of the task"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   * @param by the due date specified by user"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":""},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    protected LocalDate date;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    public Deadline(String description, String date) {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        assert (this.date !\u003d null);"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"        return this.date;"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":""},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":27}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * DeleteCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task the index of task user wants to delete"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date is a null value for DeLete Command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    public DeleteCommand(String command, String task, String date) {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(this.task);"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            Task curTask \u003d taskList.get(index);"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"            taskList.delete(index);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            storage.rewrite(taskList);"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        return ui.addDeleteString(taskList.size(), curTask.toString());"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":""},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":29}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":""},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":""},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"habi39"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":""},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":""},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":""},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":""},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":""},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * DoneCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task the index of task user wants to mark as done"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date is a null value for Done Command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    public DoneCommand(String command, String task, String date) {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException{"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(this.task);"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            Task curTask \u003d taskList.get(index);"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"            curTask.markAsDone();"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            storage.rewrite(taskList);"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        return ui.addDoneString(curTask.toString());"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":""},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        // TODO Auto-generated method stub"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":30}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":""},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":""},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"   * Duke is the main class of the app"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"   * The main method runs the method run()"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"   * Which initiates the user for an input"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"   * This input would then be processed by parse to give a command"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"   * This command would then be executed"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    private Ui ui;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    public ArrayList\u003cCommand\u003e array;"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":""},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    public Duke() {"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        storage \u003d new Storage(\"data.txt\");"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"        array \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        } catch (DukeException e) {"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            ui.showLoadingError();"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"    public void run() {"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"        ui.showWelcome();"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"        boolean isExit \u003d false;"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        while (!isExit) {"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"                Command c \u003d Parser.parse(fullCommand, array);"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"            } catch (DukeException | NullPointerException e) {"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"            } finally {"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"                ui.showLine();"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":""},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"        ui.showLine(); // show the divider line (\"_______\")"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"        Command c \u003d Parser.parse(input, array);"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"        assert c !\u003d null;"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"        return c.execute(tasks, ui, storage);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":""},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"    public void welcomeResponse() {"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"        ui.showWelcome();"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"habi39":58,"-":2}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"    private static final long serialVersionUID \u003d 50572093442410692L;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"    public DukeException(String message) {"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        super(message);"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":9}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * Events inherits Task"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param description the description of the task"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * @param duration the due date specified by user"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"public class Events extends Task {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    protected LocalDate duration;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    public Events(String description, String duration) {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        this.duration \u003d LocalDate.parse(duration);"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        assert (this.duration !\u003d null);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        return this.duration;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":""},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + duration.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":""},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    //this is an example of a functional interface"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    //to execute this,"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    //a lamda expression would then be called using"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    //MultiMethodInterface method \u003d parameter -\u003e parameter + \"from lamda\""},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"    //String result \u003d Events.add(\"message\", method);"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    public String add(String arg, MultiMethodInterface method) {"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        return method.method(arg);"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":35}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * ExitCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task is null for Exit Command"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date is null for Exit Command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"public class ExitCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    public ExitCommand(String command, String task, String date) {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        return ui.exitCommandString();"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":""},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"        return true;"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":23}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"  /**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * FindCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task the index of task user wants to mark as done"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date is a null value for Done Command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"public class FindCommand extends Command{"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    public FindCommand(String command, String task, String date) {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        return ui.findTaskString(this.task, storage.read());"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":""},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    "},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":23}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"        // Replace \"Main\" with the name of the class that extends Application"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"        // See https://stackoverflow.com/a/52654791/3956070 for explanation"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":9}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * ListCommand inherits Command"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param command the main action of the command (todo,deadline,event)"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param task is null for List Command"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param date is an optional input"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * If users specify date behind the list,"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   * the output users would receive would be task that are due on tha specified date"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":""},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    public ListCommand(String command, String task, String date) {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":""},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        return ui.list(storage.read(), this.date);"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":24}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":""},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":""},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":""},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    public void initialize() {"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":""},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"        duke \u003d d;"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":""},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    private void handleUserInput() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"        );"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"        userInput.clear();"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":""},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":50}},{"path":"src/main/java/MultiMethodInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"@FunctionalInterface"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"interface MultiMethodInterface {"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"    String method(String string);"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":4}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * Parser only has one method parse"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   *"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * This method processes the users input and"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   * outputs commands to be executed later on"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":""},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    public static Command parse(String command, ArrayList\u003cCommand\u003e pastCommands) throws DukeException {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        String[] lineSplit \u003d command.split(\" \", 2);"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        switch (lineSplit[0]) {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        case (\"bye\"):"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"            Command exit \u003d new ExitCommand(\"\", \"\", \"\");"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            return exit;"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"            //exitcommand"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        case (\"list\"):"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"            int length \u003d lineSplit.length;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"            if (length \u003e 1) {"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"                Command list \u003d new ListCommand(\"list\", \"\", lineSplit[1]);"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"                return list;"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"            } else {"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"                assert length \u003d\u003d 1;"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"                Command list \u003d new ListCommand(\"list\", \"\", \"\");"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"                return list;"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        case (\"done\"):"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            int index \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            Command done \u003d new DoneCommand(\"done\", Integer.toString(index), \"\");"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"            return done;"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"        case (\"delete\"):"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"            int index2 \u003d Integer.valueOf(lineSplit[1]) - 1;"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"            Command delete \u003d new DeleteCommand(\"delete\", Integer.toString(index2), \"\");"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"            return delete;"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        case (\"find\"):"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"            Command find \u003d new FindCommand(\"find\", lineSplit[1], \"\");"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"            return find;"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"        case (\"todo\"):"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"                String[] item \u003d lineSplit[1].split(\"/\");"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"                Command todo \u003d new AddCommand(\"todo\", item[0], \"\");"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"                return todo;"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"                throw new DukeException("},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"                        \"\\u00a9 OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"        case (\"deadline\"):"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"                String[] item \u003d lineSplit[1].split(\"/by \");"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"                Command deadline \u003d new AddCommand(\"deadline\", item[0], item[1]);"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"                return deadline;"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"                throw new DukeException("},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"                         \"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"        case (\"event\"):"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"            try {"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"                String[] item \u003d lineSplit[1].split(\"/at \");"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"                Command deadline \u003d new AddCommand(\"event\", item[0], item[1]);"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"                return deadline;"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"            } catch (ArrayIndexOutOfBoundsException ex) {"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"                throw new DukeException("},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"                        \"\\u00a9 OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"        case (\"undo\"):"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":""},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"            Command undo \u003d new UndoCommand(\"undo\", \"\", \"\", pastCommands);"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"            return undo;"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"        default:"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"            return null;"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"}"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":""},{"lineNumber":76,"author":{"gitId":"habi39"},"content":""},{"lineNumber":77,"author":{"gitId":"habi39"},"content":""},{"lineNumber":78,"author":{"gitId":"habi39"},"content":""}],"authorContributionMap":{"habi39":78}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.io.BufferedWriter;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"import java.io.PrintWriter;"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"import java.text.DateFormat;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"import java.text.ParseException;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"   * Storage is the class that assist the application in reading and writing from an"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"   * external file"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"   * "},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    String filePath;"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":""},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":""},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    public void store(String line) throws DukeException {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        try{"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath, true);"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"            PrintWriter pw \u003d new PrintWriter(bw);"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"            pw.println(line);"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"            pw.close();"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"            throw new DukeException(\"Error storing file\");"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":""},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    public Scanner read() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"            Scanner fileScanner \u003d new Scanner(new File(this.filePath));"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"            return fileScanner;"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":"            throw new DukeException(\"Error scanning file\");"},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":""},{"lineNumber":47,"author":{"gitId":"habi39"},"content":"    public void rewrite(TaskList taskList) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"        FileWriter tfw;"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"            tfw \u003d new FileWriter(this.filePath);"},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"            BufferedWriter tbw \u003d new BufferedWriter(tfw);"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":"            PrintWriter tpw \u003d new PrintWriter(tbw);"},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"                Task writeTask \u003d taskList.get(i-1);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"                tpw.println(i + \".\" + writeTask.toString());"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"            tpw.close();"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"        } catch (IOException e) {"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"            throw new DukeException(\"Error editing file\");"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":""},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath, true);"},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"        PrintWriter pw \u003d new PrintWriter(bw);"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(filePath));"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"        String readLine \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"        while ((readLine \u003d br.readLine()) !\u003d null) {"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"            String[] read \u003d readLine.split(\"]\", 2);"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"            String type \u003d read[0].replace(\"[\", \"\");"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"            if (type.contains(\"T\")) {"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"                String sequence \u003d read[1];"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"                String[] data \u003d sequence.split(\"] \");"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"                Task newTask \u003d new ToDos(data[1]);"},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"                    newTask.markAsDone();"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                taskList.add(newTask);"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"            } else if (type.contains(\"D\")) {"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(by: \", \"/\").replace(\")\", \"/\");"},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"                    String[] seperateTime \u003d secondData.split(\"/\");"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":""},{"lineNumber":92,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Deadline(seperateTime[0], dateFormat.format(date));"},{"lineNumber":93,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":94,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"                } catch (ParseException ex) {"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":100,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(by: \", \"\").replace(\")\", \"\");"},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(secondData);"},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":""},{"lineNumber":105,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Deadline(data[0], dateFormat.format(date));"},{"lineNumber":106,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":107,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":108,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"            } else if (type.contains(\"E\")) {"},{"lineNumber":112,"author":{"gitId":"habi39"},"content":"                try {"},{"lineNumber":113,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":114,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":115,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(at: \", \"/\").replace(\")\", \"/\");"},{"lineNumber":116,"author":{"gitId":"habi39"},"content":"                    String[] seperateTime \u003d secondData.split(\"/\");"},{"lineNumber":117,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":118,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(seperateTime[1]);"},{"lineNumber":119,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":120,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Events(seperateTime[0], dateFormat.format(date));"},{"lineNumber":121,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":122,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":123,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":124,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":125,"author":{"gitId":"habi39"},"content":"                } catch (ParseException ex) {"},{"lineNumber":126,"author":{"gitId":"habi39"},"content":"                    String sequence \u003d read[1];"},{"lineNumber":127,"author":{"gitId":"habi39"},"content":"                    String[] data \u003d sequence.split(\"] \");"},{"lineNumber":128,"author":{"gitId":"habi39"},"content":"                    String secondData \u003d data[1].replace(\"(at: \", \"\").replace(\")\", \"\");"},{"lineNumber":129,"author":{"gitId":"habi39"},"content":"                    SimpleDateFormat formatter \u003d new SimpleDateFormat(\"MMM d yyyy\", Locale.ENGLISH);"},{"lineNumber":130,"author":{"gitId":"habi39"},"content":"                    Date date \u003d formatter.parse(secondData);"},{"lineNumber":131,"author":{"gitId":"habi39"},"content":"                    DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"},{"lineNumber":132,"author":{"gitId":"habi39"},"content":"                    Task newTask \u003d new Events(data[0], dateFormat.format(date));"},{"lineNumber":133,"author":{"gitId":"habi39"},"content":"                    if (sequence.contains(\"\\u2718\")) {"},{"lineNumber":134,"author":{"gitId":"habi39"},"content":"                        newTask.markAsDone();"},{"lineNumber":135,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":136,"author":{"gitId":"habi39"},"content":"                    taskList.add(newTask);"},{"lineNumber":137,"author":{"gitId":"habi39"},"content":""},{"lineNumber":138,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":139,"author":{"gitId":"habi39"},"content":""},{"lineNumber":140,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"habi39"},"content":"        pw.close();"},{"lineNumber":143,"author":{"gitId":"habi39"},"content":"        br.close();"},{"lineNumber":144,"author":{"gitId":"habi39"},"content":"        return taskList;"},{"lineNumber":145,"author":{"gitId":"habi39"},"content":"        }catch(IOException | ParseException e){"},{"lineNumber":146,"author":{"gitId":"habi39"},"content":"            throw new DukeException(\"Error Loading File\");"},{"lineNumber":147,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":149,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":150}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * Task is a generic type to categories the users input"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * @param description the description of the task"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * @param isDone specifies if the task should be marked as done"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    public String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        return (isDone ? \"\\u2718\" : \" \"); //return X symbols if done"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    public void markAsDone() {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        this.isDone \u003d true;"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":""},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    LocalDate getTime(){"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        return null;"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":""},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        return \"[\"+this.getStatusIcon()+\"] \"+ this.description;"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":""},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":34}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   * TaskList initiates an internal list within the programme"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"   * "},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * This is done so that we can easily manipulate the list of task"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   * that the user would input,mark as done and delete"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":""},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    public List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e(100);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":""},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":""},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"    int size() {"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        return this.taskList.size();"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":""},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    void add(Task task) {"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        this.taskList.add(task);"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":""},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    void delete(int index) {"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        this.taskList.remove(index);"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":""},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    void done(int index) {"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"        Task curTask \u003d this.taskList.get(index);"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"        curTask.markAsDone();"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":""},{"lineNumber":39,"author":{"gitId":"habi39"},"content":"\tpublic Task get(int i) {"},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"\t\treturn this.taskList.get(i);"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":42}},{"path":"src/main/java/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"   * ToDos inherits Task"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"   * @param description the description of the task"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":""},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"@SuppressWarnings(\"checkstyle:JavadocType\")"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"class ToDos extends Task {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    @SuppressWarnings({\"checkstyle:WhitespaceAround\", \"checkstyle:SingleSpaceSeparator\"})"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    public ToDos(String description) {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":18}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.*;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"   * Ui provides all outputs that the user would face in different situations"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"   * "},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"   */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"  "},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"    String welcome;"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":""},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    public Ui() {"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        this.welcome \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\\n\";"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":""},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    String showWelcome() {"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"        return (this.welcome);"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":""},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    String showLine() {"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        return (\"____________________________________________________________\");"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":""},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    String showLoadingError() {"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"        return (\"\\u00a9 OOPS!!! Error loading file :-(\");"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":""},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"    public String readCommand() {"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"        String line \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"        line \u003d sc.nextLine();"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        return line;"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":""},{"lineNumber":36,"author":{"gitId":"habi39"},"content":"    public String addCommandString(int size, String string) {"},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"        return (\"Got it. I\u0027ve added this task:\\n  \" + string + \"\\nNow you have \" + size + \" tasks in the list.\");"},{"lineNumber":38,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"habi39"},"content":""},{"lineNumber":40,"author":{"gitId":"habi39"},"content":"    public String showError(String message) {"},{"lineNumber":41,"author":{"gitId":"habi39"},"content":"        return (\"\\u00a9 OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":42,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"habi39"},"content":""},{"lineNumber":44,"author":{"gitId":"habi39"},"content":"    public String exitCommandString() {"},{"lineNumber":45,"author":{"gitId":"habi39"},"content":"        return ( \"Bye. Hope to see you again soon!\");"},{"lineNumber":46,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":47,"author":{"gitId":"habi39"},"content":""},{"lineNumber":48,"author":{"gitId":"habi39"},"content":"    public String addDeleteString(int size, String string) {"},{"lineNumber":49,"author":{"gitId":"habi39"},"content":"        return (\"Noted. I\u0027ve removed this task:\\n  \" + string + \"\\nNow you have \" + size + \" tasks in the list.\");"},{"lineNumber":50,"author":{"gitId":"habi39"},"content":"        "},{"lineNumber":51,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":52,"author":{"gitId":"habi39"},"content":""},{"lineNumber":53,"author":{"gitId":"habi39"},"content":"    public String addDoneString(String string) {"},{"lineNumber":54,"author":{"gitId":"habi39"},"content":"        return(\"Nice! I\u0027ve marked this task as done:\\n\" + string);"},{"lineNumber":55,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":56,"author":{"gitId":"habi39"},"content":""},{"lineNumber":57,"author":{"gitId":"habi39"},"content":"    public String list(Scanner scanner) {"},{"lineNumber":58,"author":{"gitId":"habi39"},"content":"        String value;"},{"lineNumber":59,"author":{"gitId":"habi39"},"content":"        value \u003d (\"Here are the tasks in your list\\n\");"},{"lineNumber":60,"author":{"gitId":"habi39"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":61,"author":{"gitId":"habi39"},"content":"            value +\u003d scanner.nextLine();"},{"lineNumber":62,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"habi39"},"content":"        return value;"},{"lineNumber":64,"author":{"gitId":"habi39"},"content":""},{"lineNumber":65,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"habi39"},"content":""},{"lineNumber":67,"author":{"gitId":"habi39"},"content":"    public String list(Scanner scanner, String date) {"},{"lineNumber":68,"author":{"gitId":"habi39"},"content":"        String value;"},{"lineNumber":69,"author":{"gitId":"habi39"},"content":"        if (date.equals(\"\")) {"},{"lineNumber":70,"author":{"gitId":"habi39"},"content":"            value \u003d (\"Here are the tasks in your list\\n\");"},{"lineNumber":71,"author":{"gitId":"habi39"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":72,"author":{"gitId":"habi39"},"content":"                value +\u003d (scanner.nextLine()) + \"\\n\";"},{"lineNumber":73,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"habi39"},"content":"            return value;"},{"lineNumber":75,"author":{"gitId":"habi39"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"habi39"},"content":"            LocalDate thisDate \u003d LocalDate.parse(date);"},{"lineNumber":77,"author":{"gitId":"habi39"},"content":"            value \u003d (\"Here are the tasks in your list due on \""},{"lineNumber":78,"author":{"gitId":"habi39"},"content":"                    + thisDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \"\\n\");"},{"lineNumber":79,"author":{"gitId":"habi39"},"content":"            while (scanner.hasNext()) {"},{"lineNumber":80,"author":{"gitId":"habi39"},"content":"                String curTask \u003d scanner.nextLine();"},{"lineNumber":81,"author":{"gitId":"habi39"},"content":"                String[] string \u003d curTask.split(\": \");"},{"lineNumber":82,"author":{"gitId":"habi39"},"content":"                if (string.length \u003e 1) {"},{"lineNumber":83,"author":{"gitId":"habi39"},"content":"                    String dueDate \u003d string[1].replace(\")\", \"\");"},{"lineNumber":84,"author":{"gitId":"habi39"},"content":"                    if (dueDate.equals(thisDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")))) {"},{"lineNumber":85,"author":{"gitId":"habi39"},"content":"                        value +\u003d (curTask) + \"\\n\";"},{"lineNumber":86,"author":{"gitId":"habi39"},"content":"                    }"},{"lineNumber":87,"author":{"gitId":"habi39"},"content":"                }"},{"lineNumber":88,"author":{"gitId":"habi39"},"content":""},{"lineNumber":89,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"habi39"},"content":"            return value;"},{"lineNumber":91,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"habi39"},"content":""},{"lineNumber":94,"author":{"gitId":"habi39"},"content":"    String findTaskString(String task, Scanner scanner) {"},{"lineNumber":95,"author":{"gitId":"habi39"},"content":"        String value;"},{"lineNumber":96,"author":{"gitId":"habi39"},"content":"        value \u003d (\"Here are the tasks in your list:\\n\");"},{"lineNumber":97,"author":{"gitId":"habi39"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":98,"author":{"gitId":"habi39"},"content":"            String curTask \u003d scanner.nextLine();"},{"lineNumber":99,"author":{"gitId":"habi39"},"content":"            if (curTask.contains(task)) {"},{"lineNumber":100,"author":{"gitId":"habi39"},"content":"               value +\u003d (curTask) + \"\\n\";"},{"lineNumber":101,"author":{"gitId":"habi39"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"habi39"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"habi39"},"content":"        return value;"},{"lineNumber":104,"author":{"gitId":"habi39"},"content":"\t}"},{"lineNumber":105,"author":{"gitId":"habi39"},"content":""},{"lineNumber":106,"author":{"gitId":"habi39"},"content":"    public String addUndoString() {"},{"lineNumber":107,"author":{"gitId":"habi39"},"content":"        String value;"},{"lineNumber":108,"author":{"gitId":"habi39"},"content":"        value \u003d (\"Undo-ed the latest AddCommand\");"},{"lineNumber":109,"author":{"gitId":"habi39"},"content":"        return value;"},{"lineNumber":110,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":111}},{"path":"src/main/java/UndoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":" * UndoCommand inherits Command"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":" * @param command the main action of the command"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":" * @param task is a null value for Undo Command"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":" * @param date is a null value for Undo Command"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":" */"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":""},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"public class UndoCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":""},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    private final ArrayList\u003cCommand\u003e pastcommands;"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    public UndoCommand(String command, String task, String date, ArrayList\u003cCommand\u003e pastCommands) {"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"        super(command, task, date);"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        this.pastcommands \u003d pastCommands;"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":""},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"        int index \u003d taskList.size();"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        taskList.delete(index - 1 );"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        storage.rewrite(taskList);"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"        return ui.addUndoString();"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":""},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"    boolean isExit() {"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"        return false;"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":""},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":32}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":""},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"habi39":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":""},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"habi39":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":""},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":""},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":""},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"    public void AddCommandTest() {"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"        Command c \u003d new AddCommand(\"todo\",\"Homework\",\"\");"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"        assertEquals(false, c.isExit());"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"habi39"},"content":""},{"lineNumber":14,"author":{"gitId":"habi39"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"habi39"},"content":"    public void ExitCommandTest() {"},{"lineNumber":16,"author":{"gitId":"habi39"},"content":"        Command c \u003d new ExitCommand(\"\",\"\",\"\");"},{"lineNumber":17,"author":{"gitId":"habi39"},"content":"        assertEquals(true, c.isExit());"},{"lineNumber":18,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"habi39"},"content":""},{"lineNumber":20,"author":{"gitId":"habi39"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"habi39"},"content":"    public void EventTest(){"},{"lineNumber":22,"author":{"gitId":"habi39"},"content":"        Task task \u003d new Events(\"Lab Due Date\", \"2021-02-02\");"},{"lineNumber":23,"author":{"gitId":"habi39"},"content":"        assertEquals(LocalDate.parse(\"2021-02-02\"), task.getTime());"},{"lineNumber":24,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"habi39"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"habi39"},"content":"    public void DeadlineTest(){"},{"lineNumber":27,"author":{"gitId":"habi39"},"content":"        Task task \u003d new Deadline(\"Lab Due Date\", \"2021-02-02\");"},{"lineNumber":28,"author":{"gitId":"habi39"},"content":"        assertEquals(LocalDate.parse(\"2021-02-02\"), task.getTime());"},{"lineNumber":29,"author":{"gitId":"habi39"},"content":"        assertEquals(\"[D][ ] Lab Due Date(by: Feb 2 2021)\", task.toString());"},{"lineNumber":30,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"habi39"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"habi39"},"content":"    public void TodoTest(){"},{"lineNumber":33,"author":{"gitId":"habi39"},"content":"        Task task \u003d new ToDos(\"Assignment\");"},{"lineNumber":34,"author":{"gitId":"habi39"},"content":"        assertEquals(\"[T][ ] Assignment\", task.toString());"},{"lineNumber":35,"author":{"gitId":"habi39"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"habi39"},"content":""},{"lineNumber":37,"author":{"gitId":"habi39"},"content":"}"}],"authorContributionMap":{"habi39":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"habi39"},"content":"delete 5"},{"lineNumber":2,"author":{"gitId":"habi39"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"habi39"},"content":"deadline return book /by june 6th"},{"lineNumber":4,"author":{"gitId":"habi39"},"content":"event project meeting /at Aug6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"habi39"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"habi39"},"content":"todo borrow book"},{"lineNumber":7,"author":{"gitId":"habi39"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"habi39"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"habi39"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"habi39"},"content":"list"},{"lineNumber":11,"author":{"gitId":"habi39"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"habi39"},"content":"list"}],"authorContributionMap":{"habi39":12}}]
