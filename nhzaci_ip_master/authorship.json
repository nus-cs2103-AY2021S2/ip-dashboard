[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"nhzaci":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    enableAssertions \u003d true"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":2,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"T|0|hello world"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"E|1|say hello|12/02/2020 1800"}],"authorContributionMap":{"nhzaci":2}},{"path":"src/main/java/.compile.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"echo \"compiling controllers...\""},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"javac duke.controllers/*.java"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"echo \"compiling models...\""},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"javac duke.models/*.java"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"echo \"compiling exceptions...\""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"javac duke.exceptions/*.java"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"echo \"compiling views...\""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"javac duke.views/*.java"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"echo \"compiling Duke...\""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"javac duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"echo \"done!\""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""}],"authorContributionMap":{"nhzaci":12}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import duke.controllers.Ui;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import duke.models.Storage;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    /** Constant to store the database path for duke.Duke\u0027s commands */"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    /** Constant storing database directory path */"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_DIRECTORY_PATH \u003d \"data/\";"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    /** Storage object to be passed to AppController for reading / writing to db */"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    private final Storage storage;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    public Duke(String filePath, String directoryPath) {"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"        this.storage \u003d new Storage(filePath, directoryPath);"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"     * Main method to run duke.Duke"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * @param args"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"        // creating new duke.Duke run"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        new Duke(DATABASE_FILE_PATH, DATABASE_DIRECTORY_PATH).run();"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * Runs duke"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"    public void run() {"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        // Create new UI class"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        Ui appController \u003d new Ui(this.storage);"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        // start app logic"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        appController.start();"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":31,"-":6}},{"path":"src/main/java/duke/controllers/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankDetailsException;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeDateTimeParseException;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"import duke.models.Deadline;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"import duke.models.Event;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"import duke.views.TodosView;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"public class TaskList {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** todosList contains the state of the todos */"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    private final List\u003cOptional\u003c? extends Todo\u003e\u003e todos;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /** TodosView initialised to render view of Todos */"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    private final TodosView todosView \u003d new TodosView();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * Constructor of TodosController without any arguments initialises a new TodosView and an empty"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * list of Optional Todo objects"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    public TaskList() {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        this.todos \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     * Constructor of TodosController which takes in an existing List of Optional Todos"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * @param todosList is an existing List of Optional Todos"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    public TaskList(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        this.todos \u003d todosList;"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * Passes list of todos in the TodosController to TodosView to render the view of the list of"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * Todos"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    public void listTodos() {"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        this.todosView.listTodos(this.todos);"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"     * Getter for todosList attr in TodosController"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"     * @return List of Optionals of anything extending Todo contained in TodosController"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    public List\u003cOptional\u003c? extends Todo\u003e\u003e getTodos() {"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        return this.todos;"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"     * Takes in a list of keywords and prints todos with messages that contains any of the keywords"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"     * passed in"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"     * @param keywordList String list of keywords to be matched"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"    public void findByKeyword(List\u003cString\u003e keywordList) {"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"        todosView.matchListTodos(this.todos.stream().filter(optTodo -\u003e {"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"            // check if todo message contains keyword"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"            return optTodo.map(Todo::getMessage).map(message -\u003e {"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                // split message by space as delimiter"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                List\u003cString\u003e messagesSplitByWhitespace \u003d Arrays.asList(message.split(\" \"));"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"                // if any part of split message is contained in keywordList, return true"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"                return messagesSplitByWhitespace.stream().anyMatch(keywordList::contains);"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"            }).orElse(false);"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"        }).collect(Collectors.toList()));"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":79,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"     * Adds a new Todo to the todosList and returns new TodosController containing that list"},{"lineNumber":81,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"     * @param newTodoList contains the new Todo that must not be an empty array"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @return TodosController with todosList containing the new Todo added"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException when user types in \u0027todo\u0027 but has nothing afterwards"},{"lineNumber":85,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"    public TaskList addTodo(List\u003cString\u003e newTodoList) throws DukeBlankTaskException {"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"        if (newTodoList.size() \u003d\u003d 0) {"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Todo you are trying to add cannot be blank!\");"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e newTodoObject \u003d"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"                Optional.of(new Todo(String.join(\" \", newTodoList)));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"            this.todosView.added(newTodoObject, this.todos.size() + 1);"},{"lineNumber":94,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":95,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":96,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        return new TaskList(Stream.concat(this.todos.stream(), Stream.of(newTodoObject))"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":99,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":""},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"     * Deletes a todo from the list of the todos controller"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"     * @param deleteTodoArgs is a list of size 1, containing the index of the todo to delete"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"     * @return TodosController with the todo with index passed in deleted from the list"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException when user specifies the delete command without providing an"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"     *         index of the todo to delete"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException when user specifies an index that is out of the"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"     *         range of the list size of todos in the controller"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"    public TaskList deleteTodo(List\u003cString\u003e deleteTodoArgs)"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeTaskIndexOutOfRangeException {"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        // check if args is empty"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        if (deleteTodoArgs.size() \u003d\u003d 0) {"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException("},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                    \"Please input an index for the Todo you want to delete!\");"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"        // get index of todo to delete"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"        int idxDelete \u003d Integer.parseInt(deleteTodoArgs.get(0)) - 1;"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"        if (idxDelete \u003e\u003d this.todos.size()) {"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"The index you input has an index that \""},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                            + \"is beyond the range of the number of tasks you \""},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"                            + \"currently have. Please try again.\");"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"        // render deleted view"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"        todosView.deleted(this.todos.get(idxDelete), this.todos.size() - 1);"},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"        // remove from stream"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"        return new TaskList("},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, this.todos.size()).filter(idx -\u003e idx !\u003d idxDelete)"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":"                        .mapToObj(this.todos::get).collect(Collectors.toList()));"},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"     * Takes in the list containing details about the new deadline and returns a new TodosController"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"     * with the new Deadline added"},{"lineNumber":139,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"     * @param newDeadlineList takes in list of arguments provided to the command for processing into"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"     *        a Deadline object"},{"lineNumber":142,"author":{"gitId":"-"},"content":"     * @return new TodosController with the new Deadline object added into it"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException Exception is thrown when user does not add in any details"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"     *         after typing the \u0027deadline\u0027 command"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to define an deadline,"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"     *         without adding /by details for the even"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeDateTimeParseException Exception is thrown when date time passed into CLI is of"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"     *         the wrong format"},{"lineNumber":149,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"    public TaskList addDeadline(List\u003cString\u003e newDeadlineList)"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeBlankDetailsException, DukeDateTimeParseException {"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"        if (newDeadlineList.size() \u003d\u003d 0) {"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Deadline you are trying to add cannot be blank!\");"},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e deadlines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":158,"author":{"gitId":"-"},"content":""},{"lineNumber":159,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":161,"author":{"gitId":"-"},"content":"        newDeadlineList.stream().forEach(substring -\u003e {"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            if (substring.contains(\"/\")) {"},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":"                deadlines.add(substring);"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"            } else if (deadlines.size() \u003d\u003d 0) {"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"                messages.add(substring);"},{"lineNumber":166,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":"                deadlines.add(substring);"},{"lineNumber":168,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":169,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":"        if (messages.size() \u003d\u003d 0) {"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Deadline\");"},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"        // if no deadline input or /by without any deadline, throw exception"},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":"        if (deadlines.size() \u003c\u003d 1) {"},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":179,"author":{"gitId":"nhzaci"},"content":"            String exceptionMessage \u003d \"Please add a /by followed by the deadline time and date in DD/MM/YYYY \""},{"lineNumber":180,"author":{"gitId":"nhzaci"},"content":"                    + \"HHMM to specify a time and date for the Deadline task. If there is no time for \""},{"lineNumber":181,"author":{"gitId":"nhzaci"},"content":"                    + \"this deadline perhaps consider creating a todo instead.\";"},{"lineNumber":182,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException(exceptionMessage);"},{"lineNumber":183,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":185,"author":{"gitId":"nhzaci"},"content":"        // Create new Deadline object, slicing deadline array from index 1 since we"},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/by\u0027 which shouldn\u0027t be in the actual Deadline object"},{"lineNumber":187,"author":{"gitId":"nhzaci"},"content":"        // creating a new deadline might throw an exception if the date time is in the"},{"lineNumber":188,"author":{"gitId":"nhzaci"},"content":"        // wrong format"},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":"        Optional\u003cDeadline\u003e newDeadline;"},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":"            newDeadline \u003d Optional.of(new Deadline(String.join(\" \", messages),"},{"lineNumber":192,"author":{"gitId":"nhzaci"},"content":"                    String.join(\" \", deadlines.subList(1, deadlines.size()))));"},{"lineNumber":193,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":194,"author":{"gitId":"nhzaci"},"content":"            throw new DukeDateTimeParseException("},{"lineNumber":195,"author":{"gitId":"nhzaci"},"content":"                    \"Please format your date after /by to be DD/MM/YYYY HHMM\");"},{"lineNumber":196,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":198,"author":{"gitId":"nhzaci"},"content":"        // render added view"},{"lineNumber":199,"author":{"gitId":"nhzaci"},"content":"        this.todosView.added(newDeadline, this.todos.size() + 1);"},{"lineNumber":200,"author":{"gitId":"-"},"content":""},{"lineNumber":201,"author":{"gitId":"-"},"content":"        // return new controller"},{"lineNumber":202,"author":{"gitId":"nhzaci"},"content":"        return new TaskList(Stream.concat(this.todos.stream(), Stream.of(newDeadline))"},{"lineNumber":203,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":204,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"-"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":"     * Takes in the list containing details about the new deadline and returns a new TodosController"},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":"     * with the new Event added"},{"lineNumber":209,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":210,"author":{"gitId":"nhzaci"},"content":"     * @param newEventList takes in list of arguments provided to the command for processing into a"},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":"     *        Event object"},{"lineNumber":212,"author":{"gitId":"-"},"content":"     * @return new TodosController with the new Event object added into it"},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException Exception is thrown when user does not add in any details"},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"     *         after typing the \u0027event\u0027 command"},{"lineNumber":215,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to define an event,"},{"lineNumber":216,"author":{"gitId":"nhzaci"},"content":"     *         without adding /at details for the event"},{"lineNumber":217,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeDateTimeParseException Exception is thrown when date time passed into CLI is of"},{"lineNumber":218,"author":{"gitId":"nhzaci"},"content":"     *         the wrong format"},{"lineNumber":219,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"nhzaci"},"content":"    public TaskList addEvent(List\u003cString\u003e newEventList)"},{"lineNumber":221,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankDetailsException, DukeBlankTaskException, DukeDateTimeParseException {"},{"lineNumber":222,"author":{"gitId":"nhzaci"},"content":"        // if list is empty, throw error"},{"lineNumber":223,"author":{"gitId":"nhzaci"},"content":"        if (newEventList.size() \u003d\u003d 0) {"},{"lineNumber":224,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Event you are trying to add cannot be blank!\");"},{"lineNumber":225,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":227,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e messages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":228,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e eventTimes \u003d new ArrayList\u003c\u003e();"},{"lineNumber":229,"author":{"gitId":"-"},"content":""},{"lineNumber":230,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":231,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":232,"author":{"gitId":"nhzaci"},"content":"        newEventList.forEach(substring -\u003e {"},{"lineNumber":233,"author":{"gitId":"-"},"content":"            if (substring.contains(\"/\")) {"},{"lineNumber":234,"author":{"gitId":"nhzaci"},"content":"                eventTimes.add(substring);"},{"lineNumber":235,"author":{"gitId":"nhzaci"},"content":"            } else if (eventTimes.size() \u003d\u003d 0) {"},{"lineNumber":236,"author":{"gitId":"nhzaci"},"content":"                messages.add(substring);"},{"lineNumber":237,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":238,"author":{"gitId":"nhzaci"},"content":"                eventTimes.add(substring);"},{"lineNumber":239,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":241,"author":{"gitId":"-"},"content":""},{"lineNumber":242,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":243,"author":{"gitId":"nhzaci"},"content":"        if (messages.size() \u003d\u003d 0) {"},{"lineNumber":244,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Event\");"},{"lineNumber":245,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":246,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":247,"author":{"gitId":"nhzaci"},"content":"        // if no deadline input or /by without any deadline, throw exception"},{"lineNumber":248,"author":{"gitId":"nhzaci"},"content":"        if (eventTimes.size() \u003c\u003d 1) {"},{"lineNumber":249,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":250,"author":{"gitId":"nhzaci"},"content":"            String exceptionMessage \u003d \"Please add a /by followed by the event time and date in DD/MM/YYYY \""},{"lineNumber":251,"author":{"gitId":"nhzaci"},"content":"                            + \"HHMM to specify a time and date for the Event task. If there is no time for \""},{"lineNumber":252,"author":{"gitId":"nhzaci"},"content":"                            + \"this event perhaps consider creating a todo instead.\";"},{"lineNumber":253,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException(exceptionMessage);"},{"lineNumber":254,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":256,"author":{"gitId":"nhzaci"},"content":"        // Create new Event object, slicing eventTime array from index 1 since we"},{"lineNumber":257,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/at\u0027 which shouldn\u0027t be in the actual Event object"},{"lineNumber":258,"author":{"gitId":"nhzaci"},"content":"        // Creating an event might throw an exception if the date is in the wrong format"},{"lineNumber":259,"author":{"gitId":"nhzaci"},"content":"        Optional\u003cEvent\u003e newEvent;"},{"lineNumber":260,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":261,"author":{"gitId":"nhzaci"},"content":"            newEvent \u003d Optional.of(new Event(String.join(\" \", messages),"},{"lineNumber":262,"author":{"gitId":"nhzaci"},"content":"                    String.join(\" \", eventTimes.subList(1, eventTimes.size()))));"},{"lineNumber":263,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":264,"author":{"gitId":"nhzaci"},"content":"            throw new DukeDateTimeParseException("},{"lineNumber":265,"author":{"gitId":"nhzaci"},"content":"                    \"Please format your date after /at to be DD/MM/YYYY HHMM\");"},{"lineNumber":266,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":268,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":269,"author":{"gitId":"nhzaci"},"content":"            this.todosView.added(newEvent, this.todos.size() + 1);"},{"lineNumber":270,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":271,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":272,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":273,"author":{"gitId":"-"},"content":""},{"lineNumber":274,"author":{"gitId":"-"},"content":"        // return new controller"},{"lineNumber":275,"author":{"gitId":"nhzaci"},"content":"        return new TaskList(Stream.concat(this.todos.stream(), Stream.of(newEvent))"},{"lineNumber":276,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":277,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":278,"author":{"gitId":"-"},"content":""},{"lineNumber":279,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":280,"author":{"gitId":"nhzaci"},"content":"     * Index of todo passed in to be marked as done is lesser than length of todosList,"},{"lineNumber":281,"author":{"gitId":"nhzaci"},"content":"     * else there would be an ArrayOutOfBoundsException thrown"},{"lineNumber":282,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":283,"author":{"gitId":"nhzaci"},"content":"     * @param doneArgs should be a List of Strings with size 1 containing one argument that is the ID of"},{"lineNumber":284,"author":{"gitId":"nhzaci"},"content":"     *        which todo to mark as done and uses a 1-based indexing of the todos"},{"lineNumber":285,"author":{"gitId":"-"},"content":"     * @return TodosController containing Todo that\u0027s now updated as done"},{"lineNumber":286,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException Exception is thrown when the user specifies a task"},{"lineNumber":287,"author":{"gitId":"nhzaci"},"content":"     *         index that is out of range."},{"lineNumber":288,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":289,"author":{"gitId":"nhzaci"},"content":"    public TaskList markAsDone(List\u003cString\u003e doneArgs) throws DukeTaskIndexOutOfRangeException {"},{"lineNumber":290,"author":{"gitId":"-"},"content":"        int idxIsDone \u003d Integer.parseInt(doneArgs.get(0)) - 1;"},{"lineNumber":291,"author":{"gitId":"nhzaci"},"content":"        if (idxIsDone \u003e\u003d this.todos.size()) {"},{"lineNumber":292,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"The index you input has an index that is \""},{"lineNumber":293,"author":{"gitId":"nhzaci"},"content":"                            + \"beyond the range of the number of tasks you currently have. \""},{"lineNumber":294,"author":{"gitId":"nhzaci"},"content":"                            + \"Please try again.\");"},{"lineNumber":295,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":296,"author":{"gitId":"nhzaci"},"content":"        return new TaskList(IntStream.range(0, this.todos.size()).mapToObj(idx -\u003e {"},{"lineNumber":297,"author":{"gitId":"-"},"content":"            if (idx \u003d\u003d idxIsDone) {"},{"lineNumber":298,"author":{"gitId":"nhzaci"},"content":"                Optional\u003c? extends Todo\u003e doneTodo \u003d"},{"lineNumber":299,"author":{"gitId":"nhzaci"},"content":"                        this.todos.get(idx).map(Todo::markAsDone);"},{"lineNumber":300,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":301,"author":{"gitId":"-"},"content":"                    this.todosView.markAsDone(doneTodo);"},{"lineNumber":302,"author":{"gitId":"-"},"content":"                } catch (Exception e) {"},{"lineNumber":303,"author":{"gitId":"-"},"content":"                    e.printStackTrace();"},{"lineNumber":304,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":305,"author":{"gitId":"-"},"content":"                return doneTodo;"},{"lineNumber":306,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":307,"author":{"gitId":"nhzaci"},"content":"                return this.todos.get(idx);"},{"lineNumber":308,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":309,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toList()));"},{"lineNumber":310,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":311,"author":{"gitId":"-"},"content":""},{"lineNumber":312,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":221,"-":91}},{"path":"src/main/java/duke/controllers/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import duke.models.Parser;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.models.Storage;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.views.Greeting;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"public class Ui {"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    public Ui(Storage storage) {"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"        this.storage \u003d storage;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * AppController starts to listen to commands from the user and performs actions as required by"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     * user\u0027s commands"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    public void start() {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        // initialise greeting view"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        Greeting greeting \u003d new Greeting();"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"        // greet user"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        greeting.greet();"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"        // initialise scanner"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        // get existing list of Todos if any"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e existingTodosList \u003d storage.retrieveLocalDatabase();"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        // init TodosController"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        TaskList todosController \u003d new TaskList(existingTodosList);"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        // loop will be broken only by \u0027bye\u0027"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        while (true) {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"            // list has structure [command, ... command related args]"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"            Parser command \u003d new Parser(Arrays.asList((sc.nextLine().split(\" \"))));"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"            // try catch statement wraps around getCommand which may throw an error if"},{"lineNumber":49,"author":{"gitId":"-"},"content":"            // command input does not adhere to command format"},{"lineNumber":50,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                //@formatter:off"},{"lineNumber":52,"author":{"gitId":"-"},"content":"                switch (command.getCommand()) {"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                case LIST:"},{"lineNumber":54,"author":{"gitId":"-"},"content":"                    // list all the current todos"},{"lineNumber":55,"author":{"gitId":"-"},"content":"                    todosController.listTodos();"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"                case EVENT:"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                    // add a new event to the model"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"                        todosController \u003d todosController.addEvent(command.getCommandArgs());"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                    } catch (Exception e) {"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"                case TODO:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                    // add a new todo to the model"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"                        todosController \u003d todosController.addTodo(command.getCommandArgs());"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"                    } catch (DukeBlankTaskException e) {"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"                case DEADLINE:"},{"lineNumber":74,"author":{"gitId":"-"},"content":"                    // amend a current todo\u0027s deadline"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                        todosController \u003d todosController.addDeadline(command.getCommandArgs());"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                    } catch (Exception e) {"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                case DONE:"},{"lineNumber":82,"author":{"gitId":"-"},"content":"                    // mark a todo as done"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":84,"author":{"gitId":"-"},"content":"                        todosController \u003d todosController.markAsDone(command.getCommandArgs());"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"                    } catch (DukeTaskIndexOutOfRangeException e) {"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"                case DELETE:"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"                    // delete a todo from the list"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"                        todosController \u003d todosController.deleteTodo(command.getCommandArgs());"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"                    } catch (Exception e) {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"                case FIND:"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"                    // find a todo with the relevant keyword"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"                    todosController.findByKeyword(command.getCommandArgs());"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"                case BYE:"},{"lineNumber":102,"author":{"gitId":"-"},"content":"                    // break out of main function"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                    greeting.bye();"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                    // save current todosController tasks to local db before exit"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"                    storage.saveTasksToLocalDatabase(todosController.getTodos());"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":108,"author":{"gitId":"-"},"content":"                    // close scanner preventing mem leak"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                    sc.close();"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"                    // return is called here to end start()"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"                    // thereby, stopping the instance of duke.Duke"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                    return;"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"                case UNKNOWN:"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"                    // Fallthrough"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                default:"},{"lineNumber":117,"author":{"gitId":"-"},"content":"                    // print command printed in if not recognised"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                    try {"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                        throw new DukeCommandNotFoundException("},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"                                \"Sorry, the command you are trying to use is not found, please try again!\");"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"                    } catch (DukeCommandNotFoundException e) {"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"                        greeting.printErrorMessage(e);"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"                    break;"},{"lineNumber":125,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeCommandNotFoundException e) {"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"                // catch error from Command.getCommand()"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"                greeting.printErrorMessage(e);"},{"lineNumber":129,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"                // program not supposed to end up here"},{"lineNumber":131,"author":{"gitId":"-"},"content":"                e.printStackTrace();"},{"lineNumber":132,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":79,"-":58}},{"path":"src/main/java/duke/exceptions/DukeBlankDetailsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankDetailsException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankDetailsException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeBlankTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankTaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankTaskException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeCommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeCommandNotFoundException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeCommandNotFoundException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeDateTimeParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeDateTimeParseException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeDateTimeParseException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeTaskIndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeTaskIndexOutOfRangeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeTaskIndexOutOfRangeException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/models/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public enum Commands {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    LIST, EVENT, TODO, DEADLINE, DONE, DELETE, BYE, UNKNOWN, FIND"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":5}},{"path":"src/main/java/duke/models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Deadline extends Todo {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH:mm\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** String denoting the deadline of a Deadline object */"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    protected String deadlineString;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    protected LocalDateTime deadlineDateTime;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the deadline in a Deadline object"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String specific to deadlines denoting when the deadline is due"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public Deadline(String message, String deadlineString) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        this.deadlineString \u003d deadlineString;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        this.deadlineDateTime \u003d parseStringToLocalDateTime(deadlineString);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the isDone attribute of an Deadline"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if a Todo is done"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String specific to deadlineStrings denoting the deadlineString of a"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"     *        Deadline Todo"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    public Deadline(String message, boolean isDone, String deadlineString) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(message, isDone);"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.deadlineString \u003d deadlineString;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        this.deadlineDateTime \u003d parseStringToLocalDateTime(deadlineString);"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     * Expects String in the format dd/MM/yyyy HHMM and returns LocalDateTime object"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String passed in with the format dd/MM/yyyy HHMM"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * @return LocalDateTime object from String deadlineString passed in"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     * @throws DateTimeParseException when date time is in the wrong format"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    private LocalDateTime parseStringToLocalDateTime(String deadlineString)"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"            throws DateTimeParseException {"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        // @formatter:off"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        return LocalDateTime.parse(deadlineString.length() \u003d\u003d 15"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                ? deadlineString"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"                : String.format(\"0%s\", deadlineString), inputDateFormat);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     * Getter method for deadline of a Deadline object"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     * @return String containing deadline of the Deadline"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public String getDeadline() {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        return this.deadlineDateTime.format(inputDateFormat);"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"     * Getter method for deadline time from LocalDateTime of a Deadline object"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * @return String containing deadline of the Deadline object, parsed from LocalDateTime object"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     *         in a prettier format"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    public String getPrettierDeadlineDateTime() {"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"%s hrs\", this.deadlineDateTime.format(outputDateFormat));"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * Method overridden from Todo\u0027s getMessage method to return Deadline type and deadline"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @return String to be rendered to give information on the Deadline"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getIsDoneIcon(), this.message,"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"                this.getPrettierDeadlineDateTime());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * Method overridden the super class\u0027 to return a new Deadline that is marked as done instead of"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"     * a new Todo"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @return Deadline that is marked as done"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Deadline markAsDone() {"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        return new Deadline(this.message, true, this.getDeadline());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":62,"-":35}},{"path":"src/main/java/duke/models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Event extends Todo {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH:mm\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** String denoting eventTime fo an Event object */"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    protected String eventStringDateTime;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    protected LocalDateTime eventDateTime;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the eventTime in an Event object"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * @param eventStringDateTime String specific to events denoting when the event will be occurring"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public Event(String message, String eventStringDateTime) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        this.eventStringDateTime \u003d eventStringDateTime;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        this.eventDateTime \u003d parseStringToLocalDateTime(eventStringDateTime);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the isDone attribute of an Event"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if a Todo is done"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param eventStringDateTime String specific to events denoting when the event will be occurring"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    public Event(String message, boolean isDone, String eventStringDateTime) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(message, isDone);"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        this.eventStringDateTime \u003d eventStringDateTime;"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.eventDateTime \u003d parseStringToLocalDateTime(eventStringDateTime);"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"     * Expects String in the format dd/MM/yyyy HHMM and returns LocalDateTime object"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     * @param eventDateTimeString String passed in with the format dd/MM/yyyy HHMM"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * @return LocalDateTime object from String eventTimeString passed in"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * @throws DateTimeParseException when the date time is in the wrong format"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    private LocalDateTime parseStringToLocalDateTime(String eventDateTimeString)"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"            throws DateTimeParseException {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        // @formatter:off"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        return LocalDateTime.parse(eventDateTimeString.length() \u003d\u003d 15"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                ? eventStringDateTime"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                : String.format(\"0%s\", eventStringDateTime), inputDateFormat);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * Getter method for event time from LocalDateTime of an Event object"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     * @return String containing event time of the Event, parsed from LocalDateTime object"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    public String getEventTime() {"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        return this.eventDateTime.format(inputDateFormat);"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"     * Getter method for event time from LocalDateTime of an Event object"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"     * @return String containing event time of the Event, parsed from LocalDateTime object in a"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     *         prettier format"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"    public String getPrettierEventTime() {"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"%s hrs\", this.eventDateTime.format(outputDateFormat));"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     * Method overridden from Todo\u0027s getMessage method to return event type and eventTime"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @return String to be rendered to give information on the Event"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getIsDoneIcon(), this.message,"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                this.getPrettierEventTime());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     * Method overridden the super class\u0027 to return a new Event that is marked as done instead of a"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * new Todo"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @return Event that is marked as done"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Event markAsDone() {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        return new Event(this.message, true, this.getEventTime());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":61,"-":35}},{"path":"src/main/java/duke/models/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cString\u003e command;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cList\u003cString\u003e\u003e commandArgs;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cList\u003cString\u003e\u003e fullCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"     * Initialises Command object by taking first item of the list as the command and the rest of"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"     * the itemms of the string gets taken as the command arguments Null safety is enforced through"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"     * use of Optionals"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    public Parser(List\u003cString\u003e fullCommand) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.command \u003d Optional.ofNullable(fullCommand.get(0));"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"        this.commandArgs \u003d Optional.of(fullCommand.subList(1, fullCommand.size()));"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"        this.fullCommand \u003d Optional.of(fullCommand);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     * Gets the first String passed in from the list of inputs, which is the Command in the input"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"     * line"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * @return Commands enum depicting which command is to be executed by the bot."},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    public Commands getCommand() throws DukeCommandNotFoundException {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        return this.command.map(commandString -\u003e {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"            //@formatter:off"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"            switch (commandString) {"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"            case \"done\":"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"                return Commands.DONE;"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"            case \"list\":"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"                return Commands.LIST;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"            case \"todo\":"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"                return Commands.TODO;"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"            case \"event\":"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"                return Commands.EVENT;"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"            case \"deadline\":"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"                return Commands.DEADLINE;"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"            case \"delete\":"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"                return Commands.DELETE;"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"            case \"find\":"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"                return Commands.FIND;"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"            case \"bye\":"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                return Commands.BYE;"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"            default:"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                return Commands.UNKNOWN;"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        }).orElseThrow(() -\u003e new DukeCommandNotFoundException(\"No command was supplied from input.\"));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     * Gets the remaining arguments passed into the command in the terminal as the arguments of the"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     * command"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"     * @return List of Strings which contains the rest of the arguments passed into the terminal"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when command is blank"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getCommandArgs() throws DukeCommandNotFoundException {"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        return this.commandArgs.orElseThrow(() -\u003e new DukeCommandNotFoundException("},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"                \"No command arguments were supplied from input.\"));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     * Used for level 1 to get full argument passed into the CLI, where todo, events and deadline"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     * were yet to be implemented"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"     * @return List of Strings which contains the rest of the arguments passed into the terminal"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getFullCommand() throws DukeCommandNotFoundException {"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        return this.fullCommand.orElseThrow(() -\u003e new DukeCommandNotFoundException("},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"                \"No command arguments were supplied from input.\"));"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":58,"-":22}},{"path":"src/main/java/duke/models/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_TYPE_INDEX \u003d 0;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_IS_DONE_INDEX \u003d 1;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_MESSAGE_INDEX \u003d 2;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_EXTRA_MESSAGE_INDEX \u003d 3;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    private final String filePath;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private final String directoryPath;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"     * Creates a new instance of Storage which is responsible for storing and retrieving"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"     * tasks saved on a user\u0027s PC"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"     * @param filePath file path of the file containing the tasks"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * @param directoryPath directory path of the file containing the tasks"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    public Storage(String filePath, String directoryPath) {"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        this.directoryPath \u003d directoryPath;"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     * Attempt to retrieve a local save of the user\u0027s tasks on their pc as a list, if not found,"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * return the an empty list"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"     * @return List containing either existing Todos based on data file or an empty list"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public List\u003cOptional\u003c? extends Todo\u003e\u003e retrieveLocalDatabase() {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"            // get local file"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"            File localFile \u003d new File(this.filePath);"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"            Scanner sc \u003d new Scanner(localFile);"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"            List\u003cOptional\u003c? extends Todo\u003e\u003e existingTodosList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"                // get line, splitting by special character delimiter |"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"                List\u003cString\u003e line \u003d Arrays.asList(sc.nextLine().split(\"\\\\|\"));"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"                // line \u003d [type, isDone, message, extraMessage (event / deadline)]"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"                String type \u003d line.get(TODO_TYPE_INDEX);"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"                boolean isDone \u003d line.get(TODO_IS_DONE_INDEX).equals(\"1\");"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                String message \u003d line.get(TODO_MESSAGE_INDEX);"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                // @formatter:off"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                switch (type) {"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"                case \"T\":"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"                    // create new todo"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of(new Todo(message, isDone)));"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"                case \"D\":"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                    // create new deadline"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of("},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                                new Deadline(message,"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"                                            isDone,"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"                                            line.get(TODO_EXTRA_MESSAGE_INDEX))));"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"                case \"E\":"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"                    // create new event"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of("},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"                                new Event(message,"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"                                        isDone,"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                                        line.get(TODO_EXTRA_MESSAGE_INDEX))));"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                default:"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"            sc.close();"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"            return existingTodosList;"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"            // exception will be caught if no existing data file is found"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"            // e.printStackTrace();"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     * Saves all tasks from the todosList into the local database"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * @param todosList List of todos passed to be saved into local database"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"    public void saveTasksToLocalDatabase(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"            // check if directory exists, if not, create it"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"            // else, delete file\u0027s current contents"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"            File databaseDirectory \u003d new File(this.directoryPath);"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"            if (databaseDirectory.exists()) {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"                // delete existing file if it exists in directory"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"                File existingDatabase \u003d new File(this.filePath);"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"                if (existingDatabase.exists()) {"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"                    // noinspection ResultOfMethodCallIgnored"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"                    existingDatabase.delete();"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"            } else {"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"                // create directory if it doesn\u0027t exist"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"                // noinspection ResultOfMethodCallIgnored"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                databaseDirectory.mkdir();"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"            // Init to write file in append mode"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath, true);"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"            // loop through list and write to file"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"            todosList.forEach(optTodo -\u003e {"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"                // lineToWrite will be written at the end"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"                String lineToWrite;"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                // Check if Todo is an Event or Deadline"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"                if (optTodo.map(todo -\u003e todo instanceof Event).orElse(false)) {"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e {"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                        Event event \u003d (Event) todo;"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"                        return String.format(\"E|%s|%s|%s\", event.isTodoDone() ? \"1\" : \"0\","},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"                                event.getRawMessage(), event.getEventTime());"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"                    }).orElse(\"\");"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                } else if (optTodo.map(todo -\u003e todo instanceof Deadline).orElse(false)) {"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e {"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"                        Deadline deadline \u003d (Deadline) todo;"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"                        return String.format(\"D|%s|%s|%s\", deadline.isTodoDone() ? \"1\" : \"0\","},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"                                deadline.getRawMessage(), deadline.getDeadline());"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"                    }).orElse(\"\");"},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"                } else {"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e String.format(\"T|%s|%s\","},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"                            todo.isTodoDone() ? \"1\" : \"0\", todo.getRawMessage())).orElse(\"\");"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"                // Write todo to line in database"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"                    writer.write(String.format(\"%s\\n\", lineToWrite));"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"                } catch (IOException e) {"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"                    e.printStackTrace();"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"            });"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"            // close writer on complete"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"            writer.close();"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"        } catch (Exception e) {"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":151}},{"path":"src/main/java/duke/models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Todo {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    protected String message;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"     * Create a new Todo without specifying isDone attribute, which defaults to false"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param message denoting Todo message"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Todo(String message) {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of isDone boolean"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if Todo is done"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Todo(String message, boolean isDone) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.message \u003d message;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Render full message required to denote what each Todo is"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @return Type of todo, icon denoting whether it\u0027s done and message"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return String.format(\"[T][%s] %s\", this.getIsDoneIcon(), this.message);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"     * Protected method that returns an tick icon if the Todo is completed, else returns a X icon"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return String unicode for the icon to render"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected String getIsDoneIcon() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return this.isDone ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Getter method for getting the isDone attribute of a Todo"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @return boolean on whether a todo is done"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean isTodoDone() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this.isDone;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"     * Getter method for getting raw message without formatting of a Todo"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * @return String containing raw message of Todo"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"    public String getRawMessage() {"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        return this.message;"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Marks a Todo as done by returning a new Todo"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @return Todo that is marked as done"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Todo markAsDone() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new Todo(this.message, true);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":12,"-":59}},{"path":"src/main/java/duke/views/Greeting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Greeting {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    private static final String divider \u003d \"---\";"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    private void printWithSpacing(String text) {"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"        System.out.println(String.format(\"\\n%s\\n%s\\n%s\\n\", divider, text, divider));"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"     * Outputs the standard greeting with duke.Duke Logo"},{"lineNumber":12,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    public void greet() {"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     * Outputs the standard bye greeting for a user"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    public void bye() {"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(\"Bye. Hope to see you again soon!\");"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * Prints message from exception"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     * @param exception exception caught during runtime in Ui"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    public void printErrorMessage(Exception exception) {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(exception.getMessage());"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":21,"-":14}},{"path":"src/main/java/duke/views/TodosView.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TodosView {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /** Denotes the divider to use to go between lines */"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    private static final String DIVIDER \u003d \"---\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"     * Explicit definition of the default constructor to create a new Todos View renderer"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    public TodosView() {}"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * Takes in an Optional Todo and renders it out into a String"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"     * @param todoToRender Optional Todo to be rendered"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * @return String which renders out how the information carried by the Todo"},{"lineNumber":24,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private String renderTodoLine(Optional\u003c? extends Todo\u003e todoToRender) {"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"        return todoToRender.map(Todo::getMessage).orElse(\"Empty Todo\");"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     * Takes in a matching TodosList and returns a rendered view of the todos with a specified"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     * header"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param matchingTodosList List of Optional Todos that matches the keywords to be rendered"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    public void matchListTodos(List\u003cOptional\u003c? extends Todo\u003e\u003e matchingTodosList) {"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(String.format(\"Here are the matching tasks in your list:\\n%s\","},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, matchingTodosList.size())"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"                        .mapToObj(idx -\u003e String.format(\"%d.%s\", idx + 1,"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"                                renderTodoLine(matchingTodosList.get(idx))))"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"                        .collect(Collectors.joining(\"\\n\"))));"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     * Turns the todosList into a stream of messages from Todos and output them with a new line in"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * between each Todo"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * @param todosList List of optional todos passed in from TodosController"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void listTodos(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        printWithSpacing(String.format(\"Here are the tasks in your list:\\n%s\","},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, todosList.size()).mapToObj("},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                    idx -\u003e String.format(\"%d.%s\", idx + 1, renderTodoLine(todosList.get(idx))))"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                        .collect(Collectors.joining(\"\\n\"))));"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * Prints \u0027Got it, I\u0027ve added this task:\u0027, followed by the message contained in the new todo"},{"lineNumber":58,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     * @param newTodo Optional Todo object containing a new Todo to be printed"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     * @param listSize Integer list size taken to return the number of tasks user currently has"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public void added(Optional\u003c? extends Todo\u003e newTodo, int listSize) {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(String.format("},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"                \"Got it! I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":65,"author":{"gitId":"-"},"content":"                renderTodoLine(newTodo), listSize));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * Prints \u0027Noted. I\u0027ve removed this task:\u0027, followed by message contained in new Todo"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     * @param deletedTodo Optional Todo object containing the Todo to be deleted"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"     * @param listSize Integer list size taken to return number of tasks user currently has"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    public void deleted(Optional\u003c? extends Todo\u003e deletedTodo, int listSize) {"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(String.format("},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"                \"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                renderTodoLine(deletedTodo), listSize));"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":80,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"     * Adds text indicating todo is marked as done and renders the String to show the Todo"},{"lineNumber":82,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"-"},"content":"     * @param newTodo Optional Todo to be marked as Done"},{"lineNumber":84,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    public void markAsDone(Optional\u003c? extends Todo\u003e newTodo) {"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing("},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", renderTodoLine(newTodo)));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":""},{"lineNumber":90,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"     * Private method printWithSpacing adds divider around the text passed in to be printed"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"-"},"content":"     * @param text String to be printed with divider put around it"},{"lineNumber":94,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    private void printWithSpacing(String text) {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"        System.out.printf(\"\\n%s\\n%s\\n%s\\n%n\", DIVIDER, text, DIVIDER);"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":48,"-":50}},{"path":"src/test/java/duke/controllers/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankDetailsException;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeDateTimeParseException;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"import duke.models.Deadline;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"import duke.models.Event;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import duke.models.Parser;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"public class TaskListTest {"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    private final TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    void addTask() {"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"todo hello world\";"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"            todosList \u003d taskList.addTodo(commandArgs).getTodos();"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"hello world\", rawMessage);"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    void addDeadline() {"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"deadline finish hello world /by 21/12/2020 2359\";"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                todosList \u003d taskList.addDeadline(commandArgs).getTodos();"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeBlankDetailsException | DukeDateTimeParseException e) {"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                e.printStackTrace();"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"        String deadlineString \u003d todosList.get(0).map(todo -\u003e ((Deadline) todo).getDeadline())"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                .orElse(\"Something went wrong\");"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"finish hello world\", rawMessage);"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"21/12/2020 2359\", deadlineString);"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    void addEvent() {"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"event say hello world /at 21/12/2021 1300\";"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                todosList \u003d taskList.addEvent(commandArgs).getTodos();"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeBlankDetailsException | DukeDateTimeParseException e) {"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"                e.printStackTrace();"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"        String dateTimeString \u003d"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                todosList.get(0).map(todo -\u003e ((Event) todo).getEventTime()).orElse(\"Something went wrong\");"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"say hello world\", rawMessage);"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"21/12/2021 1300\", dateTimeString);"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":121}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"D|0|do homework|02/12/2021 1600"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"D|0|return book|02/09/2021 1800"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"T|0|something todo!"}],"authorContributionMap":{"nhzaci":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 21/02/2020 1200"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by 100/200/100000 142000"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by 2/12/2021 1600"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"done 4"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"event "},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"event borrow book"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"event /at 1 Sep"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"event borrow book /at 1 Sep"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"event borrow book /at 1/09/2021 1200"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"event borrow book /at"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"deadline "},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"deadline return book"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"deadline /by 2 Sep"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 2 Sep"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 2/09/2021 1800"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"deadline return book /by"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"todo"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"todo something todo!"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"blah"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"blah blah"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"delete 1"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"delete 2"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"delete 10"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"delete 15"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"bye"}],"authorContributionMap":{"nhzaci":41}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"nhzaci":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"# delete output and data file from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    rm -rf data"},{"lineNumber":14,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"if ! javac \\"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"  -cp ../src/main/java \\"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"  -Xlint:none \\"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"  -d \\"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"  ../bin \\"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/*.java \\"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/controllers/*.java \\"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/models/*.java \\"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/views/*.java \\"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/exceptions/*.java"},{"lineNumber":27,"author":{"gitId":"-"},"content":"then"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":30,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"# dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":40,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":41,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":42,"author":{"gitId":"-"},"content":"then"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":45,"author":{"gitId":"-"},"content":"else"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":48,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"nhzaci":13,"-":35}}]
