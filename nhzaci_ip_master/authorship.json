[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"1. After the importing is complete, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"nhzaci":2,"-":24}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":16,"-":45}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"E|1|new event|21/04/2313 1500"}],"authorContributionMap":{"nhzaci":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"![Screenshot](./Ui.png)"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"| Commands                                                       | Usage                                                           |"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"| -------------------------------------------------------------- | --------------------------------------------------------------- |"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"| `todo TASK_DESCRIPTION`                                        | Adds a todo with the message to task list                       |"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"| `deadline DESCRIPTION /by DD/MM/YYYY HHMM`                     | Adds a deadline with a message and deadline to the task list    |"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"| `event DESCRIPTION /at DD/MM/YYYY HHMM`                        | Adds an event with a message and an event time to the task list |"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"| `update INDEX [-m / -t] TASK_DESCRIPTION OR DATE_TIME OR BOTH` | Updates a task at index with other given parameters             |"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"| `list`                                                         | List all tasks in the task list                                 |"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"| `done INDEX`                                                   | Marks task at index as done                                     |"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"| `delete INDEX`                                                 | Removes task at index from the task list                        |"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"| `find KEYWORDS`                                                | Finds a task matching specific keywords in the task list        |"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"| `bye`                                                          | Exits the application and saves your tasks                      |"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"### `todo`"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"Adds a new todo task to the list"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"Format: `todo TASK_DESCRIPTION`"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"\u003e todo Complete homework"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"Got it! I\u0027ve added this task:"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"[T][✘] Complete homework"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"Now you have X tasks in the list"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"Where X should reflect the actual number of tasks you currently have in your task list"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"### `deadline`"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"Adds a deadline with a message and deadline to the task list"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"Format: `deadline TASK_DESCRIPTION /by DATE_TIME(in DD/MM/YYYY)`"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"\u003e deadline Assignment 1 /by 20/10/2021 1900"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"Got it! I\u0027ve added this task:"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"[D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"Now you have X tasks in the list"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"Where X should reflect the actual number of tasks you currently have in your task list"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"### `event`"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"Adds an event with a message and an event time to the task list"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"Format: `event TASK_DESCRIPTION /at DATE_TIME(in DD/MM/YYYY)`"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"\u003e event Hackathon /at 21/02/2021 1900"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"Got it! I\u0027ve added this task:"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"[E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"Now you have X tasks in the list"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"Where X should reflect the actual number of tasks you currently have in your task list"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"### `list`"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"List all tasks currently in the task list, listed with their index"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"Format: `list`"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"format of task:"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"[index]. [type][✘/✔] [message]"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"\u003e list"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"Here are the tasks in your list:"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"1. [T][✘] Complete homework"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"2. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"3. [E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"### `update`"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"Updates a task at index with other given parameters"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"Formats:"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"- `update INDEX TASK_DESCRIPTION DATE_TIME`"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"- `update INDEX -m TASK_DESCRIPTION`"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"- `update INDEX -t DATE_TIME`"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"Note:"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"- DATE_TIME is to be given in `DD/MM/YYYY HHMM` format"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"- Adding a `-m` or `-t` flag to update a Todo will only update the Task Description"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"#### Optional Flags:"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"Flags can be used to change only a specific part of your Event or Deadline"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"| Flag | Functionality                            |"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"| ---- | ---------------------------------------- |"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"| `-m` | Amend the message of an Event / Deadline |"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"| `-t` | Amend the time of an Event / Deadline    |"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"\u003e list"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"Here are the tasks in your list:"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"1. [T][✘] Complete homework"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"2. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"3. [E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"\u003e update 1 Hello World"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":"Got it! Task has been amended to:"},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"[T][✘] Hello World"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"\u003e update 2 -m Assignment 1 Part A"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"Got it! Task has been amended to:"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"[D][✘] Assignment 1 Part A (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"\u003e update 3 -t 20/02/2021 1700"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"Got it! Task has been amended to:"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"[E][✘] Hackathon (at: Sat 20 Feb 2021 17:00 hrs)"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"\u003e update 2 Assignment 1 Part A Section B /by 18/10/2021 1800"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"Got it! Task has been amended to:"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"[D][✘] Assignment 1 Part A Section B (by: Mon 18 Oct 2021 18:00 hrs)"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"### `done`"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"Marks task at index as done"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"Format: `done INDEX`"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":161,"author":{"gitId":"nhzaci"},"content":"\u003e list"},{"lineNumber":162,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":"Here are the tasks in your list:"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"1. [T][✘] Complete homework"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"2. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":166,"author":{"gitId":"nhzaci"},"content":"3. [E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":168,"author":{"gitId":"nhzaci"},"content":"\u003e done 1"},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":170,"author":{"gitId":"nhzaci"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"[T][✔] Complete Homework"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"### `delete`"},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"Removes task at index from the task list"},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":"Format: `delete INDEX`"},{"lineNumber":179,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":180,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":181,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":182,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":183,"author":{"gitId":"nhzaci"},"content":"\u003e list"},{"lineNumber":184,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":185,"author":{"gitId":"nhzaci"},"content":"Here are the tasks in your list:"},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":"1. [T][✔] Complete Homework"},{"lineNumber":187,"author":{"gitId":"nhzaci"},"content":"2. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":188,"author":{"gitId":"nhzaci"},"content":"3. [E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"\u003e delete 1"},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":192,"author":{"gitId":"nhzaci"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":193,"author":{"gitId":"nhzaci"},"content":"[T][✔] Complete Homework"},{"lineNumber":194,"author":{"gitId":"nhzaci"},"content":"Now you have X tasks in the list."},{"lineNumber":195,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":196,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":197,"author":{"gitId":"nhzaci"},"content":"Where X should reflect the actual number of tasks you currently have in your task list"},{"lineNumber":198,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":199,"author":{"gitId":"nhzaci"},"content":"### `find`"},{"lineNumber":200,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":201,"author":{"gitId":"nhzaci"},"content":"Finds a task matching specific keywords in the list"},{"lineNumber":202,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":203,"author":{"gitId":"nhzaci"},"content":"Format: `find KEYWORDS`"},{"lineNumber":204,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":205,"author":{"gitId":"nhzaci"},"content":"Note:"},{"lineNumber":206,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":"- You can type multiple keywords and it will return matches for any of the keywords"},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":209,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":210,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":212,"author":{"gitId":"nhzaci"},"content":"\u003e list"},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"Here are the tasks in your list:"},{"lineNumber":215,"author":{"gitId":"nhzaci"},"content":"1. [T][✔] Complete Homework"},{"lineNumber":216,"author":{"gitId":"nhzaci"},"content":"2. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":217,"author":{"gitId":"nhzaci"},"content":"3. [E][✘] Hackathon (at: Sun 21 Feb 2021 19:00 hrs)"},{"lineNumber":218,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":219,"author":{"gitId":"nhzaci"},"content":"\u003e find Assignment"},{"lineNumber":220,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":221,"author":{"gitId":"nhzaci"},"content":"Here are the matching tasks in your list:"},{"lineNumber":222,"author":{"gitId":"nhzaci"},"content":"1. [D][✘] Assignment 1 (by: Wed 20 Oct 2021 19:00 hrs)"},{"lineNumber":223,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":224,"author":{"gitId":"-"},"content":""},{"lineNumber":225,"author":{"gitId":"nhzaci"},"content":"### `bye`"},{"lineNumber":226,"author":{"gitId":"-"},"content":""},{"lineNumber":227,"author":{"gitId":"nhzaci"},"content":"Exits the application and saves your tasks"},{"lineNumber":228,"author":{"gitId":"-"},"content":""},{"lineNumber":229,"author":{"gitId":"nhzaci"},"content":"Format: `bye`"},{"lineNumber":230,"author":{"gitId":"-"},"content":""},{"lineNumber":231,"author":{"gitId":"nhzaci"},"content":"#### Usage:"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"nhzaci"},"content":"```"},{"lineNumber":234,"author":{"gitId":"nhzaci"},"content":"\u003e bye"},{"lineNumber":235,"author":{"gitId":"-"},"content":""},{"lineNumber":236,"author":{"gitId":"nhzaci"},"content":"Bye. Hope to see you again soon!"},{"lineNumber":237,"author":{"gitId":"nhzaci"},"content":"```"}],"authorContributionMap":{"nhzaci":223,"-":14}},{"path":"src/main/java/.compile.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"echo \"compiling controllers...\""},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"javac duke.controllers/*.java"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"echo \"compiling models...\""},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"javac duke.models/*.java"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"echo \"compiling exceptions...\""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"javac duke.exceptions/*.java"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"echo \"compiling views...\""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"javac duke.views/*.java"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"echo \"compiling Duke...\""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"javac duke.Duke.java"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"echo \"done!\""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""}],"authorContributionMap":{"nhzaci":12}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import java.io.IOException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"public class DialogBox extends HBox {"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private Label dialog;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private Circle displayPicture;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public DialogBox(String text, Image image) {"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/views/DialogBox.fxml\"));"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"            fxmlLoader.load();"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"            System.out.println(\"Error came from dialog box\");"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        dialog.setText(text);"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        // set full dialog height if it overflows"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"        this.setHeight(dialog.getHeight());"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        displayPicture.setFill(new ImagePattern(image));"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        displayPicture.setRadius(image.getHeight() / 4);"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"     * Flips dialog box such that ImageView is on left and text is on right"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"    private void flip() {"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        FXCollections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"    public static DialogBox getUserDialog(String text, Image image) {"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        return new DialogBox(text, image);"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"    public static DialogBox getDukeDialog(String text, Image image) {"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        var db \u003d new DialogBox(text, image);"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        db.flip();"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        return db;"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":60}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"import javafx.application.Platform;"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.Scene;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import javafx.stage.Stage;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import duke.Duke;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    /** Constant to store the database path for duke.Duke\u0027s commands */"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_FILE_PATH \u003d \"data/duke.txt\";"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    /** Constant storing database directory path */"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_DIRECTORY_PATH \u003d \"data/\";"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    /** Create private instance of Duke on init */"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    private Duke duke \u003d new Duke(DATABASE_FILE_PATH, DATABASE_DIRECTORY_PATH);"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/views/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"            stage.setOnCloseRequest((event) -\u003e {"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"                Platform.exit();"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"                System.exit(0);"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"            });"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":38}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"import javafx.application.Platform;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import duke.Duke;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"    private void initialize() {"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"     * Sets duke used for getting responses on user input, also adds first Duke greeting on init"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     * @param d contains Duke instance we are using"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        // duke should never be set to null"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"        assert d !\u003d null : \"Duke is set to null in MainWindow\";"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        // set instance of duke to mainwindow for response"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        duke \u003d d;"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"        // add greeting whenever we set duke"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(duke.getGreeting(), dukeImage));"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     * Creates two dialog boxes, one echoing user inpt and the other containing Duke\u0027s reply"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"     * and then appends them to the dialog container. Clears user input after processing"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        // duke getResponse returns response from Duke\u0027s logic"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        // add response and input to DialogBox"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        );"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"        // clear user input"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        userInput.clear();"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":64}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import duke.controllers.Ui;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import duke.models.Storage;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import duke.views.Greeting;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.Timer;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.TimerTask;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    /** Storage object to be passed to AppController for reading / writing to db */"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    private final Storage storage;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"     * Initialises Duke to provide responses to front-end JavaFX"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"     * @param filePath path to text file which contains Duke\u0027s database"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"     * @param directoryPath path to directory which contains text file of Duke\u0027s database"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    public Duke(String filePath, String directoryPath) {"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"        // file path and directory path should never be null"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"        // this will cause issues with Storage"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"        assert filePath !\u003d null : \"Database file path for Duke is null\";"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        assert directoryPath !\u003d null : \"Database directory path for Duke is null\";"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        this.storage \u003d new Storage(filePath, directoryPath);"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"        this.ui \u003d new Ui(storage);"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     * Returns input to front-end JavaFX to be displayed"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     * @param input user input provided by front-end"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     * @return output from user input provided from front-end basaed on Duke logic"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"    public String getResponse(String input) {"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"        // if input is bye, close after 0.5s"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"            new Timer().schedule(new TimerTask() {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"                @Override"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"                public void run() {"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"                    System.exit(0);"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"            }, 500);"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        return ui.respondToInput(input);"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     * Returns String greeting from the Greeting class"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"     * @return greeting for a user"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"    public String getGreeting() {"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        return Greeting.greet();"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":52,"-":2}},{"path":"src/main/java/duke/controllers/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import java.util.stream.Stream;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankDetailsException;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeDateTimeParseException;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeInvalidFlagException;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"import duke.models.Deadline;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import duke.models.Event;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"import duke.models.Flags;"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"import duke.models.Pair;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"import duke.models.Parser;"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"public class TaskList {"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    /** index offset constant for 1-based indexing of todos to client */"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    private static final int ONE_BASED_INDEX_OFFSET \u003d 1;"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /** todosList contains the state of the todos */"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    private final List\u003cOptional\u003c? extends Todo\u003e\u003e todos;"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     * Constructor of TodosController which takes in an existing List of Optional Todos"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param todos is an existing List of Optional Todos"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    public TaskList(List\u003cOptional\u003c? extends Todo\u003e\u003e todos) {"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        this.todos \u003d todos;"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"     * Returns int size of the todos list in the controller"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"     * @return size of todos list"},{"lineNumber":42,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"    public int todosSize() {"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        return this.todos.size();"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     * Getter for todosList attr in TodosController"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"     * @return List of Optionals of anything extending Todo contained in TodosController"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    public List\u003cOptional\u003c? extends Todo\u003e\u003e getTodos() {"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"        return this.todos;"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * Takes in a list of keywords and prints todos with messages that contains any of the keywords"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     * passed in"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     * @param keywordList String list of keywords to be matched"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     * @return list of todos checked to see if any strings match any given keyword"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public List\u003cOptional\u003c? extends Todo\u003e\u003e findByKeyword(List\u003cString\u003e keywordList) {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        return this.todos.stream().filter(optTodo -\u003e {"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"            // check if todo message contains keyword"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"            return optTodo.map(Todo::getMessage).map(message -\u003e {"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"                // split message by space as delimiter"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                List\u003cString\u003e messagesSplitByWhitespace \u003d Arrays.asList(message.split(\" \"));"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"                // if any part of split message is contained in keywordList, return true"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"                return messagesSplitByWhitespace.stream().anyMatch(keywordList::contains);"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"            }).orElse(false);"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"        }).collect(Collectors.toList());"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":74,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     * Adds a new Todo to the todosList and returns a Pair of TaskList and Optional Todo back to UI"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     * @param newTodoList contains the new Todo that must not be an empty array"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * @return Pair of new updated TaskList and added Todo"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException when user types in \u0027todo\u0027 but has nothing afterwards"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addTodo(List\u003cString\u003e newTodoList) throws DukeBlankTaskException {"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"        if (newTodoList.size() \u003d\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Todo you are trying to add cannot be blank!\");"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"        // create new Todo object"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e newTodoObject \u003d"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                Optional.of(new Todo(String.join(\" \", newTodoList)));"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        // return pair of tasklist and new created todo"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(new TaskList(Stream.concat(this.todos.stream(), Stream.of(newTodoObject))"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList())), newTodoObject);"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":""},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"     * Deletes a Todo from the list of the todos controller and returns a Pair of TaskList"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"     * and the deleted Todo"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"     * @param deleteTodoArgs is a list of size 1, containing the index of the todo to delete"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"     * @return Pair of updated TaskList and deleted Todo"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException when user specifies the delete command without providing an"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"     *         index of the todo to delete"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException when user specifies an index that is out of the"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"     *         range of the list size of todos in the controller"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e deleteTodo(List\u003cString\u003e deleteTodoArgs)"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeTaskIndexOutOfRangeException {"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"        // check if args is empty"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"        if (deleteTodoArgs.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException("},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"                    \"Please input an index for the Todo you want to delete!\");"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"        // get index of todo to delete"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        int idxDelete;"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"            idxDelete \u003d Integer.parseInt(deleteTodoArgs.get(0)) - ONE_BASED_INDEX_OFFSET;"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"Please input the index of the task \""},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                    + \"right after the update command as \u0027\" + deleteTodoArgs.get(0)"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                    + \"\u0027 is not recognised as a valid index\");"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"        if (idxDelete \u003e\u003d this.todos.size()) {"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"The index you input has an index that \""},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                            + \"is beyond the range of the number of tasks you \""},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"                            + \"currently have. Please try again.\");"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"        // remove from stream and return pair"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(new TaskList("},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, this.todos.size()).filter(idx -\u003e idx !\u003d idxDelete)"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"                        .mapToObj(this.todos::get).collect(Collectors.toList())),"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"                this.todos.get(idxDelete));"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"     * Command can contain -t flag for time and -m flag for message update, then updates task respectively,"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"     * if no flag, update whole task"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"     * @param updateTodoCommandArgsSplitByWhitespace params passed in from user in CLI"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"     * @return pair of updated tasklist and updatedtask to be returned as user feedback"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException If there is no specified task description for the new updated task"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException if the input index is out of range of task list size"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeDateTimeParseException if there is an error in the date time input by the user"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeInvalidFlagException if user inputs more than one flag into the update method"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException if the user does not add a /at or /by flag for Event or Deadlines to amend"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"     *          and if no -m or -t flags are used"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e updateTodo(List\u003cString\u003e updateTodoCommandArgsSplitByWhitespace)"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeTaskIndexOutOfRangeException, DukeDateTimeParseException,"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"            DukeInvalidFlagException, DukeBlankDetailsException {"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"        if (updateTodoCommandArgsSplitByWhitespace.size() \u003d\u003d 0) {"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The new task you are trying to update it to cannot be blank\");"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"        // check if the command contains more than one flag"},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"        // flag -\u003e means contains \u0027-\u0027 as first char and length of 2"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"        long noOfFlags \u003d updateTodoCommandArgsSplitByWhitespace.stream()"},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"                .filter(arg -\u003e arg.equals(\"-m\") || arg.equals(\"-t\"))"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":"                .count();"},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":"        if (noOfFlags \u003e 1) {"},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"            throw new DukeInvalidFlagException(\"Please use only a single dash flag in your update command\");"},{"lineNumber":161,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":"        // updateTodo \u003d [idx, flag with message OR full message with time]"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"        int idxToUpdate;"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":166,"author":{"gitId":"nhzaci"},"content":"            idxToUpdate \u003d Integer.parseInt(updateTodoCommandArgsSplitByWhitespace.get(0)) - ONE_BASED_INDEX_OFFSET;"},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":168,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"Please input the index of the task \""},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":"                    + \"right after the update command as \u0027\" + updateTodoCommandArgsSplitByWhitespace.get(0)"},{"lineNumber":170,"author":{"gitId":"nhzaci"},"content":"                    + \"\u0027 is not recognised as a valid index\");"},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":"        if (idxToUpdate \u003c 0 || idxToUpdate \u003e\u003d this.todos.size()) {"},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"The index you specified for the task does not exist, \""},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":"                    + \"please try again\");"},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":"        // get todo to be updated if in range"},{"lineNumber":179,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e todoToUpdate \u003d this.todos.get(idxToUpdate);"},{"lineNumber":180,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":181,"author":{"gitId":"nhzaci"},"content":"        // get flag from command"},{"lineNumber":182,"author":{"gitId":"nhzaci"},"content":"        Flags flag \u003d Parser.getFlag(updateTodoCommandArgsSplitByWhitespace.get(1));"},{"lineNumber":183,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":184,"author":{"gitId":"nhzaci"},"content":"        // if there\u0027s a flag included, the message to start iterating starts later"},{"lineNumber":185,"author":{"gitId":"nhzaci"},"content":"        int idxToStartIterating \u003d (flag !\u003d Flags.NONE ? 2 : 1);"},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":187,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e todoMessageArgs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":188,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e todoEventTimeArgs \u003d new ArrayList\u003c\u003e();"},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":192,"author":{"gitId":"nhzaci"},"content":"        updateTodoCommandArgsSplitByWhitespace"},{"lineNumber":193,"author":{"gitId":"nhzaci"},"content":"                .subList(idxToStartIterating, updateTodoCommandArgsSplitByWhitespace.size())"},{"lineNumber":194,"author":{"gitId":"nhzaci"},"content":"                .forEach(substring -\u003e {"},{"lineNumber":195,"author":{"gitId":"nhzaci"},"content":"                    if (substring.equals(\"/by\") || substring.equals(\"/at\")) {"},{"lineNumber":196,"author":{"gitId":"nhzaci"},"content":"                        todoEventTimeArgs.add(substring);"},{"lineNumber":197,"author":{"gitId":"nhzaci"},"content":"                    } else if (todoEventTimeArgs.size() \u003d\u003d 0) {"},{"lineNumber":198,"author":{"gitId":"nhzaci"},"content":"                        todoMessageArgs.add(substring);"},{"lineNumber":199,"author":{"gitId":"nhzaci"},"content":"                    } else {"},{"lineNumber":200,"author":{"gitId":"nhzaci"},"content":"                        todoEventTimeArgs.add(substring);"},{"lineNumber":201,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":202,"author":{"gitId":"nhzaci"},"content":"        });"},{"lineNumber":203,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":204,"author":{"gitId":"nhzaci"},"content":"        if (todoMessageArgs.size() \u003d\u003d 0) {"},{"lineNumber":205,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please enter a task description to update your current task\");"},{"lineNumber":206,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e updatedTodo \u003d Optional.empty();"},{"lineNumber":209,"author":{"gitId":"nhzaci"},"content":"        // do stateful operation of returning a new object depending on what type it is and what flag was used"},{"lineNumber":210,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":"            updatedTodo \u003d todoToUpdate.map(todo -\u003e {"},{"lineNumber":212,"author":{"gitId":"nhzaci"},"content":"                if (todo instanceof Event) {"},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":"                    Event event \u003d (Event) todo;"},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"                    // @formatter:off"},{"lineNumber":215,"author":{"gitId":"nhzaci"},"content":"                    switch(flag) {"},{"lineNumber":216,"author":{"gitId":"nhzaci"},"content":"                    case MESSAGE:"},{"lineNumber":217,"author":{"gitId":"nhzaci"},"content":"                        return event.updateMessage(String.join(\" \", todoMessageArgs));"},{"lineNumber":218,"author":{"gitId":"nhzaci"},"content":"                    case TIME:"},{"lineNumber":219,"author":{"gitId":"nhzaci"},"content":"                        return event.updateTime(String.join(\" \", todoMessageArgs));"},{"lineNumber":220,"author":{"gitId":"nhzaci"},"content":"                    case NONE:"},{"lineNumber":221,"author":{"gitId":"nhzaci"},"content":"                        return event.update("},{"lineNumber":222,"author":{"gitId":"nhzaci"},"content":"                                String.join(\" \", todoMessageArgs),"},{"lineNumber":223,"author":{"gitId":"nhzaci"},"content":"                                String.join(\" \", todoEventTimeArgs.subList(1, todoEventTimeArgs.size()))"},{"lineNumber":224,"author":{"gitId":"nhzaci"},"content":"                        );"},{"lineNumber":225,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":226,"author":{"gitId":"nhzaci"},"content":"                } else if (todo instanceof Deadline) {"},{"lineNumber":227,"author":{"gitId":"nhzaci"},"content":"                    Deadline deadline \u003d (Deadline) todo;"},{"lineNumber":228,"author":{"gitId":"nhzaci"},"content":"                    // @formatter:off"},{"lineNumber":229,"author":{"gitId":"nhzaci"},"content":"                    switch(flag) {"},{"lineNumber":230,"author":{"gitId":"nhzaci"},"content":"                    case MESSAGE:"},{"lineNumber":231,"author":{"gitId":"nhzaci"},"content":"                        return deadline.updateMessage(String.join(\" \", todoMessageArgs));"},{"lineNumber":232,"author":{"gitId":"nhzaci"},"content":"                    case TIME:"},{"lineNumber":233,"author":{"gitId":"nhzaci"},"content":"                        return deadline.updateTime(String.join(\" \", todoMessageArgs));"},{"lineNumber":234,"author":{"gitId":"nhzaci"},"content":"                    case NONE:"},{"lineNumber":235,"author":{"gitId":"nhzaci"},"content":"                        return deadline.update("},{"lineNumber":236,"author":{"gitId":"nhzaci"},"content":"                                String.join(\" \", todoMessageArgs),"},{"lineNumber":237,"author":{"gitId":"nhzaci"},"content":"                                String.join(\" \", todoEventTimeArgs.subList(1, todoEventTimeArgs.size()))"},{"lineNumber":238,"author":{"gitId":"nhzaci"},"content":"                        );"},{"lineNumber":239,"author":{"gitId":"nhzaci"},"content":"                    }"},{"lineNumber":240,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":241,"author":{"gitId":"nhzaci"},"content":"                return todo.updateMessage(String.join(\" \", todoMessageArgs));"},{"lineNumber":242,"author":{"gitId":"nhzaci"},"content":"            });"},{"lineNumber":243,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":244,"author":{"gitId":"nhzaci"},"content":"            throw new DukeDateTimeParseException("},{"lineNumber":245,"author":{"gitId":"nhzaci"},"content":"                    \"Please format your date to be DD/MM/YYYY HHMM\");"},{"lineNumber":246,"author":{"gitId":"nhzaci"},"content":"        } catch (Exception e) {"},{"lineNumber":247,"author":{"gitId":"nhzaci"},"content":"            if (flag \u003d\u003d Flags.NONE) {"},{"lineNumber":248,"author":{"gitId":"nhzaci"},"content":"                throw new DukeBlankDetailsException(\"Please ensure you have entered the date if \""},{"lineNumber":249,"author":{"gitId":"nhzaci"},"content":"                        + \"you are updating an Event or a Deadline, after the task description\""},{"lineNumber":250,"author":{"gitId":"nhzaci"},"content":"                        + \"after adding a /at or /by or use a -m flag to update only the message\");"},{"lineNumber":251,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":252,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":254,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e finalUpdatedTodo \u003d updatedTodo;"},{"lineNumber":255,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(new TaskList(IntStream.range(0, this.todos.size())"},{"lineNumber":256,"author":{"gitId":"nhzaci"},"content":"                .mapToObj(idx -\u003e idx \u003d\u003d idxToUpdate"},{"lineNumber":257,"author":{"gitId":"nhzaci"},"content":"                        ? finalUpdatedTodo"},{"lineNumber":258,"author":{"gitId":"nhzaci"},"content":"                        : this.todos.get(idx))"},{"lineNumber":259,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList())), updatedTodo);"},{"lineNumber":260,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":261,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":262,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":263,"author":{"gitId":"nhzaci"},"content":"     * Takes in the list containing details about the new deadline and returns a Pair of new"},{"lineNumber":264,"author":{"gitId":"nhzaci"},"content":"     * TaskList with updated tasks and the new deadline added"},{"lineNumber":265,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineCommandArgsSplitByWhitespace takes in list of arguments provided to the command for processing into"},{"lineNumber":266,"author":{"gitId":"nhzaci"},"content":"     *        a Deadline object"},{"lineNumber":267,"author":{"gitId":"nhzaci"},"content":"     * @return Pair of TaskList and added Deadline"},{"lineNumber":268,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException Exception is thrown when user does not add in any details"},{"lineNumber":269,"author":{"gitId":"nhzaci"},"content":"     *         after typing the \u0027deadline\u0027 command"},{"lineNumber":270,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to define an deadline,"},{"lineNumber":271,"author":{"gitId":"nhzaci"},"content":"     *         without adding /by details for the even"},{"lineNumber":272,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeDateTimeParseException Exception is thrown when date time passed into CLI is of"},{"lineNumber":273,"author":{"gitId":"nhzaci"},"content":"     *         the wrong format"},{"lineNumber":274,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":275,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addDeadline(List\u003cString\u003e deadlineCommandArgsSplitByWhitespace)"},{"lineNumber":276,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeBlankDetailsException, DukeDateTimeParseException {"},{"lineNumber":277,"author":{"gitId":"nhzaci"},"content":"        if (deadlineCommandArgsSplitByWhitespace.size() \u003d\u003d 0) {"},{"lineNumber":278,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Deadline you are trying to add cannot be blank!\");"},{"lineNumber":279,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":280,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":281,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e newDeadlineMessages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":282,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e newDeadlineDateTimeStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":283,"author":{"gitId":"-"},"content":""},{"lineNumber":284,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":285,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":286,"author":{"gitId":"nhzaci"},"content":"        deadlineCommandArgsSplitByWhitespace.stream().forEach(substring -\u003e {"},{"lineNumber":287,"author":{"gitId":"nhzaci"},"content":"            if (substring.equals(\"/by\")) {"},{"lineNumber":288,"author":{"gitId":"nhzaci"},"content":"                newDeadlineDateTimeStrings.add(substring);"},{"lineNumber":289,"author":{"gitId":"nhzaci"},"content":"            } else if (newDeadlineDateTimeStrings.size() \u003d\u003d 0) {"},{"lineNumber":290,"author":{"gitId":"nhzaci"},"content":"                newDeadlineMessages.add(substring);"},{"lineNumber":291,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":292,"author":{"gitId":"nhzaci"},"content":"                newDeadlineDateTimeStrings.add(substring);"},{"lineNumber":293,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":294,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":295,"author":{"gitId":"-"},"content":""},{"lineNumber":296,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":297,"author":{"gitId":"nhzaci"},"content":"        if (newDeadlineMessages.size() \u003d\u003d 0) {"},{"lineNumber":298,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Deadline\");"},{"lineNumber":299,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":300,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":301,"author":{"gitId":"nhzaci"},"content":"        // if no deadline input or /by without any deadline, throw exception"},{"lineNumber":302,"author":{"gitId":"nhzaci"},"content":"        if (newDeadlineDateTimeStrings.size() \u003c\u003d 1) {"},{"lineNumber":303,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":304,"author":{"gitId":"nhzaci"},"content":"            String exceptionMessage \u003d \"Please add a /by followed by the deadline time and date in DD/MM/YYYY \""},{"lineNumber":305,"author":{"gitId":"nhzaci"},"content":"                    + \"HHMM to specify a time and date for the Deadline task. If there is no time for \""},{"lineNumber":306,"author":{"gitId":"nhzaci"},"content":"                    + \"this deadline perhaps consider creating a todo instead.\";"},{"lineNumber":307,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException(exceptionMessage);"},{"lineNumber":308,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":309,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":310,"author":{"gitId":"nhzaci"},"content":"        // Create new Deadline object, slicing newDeadlineDateTimeStrings array from index 1 since we"},{"lineNumber":311,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/by\u0027 which shouldn\u0027t be in the actual Deadline object"},{"lineNumber":312,"author":{"gitId":"nhzaci"},"content":"        // creating a new deadline might throw an exception if the date time is in the"},{"lineNumber":313,"author":{"gitId":"nhzaci"},"content":"        // wrong format"},{"lineNumber":314,"author":{"gitId":"nhzaci"},"content":"        Optional\u003cDeadline\u003e newDeadline;"},{"lineNumber":315,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":316,"author":{"gitId":"nhzaci"},"content":"            newDeadline \u003d Optional.of(new Deadline(String.join(\" \", newDeadlineMessages),"},{"lineNumber":317,"author":{"gitId":"nhzaci"},"content":"                    String.join(\" \", newDeadlineDateTimeStrings.subList(1, newDeadlineDateTimeStrings.size()))));"},{"lineNumber":318,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":319,"author":{"gitId":"nhzaci"},"content":"            throw new DukeDateTimeParseException("},{"lineNumber":320,"author":{"gitId":"nhzaci"},"content":"                    \"Please format your date after /by to be DD/MM/YYYY HHMM\");"},{"lineNumber":321,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":322,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":323,"author":{"gitId":"nhzaci"},"content":"        // return new pair"},{"lineNumber":324,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(new TaskList(Stream.concat(this.todos.stream(), Stream.of(newDeadline))"},{"lineNumber":325,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList())), newDeadline);"},{"lineNumber":326,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"-"},"content":""},{"lineNumber":328,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":329,"author":{"gitId":"nhzaci"},"content":"     * Takes in the list containing details about the new deadline and returns a Pair of updated"},{"lineNumber":330,"author":{"gitId":"nhzaci"},"content":"     * TaskList and added Event"},{"lineNumber":331,"author":{"gitId":"nhzaci"},"content":"     * @param newEventCommandArgs takes in list of arguments provided to the command for processing into a"},{"lineNumber":332,"author":{"gitId":"nhzaci"},"content":"     *        Event object"},{"lineNumber":333,"author":{"gitId":"nhzaci"},"content":"     * @return Pair of updated TaskList and added Event"},{"lineNumber":334,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException Exception is thrown when user does not add in any details"},{"lineNumber":335,"author":{"gitId":"nhzaci"},"content":"     *         after typing the \u0027event\u0027 command"},{"lineNumber":336,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to define an event,"},{"lineNumber":337,"author":{"gitId":"nhzaci"},"content":"     *         without adding /at details for the event"},{"lineNumber":338,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeDateTimeParseException Exception is thrown when date time passed into CLI is of"},{"lineNumber":339,"author":{"gitId":"nhzaci"},"content":"     *         the wrong format"},{"lineNumber":340,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":341,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addEvent(List\u003cString\u003e newEventCommandArgs)"},{"lineNumber":342,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankDetailsException, DukeBlankTaskException, DukeDateTimeParseException {"},{"lineNumber":343,"author":{"gitId":"nhzaci"},"content":"        // if list is empty, throw error"},{"lineNumber":344,"author":{"gitId":"nhzaci"},"content":"        if (newEventCommandArgs.size() \u003d\u003d 0) {"},{"lineNumber":345,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Event you are trying to add cannot be blank!\");"},{"lineNumber":346,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":347,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":348,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e newEventMessages \u003d new ArrayList\u003c\u003e();"},{"lineNumber":349,"author":{"gitId":"nhzaci"},"content":"        // newEventDateTimeStrings will contain /at command"},{"lineNumber":350,"author":{"gitId":"nhzaci"},"content":"        ArrayList\u003cString\u003e newEventDateTimeStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":351,"author":{"gitId":"-"},"content":""},{"lineNumber":352,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":353,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":354,"author":{"gitId":"nhzaci"},"content":"        newEventCommandArgs.forEach(substring -\u003e {"},{"lineNumber":355,"author":{"gitId":"nhzaci"},"content":"            if (substring.equals(\"/at\")) {"},{"lineNumber":356,"author":{"gitId":"nhzaci"},"content":"                newEventDateTimeStrings.add(substring);"},{"lineNumber":357,"author":{"gitId":"nhzaci"},"content":"            } else if (newEventDateTimeStrings.size() \u003d\u003d 0) {"},{"lineNumber":358,"author":{"gitId":"nhzaci"},"content":"                newEventMessages.add(substring);"},{"lineNumber":359,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":360,"author":{"gitId":"nhzaci"},"content":"                newEventDateTimeStrings.add(substring);"},{"lineNumber":361,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":362,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":363,"author":{"gitId":"-"},"content":""},{"lineNumber":364,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":365,"author":{"gitId":"nhzaci"},"content":"        if (newEventMessages.size() \u003d\u003d 0) {"},{"lineNumber":366,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Event\");"},{"lineNumber":367,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":368,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":369,"author":{"gitId":"nhzaci"},"content":"        // if no event input or /at without any event, throw exception"},{"lineNumber":370,"author":{"gitId":"nhzaci"},"content":"        if (newEventDateTimeStrings.size() \u003c\u003d 1) {"},{"lineNumber":371,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":372,"author":{"gitId":"nhzaci"},"content":"            String exceptionMessage \u003d \"Please add a /at followed by the event time and date in DD/MM/YYYY \""},{"lineNumber":373,"author":{"gitId":"nhzaci"},"content":"                            + \"HHMM to specify a time and date for the Event task. If there is no time for \""},{"lineNumber":374,"author":{"gitId":"nhzaci"},"content":"                            + \"this event perhaps consider creating a todo instead.\";"},{"lineNumber":375,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException(exceptionMessage);"},{"lineNumber":376,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":377,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":378,"author":{"gitId":"nhzaci"},"content":"        // Create new Event object, slicing newEventDateTimeStrings array from index 1 since we"},{"lineNumber":379,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/at\u0027 which shouldn\u0027t be in the actual Event object"},{"lineNumber":380,"author":{"gitId":"nhzaci"},"content":"        // Creating an event might throw an exception if the date is in the wrong format"},{"lineNumber":381,"author":{"gitId":"nhzaci"},"content":"        Optional\u003cEvent\u003e newEvent;"},{"lineNumber":382,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":383,"author":{"gitId":"nhzaci"},"content":"            newEvent \u003d Optional.of(new Event(String.join(\" \", newEventMessages),"},{"lineNumber":384,"author":{"gitId":"nhzaci"},"content":"                    String.join(\" \", newEventDateTimeStrings.subList(1, newEventDateTimeStrings.size()))));"},{"lineNumber":385,"author":{"gitId":"nhzaci"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":386,"author":{"gitId":"nhzaci"},"content":"            throw new DukeDateTimeParseException("},{"lineNumber":387,"author":{"gitId":"nhzaci"},"content":"                    \"Please format your date after /at to be DD/MM/YYYY HHMM\");"},{"lineNumber":388,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":389,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":390,"author":{"gitId":"nhzaci"},"content":"        // return new pair"},{"lineNumber":391,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(new TaskList(Stream.concat(this.todos.stream(), Stream.of(newEvent))"},{"lineNumber":392,"author":{"gitId":"nhzaci"},"content":"                .collect(Collectors.toList())), newEvent);"},{"lineNumber":393,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":394,"author":{"gitId":"-"},"content":""},{"lineNumber":395,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":396,"author":{"gitId":"nhzaci"},"content":"     * Index of todo passed in to be marked as done is lesser than length of todosList,"},{"lineNumber":397,"author":{"gitId":"nhzaci"},"content":"     * else there would be an ArrayOutOfBoundsException thrown"},{"lineNumber":398,"author":{"gitId":"nhzaci"},"content":"     * @param doneCommandArgs should be a List of Strings with size 1 containing one argument that is the ID of"},{"lineNumber":399,"author":{"gitId":"nhzaci"},"content":"     *        which todo to mark as done and uses a 1-based indexing of the todos"},{"lineNumber":400,"author":{"gitId":"nhzaci"},"content":"     * @return Pair of TaskList and todo that is marked as done"},{"lineNumber":401,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException Exception is thrown when the user specifies a task"},{"lineNumber":402,"author":{"gitId":"nhzaci"},"content":"     *         index that is out of range."},{"lineNumber":403,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":404,"author":{"gitId":"nhzaci"},"content":"    public Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e markAsDone(List\u003cString\u003e doneCommandArgs) throws DukeTaskIndexOutOfRangeException {"},{"lineNumber":405,"author":{"gitId":"nhzaci"},"content":"        int idxIsDone;"},{"lineNumber":406,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":407,"author":{"gitId":"nhzaci"},"content":"            idxIsDone \u003d Integer.parseInt(doneCommandArgs.get(0)) - ONE_BASED_INDEX_OFFSET;"},{"lineNumber":408,"author":{"gitId":"nhzaci"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":409,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"Please input the index of the task \""},{"lineNumber":410,"author":{"gitId":"nhzaci"},"content":"                    + \"right after the update command as \u0027\" + doneCommandArgs.get(0)"},{"lineNumber":411,"author":{"gitId":"nhzaci"},"content":"                    + \"\u0027 is not recognised as a valid index\");"},{"lineNumber":412,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":413,"author":{"gitId":"nhzaci"},"content":"        if (idxIsDone \u003e\u003d this.todos.size()) {"},{"lineNumber":414,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException(\"The index you input has an index that is \""},{"lineNumber":415,"author":{"gitId":"nhzaci"},"content":"                            + \"beyond the range of the number of tasks you currently have. \""},{"lineNumber":416,"author":{"gitId":"nhzaci"},"content":"                            + \"Please try again.\");"},{"lineNumber":417,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":418,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":419,"author":{"gitId":"nhzaci"},"content":"        // Get Todo to be marked as done"},{"lineNumber":420,"author":{"gitId":"nhzaci"},"content":"        Optional\u003c? extends Todo\u003e doneTodo \u003d this.todos.get(idxIsDone).map(Todo::markAsDone);"},{"lineNumber":421,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":422,"author":{"gitId":"nhzaci"},"content":"        // Get new TaskList containing the new Todo"},{"lineNumber":423,"author":{"gitId":"nhzaci"},"content":"        TaskList newTaskListWithTodoMarkedAsDone \u003d new TaskList(IntStream.range(0, this.todos.size())"},{"lineNumber":424,"author":{"gitId":"nhzaci"},"content":"                .mapToObj(idx -\u003e {"},{"lineNumber":425,"author":{"gitId":"nhzaci"},"content":"                    // check if idx is equal to done object"},{"lineNumber":426,"author":{"gitId":"nhzaci"},"content":"                    // if it is, return done object,"},{"lineNumber":427,"author":{"gitId":"nhzaci"},"content":"                    // else return original object"},{"lineNumber":428,"author":{"gitId":"nhzaci"},"content":"                    return idx \u003d\u003d idxIsDone"},{"lineNumber":429,"author":{"gitId":"nhzaci"},"content":"                            ? doneTodo"},{"lineNumber":430,"author":{"gitId":"nhzaci"},"content":"                            : this.todos.get(idx);"},{"lineNumber":431,"author":{"gitId":"-"},"content":"                }).collect(Collectors.toList()));"},{"lineNumber":432,"author":{"gitId":"-"},"content":""},{"lineNumber":433,"author":{"gitId":"nhzaci"},"content":"        // return Pair of new Task List and todo that\u0027s done"},{"lineNumber":434,"author":{"gitId":"nhzaci"},"content":"        return new Pair\u003c\u003e(newTaskListWithTodoMarkedAsDone, doneTodo);"},{"lineNumber":435,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":436,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":390,"-":46}},{"path":"src/main/java/duke/controllers/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import duke.models.Pair;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import duke.models.Storage;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.models.Parser;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.views.Greeting;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.views.TodosView;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"public class Ui {"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    /** Storage to deal with database functions */"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private final Storage storage;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    /** TaskList containing tasks and logic */"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"     * Initialises Storage and TaskList"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * @param storage indicating initialised Storage"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    public Ui(Storage storage) {"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        this.storage \u003d storage;"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        this.taskList \u003d new TaskList(storage.retrieveLocalDatabase());"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     * AppController starts to listen to commands from the user and performs actions as required by"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * user\u0027s commands"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    public String respondToInput(String input) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        // list has structure [command, ... command related args]"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        Parser command \u003d new Parser(Arrays.asList((input.split(\" \"))));"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        // try catch statement wraps around getCommand which may throw an error if"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // command input does not adhere to command format"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":43,"author":{"gitId":"-"},"content":"            switch (command.getCommand()) {"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"            case LIST:"},{"lineNumber":45,"author":{"gitId":"-"},"content":"                // list all the current todos"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"                return TodosView.formatListOfTodosToString(taskList.getTodos());"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"            case EVENT:"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"                // add a new todo to the tasklist"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                    // get pair return"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addEventReturn \u003d"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                            taskList.addEvent(command.getCommandArgs());"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                    // assign updated tasklist"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d addEventReturn.getFirst();"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"                    // get new event added"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e newEvent \u003d addEventReturn.getSecond();"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"                    // return string reply to adding of new event"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.addTodoReply(newEvent, taskList.todosSize());"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"                } catch (Exception e) {"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"            case TODO:"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"                // add a new todo to the tasklist"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"                    // get pair return from tasklist add todo"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addTodoReturn \u003d"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"                            taskList.addTodo(command.getCommandArgs());"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"                    // update with new tasklist"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d addTodoReturn.getFirst();"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                    // get new todo from tasklist return"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e newTodo \u003d addTodoReturn.getSecond();"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"                    // return rendered reply for todo"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.addTodoReply(newTodo, taskList.todosSize());"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"                } catch (DukeBlankTaskException e) {"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"            case DEADLINE:"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"                // add a deadline to tasklist"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"                    // create new deadline with params from task list"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e addDeadlineReturn \u003d"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"                            taskList.addDeadline(command.getCommandArgs());"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"                    // get updated tasklist and replace instance in class"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d addDeadlineReturn.getFirst();"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"                    // get new deadline to be printed"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e newDeadline \u003d addDeadlineReturn.getSecond();"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"                    // return rendered String of deadline"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.addTodoReply(newDeadline, taskList.todosSize());"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"                } catch (Exception e) {"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"            case UPDATE:"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"                // Update a task"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"                    // update the todo and get return from controller"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e updateTodoReturn \u003d"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"                            taskList.updateTodo(command.getCommandArgs());"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"                    // replace taskList with new one from tasklist return"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d updateTodoReturn.getFirst();"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"                    // get todoUpdated to be printed"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e todoUpdated \u003d updateTodoReturn.getSecond();"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"                    // reply with the String output"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.updateTodoReply(todoUpdated);"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"                } catch (Exception e) {"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"            case DONE:"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                // mark a todo as done"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                    // get mark as done reply from tasklist"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e markAsDoneReturn \u003d"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"                            taskList.markAsDone(command.getCommandArgs());"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"                    // replace taskList with new one from tasklist return"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d markAsDoneReturn.getFirst();"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"                    // get todoMarkedAsDone to be printed"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e todoMarkedAsDone \u003d markAsDoneReturn.getSecond();"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"                    // reply with the String output"},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.markTodoAsDoneReply(todoMarkedAsDone);"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"                } catch (DukeTaskIndexOutOfRangeException e) {"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":"            case DELETE:"},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"                // delete a todo from the list"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":"                    // get response from tasklist for delete"},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"                    Pair\u003cTaskList, Optional\u003c? extends Todo\u003e\u003e deleteTodoReturn \u003d"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"                            taskList.deleteTodo(command.getCommandArgs());"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"                    // set new taskList as updated one"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"                    taskList \u003d deleteTodoReturn.getFirst();"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"                    // get deleted todo"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"                    Optional\u003c? extends Todo\u003e deletedTodo \u003d deleteTodoReturn.getSecond();"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"                    // return reply of deleted todo"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"                    return TodosView.deleteTodoReply(deletedTodo, taskList.todosSize());"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"                } catch (Exception e) {"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"            case FIND:"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"                // find a todo with the relevant keyword"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"                return TodosView.formatMatchedTodosToString(taskList.findByKeyword(command.getCommandArgs()));"},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"            case BYE:"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"                // save current todosController tasks to local db before exit"},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"                storage.saveTasksToLocalDatabase(taskList.getTodos());"},{"lineNumber":157,"author":{"gitId":"-"},"content":""},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":"                // return bye greeting"},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":"                return Greeting.bye();"},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"            case UNKNOWN:"},{"lineNumber":161,"author":{"gitId":"nhzaci"},"content":"                // Fallthrough"},{"lineNumber":162,"author":{"gitId":"-"},"content":"            default:"},{"lineNumber":163,"author":{"gitId":"-"},"content":"                // print command printed in if not recognised"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"                    throw new DukeCommandNotFoundException("},{"lineNumber":166,"author":{"gitId":"nhzaci"},"content":"                            \"Sorry, the command you are trying to use is not found, please try again!\");"},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":"                } catch (DukeCommandNotFoundException e) {"},{"lineNumber":168,"author":{"gitId":"nhzaci"},"content":"                    return Greeting.printErrorMessage(e);"},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":170,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":"            // catch error from Command.getCommand()"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":"            return Greeting.printErrorMessage(e);"},{"lineNumber":174,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":"            // program not supposed to end up here"},{"lineNumber":176,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":177,"author":{"gitId":"nhzaci"},"content":"            return \"Error, unexpected catch statement executed\";"},{"lineNumber":178,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"-"},"content":""},{"lineNumber":181,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":157,"-":24}},{"path":"src/main/java/duke/exceptions/DukeBlankDetailsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankDetailsException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankDetailsException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeBlankTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankTaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankTaskException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeCommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeCommandNotFoundException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeCommandNotFoundException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeDateTimeParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeDateTimeParseException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeDateTimeParseException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeInvalidFlagException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeInvalidFlagException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeInvalidFlagException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/exceptions/DukeTaskIndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeTaskIndexOutOfRangeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    public DukeTaskIndexOutOfRangeException(String message) {"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":7}},{"path":"src/main/java/duke/models/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public enum Commands {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    LIST, EVENT, TODO, DEADLINE, DONE, DELETE, BYE, UNKNOWN, FIND, UPDATE"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":5}},{"path":"src/main/java/duke/models/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Deadline extends Todo {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH:mm\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** String denoting the deadline of a Deadline object */"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    protected String deadlineString;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    protected LocalDateTime deadlineDateTime;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the deadline in a Deadline object"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String specific to deadlines denoting when the deadline is due"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public Deadline(String message, String deadlineString) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        this.deadlineString \u003d deadlineString;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        this.deadlineDateTime \u003d parseStringToLocalDateTime(deadlineString);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the isDone attribute of an Deadline"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if a Todo is done"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String specific to deadlineStrings denoting the deadlineString of a"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"     *        Deadline Todo"},{"lineNumber":35,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"    public Deadline(String message, boolean isDone, String deadlineString) {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        super(message, isDone);"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.deadlineString \u003d deadlineString;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        this.deadlineDateTime \u003d parseStringToLocalDateTime(deadlineString);"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     * Expects String in the format dd/MM/yyyy HHMM and returns LocalDateTime object"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * @param deadlineString String passed in with the format dd/MM/yyyy HHMM"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * @return LocalDateTime object from String deadlineString passed in"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     * @throws DateTimeParseException when date time is in the wrong format"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"    private LocalDateTime parseStringToLocalDateTime(String deadlineString)"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"            throws DateTimeParseException {"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        // @formatter:off"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"        return LocalDateTime.parse(deadlineString.length() \u003d\u003d 15"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                ? deadlineString"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"                : String.format(\"0%s\", deadlineString), inputDateFormat);"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     * Getter method for deadline of a Deadline object"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     * @return String containing deadline of the Deadline"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public String getDeadline() {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        return this.deadlineDateTime.format(inputDateFormat);"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"     * Getter method for deadline time from LocalDateTime of a Deadline object"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * @return String containing deadline of the Deadline object, parsed from LocalDateTime object"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     *         in a prettier format"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    public String getPrettierDeadlineDateTime() {"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"%s hrs\", this.deadlineDateTime.format(outputDateFormat));"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":76,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * Method overridden from Todo\u0027s getMessage method to return Deadline type and deadline"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     * @return String to be rendered to give information on the Deadline"},{"lineNumber":80,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getIsDoneIcon(), this.message,"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"                this.getPrettierDeadlineDateTime());"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"-"},"content":""},{"lineNumber":87,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * Method overridden the super class\u0027 to return a new Deadline that is marked as done instead of"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"     * a new Todo"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     * @return Deadline that is marked as done"},{"lineNumber":92,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    public Deadline markAsDone() {"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        return new Deadline(this.message, true, this.getDeadline());"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"     * updates time for a Deadline by passing in the new String time"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"     * @param newTime String containing new time in format DD/MM/YYYY HHMM"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"     * @return new Deadline with the updated date time"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"    public Deadline updateTime(String newTime) throws DateTimeParseException {"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"        return new Deadline(message, isDone, newTime);"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"     * Returns a Deadline with the updated message"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"     * @param newMessage String containing new message for Event to contain"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"     * @return new Deadline with updated message"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"    public Deadline updateMessage(String newMessage) {"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        return new Deadline(newMessage, isDone, deadlineString);"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"     * Update a Deadline with a new message, keeping it\u0027s isDone state"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"     * @param newMessage String containing new message"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"     * @param newTime String containing new time"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"     * @return Deadline updated with new message passed in"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"    public Deadline update(String newMessage, String newTime) {"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"        return new Deadline(newMessage, isDone, newTime);"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":91,"-":35}},{"path":"src/main/java/duke/models/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Event extends Todo {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter inputDateFormat \u003d"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    private static final DateTimeFormatter outputDateFormat \u003d"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"            DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH:mm\");"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    /** String denoting eventTime fo an Event object */"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    protected String eventStringDateTime;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    protected LocalDateTime eventDateTime;"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the eventTime in an Event object"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * @param eventStringDateTime String specific to events denoting when the event will be occurring"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    public Event(String message, String eventStringDateTime) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        super(message);"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        this.eventStringDateTime \u003d eventStringDateTime;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"        this.eventDateTime \u003d parseStringToLocalDateTime(eventStringDateTime);"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of the isDone attribute of an Event"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if a Todo is done"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * @param eventStringDateTime String specific to events denoting when the event will be occurring"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"    public Event(String message, boolean isDone, String eventStringDateTime) {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        super(message, isDone);"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        this.eventStringDateTime \u003d eventStringDateTime;"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.eventDateTime \u003d parseStringToLocalDateTime(eventStringDateTime);"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"     * Expects String in the format dd/MM/yyyy HHMM and returns LocalDateTime object"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     * @param eventDateTimeString String passed in with the format dd/MM/yyyy HHMM"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     * @return LocalDateTime object from String eventTimeString passed in"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * @throws DateTimeParseException when the date time is in the wrong format"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    private LocalDateTime parseStringToLocalDateTime(String eventDateTimeString)"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"            throws DateTimeParseException {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"        // @formatter:off"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        return LocalDateTime.parse(eventDateTimeString.length() \u003d\u003d 15"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                ? eventStringDateTime"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                : String.format(\"0%s\", eventStringDateTime), inputDateFormat);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * Getter method for event time from LocalDateTime of an Event object"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     * @return String containing event time of the Event, parsed from LocalDateTime object"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    public String getEventTime() {"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        return this.eventDateTime.format(inputDateFormat);"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"     * Getter method for event time from LocalDateTime of an Event object"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"     * @return String containing event time of the Event, parsed from LocalDateTime object in a"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     *         prettier format"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"    public String getPrettierEventTime() {"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"%s hrs\", this.eventDateTime.format(outputDateFormat));"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":75,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     * Method overridden from Todo\u0027s getMessage method to return event type and eventTime"},{"lineNumber":77,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     * @return String to be rendered to give information on the Event"},{"lineNumber":79,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getIsDoneIcon(), this.message,"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                this.getPrettierEventTime());"},{"lineNumber":84,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"-"},"content":""},{"lineNumber":86,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     * Method overridden the super class\u0027 to return a new Event that is marked as done instead of a"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * new Todo"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"-"},"content":"     * @return Event that is marked as done"},{"lineNumber":91,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":93,"author":{"gitId":"-"},"content":"    public Event markAsDone() {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        return new Event(this.message, true, this.getEventTime());"},{"lineNumber":95,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"     * updates time for an Event by passing in the new String time"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"     * @param newTime String containing new time in format DD/MM/YYYY HHMM"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"     * @return new Event with the updated date time"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"    public Event updateTime(String newTime) throws DateTimeParseException {"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"        return new Event(message, isDone, newTime);"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"     * Returns an Event with the updated message"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"     * @param newMessage String containing new message for Event to contain"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"     * @return new Event with updated message"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"    @Override"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"    public Event updateMessage(String newMessage) {"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        return new Event(newMessage, isDone, eventStringDateTime);"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"     * Update an Event with a new message, keeping it\u0027s isDone state"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"     * @param newMessage String containing new message"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"     * @param newTime String containing new time the task is scheduled at"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"     * @return Event updated with new message passed in"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"    public Event update(String newMessage, String newTime) {"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"        return new Event(newMessage, isDone, newTime);"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":90,"-":35}},{"path":"src/main/java/duke/models/Flags.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":" * Used to check if commands have optional flags to further define usage"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":" */"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"public enum Flags {"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    NONE,"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    MESSAGE,"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    TIME"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":10}},{"path":"src/main/java/duke/models/Pair.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class Pair\u003cT, U\u003e {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    /** first attribute of pair */"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"    private final T first;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"    /** second attribute of pair */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    private final U second;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"     * Creates a new generic Pair which contains multiple types"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"     * @param first first attribute of pair"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"     * @param second second attribute of pair"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    public Pair(T first, U second) {"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"        this.first \u003d first;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"        this.second \u003d second;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"     * Get first attribute contained in Pair"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"     * @return first attribute of Pair"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    public T getFirst() {"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"        return this.first;"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * Get second attribute contained in Pair"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * @return second attribute of Pair"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    public U getSecond() {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        return this.second;"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":34}},{"path":"src/main/java/duke/models/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.util.Locale;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"public class Parser {"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    /** Command Index for a command is at index 0 */"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    private static final int COMMAND_INDEX \u003d 0;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    /** Command Index for a command args are at index 1 */"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    private static final int COMMAND_ARG_START_INDEX \u003d 1;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    /** Contains Optional String containing command from command input */"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cString\u003e command;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    /** Contains String after command string input */"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cList\u003cString\u003e\u003e commandArgs;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    /** Contains whole input string -\u003e used in Level-1 */"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private Optional\u003cList\u003cString\u003e\u003e fullCommand;"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"     * Initialises Command object by taking first item of the list as the command and the rest of"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * the itemms of the string gets taken as the command arguments Null safety is enforced through"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     * use of Optionals"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    public Parser(List\u003cString\u003e fullCommand) {"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        this.command \u003d Optional.ofNullable(fullCommand.get(COMMAND_INDEX));"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        this.commandArgs \u003d Optional.of(fullCommand.subList("},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"                COMMAND_ARG_START_INDEX, fullCommand.size()));"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        this.fullCommand \u003d Optional.of(fullCommand);"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"     * Gets the first String passed in from the list of inputs, which is the Command in the input"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     * line"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"     * @return Commands enum depicting which command is to be executed by the bot."},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    public Commands getCommand() throws DukeCommandNotFoundException {"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"        return this.command.map(commandString -\u003e {"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"            // @formatter:off"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"            switch (commandString.toLowerCase()) {"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"            case \"done\":"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"                return Commands.DONE;"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"            case \"list\":"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"                return Commands.LIST;"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"            case \"todo\":"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"                return Commands.TODO;"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"            case \"event\":"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                return Commands.EVENT;"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"            case \"deadline\":"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"                return Commands.DEADLINE;"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"            case \"delete\":"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"                return Commands.DELETE;"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"            case \"find\":"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"                return Commands.FIND;"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"            case \"update\":"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                return Commands.UPDATE;"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"            case \"bye\":"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                return Commands.BYE;"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"            default:"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"                return Commands.UNKNOWN;"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        }).orElseThrow(() -\u003e new DukeCommandNotFoundException(\"No command was supplied from input.\"));"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":""},{"lineNumber":68,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * Gets the remaining arguments passed into the command in the terminal as the arguments of the"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     * command"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     * @return List of Strings which contains the rest of the arguments passed into the terminal"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when command is blank"},{"lineNumber":73,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getCommandArgs() throws DukeCommandNotFoundException {"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"        return this.commandArgs.orElseThrow(() -\u003e new DukeCommandNotFoundException("},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"                \"No command arguments were supplied from input.\"));"},{"lineNumber":77,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"-"},"content":""},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"     * Used for level 1 to get full argument passed into the CLI, where todo, events and deadline"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"     * were yet to be implemented"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"     * @return List of Strings which contains the rest of the arguments passed into the terminal"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getFullCommand() throws DukeCommandNotFoundException {"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"        return this.fullCommand.orElseThrow(() -\u003e new DukeCommandNotFoundException("},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                \"No command arguments were supplied from input.\"));"},{"lineNumber":88,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"     * Get a flag from a flag String"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"     * @param flagString flag String before being parsed"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"     * @return Flags enums reflecting what the flag String should mean"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"    public static Flags getFlag(String flagString) {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"        if (flagString.length() \u003d\u003d 2) {"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"            if (flagString.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 flagString.charAt(1) \u003d\u003d \u0027m\u0027) {"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"                return Flags.MESSAGE;"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"            } else if (flagString.charAt(0) \u003d\u003d \u0027-\u0027 \u0026\u0026 flagString.charAt(1) \u003d\u003d \u0027t\u0027) {"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"                return Flags.TIME;"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"        return Flags.NONE;"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":86,"-":19}},{"path":"src/main/java/duke/models/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    /** Constant containing index of type character for any Todo */"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_TYPE_INDEX \u003d 0;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    /** Constant containing index of is done integer for any Todo */"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_IS_DONE_INDEX \u003d 1;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    /** Constant containing index of message String for any Todo */"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_MESSAGE_INDEX \u003d 2;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    /** Constant containing index of extra message for Deadline and Event */"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"    private static final int TODO_EXTRA_MESSAGE_INDEX \u003d 3;"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    /** Constant defining false for isDone for database file */"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_IS_DONE_FALSE \u003d \"0\";"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    /** Constant defining true for isDone for database file */"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    private static final String DATABASE_IS_DONE_TRUE \u003d \"1\";"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    /** filePath containing saved Todos */"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    private final String filePath;"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"    /** directory of file containing saved Todos */"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"    private final String directoryPath;"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"     * Creates a new instance of Storage which is responsible for storing and retrieving"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"     * tasks saved on a user\u0027s PC"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"     * @param filePath file path of the file containing the tasks"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"     * @param directoryPath directory path of the file containing the tasks"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"    public Storage(String filePath, String directoryPath) {"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        this.directoryPath \u003d directoryPath;"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"     * Attempt to retrieve a local save of the user\u0027s tasks on their pc as a list, if not found,"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     * return the an empty list"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"     * @return List containing either existing Todos based on data file or an empty list"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"    public List\u003cOptional\u003c? extends Todo\u003e\u003e retrieveLocalDatabase() {"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"            // get local file"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"            File localFile \u003d new File(this.filePath);"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"            // start scanner for file"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"            Scanner sc \u003d new Scanner(localFile);"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"            // init empty array"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"            List\u003cOptional\u003c? extends Todo\u003e\u003e existingTodosList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"            // scan through inputs in file"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"                // get line, splitting by special character delimiter |"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                List\u003cString\u003e line \u003d Arrays.asList(sc.nextLine().split(\"\\\\|\"));"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                // line \u003d [type, isDone, message, extraMessage (event / deadline)]"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"                String type \u003d line.get(TODO_TYPE_INDEX);"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"                // isDone would be \"1\" if done, \"0\" if not done"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"                boolean isDone \u003d line.get(TODO_IS_DONE_INDEX).equals(DATABASE_IS_DONE_TRUE);"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"                String message \u003d line.get(TODO_MESSAGE_INDEX);"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                // @formatter:off"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"                switch (type) {"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"                case \"T\":"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                    // create new todo"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of(new Todo(message, isDone)));"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"                case \"D\":"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"                    // create new deadline"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of("},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"                                new Deadline(message,"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                                            isDone,"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"                                            line.get(TODO_EXTRA_MESSAGE_INDEX))));"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"                case \"E\":"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                    // create new event"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"                    existingTodosList.add(Optional.of("},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                                new Event(message,"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"                                        isDone,"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"                                        line.get(TODO_EXTRA_MESSAGE_INDEX))));"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                default:"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"                    // should not reach default case"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"                    break;"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"            // close scanner"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"            sc.close();"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"            // return arraylist of todos"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"            return existingTodosList;"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"        } catch (Exception e) {"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"            // exception will be caught if no existing data file is found"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"            // e.printStackTrace();"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"     * Saves all tasks from the todosList into the local database"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"     * @param todosList List of todos passed to be saved into local database"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"    public void saveTasksToLocalDatabase(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"            // check if directory exists, if not, create it"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"            // else, delete file\u0027s current contents"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"            File databaseDirectory \u003d new File(this.directoryPath);"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"            File existingDatabase \u003d new File(this.filePath);"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"            if (databaseDirectory.exists()) {"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"                // delete existing file if it exists in directory"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                if (existingDatabase.exists()) {"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"                    // noinspection ResultOfMethodCallIgnored"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                    existingDatabase.delete();"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"            } else {"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"                // create directory if it doesn\u0027t exist"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"                // noinspection ResultOfMethodCallIgnored"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"                databaseDirectory.mkdir();"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"            // and existingDatabase should be deleted before writing a new one"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"            assert !existingDatabase.exists(): \"Database file should be be deleted but exists\";"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"            // Init to write file in append mode"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"            FileWriter writer \u003d new FileWriter(this.filePath, true);"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":132,"author":{"gitId":"nhzaci"},"content":"            // loop through list and write to file"},{"lineNumber":133,"author":{"gitId":"nhzaci"},"content":"            todosList.forEach(optTodo -\u003e {"},{"lineNumber":134,"author":{"gitId":"nhzaci"},"content":"                // lineToWrite will be written at the end"},{"lineNumber":135,"author":{"gitId":"nhzaci"},"content":"                String lineToWrite;"},{"lineNumber":136,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":137,"author":{"gitId":"nhzaci"},"content":"                // Check if Todo is an Event or Deadline"},{"lineNumber":138,"author":{"gitId":"nhzaci"},"content":"                if (optTodo.map(todo -\u003e todo instanceof Event).orElse(false)) {"},{"lineNumber":139,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e {"},{"lineNumber":140,"author":{"gitId":"nhzaci"},"content":"                        Event event \u003d (Event) todo;"},{"lineNumber":141,"author":{"gitId":"nhzaci"},"content":"                        return String.format(\"E|%s|%s|%s\", event.isTodoDone()"},{"lineNumber":142,"author":{"gitId":"nhzaci"},"content":"                                        ? DATABASE_IS_DONE_TRUE"},{"lineNumber":143,"author":{"gitId":"nhzaci"},"content":"                                        : DATABASE_IS_DONE_FALSE,"},{"lineNumber":144,"author":{"gitId":"nhzaci"},"content":"                                event.getRawMessage(), event.getEventTime());"},{"lineNumber":145,"author":{"gitId":"nhzaci"},"content":"                    }).orElse(\"\");"},{"lineNumber":146,"author":{"gitId":"nhzaci"},"content":"                } else if (optTodo.map(todo -\u003e todo instanceof Deadline).orElse(false)) {"},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e {"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"                        Deadline deadline \u003d (Deadline) todo;"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"                        return String.format(\"D|%s|%s|%s\", deadline.isTodoDone()"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"                                        ? DATABASE_IS_DONE_TRUE"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":"                                        : DATABASE_IS_DONE_FALSE,"},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"                                deadline.getRawMessage(), deadline.getDeadline());"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"                    }).orElse(\"\");"},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"                } else {"},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"                    lineToWrite \u003d optTodo.map(todo -\u003e String.format(\"T|%s|%s\","},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"                            todo.isTodoDone() ? DATABASE_IS_DONE_TRUE : DATABASE_IS_DONE_FALSE,"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":"                            todo.getRawMessage())).orElse(\"\");"},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":160,"author":{"gitId":"nhzaci"},"content":"                // Write todo to line in database"},{"lineNumber":161,"author":{"gitId":"nhzaci"},"content":"                try {"},{"lineNumber":162,"author":{"gitId":"nhzaci"},"content":"                    writer.write(String.format(\"%s\\n\", lineToWrite));"},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":"                } catch (IOException e) {"},{"lineNumber":164,"author":{"gitId":"nhzaci"},"content":"                    e.printStackTrace();"},{"lineNumber":165,"author":{"gitId":"nhzaci"},"content":"                }"},{"lineNumber":166,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":167,"author":{"gitId":"nhzaci"},"content":"            });"},{"lineNumber":168,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":169,"author":{"gitId":"nhzaci"},"content":"            // close writer on complete"},{"lineNumber":170,"author":{"gitId":"nhzaci"},"content":"            writer.close();"},{"lineNumber":171,"author":{"gitId":"nhzaci"},"content":"        } catch (Exception e) {"},{"lineNumber":172,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":173,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":176,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":176}},{"path":"src/main/java/duke/models/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Todo {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    protected String message;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    protected boolean isDone \u003d false;"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"     * Create a new Todo without specifying isDone attribute, which defaults to false"},{"lineNumber":9,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"-"},"content":"     * @param message denoting Todo message"},{"lineNumber":11,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public Todo(String message) {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"        this.message \u003d message;"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Constructor to allow setting of isDone boolean"},{"lineNumber":18,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @param message String message that a Todo contains"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     * @param isDone boolean denoting if Todo is done"},{"lineNumber":21,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    public Todo(String message, boolean isDone) {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        this.message \u003d message;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Render full message required to denote what each Todo is"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     * @return Type of todo, icon denoting whether it\u0027s done and message"},{"lineNumber":31,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public String getMessage() {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"        return String.format(\"[T][%s] %s\", this.getIsDoneIcon(), this.message);"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"     * Protected method that returns an tick icon if the Todo is completed, else returns a X icon"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @return String unicode for the icon to render"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    protected String getIsDoneIcon() {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        return this.isDone ? \"\\u2713\" : \"\\u2718\";"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Getter method for getting the isDone attribute of a Todo"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @return boolean on whether a todo is done"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    public boolean isTodoDone() {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        return this.isDone;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"     * Getter method for getting raw message without formatting of a Todo"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * @return String containing raw message of Todo"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"    public String getRawMessage() {"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        return this.message;"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * Marks a Todo as done by returning a new Todo"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @return Todo that is marked as done"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    public Todo markAsDone() {"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        return new Todo(this.message, true);"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"     * Update a todo with a new message, keeping it\u0027s isDone state"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"     * @param newMessage String containing new message"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     * @return Todo updated with new message passed in"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"    public Todo updateMessage(String newMessage) {"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"        return new Todo(newMessage, isDone);"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":21,"-":59}},{"path":"src/main/java/duke/views/Greeting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Greeting {"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"     * Outputs the standard greeting with duke.Duke Logo"},{"lineNumber":6,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    public static String greet() {"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"        String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"        return \"Hello from\\n\" + logo;"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Outputs the standard bye greeting for a user"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"    public static String bye() {"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"     * Prints message from exception"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"     * @param exception exception caught during runtime in Ui"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"    public static String printErrorMessage(Exception exception) {"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        return exception.getMessage();"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":18,"-":11}},{"path":"src/main/java/duke/views/TodosView.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TodosView {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"     * Explicit definition of the default constructor to create a new Todos View renderer"},{"lineNumber":13,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    public TodosView() {}"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     * Takes in an Optional Todo and renders it out into a String"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"     * @param todoToRender Optional Todo to be rendered"},{"lineNumber":19,"author":{"gitId":"-"},"content":"     * @return String which renders out how the information carried by the Todo"},{"lineNumber":20,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"    private static String renderTodoLine(Optional\u003c? extends Todo\u003e todoToRender) {"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"        return todoToRender.map(Todo::getMessage).orElse(\"Empty Todo\");"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"     * Takes in a matching TodosList and returns a rendered view of the todos with a specified"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"     * header"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * @param matchingTodosList List of Optional Todos that matches the keywords to be rendered"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"     * @return String containing tasks that match the input keywords"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"    public static String formatMatchedTodosToString(List\u003cOptional\u003c? extends Todo\u003e\u003e matchingTodosList) {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Here are the matching tasks in your list:\\n%s\","},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, matchingTodosList.size())"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"                        .mapToObj(idx -\u003e String.format(\"%d.%s\", idx + 1,"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"                                renderTodoLine(matchingTodosList.get(idx))))"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"                        .collect(Collectors.joining(\"\\n\")));"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"     * Turns the todosList into a stream of messages from Todos and output them with a new line in"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"     * between each Todo"},{"lineNumber":43,"author":{"gitId":"-"},"content":"     * @param todosList List of optional todos passed in from TodosController"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"     * @return String containing rendered view of listed Todos"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"    public static String formatListOfTodosToString(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Here are the tasks in your list:\\n%s\","},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"                IntStream.range(0, todosList.size()).mapToObj("},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"                    idx -\u003e String.format(\"%d.%s\", idx + 1, renderTodoLine(todosList.get(idx))))"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                        .collect(Collectors.joining(\"\\n\")));"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"     * Returns \"Got it, Task has been amended to:\" when task is amended"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"     * @param updatedTodo Optional Todo object containing a new Todo to be printed"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"     * @return String showing todo that got updated"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"    public static String updateTodoReply(Optional\u003c? extends Todo\u003e updatedTodo) {"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Got it! Task has been amended to:\\n%s\","},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"                renderTodoLine(updatedTodo));"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"     * Returns \"Got it, I\u0027ve added this task:\", followed by the message contained in the new todo"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * @param newTodo Optional Todo object containing a new Todo to be printed"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"     * @param listSize Integer list size taken to return the number of tasks user currently has"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"     * @return String showing todo that got added along with todos list size"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"    public static String addTodoReply(Optional\u003c? extends Todo\u003e newTodo, int listSize) {"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Got it! I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                renderTodoLine(newTodo), listSize);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"     * Returns  \"Noted. I\u0027ve removed this task:\", followed by message contained in new Todo"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"     * @param deletedTodo Optional Todo object containing the Todo to be deleted"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * @param listSize Integer list size taken to return number of tasks user currently has"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"     * @return String containing reply to deleting a Todo"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"    public static String deleteTodoReply(Optional\u003c? extends Todo\u003e deletedTodo, int listSize) {"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"                renderTodoLine(deletedTodo), listSize);"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     * Adds text indicating todo is marked as done and renders the String to show the Todo"},{"lineNumber":87,"author":{"gitId":"-"},"content":"     * @param newTodo Optional Todo to be marked as Done"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     * @return String containing reply to marking a todo as done"},{"lineNumber":89,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"    public static String markTodoAsDoneReply(Optional\u003c? extends Todo\u003e newTodo) {"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"        return String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", renderTodoLine(newTodo));"},{"lineNumber":92,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":61,"-":32}},{"path":"src/main/resources/views/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"        \u003cCircle fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\"/\u003e"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nhzaci":16}},{"path":"src/main/resources/views/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nhzaci":19}},{"path":"src/test/java/duke/controllers/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankDetailsException;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeBlankTaskException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeCommandNotFoundException;"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"import duke.exceptions.DukeDateTimeParseException;"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"import duke.models.Deadline;"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"import duke.models.Event;"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"import duke.models.Parser;"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"import duke.models.Todo;"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"public class TaskListTest {"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"    private final TaskList taskList \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"    void addTask() {"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"todo hello world\";"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"            todosList \u003d taskList.addTodo(commandArgs).getFirst().getTodos();"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"hello world\", rawMessage);"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"nhzaci"},"content":"    void addDeadline() {"},{"lineNumber":54,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"deadline finish hello world /by 21/12/2020 2359\";"},{"lineNumber":56,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":66,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                todosList \u003d taskList.addDeadline(commandArgs).getFirst().getTodos();"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeBlankDetailsException | DukeDateTimeParseException e) {"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                e.printStackTrace();"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"        String deadlineString \u003d todosList.get(0).map(todo -\u003e ((Deadline) todo).getDeadline())"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                .orElse(\"Something went wrong\");"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"finish hello world\", rawMessage);"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"21/12/2020 2359\", deadlineString);"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"    void addEvent() {"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"        // command to pass into parser"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"        String command \u003d \"event say hello world /at 21/12/2021 1300\";"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"        // initialise parser"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"        Parser parser \u003d new Parser(Arrays.asList(command.split(\" \")));"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"        // get command args from parser"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"        List\u003cString\u003e commandArgs \u003d null;"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":"            commandArgs \u003d parser.getCommandArgs();"},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"        // pass commandArgs into TasksList to create todo"},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"        List\u003cOptional\u003c? extends Todo\u003e\u003e todosList \u003d null;"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"        try {"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":"            assert commandArgs !\u003d null;"},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"            try {"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                todosList \u003d taskList.addEvent(commandArgs).getFirst().getTodos();"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeBlankDetailsException | DukeDateTimeParseException e) {"},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"                e.printStackTrace();"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"        } catch (DukeBlankTaskException e) {"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"            e.printStackTrace();"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"        // get raw message of one item in todosList"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"        assert todosList !\u003d null;"},{"lineNumber":114,"author":{"gitId":"nhzaci"},"content":"        String rawMessage \u003d todosList.get(0).map(Todo::getRawMessage).orElse(\"Something went wrong\");"},{"lineNumber":115,"author":{"gitId":"nhzaci"},"content":"        String dateTimeString \u003d"},{"lineNumber":116,"author":{"gitId":"nhzaci"},"content":"                todosList.get(0).map(todo -\u003e ((Event) todo).getEventTime()).orElse(\"Something went wrong\");"},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"        // rawMessage should be \"hello world\""},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"say hello world\", rawMessage);"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"        assertEquals(\"21/12/2021 1300\", dateTimeString);"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":121}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"D|0|do homework|02/12/2021 1600"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"D|0|return book|02/09/2021 1800"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"T|0|something todo!"}],"authorContributionMap":{"nhzaci":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 21/02/2020 1200"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by 100/200/100000 142000"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by 2/12/2021 1600"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"done 4"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"event "},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"event borrow book"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"event /at 1 Sep"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"event borrow book /at 1 Sep"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"event borrow book /at 1/09/2021 1200"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"event borrow book /at"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"deadline "},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"deadline return book"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"deadline /by 2 Sep"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 2 Sep"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 2/09/2021 1800"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"deadline return book /by"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"todo"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"todo something todo!"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"blah"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"blah blah"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"delete 1"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"delete 2"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"delete 10"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"delete 15"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"bye"}],"authorContributionMap":{"nhzaci":41}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"nhzaci":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"# delete output and data file from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"    rm -rf data"},{"lineNumber":14,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"if ! javac \\"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"  -cp ../src/main/java \\"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"  -Xlint:none \\"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"  -d \\"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"  ../bin \\"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/*.java \\"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/controllers/*.java \\"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/models/*.java \\"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/views/*.java \\"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/exceptions/*.java"},{"lineNumber":27,"author":{"gitId":"-"},"content":"then"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":30,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":36,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"# dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":40,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":41,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":42,"author":{"gitId":"-"},"content":"then"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":45,"author":{"gitId":"-"},"content":"else"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":48,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"nhzaci":13,"-":35}}]
