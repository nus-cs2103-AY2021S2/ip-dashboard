[{"path":"src/main/java/controllers/AppController.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeBlankTaskException;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeCommandNotFoundException;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":9,"author":{"gitId":"-"},"content":"import models.Command;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"import views.Greeting;"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class AppController {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * AppController starts to listen to commands from the user and performs actions"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * as required by user\u0027s commands"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public void start() {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        // initialise greeting view"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        Greeting greeting \u003d new Greeting();"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"        // greet user"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        greeting.greet();"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        // initialise scanner"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"        // init TodosController"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        TodosController todosController \u003d new TodosController();"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"        // loop will be broken only by \u0027bye\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        while (true) {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"            // list has structure [command, ... command related args]"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            Command command \u003d new Command(Arrays.asList((sc.nextLine().split(\" \"))));"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"            // try catch statement wraps around getCommand which may throw an error if"},{"lineNumber":36,"author":{"gitId":"-"},"content":"            // command input does not adhere to command format"},{"lineNumber":37,"author":{"gitId":"-"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"                switch (command.getCommand()) {"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"                    case LIST:"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                        // list all the current todos"},{"lineNumber":42,"author":{"gitId":"-"},"content":"                        todosController.listTodos();"},{"lineNumber":43,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"                    case EVENT:"},{"lineNumber":46,"author":{"gitId":"-"},"content":"                        // add a new event to the model"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":48,"author":{"gitId":"-"},"content":"                            todosController \u003d todosController.addEvent(command.getCommandArgs());"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"                        } catch (Exception e) {"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"nhzaci"},"content":"                    case TODO:"},{"lineNumber":56,"author":{"gitId":"-"},"content":"                        // add a new todo to the model"},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"                            todosController \u003d todosController.addTodos(command.getCommandArgs());"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"                        } catch (DukeBlankTaskException e) {"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":63,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":64,"author":{"gitId":"-"},"content":""},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"                    case DEADLINE:"},{"lineNumber":66,"author":{"gitId":"-"},"content":"                        // amend a current todo\u0027s deadline"},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"                            todosController \u003d todosController.addDeadline(command.getCommandArgs());"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"                        } catch (Exception e) {"},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"                    case DONE:"},{"lineNumber":76,"author":{"gitId":"-"},"content":"                        // mark a todo as done"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":78,"author":{"gitId":"-"},"content":"                            todosController \u003d todosController.markAsDone(command.getCommandArgs());"},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"                        } catch (DukeTaskIndexOutOfRangeException e) {"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"                        break;"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"                    case DELETE:"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"                        // delete a todo from the list"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"                            todosController \u003d todosController.deleteTodo(command.getCommandArgs());"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"                        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":93,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"                    case BYE:"},{"lineNumber":96,"author":{"gitId":"-"},"content":"                        // break out of main function"},{"lineNumber":97,"author":{"gitId":"-"},"content":"                        greeting.bye();"},{"lineNumber":98,"author":{"gitId":"-"},"content":""},{"lineNumber":99,"author":{"gitId":"-"},"content":"                        // close scanner preventing mem leak"},{"lineNumber":100,"author":{"gitId":"-"},"content":"                        sc.close();"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"-"},"content":"                        // return to end function"},{"lineNumber":103,"author":{"gitId":"-"},"content":"                        return;"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"                    case UNKNOWN:"},{"lineNumber":106,"author":{"gitId":"-"},"content":"                    default:"},{"lineNumber":107,"author":{"gitId":"-"},"content":"                        // print command printed in if not recognised"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"                        try {"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"                            throw new DukeCommandNotFoundException("},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"                                    \"Sorry, the command you are trying to use is not found, please try again!\");"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":"                        } catch (DukeCommandNotFoundException e) {"},{"lineNumber":112,"author":{"gitId":"nhzaci"},"content":"                            greeting.printErrorMessage(e);"},{"lineNumber":113,"author":{"gitId":"nhzaci"},"content":"                        }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"                        break;"},{"lineNumber":115,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"nhzaci"},"content":"            } catch (DukeCommandNotFoundException e) {"},{"lineNumber":118,"author":{"gitId":"nhzaci"},"content":"                // catch error from Comamnd.getCommand()"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"                greeting.printErrorMessage(e);"},{"lineNumber":120,"author":{"gitId":"-"},"content":"            } catch (Exception e) {"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"                // program not supposed to end up here"},{"lineNumber":122,"author":{"gitId":"-"},"content":"                e.printStackTrace();"},{"lineNumber":123,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":""},{"lineNumber":128,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":50,"-":78}},{"path":"src/main/java/controllers/TodosController.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package controllers;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"-"},"content":"import java.util.stream.Stream;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeBlankDetailsException;"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeBlankTaskException;"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeTaskIndexOutOfRangeException;"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"import models.Deadline;"},{"lineNumber":16,"author":{"gitId":"-"},"content":"import models.Event;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"import models.Todo;"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"import views.TodosView;"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class TodosController {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    /** todosList contains the state of the todos */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    private List\u003cOptional\u003c? extends Todo\u003e\u003e todosList;"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /** TodosView initialised to render view of Todos */"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    private TodosView todosView \u003d new TodosView();"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"-"},"content":"     * Constructor of TodosController without any arguments initialises a new"},{"lineNumber":29,"author":{"gitId":"-"},"content":"     * TodosView and an empty list of Optional Todo objects"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    public TodosController() {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"        this.todosList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     * Contructor of TodosController which takes in an existing List of Optional"},{"lineNumber":37,"author":{"gitId":"-"},"content":"     * Todos"},{"lineNumber":38,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":39,"author":{"gitId":"-"},"content":"     * @param todosList is an existing List of Optional Todos"},{"lineNumber":40,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    public TodosController(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        this.todosList \u003d todosList;"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * Passes list of todos in the TodosController to TodosView to render the view"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * of the list of Todos"},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    public void listTodos() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        this.todosView.listTodos(this.todosList);"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"-"},"content":"     * Adds a new Todo to the todosList and returns new TodosController containing"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * that list"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"     * @param newTodoList contains the new Todo that must not be an empty array"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException when user types in \u0027todo\u0027 but has nothing"},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"     *                                afterwards"},{"lineNumber":60,"author":{"gitId":"-"},"content":"     * @return TodosController with todosList containing the new Todo added"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public TodosController addTodos(List\u003cString\u003e newTodoList) throws DukeBlankTaskException {"},{"lineNumber":63,"author":{"gitId":"nhzaci"},"content":"        if (newTodoList.size() \u003d\u003d 0) {"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Todo you are trying to add cannot be blank!\");"},{"lineNumber":65,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        Optional\u003c? extends Todo\u003e newTodoObject \u003d Optional.ofNullable(new Todo(String.join(\" \", newTodoList)));"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"-"},"content":"            this.todosView.added(newTodoObject, this.todosList.size() + 1);"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        return new TodosController("},{"lineNumber":73,"author":{"gitId":"-"},"content":"                Stream.concat(this.todosList.stream(), Stream.of(newTodoObject)).collect(Collectors.toList()));"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":""},{"lineNumber":76,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"     * Deletes a todo from the list of the todos controller"},{"lineNumber":78,"author":{"gitId":"nhzaci"},"content":"     * "},{"lineNumber":79,"author":{"gitId":"nhzaci"},"content":"     * @param deleteTodoArgs is a list of size 1, containing the index of the todo"},{"lineNumber":80,"author":{"gitId":"nhzaci"},"content":"     *                       to delete"},{"lineNumber":81,"author":{"gitId":"nhzaci"},"content":"     * @return TodosController with the todo with index passed in deleted from the"},{"lineNumber":82,"author":{"gitId":"nhzaci"},"content":"     *         list"},{"lineNumber":83,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException           when user specifies the delete"},{"lineNumber":84,"author":{"gitId":"nhzaci"},"content":"     *                                          command without providing an index"},{"lineNumber":85,"author":{"gitId":"nhzaci"},"content":"     *                                          of the todo to delete"},{"lineNumber":86,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException when user specifies an index that is"},{"lineNumber":87,"author":{"gitId":"nhzaci"},"content":"     *                                          out of the range of the list size of"},{"lineNumber":88,"author":{"gitId":"nhzaci"},"content":"     *                                          todos in the controller"},{"lineNumber":89,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"nhzaci"},"content":"    public TodosController deleteTodo(List\u003cString\u003e deleteTodoArgs)"},{"lineNumber":91,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeTaskIndexOutOfRangeException {"},{"lineNumber":92,"author":{"gitId":"nhzaci"},"content":"        // check if args is empty"},{"lineNumber":93,"author":{"gitId":"nhzaci"},"content":"        if (deleteTodoArgs.size() \u003d\u003d 0) {"},{"lineNumber":94,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please input an index for the Todo you want to delete!\");"},{"lineNumber":95,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":97,"author":{"gitId":"nhzaci"},"content":"        // get index of todo to delete"},{"lineNumber":98,"author":{"gitId":"nhzaci"},"content":"        int idxDelete \u003d Integer.parseInt(deleteTodoArgs.get(0)) - 1;"},{"lineNumber":99,"author":{"gitId":"nhzaci"},"content":"        if (idxDelete \u003e\u003d this.todosList.size()) {"},{"lineNumber":100,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException("},{"lineNumber":101,"author":{"gitId":"nhzaci"},"content":"                    \"The index you input has an index that is beyond the range of the number of tasks you currently have. Please try again.\");"},{"lineNumber":102,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":104,"author":{"gitId":"nhzaci"},"content":"        // render deleted view"},{"lineNumber":105,"author":{"gitId":"nhzaci"},"content":"        todosView.deleted(this.todosList.get(idxDelete), this.todosList.size() - 1);"},{"lineNumber":106,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":107,"author":{"gitId":"nhzaci"},"content":"        // remove from stream"},{"lineNumber":108,"author":{"gitId":"nhzaci"},"content":"        return new TodosController(IntStream.range(0, this.todosList.size()).filter(idx -\u003e idx !\u003d idxDelete)"},{"lineNumber":109,"author":{"gitId":"nhzaci"},"content":"                .mapToObj(idx -\u003e this.todosList.get(idx)).collect(Collectors.toList()));"},{"lineNumber":110,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"-"},"content":"     * Takes in the list containing details about the new deadline and returns a new"},{"lineNumber":114,"author":{"gitId":"-"},"content":"     * TodosController with the new Deadline added"},{"lineNumber":115,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":116,"author":{"gitId":"-"},"content":"     * @param newDeadlineList takes in list of arguments provided to the command for"},{"lineNumber":117,"author":{"gitId":"-"},"content":"     *                        processing into a Deadline object"},{"lineNumber":118,"author":{"gitId":"-"},"content":"     * @return new TodosController with the new Deadline object added into it"},{"lineNumber":119,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException    Exception is thrown when user does not add"},{"lineNumber":120,"author":{"gitId":"nhzaci"},"content":"     *                                   in any details after typing the \u0027deadline\u0027"},{"lineNumber":121,"author":{"gitId":"nhzaci"},"content":"     *                                   command"},{"lineNumber":122,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to"},{"lineNumber":123,"author":{"gitId":"nhzaci"},"content":"     *                                   define an deadline, without adding /by"},{"lineNumber":124,"author":{"gitId":"nhzaci"},"content":"     *                                   \u003cdetails\u003e for the event"},{"lineNumber":125,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"nhzaci"},"content":"    public TodosController addDeadline(List\u003cString\u003e newDeadlineList)"},{"lineNumber":127,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankTaskException, DukeBlankDetailsException {"},{"lineNumber":128,"author":{"gitId":"nhzaci"},"content":"        if (newDeadlineList.size() \u003d\u003d 0) {"},{"lineNumber":129,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Deadline you are trying to add cannot be blank!\");"},{"lineNumber":130,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":132,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e message \u003d new ArrayList\u003c\u003e();"},{"lineNumber":133,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e deadline \u003d new ArrayList\u003c\u003e();"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":136,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":137,"author":{"gitId":"-"},"content":"        newDeadlineList.stream().forEach(substring -\u003e {"},{"lineNumber":138,"author":{"gitId":"-"},"content":"            if (substring.contains(\"/\")) {"},{"lineNumber":139,"author":{"gitId":"-"},"content":"                deadline.add(substring);"},{"lineNumber":140,"author":{"gitId":"-"},"content":"            } else if (deadline.size() \u003d\u003d 0) {"},{"lineNumber":141,"author":{"gitId":"-"},"content":"                message.add(substring);"},{"lineNumber":142,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":143,"author":{"gitId":"-"},"content":"                deadline.add(substring);"},{"lineNumber":144,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":148,"author":{"gitId":"nhzaci"},"content":"        if (message.size() \u003d\u003d 0) {"},{"lineNumber":149,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Deadline\");"},{"lineNumber":150,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":152,"author":{"gitId":"nhzaci"},"content":"        // if no deadline input or /by without any deadline, throw exception"},{"lineNumber":153,"author":{"gitId":"nhzaci"},"content":"        if (deadline.size() \u003c\u003d 1) {"},{"lineNumber":154,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException("},{"lineNumber":155,"author":{"gitId":"nhzaci"},"content":"                    \"Please add a /by followed by the deadline to specify a deadline for the Deadline task\");"},{"lineNumber":156,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":158,"author":{"gitId":"nhzaci"},"content":"        // Create new Deadline object, slicing deadline array from index 1 since we"},{"lineNumber":159,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/by\u0027 which shouldn\u0027t be in the actual Deadline object"},{"lineNumber":160,"author":{"gitId":"-"},"content":"        Optional\u003cDeadline\u003e newDeadline \u003d Optional.ofNullable("},{"lineNumber":161,"author":{"gitId":"-"},"content":"                new Deadline(String.join(\" \", message), String.join(\" \", deadline.subList(1, deadline.size()))));"},{"lineNumber":162,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":163,"author":{"gitId":"nhzaci"},"content":"        // render added view"},{"lineNumber":164,"author":{"gitId":"-"},"content":"        this.todosView.added(newDeadline, this.todosList.size() + 1);"},{"lineNumber":165,"author":{"gitId":"-"},"content":""},{"lineNumber":166,"author":{"gitId":"-"},"content":"        // return new controller"},{"lineNumber":167,"author":{"gitId":"-"},"content":"        return new TodosController("},{"lineNumber":168,"author":{"gitId":"-"},"content":"                Stream.concat(this.todosList.stream(), Stream.of(newDeadline)).collect(Collectors.toList()));"},{"lineNumber":169,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"-"},"content":""},{"lineNumber":171,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"-"},"content":"     * Takes in the list containing details about the new deadline and returns a new"},{"lineNumber":173,"author":{"gitId":"-"},"content":"     * TodosController with the new Event added"},{"lineNumber":174,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":175,"author":{"gitId":"-"},"content":"     * @param newEventList takes in list of arguments provided to the command for"},{"lineNumber":176,"author":{"gitId":"-"},"content":"     *                     processing into a Event object"},{"lineNumber":177,"author":{"gitId":"-"},"content":"     * @return new TodosController with the new Event object added into it"},{"lineNumber":178,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankTaskException    Exception is thrown when user does not add"},{"lineNumber":179,"author":{"gitId":"nhzaci"},"content":"     *                                   in any details after typing the \u0027event\u0027"},{"lineNumber":180,"author":{"gitId":"nhzaci"},"content":"     *                                   command"},{"lineNumber":181,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeBlankDetailsException Exception is thrown when user tries to"},{"lineNumber":182,"author":{"gitId":"nhzaci"},"content":"     *                                   define an event, without adding /at"},{"lineNumber":183,"author":{"gitId":"nhzaci"},"content":"     *                                   \u003cdetails\u003e for the event"},{"lineNumber":184,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"nhzaci"},"content":"    public TodosController addEvent(List\u003cString\u003e newEventList)"},{"lineNumber":186,"author":{"gitId":"nhzaci"},"content":"            throws DukeBlankDetailsException, DukeBlankTaskException {"},{"lineNumber":187,"author":{"gitId":"nhzaci"},"content":"        // if list is empty, throw error"},{"lineNumber":188,"author":{"gitId":"nhzaci"},"content":"        if (newEventList.size() \u003d\u003d 0) {"},{"lineNumber":189,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"The Event you are trying to add cannot be blank!\");"},{"lineNumber":190,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":192,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e message \u003d new ArrayList\u003c\u003e();"},{"lineNumber":193,"author":{"gitId":"-"},"content":"        ArrayList\u003cString\u003e eventTime \u003d new ArrayList\u003c\u003e();"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":"        // iterate through list to find where escape character is"},{"lineNumber":196,"author":{"gitId":"-"},"content":"        // once found, everything after is part of the deadline"},{"lineNumber":197,"author":{"gitId":"-"},"content":"        newEventList.stream().forEach(substring -\u003e {"},{"lineNumber":198,"author":{"gitId":"-"},"content":"            if (substring.contains(\"/\")) {"},{"lineNumber":199,"author":{"gitId":"-"},"content":"                eventTime.add(substring);"},{"lineNumber":200,"author":{"gitId":"-"},"content":"            } else if (eventTime.size() \u003d\u003d 0) {"},{"lineNumber":201,"author":{"gitId":"-"},"content":"                message.add(substring);"},{"lineNumber":202,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":203,"author":{"gitId":"-"},"content":"                eventTime.add(substring);"},{"lineNumber":204,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":205,"author":{"gitId":"-"},"content":"        });"},{"lineNumber":206,"author":{"gitId":"-"},"content":""},{"lineNumber":207,"author":{"gitId":"nhzaci"},"content":"        // if no message, throw exception"},{"lineNumber":208,"author":{"gitId":"nhzaci"},"content":"        if (message.size() \u003d\u003d 0) {"},{"lineNumber":209,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankTaskException(\"Please define a task message for your Event\");"},{"lineNumber":210,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":211,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":212,"author":{"gitId":"nhzaci"},"content":"        // if no deadline input or /by without any deadline, throw exception"},{"lineNumber":213,"author":{"gitId":"nhzaci"},"content":"        if (eventTime.size() \u003c\u003d 1) {"},{"lineNumber":214,"author":{"gitId":"nhzaci"},"content":"            throw new DukeBlankDetailsException("},{"lineNumber":215,"author":{"gitId":"nhzaci"},"content":"                    \"Please add a /at followed by the event time and date to specify a time and date for the Event task\");"},{"lineNumber":216,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":217,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":218,"author":{"gitId":"nhzaci"},"content":"        // Create new Event object, slicing eventTime array from index 1 since we"},{"lineNumber":219,"author":{"gitId":"nhzaci"},"content":"        // added the \u0027/at\u0027 which shouldn\u0027t be in the actual Event object"},{"lineNumber":220,"author":{"gitId":"-"},"content":"        Optional\u003cEvent\u003e newEvent \u003d Optional.ofNullable("},{"lineNumber":221,"author":{"gitId":"-"},"content":"                new Event(String.join(\" \", message), String.join(\" \", eventTime.subList(1, eventTime.size()))));"},{"lineNumber":222,"author":{"gitId":"-"},"content":"        try {"},{"lineNumber":223,"author":{"gitId":"-"},"content":"            this.todosView.added(newEvent, this.todosList.size() + 1);"},{"lineNumber":224,"author":{"gitId":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":225,"author":{"gitId":"-"},"content":"            e.printStackTrace();"},{"lineNumber":226,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"-"},"content":""},{"lineNumber":228,"author":{"gitId":"-"},"content":"        // return new controller"},{"lineNumber":229,"author":{"gitId":"-"},"content":"        return new TodosController("},{"lineNumber":230,"author":{"gitId":"-"},"content":"                Stream.concat(this.todosList.stream(), Stream.of(newEvent)).collect(Collectors.toList()));"},{"lineNumber":231,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitId":"-"},"content":""},{"lineNumber":233,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitId":"-"},"content":"     * Asserts that index of todo passed in to be marked as done is lesser than"},{"lineNumber":235,"author":{"gitId":"-"},"content":"     * length of todosList, else there would be an arrayoutofboundsexception thrown"},{"lineNumber":236,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":237,"author":{"gitId":"-"},"content":"     * @param doneArgs should be a List\u003cString\u003e of size 1 containing one argument"},{"lineNumber":238,"author":{"gitId":"-"},"content":"     *                 that is the ID of which todo to mark as done and uses a"},{"lineNumber":239,"author":{"gitId":"-"},"content":"     *                 1-based indexing of the todos"},{"lineNumber":240,"author":{"gitId":"-"},"content":"     * @return TodosController containing Todo that\u0027s now updated as done"},{"lineNumber":241,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeTaskIndexOutOfRangeException Exception is thrown when the user"},{"lineNumber":242,"author":{"gitId":"nhzaci"},"content":"     *                                          specifies a task index that is out"},{"lineNumber":243,"author":{"gitId":"nhzaci"},"content":"     *                                          of range."},{"lineNumber":244,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"nhzaci"},"content":"    public TodosController markAsDone(List\u003cString\u003e doneArgs) throws DukeTaskIndexOutOfRangeException {"},{"lineNumber":246,"author":{"gitId":"-"},"content":"        int idxIsDone \u003d Integer.parseInt(doneArgs.get(0)) - 1;"},{"lineNumber":247,"author":{"gitId":"nhzaci"},"content":"        if (idxIsDone \u003e\u003d this.todosList.size()) {"},{"lineNumber":248,"author":{"gitId":"nhzaci"},"content":"            throw new DukeTaskIndexOutOfRangeException("},{"lineNumber":249,"author":{"gitId":"nhzaci"},"content":"                    \"The index you input has an index that is beyond the range of the number of tasks you currently have. Please try again.\");"},{"lineNumber":250,"author":{"gitId":"nhzaci"},"content":"        }"},{"lineNumber":251,"author":{"gitId":"-"},"content":"        return new TodosController(IntStream.range(0, this.todosList.size()).mapToObj(idx -\u003e {"},{"lineNumber":252,"author":{"gitId":"-"},"content":"            if (idx \u003d\u003d idxIsDone) {"},{"lineNumber":253,"author":{"gitId":"-"},"content":"                Optional\u003c? extends Todo\u003e doneTodo \u003d this.todosList.get(idx).map(todo -\u003e todo.markAsDone());"},{"lineNumber":254,"author":{"gitId":"-"},"content":"                try {"},{"lineNumber":255,"author":{"gitId":"-"},"content":"                    this.todosView.markAsDone(doneTodo);"},{"lineNumber":256,"author":{"gitId":"-"},"content":"                } catch (Exception e) {"},{"lineNumber":257,"author":{"gitId":"-"},"content":"                    e.printStackTrace();"},{"lineNumber":258,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":259,"author":{"gitId":"-"},"content":"                return doneTodo;"},{"lineNumber":260,"author":{"gitId":"-"},"content":"            } else {"},{"lineNumber":261,"author":{"gitId":"-"},"content":"                return this.todosList.get(idx);"},{"lineNumber":262,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":263,"author":{"gitId":"-"},"content":"        }).collect(Collectors.toList()));"},{"lineNumber":264,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitId":"-"},"content":""},{"lineNumber":266,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":109,"-":157}},{"path":"src/main/java/exceptions/DukeBlankDetailsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankDetailsException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"     * Added default serial versio uid"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankDetailsException(String message) {"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":13}},{"path":"src/main/java/exceptions/DukeBlankTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeBlankTaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"     * Add default generate serial verion uid"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    public DukeBlankTaskException(String message) {"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":12}},{"path":"src/main/java/exceptions/DukeCommandNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeCommandNotFoundException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"     * Add default generate serial verion uid"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    public DukeCommandNotFoundException(String message) {"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":12}},{"path":"src/main/java/exceptions/DukeTaskIndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public class DukeTaskIndexOutOfRangeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"     * Add default generate serial verion uid"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"    public DukeTaskIndexOutOfRangeException(String message) {"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":12}},{"path":"src/main/java/models/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"import exceptions.DukeCommandNotFoundException;"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Command {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    Optional\u003cString\u003e command;"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    Optional\u003cList\u003cString\u003e\u003e commandArgs;"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    Optional\u003cList\u003cString\u003e\u003e fullCommand;"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"-"},"content":"     * Initialises Command object by taking first item of the list as the command"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * and the rest of the itemms of the string gets taken as the command arguments"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * Null safety is enforced through use of Optionals"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public Command(List\u003cString\u003e fullCommand) {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        this.command \u003d Optional.ofNullable(fullCommand.get(0));"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        this.commandArgs \u003d Optional.ofNullable(fullCommand.subList(1, fullCommand.size()));"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        this.fullCommand \u003d Optional.ofNullable(fullCommand);"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * Gets the first String passed in from the list of inputs, which is the Command"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     * in the input line"},{"lineNumber":27,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"     * @return Commands enum depicting which command is to be executed by the bot."},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":30,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"    public Commands getCommand() throws DukeCommandNotFoundException {"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"        return this.command.map(commandString -\u003e {"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"            switch (commandString) {"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"                case \"done\":"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"                    return Commands.DONE;"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"                case \"list\":"},{"lineNumber":37,"author":{"gitId":"nhzaci"},"content":"                    return Commands.LIST;"},{"lineNumber":38,"author":{"gitId":"nhzaci"},"content":"                case \"todo\":"},{"lineNumber":39,"author":{"gitId":"nhzaci"},"content":"                    return Commands.TODO;"},{"lineNumber":40,"author":{"gitId":"nhzaci"},"content":"                case \"event\":"},{"lineNumber":41,"author":{"gitId":"nhzaci"},"content":"                    return Commands.EVENT;"},{"lineNumber":42,"author":{"gitId":"nhzaci"},"content":"                case \"deadline\":"},{"lineNumber":43,"author":{"gitId":"nhzaci"},"content":"                    return Commands.DEADLINE;"},{"lineNumber":44,"author":{"gitId":"nhzaci"},"content":"                case \"delete\":"},{"lineNumber":45,"author":{"gitId":"nhzaci"},"content":"                    return Commands.DELETE;"},{"lineNumber":46,"author":{"gitId":"nhzaci"},"content":"                case \"bye\":"},{"lineNumber":47,"author":{"gitId":"nhzaci"},"content":"                    return Commands.BYE;"},{"lineNumber":48,"author":{"gitId":"nhzaci"},"content":"                default:"},{"lineNumber":49,"author":{"gitId":"nhzaci"},"content":"                    return Commands.UNKNOWN;"},{"lineNumber":50,"author":{"gitId":"nhzaci"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"nhzaci"},"content":"        }).orElseThrow(() -\u003e new DukeCommandNotFoundException(\"No command was supplied from input.\"));"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"-"},"content":"     * Gets the remaining arguments passed into the command in the terminal as the"},{"lineNumber":56,"author":{"gitId":"-"},"content":"     * arguments of the command"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":58,"author":{"gitId":"-"},"content":"     * @return List\u003cString\u003e which contains the rest of the arguments passed into the"},{"lineNumber":59,"author":{"gitId":"-"},"content":"     *         terminal"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when command is blank"},{"lineNumber":61,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getCommandArgs() throws DukeCommandNotFoundException {"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        return this.commandArgs"},{"lineNumber":64,"author":{"gitId":"nhzaci"},"content":"                .orElseThrow(() -\u003e new DukeCommandNotFoundException(\"No command arguments were supplied from input.\"));"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"nhzaci"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"nhzaci"},"content":"     * Used for level 1 to get full argument passed into the CLI, where todo, events"},{"lineNumber":69,"author":{"gitId":"nhzaci"},"content":"     * and deadline were yet to be implemented"},{"lineNumber":70,"author":{"gitId":"nhzaci"},"content":"     * "},{"lineNumber":71,"author":{"gitId":"nhzaci"},"content":"     * @return List\u003cString\u003e which contains the rest of the arguments passed into the"},{"lineNumber":72,"author":{"gitId":"nhzaci"},"content":"     *         terminal"},{"lineNumber":73,"author":{"gitId":"nhzaci"},"content":"     * @throws DukeCommandNotFoundException when the command is blank"},{"lineNumber":74,"author":{"gitId":"nhzaci"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"nhzaci"},"content":"    public List\u003cString\u003e getFullCommand() throws DukeCommandNotFoundException {"},{"lineNumber":76,"author":{"gitId":"-"},"content":"        return this.fullCommand"},{"lineNumber":77,"author":{"gitId":"nhzaci"},"content":"                .orElseThrow(() -\u003e new DukeCommandNotFoundException(\"No command arguments were supplied from input.\"));"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":38,"-":41}},{"path":"src/main/java/models/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"package models;"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"public enum Commands {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"    DONE, LIST, TODO, EVENT, DEADLINE, DELETE, BYE, UNKNOWN,"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"}"}],"authorContributionMap":{"nhzaci":5}},{"path":"src/main/java/views/Greeting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Greeting {"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"  private static final String divider \u003d \"---\";"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"  private void printWithSpacing(String text) {"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"    System.out.println(String.format(\"\\n%s\\n%s\\n%s\\n\", divider, text, divider));"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"  }"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   * Outputs the standard greeting with Duke Logo"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"  public void greet() {"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"    String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\" + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"        + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":17,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"  /**"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   * Outputs the standard bye greeting for a user"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   */"},{"lineNumber":22,"author":{"gitId":"-"},"content":"  public void bye() {"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"    printWithSpacing(\"Bye. Hope to see you again soon!\");"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"  }"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"  public void printErrorMessage(Exception exception) {"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"    printWithSpacing(exception.getMessage());"},{"lineNumber":28,"author":{"gitId":"-"},"content":"  }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":13,"-":16}},{"path":"src/main/java/views/TodosView.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"package views;"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitId":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"-"},"content":"import java.util.stream.IntStream;"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"import models.Todo;"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class TodosView {"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    /** Denotes the divider to use to go between lines */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    String divider \u003d \"---\";"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Explicit definition of the default constructor to create a new Todos View"},{"lineNumber":16,"author":{"gitId":"-"},"content":"     * renderer"},{"lineNumber":17,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    public TodosView() {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"-"},"content":"     * Takes in an Optional Todo and renders it out into a String"},{"lineNumber":23,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":24,"author":{"gitId":"-"},"content":"     * @param todoRender Optional Todo to be rendered"},{"lineNumber":25,"author":{"gitId":"-"},"content":"     * @return String which renders out how the information carried by the Todo"},{"lineNumber":26,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    private String renderTodoLine(Optional\u003c? extends Todo\u003e todoToRender) {"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        return todoToRender.map(todo -\u003e todo.getMessage()).orElse(\"Empty Todo\");"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"-"},"content":"     * Turns the todosList into a stream of messages from Todos and output them with"},{"lineNumber":33,"author":{"gitId":"-"},"content":"     * a new line in between each Todo"},{"lineNumber":34,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":35,"author":{"gitId":"-"},"content":"     * @param todosList List of optional todos passed in from TodosController"},{"lineNumber":36,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    public void listTodos(List\u003cOptional\u003c? extends Todo\u003e\u003e todosList) {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        printWithSpacing(String.format(\"Here are the tasks in your list:\\n%s\","},{"lineNumber":39,"author":{"gitId":"-"},"content":"                IntStream.range(0, todosList.size())"},{"lineNumber":40,"author":{"gitId":"-"},"content":"                        .mapToObj(idx -\u003e String.format(\"%d.%s\", idx + 1, renderTodoLine(todosList.get(idx))))"},{"lineNumber":41,"author":{"gitId":"-"},"content":"                        .collect(Collectors.joining(\"\\n\"))));"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"-"},"content":"     * Prints \u0027Got it, I\u0027ve added this task:\u0027, followed by the message contained in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"     * the new todo"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":48,"author":{"gitId":"-"},"content":"     * @param newTodo  Optional Todo object containing a new Todo to be printed"},{"lineNumber":49,"author":{"gitId":"-"},"content":"     * @param listSize Integer list size taken to return the number of tasks user"},{"lineNumber":50,"author":{"gitId":"-"},"content":"     *                 currently has"},{"lineNumber":51,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"nhzaci"},"content":"    public void added(Optional\u003c? extends Todo\u003e newTodo, int listSize) {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        printWithSpacing(String.format(\"Got it! I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":54,"author":{"gitId":"-"},"content":"                renderTodoLine(newTodo), listSize));"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"nhzaci"},"content":"    public void deleted(Optional\u003c? extends Todo\u003e deletedTodo, int listSize) {"},{"lineNumber":58,"author":{"gitId":"nhzaci"},"content":"        printWithSpacing(String.format(\"Noted. I\u0027ve removed this task:\\n%s\\nNow you have %d tasks in the list.\","},{"lineNumber":59,"author":{"gitId":"nhzaci"},"content":"                renderTodoLine(deletedTodo), listSize));"},{"lineNumber":60,"author":{"gitId":"nhzaci"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nhzaci"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"-"},"content":"     * Adds text indicating todo is marked as done and renders the String to show"},{"lineNumber":64,"author":{"gitId":"-"},"content":"     * the Todo"},{"lineNumber":65,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":66,"author":{"gitId":"-"},"content":"     * @param newTodo Optional Todo to be marked as Done"},{"lineNumber":67,"author":{"gitId":"-"},"content":"     * @throws Exception if newTodo object is empty"},{"lineNumber":68,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    public void markAsDone(Optional\u003c? extends Todo\u003e newTodo) throws Exception {"},{"lineNumber":70,"author":{"gitId":"-"},"content":"        printWithSpacing(String.format(\"Nice! I\u0027ve marked this task as done:\\n%s\", renderTodoLine(newTodo)));"},{"lineNumber":71,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"-"},"content":"     * Private method printWithSpacing adds divider around the text passed in to be"},{"lineNumber":75,"author":{"gitId":"-"},"content":"     * printed"},{"lineNumber":76,"author":{"gitId":"-"},"content":"     * "},{"lineNumber":77,"author":{"gitId":"-"},"content":"     * @param text String to be printed with divider put around it"},{"lineNumber":78,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    private void printWithSpacing(String text) {"},{"lineNumber":80,"author":{"gitId":"-"},"content":"        System.out.println(String.format(\"\\n%s\\n%s\\n%s\\n\", divider, text, divider));"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nhzaci":6,"-":76}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":2,"author":{"gitId":"nhzaci"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"nhzaci"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"nhzaci"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":6,"author":{"gitId":"nhzaci"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":8,"author":{"gitId":"nhzaci"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":9,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":10,"author":{"gitId":"nhzaci"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"nhzaci"},"content":"event "},{"lineNumber":12,"author":{"gitId":"nhzaci"},"content":"event borrow book"},{"lineNumber":13,"author":{"gitId":"nhzaci"},"content":"event /at 1 Sep"},{"lineNumber":14,"author":{"gitId":"nhzaci"},"content":"event borrow book /at 1 Sep"},{"lineNumber":15,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"event borrow book /at"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"deadline "},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"deadline return book"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"deadline /by 2 Sep"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"deadline return book /by 2 Sep"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"deadline return book /by"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"todo"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"todo something todo!"},{"lineNumber":26,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":27,"author":{"gitId":"nhzaci"},"content":"blah"},{"lineNumber":28,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":29,"author":{"gitId":"nhzaci"},"content":"blah blah"},{"lineNumber":30,"author":{"gitId":"nhzaci"},"content":"delete 1"},{"lineNumber":31,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":32,"author":{"gitId":"nhzaci"},"content":"delete 2"},{"lineNumber":33,"author":{"gitId":"nhzaci"},"content":"list"},{"lineNumber":34,"author":{"gitId":"nhzaci"},"content":"delete 10"},{"lineNumber":35,"author":{"gitId":"nhzaci"},"content":"delete 15"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"bye"}],"authorContributionMap":{"nhzaci":36}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"nhzaci"},"content":"if ! javac \\"},{"lineNumber":17,"author":{"gitId":"nhzaci"},"content":"  -cp ../src/main/java \\"},{"lineNumber":18,"author":{"gitId":"nhzaci"},"content":"  -Xlint:none \\"},{"lineNumber":19,"author":{"gitId":"nhzaci"},"content":"  -d \\"},{"lineNumber":20,"author":{"gitId":"nhzaci"},"content":"  ../bin \\"},{"lineNumber":21,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/*.java \\"},{"lineNumber":22,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/controllers/*.java \\"},{"lineNumber":23,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/models/*.java \\"},{"lineNumber":24,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/views/*.java \\"},{"lineNumber":25,"author":{"gitId":"nhzaci"},"content":"  ../src/main/java/exceptions/*.java"},{"lineNumber":26,"author":{"gitId":"-"},"content":"then"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":29,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":32,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":35,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":36,"author":{"gitId":"nhzaci"},"content":"# dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":39,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":40,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":41,"author":{"gitId":"-"},"content":"then"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":44,"author":{"gitId":"-"},"content":"else"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":47,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"nhzaci":11,"-":36}}]
