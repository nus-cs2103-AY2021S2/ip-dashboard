[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"# Snom project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"1. After the importing is complete, locate the `src/main/java/Snom.java` file, right-click it, and choose `Run Snom.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Sharptail":2,"-":24}},{"path":"src/main/java/CommandEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"public enum CommandEnum {"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"    LIST,"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":"    FINISH,"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"    DELETE,"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":"    BYE,"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"    TODO,"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"    DEADLINE,"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":"    EVENT,"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":"    NONE;"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"    public static CommandEnum getCommand(String command){"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"        for(CommandEnum cEnum: CommandEnum.values()){"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"            if(command.equalsIgnoreCase(String.valueOf(cEnum))){"},{"lineNumber":14,"author":{"gitId":"Sharptail"},"content":"                return cEnum;"},{"lineNumber":15,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":16,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Sharptail"},"content":"        return CommandEnum.NONE;"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":19}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"    private String deadline;"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"    public Deadline(String description, String deadline){"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"    public String toString(){"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + this.deadline + \")\";"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":13}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"public class Event extends Task{"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"    private String date;"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"    public Event(String description, String date){"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"        this.date \u003d date;"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"    public String toString(){"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + this.date + \")\";"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":13}},{"path":"src/main/java/Snom.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":" * Snom is a Personal Assistant Chatbot that helps"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":" * a person to keep track of various things."},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":" *"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":" * @author: Sharptail"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"public class Snom {"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"    private static Snomio snomio \u003d new Snomio(System.in, System.out);"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"    "},{"lineNumber":14,"author":{"gitId":"Sharptail"},"content":"    public static void main(String[] args) {"},{"lineNumber":15,"author":{"gitId":"Sharptail"},"content":"        init();"},{"lineNumber":16,"author":{"gitId":"Sharptail"},"content":"        execute();"},{"lineNumber":17,"author":{"gitId":"Sharptail"},"content":"        snomio.close();"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":20,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Sharptail"},"content":"     * Initialising the chatbot application."},{"lineNumber":22,"author":{"gitId":"Sharptail"},"content":"     * This is just the startup messages for now."},{"lineNumber":23,"author":{"gitId":"Sharptail"},"content":"     * Might be useful for expansion in the future."},{"lineNumber":24,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Sharptail"},"content":"    public static void init(){"},{"lineNumber":26,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"--------------------------------\");"},{"lineNumber":27,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"Bonjour! I\u0027m Snom! *squish*\");"},{"lineNumber":28,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"Try giving me some commands, I might be able to do something!\");"},{"lineNumber":29,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"[type \u0027bye\u0027 to exit program]\");"},{"lineNumber":30,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"--------------------------------\");"},{"lineNumber":31,"author":{"gitId":"Sharptail"},"content":"        snomio.flush();"},{"lineNumber":32,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":34,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Sharptail"},"content":"     * This is the main execution code that will run all the respective command."},{"lineNumber":36,"author":{"gitId":"Sharptail"},"content":"     * Commands will simply be validated by switch cases. Dont need exception for this."},{"lineNumber":37,"author":{"gitId":"Sharptail"},"content":"     * Contents will be validated with exception before execution."},{"lineNumber":38,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Sharptail"},"content":"    public static void execute(){"},{"lineNumber":40,"author":{"gitId":"Sharptail"},"content":"        String input;"},{"lineNumber":41,"author":{"gitId":"Sharptail"},"content":"        CommandEnum command;"},{"lineNumber":42,"author":{"gitId":"Sharptail"},"content":"        do{"},{"lineNumber":43,"author":{"gitId":"Sharptail"},"content":"            input \u003d snomio.readWord();"},{"lineNumber":44,"author":{"gitId":"Sharptail"},"content":"            command \u003d CommandEnum.getCommand(input);"},{"lineNumber":45,"author":{"gitId":"Sharptail"},"content":"            snomio.println(\"--------------------------------\");"},{"lineNumber":46,"author":{"gitId":"Sharptail"},"content":"            try{"},{"lineNumber":47,"author":{"gitId":"Sharptail"},"content":"                switch(command){"},{"lineNumber":48,"author":{"gitId":"Sharptail"},"content":"                    case LIST:"},{"lineNumber":49,"author":{"gitId":"Sharptail"},"content":"                        printTaskList();"},{"lineNumber":50,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":51,"author":{"gitId":"Sharptail"},"content":"                    case FINISH:"},{"lineNumber":52,"author":{"gitId":"Sharptail"},"content":"                        int[] finishList \u003d snomio.readContentWithNumbers(command.name());"},{"lineNumber":53,"author":{"gitId":"Sharptail"},"content":"                        finishTask(finishList);"},{"lineNumber":54,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":55,"author":{"gitId":"Sharptail"},"content":"                    case DELETE:"},{"lineNumber":56,"author":{"gitId":"Sharptail"},"content":"                        int[] deleteList \u003d snomio.readContentWithNumbers(command.name());"},{"lineNumber":57,"author":{"gitId":"Sharptail"},"content":"                        deleteTask(deleteList);"},{"lineNumber":58,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":59,"author":{"gitId":"Sharptail"},"content":"                    case BYE:"},{"lineNumber":60,"author":{"gitId":"Sharptail"},"content":"                        snomio.println(\"Ciao! Hope to see you again soon!\");"},{"lineNumber":61,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":62,"author":{"gitId":"Sharptail"},"content":"                    case TODO:"},{"lineNumber":63,"author":{"gitId":"Sharptail"},"content":"                        String content;"},{"lineNumber":64,"author":{"gitId":"Sharptail"},"content":"                        content \u003d snomio.readContent(command.name());"},{"lineNumber":65,"author":{"gitId":"Sharptail"},"content":"                        addTask(new Todo(content));"},{"lineNumber":66,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":67,"author":{"gitId":"Sharptail"},"content":"                    case DEADLINE:"},{"lineNumber":68,"author":{"gitId":"Sharptail"},"content":"                        String[] dlArr \u003d snomio.readContentWithDate(command.name(), \"/by\");"},{"lineNumber":69,"author":{"gitId":"Sharptail"},"content":"                        addTask(new Deadline(dlArr[0], dlArr[1]));"},{"lineNumber":70,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":71,"author":{"gitId":"Sharptail"},"content":"                    case EVENT:"},{"lineNumber":72,"author":{"gitId":"Sharptail"},"content":"                        String[] eArr \u003d snomio.readContentWithDate(command.name(), \"/at\");"},{"lineNumber":73,"author":{"gitId":"Sharptail"},"content":"                        addTask(new Event(eArr[0], eArr[1]));"},{"lineNumber":74,"author":{"gitId":"Sharptail"},"content":"                        break;"},{"lineNumber":75,"author":{"gitId":"Sharptail"},"content":"                    default:"},{"lineNumber":76,"author":{"gitId":"Sharptail"},"content":"                        snomio.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what \u0027\" + input + \"\u0027 means :-(\");"},{"lineNumber":77,"author":{"gitId":"Sharptail"},"content":"                }"},{"lineNumber":78,"author":{"gitId":"Sharptail"},"content":"            }catch (SnomException e) {"},{"lineNumber":79,"author":{"gitId":"Sharptail"},"content":"                snomio.println(e.getMessage());"},{"lineNumber":80,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"Sharptail"},"content":"            snomio.println(\"--------------------------------\");"},{"lineNumber":82,"author":{"gitId":"Sharptail"},"content":"            snomio.flush();"},{"lineNumber":83,"author":{"gitId":"Sharptail"},"content":"        }while(command !\u003d CommandEnum.BYE);"},{"lineNumber":84,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":86,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Sharptail"},"content":"     * This method is to print out the entire task list"},{"lineNumber":88,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throw exception if there is content after the command or there isn\u0027t any task in the task list"},{"lineNumber":90,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Sharptail"},"content":"    public static void printTaskList() throws SnomException{"},{"lineNumber":92,"author":{"gitId":"Sharptail"},"content":"        if(taskList.size() \u003e 0){"},{"lineNumber":93,"author":{"gitId":"Sharptail"},"content":"            snomio.println(\"Here are the tasks in your list:\");"},{"lineNumber":94,"author":{"gitId":"Sharptail"},"content":"            for(int i \u003d 0; i \u003c taskList.size(); i++){"},{"lineNumber":95,"author":{"gitId":"Sharptail"},"content":"                snomio.println((i+1) + \". \" + taskList.get(i).toString());"},{"lineNumber":96,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":97,"author":{"gitId":"Sharptail"},"content":"        }else{"},{"lineNumber":98,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"You have no task in your list right now, try adding some and try again :D\");"},{"lineNumber":99,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":102,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"Sharptail"},"content":"     * This method add the given task, can be a todo, deadline or event task."},{"lineNumber":104,"author":{"gitId":"Sharptail"},"content":"     * Then prints out respective messages."},{"lineNumber":105,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"Sharptail"},"content":"     * @param task either Todo, Deadline, Event"},{"lineNumber":107,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Sharptail"},"content":"    public static void addTask(Task task){"},{"lineNumber":109,"author":{"gitId":"Sharptail"},"content":"        taskList.add(task);"},{"lineNumber":110,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":111,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"\\t\" + task.toString());"},{"lineNumber":112,"author":{"gitId":"Sharptail"},"content":"        snomio.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":113,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":115,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Sharptail"},"content":"     * This method mark the task by the given task number as finish."},{"lineNumber":117,"author":{"gitId":"Sharptail"},"content":"     * Then prints out the complete messages."},{"lineNumber":118,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"Sharptail"},"content":"     * @param taskNums       task number list that needs to mark as finish"},{"lineNumber":120,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throws exception when the task number is not available in the task list."},{"lineNumber":121,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"Sharptail"},"content":"    public static void finishTask(int[] taskNums) throws SnomException{"},{"lineNumber":123,"author":{"gitId":"Sharptail"},"content":"        for(int i \u003d 0; i \u003c taskNums.length; i++){"},{"lineNumber":124,"author":{"gitId":"Sharptail"},"content":"            int taskNo \u003d taskNums[i] - 1;"},{"lineNumber":125,"author":{"gitId":"Sharptail"},"content":"            try{"},{"lineNumber":126,"author":{"gitId":"Sharptail"},"content":"                Task task \u003d taskList.get(taskNo);"},{"lineNumber":127,"author":{"gitId":"Sharptail"},"content":"                task.setStatus(true);"},{"lineNumber":128,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":129,"author":{"gitId":"Sharptail"},"content":"                // Only print this for the first task marked as finish"},{"lineNumber":130,"author":{"gitId":"Sharptail"},"content":"                if(i \u003d\u003d 0) snomio.println(\"Great Job! I\u0027ve marked this task(s) as finish:\");"},{"lineNumber":131,"author":{"gitId":"Sharptail"},"content":"                snomio.println(\"\\t\" + task.toString());"},{"lineNumber":132,"author":{"gitId":"Sharptail"},"content":"            }catch(IndexOutOfBoundsException e){"},{"lineNumber":133,"author":{"gitId":"Sharptail"},"content":"                throw new SnomException(\"Oops! You have entered a task number: \" + taskNums[i] + \" which is invalid! Please try again!\");"},{"lineNumber":134,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":138,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"Sharptail"},"content":"     * This method removes the given task numbers from the task list."},{"lineNumber":140,"author":{"gitId":"Sharptail"},"content":"     * Then prints out the deleted messages."},{"lineNumber":141,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"Sharptail"},"content":"     * @param  taskNums      task number list that needs to be removed"},{"lineNumber":143,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throws exception when the task number is not available in the task list."},{"lineNumber":144,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"Sharptail"},"content":"    public static void deleteTask(int[] taskNums) throws SnomException{"},{"lineNumber":146,"author":{"gitId":"Sharptail"},"content":"        for(int i \u003d 0; i \u003c taskNums.length; i++){"},{"lineNumber":147,"author":{"gitId":"Sharptail"},"content":"            int taskNo \u003d taskNums[i] - 1 - i;"},{"lineNumber":148,"author":{"gitId":"Sharptail"},"content":"            try{"},{"lineNumber":149,"author":{"gitId":"Sharptail"},"content":"                Task task \u003d taskList.get(taskNo);"},{"lineNumber":150,"author":{"gitId":"Sharptail"},"content":"                taskList.remove(task);"},{"lineNumber":151,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":152,"author":{"gitId":"Sharptail"},"content":"                // Only print this for the first task removed"},{"lineNumber":153,"author":{"gitId":"Sharptail"},"content":"                if(i \u003d\u003d 0) snomio.println(\"Noted, I\u0027ve removed this task\");"},{"lineNumber":154,"author":{"gitId":"Sharptail"},"content":"                snomio.println(\"\\t\" + task.toString());"},{"lineNumber":155,"author":{"gitId":"Sharptail"},"content":"            }catch(IndexOutOfBoundsException e){"},{"lineNumber":156,"author":{"gitId":"Sharptail"},"content":"                throw new SnomException(\"Oops! You have entered a task number: \" + taskNums[i] + \" which is invalid! Please try again!\");"},{"lineNumber":157,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":160}},{"path":"src/main/java/SnomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"public class SnomException extends Exception{"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"    public SnomException(String message){"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":6}},{"path":"src/main/java/Snomio.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":" * This Snomio simply compile both BufferedReader and BufferedWriter"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":" * for easier I/O usages. For eg. read commands, contents, numbers"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":" * from user\u0027s input."},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":" * Solution below adapted from https://github.com/Kattis/kattio/blob/master/Kattio.java"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":" *"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":" * @author: Sharptail"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"import java.io.*;"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"import java.util.StringTokenizer;"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"public class Snomio extends PrintWriter {"},{"lineNumber":14,"author":{"gitId":"Sharptail"},"content":"    private BufferedReader reader;"},{"lineNumber":15,"author":{"gitId":"Sharptail"},"content":"    private StringTokenizer tokenizer;"},{"lineNumber":16,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":17,"author":{"gitId":"Sharptail"},"content":"    public Snomio(InputStream is, OutputStream os){"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"        super(new BufferedOutputStream(os));"},{"lineNumber":19,"author":{"gitId":"Sharptail"},"content":"        reader \u003d new BufferedReader(new InputStreamReader(is));"},{"lineNumber":20,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":22,"author":{"gitId":"Sharptail"},"content":"    public boolean hasMoreWord(){"},{"lineNumber":23,"author":{"gitId":"Sharptail"},"content":"        return tokenizer.hasMoreTokens();"},{"lineNumber":24,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":26,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Sharptail"},"content":"     * This method will read in the whole line and split each word into tokens."},{"lineNumber":28,"author":{"gitId":"Sharptail"},"content":"     * Then it will extract out the first token and return it."},{"lineNumber":29,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Sharptail"},"content":"     * If there are already words/tokens in the tokenizer, it will return the next first token instead."},{"lineNumber":31,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"Sharptail"},"content":"     * @return  the first word that extracted from the tokenizer"},{"lineNumber":33,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Sharptail"},"content":"    public String readWord() {"},{"lineNumber":35,"author":{"gitId":"Sharptail"},"content":"        String input \u003d null;"},{"lineNumber":36,"author":{"gitId":"Sharptail"},"content":"        String token;"},{"lineNumber":37,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":38,"author":{"gitId":"Sharptail"},"content":"        while(tokenizer \u003d\u003d null || !tokenizer.hasMoreTokens()){"},{"lineNumber":39,"author":{"gitId":"Sharptail"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"Sharptail"},"content":"                input \u003d reader.readLine();"},{"lineNumber":41,"author":{"gitId":"Sharptail"},"content":"            } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"Sharptail"},"content":"                e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"Sharptail"},"content":"            tokenizer \u003d new StringTokenizer(input);"},{"lineNumber":45,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Sharptail"},"content":"        token \u003d tokenizer.nextToken();"},{"lineNumber":47,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":48,"author":{"gitId":"Sharptail"},"content":"        return token;"},{"lineNumber":49,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":51,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Sharptail"},"content":"     * This method is exclusive to read the content of the commands (todo, deadline, event)"},{"lineNumber":53,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Sharptail"},"content":"     * @param command        command to be executed"},{"lineNumber":55,"author":{"gitId":"Sharptail"},"content":"     * @return               the content of a task"},{"lineNumber":56,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throws exception if the content is empty"},{"lineNumber":57,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Sharptail"},"content":"    public String readContent(String command) throws SnomException {"},{"lineNumber":59,"author":{"gitId":"Sharptail"},"content":"        if(tokenizer.hasMoreTokens()){"},{"lineNumber":60,"author":{"gitId":"Sharptail"},"content":"            return tokenizer.nextToken(\"\");"},{"lineNumber":61,"author":{"gitId":"Sharptail"},"content":"        }else{"},{"lineNumber":62,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"OOPS!!! The description of a \" + command + \" cannot be empty.\");"},{"lineNumber":63,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":66,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Sharptail"},"content":"     * This method is exclusive to read the content of the commands with Delimiters (deadline, event)"},{"lineNumber":68,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"Sharptail"},"content":"     * @param command        command to be executed"},{"lineNumber":70,"author":{"gitId":"Sharptail"},"content":"     * @return               the content of a task"},{"lineNumber":71,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throws exception if the content is empty"},{"lineNumber":72,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Sharptail"},"content":"    public String[] readContentWithDate(String command, String date) throws SnomException {"},{"lineNumber":74,"author":{"gitId":"Sharptail"},"content":"        String content \u003d this.readContent(command);"},{"lineNumber":75,"author":{"gitId":"Sharptail"},"content":"        String[] array \u003d content.split(date);"},{"lineNumber":76,"author":{"gitId":"Sharptail"},"content":"        if(array.length \u003d\u003d 2){"},{"lineNumber":77,"author":{"gitId":"Sharptail"},"content":"            return array;"},{"lineNumber":78,"author":{"gitId":"Sharptail"},"content":"        }else if(array.length \u003c 2){"},{"lineNumber":79,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"Please enter a valid \" + command + \" date!\");"},{"lineNumber":80,"author":{"gitId":"Sharptail"},"content":"        }else{"},{"lineNumber":81,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"Oops! You have entered more than ONE date, please try again!\");"},{"lineNumber":82,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":85,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"Sharptail"},"content":"     * This method is exclusive to read the content of the commands with number list (finish, delete)"},{"lineNumber":87,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"Sharptail"},"content":"     * @param command        command to be executed"},{"lineNumber":89,"author":{"gitId":"Sharptail"},"content":"     * @return               a number list for command to be executed"},{"lineNumber":90,"author":{"gitId":"Sharptail"},"content":"     * @throws SnomException throws exception if the number is invalid"},{"lineNumber":91,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Sharptail"},"content":"    public int[] readContentWithNumbers(String command) throws SnomException{"},{"lineNumber":93,"author":{"gitId":"Sharptail"},"content":"        int[] nums \u003d new int[tokenizer.countTokens()];"},{"lineNumber":94,"author":{"gitId":"Sharptail"},"content":"        if(nums.length \u003e 0){"},{"lineNumber":95,"author":{"gitId":"Sharptail"},"content":"            for(int i \u003d 0; i \u003c nums.length; i++){"},{"lineNumber":96,"author":{"gitId":"Sharptail"},"content":"                nums[i] \u003d this.readInt();"},{"lineNumber":97,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"Sharptail"},"content":"            return nums;"},{"lineNumber":99,"author":{"gitId":"Sharptail"},"content":"        }else{"},{"lineNumber":100,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"Oops! Please at least give one task number to \" + command + \" a task\");"},{"lineNumber":101,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":104,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"Sharptail"},"content":"     * This method is similar to BufferedReader.readLine() except it will read from the tokenizer"},{"lineNumber":106,"author":{"gitId":"Sharptail"},"content":"     * if there are remaining tokens in it. It will return everything in the tokenizer as a whole sentence."},{"lineNumber":107,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"Sharptail"},"content":"     * @return the whole line of input or the rest of the sentence from the previous read line"},{"lineNumber":109,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"Sharptail"},"content":"    public String readLine(){"},{"lineNumber":111,"author":{"gitId":"Sharptail"},"content":"        String line \u003d \"\";"},{"lineNumber":112,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":113,"author":{"gitId":"Sharptail"},"content":"        if(tokenizer \u003d\u003d null || !tokenizer.hasMoreTokens()){"},{"lineNumber":114,"author":{"gitId":"Sharptail"},"content":"            try {"},{"lineNumber":115,"author":{"gitId":"Sharptail"},"content":"                line \u003d reader.readLine();"},{"lineNumber":116,"author":{"gitId":"Sharptail"},"content":"            } catch (IOException e) {"},{"lineNumber":117,"author":{"gitId":"Sharptail"},"content":"                e.printStackTrace();"},{"lineNumber":118,"author":{"gitId":"Sharptail"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"Sharptail"},"content":"        }else{"},{"lineNumber":120,"author":{"gitId":"Sharptail"},"content":"            line +\u003d tokenizer.nextToken(\"\");"},{"lineNumber":121,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":123,"author":{"gitId":"Sharptail"},"content":"        return line;"},{"lineNumber":124,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":126,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"Sharptail"},"content":"     * This method only reads the first integer input and returns it."},{"lineNumber":128,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"Sharptail"},"content":"     * @return  single integer input"},{"lineNumber":130,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"Sharptail"},"content":"    public int readInt() throws SnomException{"},{"lineNumber":132,"author":{"gitId":"Sharptail"},"content":"        try{"},{"lineNumber":133,"author":{"gitId":"Sharptail"},"content":"            return Integer.parseInt(readWord());"},{"lineNumber":134,"author":{"gitId":"Sharptail"},"content":"        }catch(NumberFormatException e){"},{"lineNumber":135,"author":{"gitId":"Sharptail"},"content":"            throw new SnomException(\"Oops! You have entered invalid task numbers, please try again!\");"},{"lineNumber":136,"author":{"gitId":"Sharptail"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":139,"author":{"gitId":"Sharptail"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"Sharptail"},"content":"     * This method only reads the first double input and returns it."},{"lineNumber":141,"author":{"gitId":"Sharptail"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"Sharptail"},"content":"     * @return  single double input"},{"lineNumber":143,"author":{"gitId":"Sharptail"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"Sharptail"},"content":"    public double readDouble(){"},{"lineNumber":145,"author":{"gitId":"Sharptail"},"content":"        return Double.parseDouble(readWord());"},{"lineNumber":146,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":147}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":" * This class is to store task\u0027s information"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":" *"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":" * @author Sharptail"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"    private String description;"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":"    private boolean status;"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"    public Task(String description){"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"        this.status \u003d false;"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":15,"author":{"gitId":"Sharptail"},"content":"    public String getDescription(){"},{"lineNumber":16,"author":{"gitId":"Sharptail"},"content":"        return this.description;"},{"lineNumber":17,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":19,"author":{"gitId":"Sharptail"},"content":"    public boolean getStatus(){"},{"lineNumber":20,"author":{"gitId":"Sharptail"},"content":"        return status;"},{"lineNumber":21,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":23,"author":{"gitId":"Sharptail"},"content":"    public String getStatusSymbol(){"},{"lineNumber":24,"author":{"gitId":"Sharptail"},"content":"        return status ? \"\\u2713\" : \" \";"},{"lineNumber":25,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":27,"author":{"gitId":"Sharptail"},"content":"    public void setDescription(String description){"},{"lineNumber":28,"author":{"gitId":"Sharptail"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":31,"author":{"gitId":"Sharptail"},"content":"    public void setStatus(boolean status){"},{"lineNumber":32,"author":{"gitId":"Sharptail"},"content":"        this.status \u003d status;"},{"lineNumber":33,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":35,"author":{"gitId":"Sharptail"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Sharptail"},"content":"    public String toString(){"},{"lineNumber":37,"author":{"gitId":"Sharptail"},"content":"        return \"[\" + this.getStatusSymbol() + \"]\" + this.description;"},{"lineNumber":38,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":39}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"public class Todo extends Task{"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"    public Todo(String description){"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":"        super(description);"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":""},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"    public String toString(){"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"}"}],"authorContributionMap":{"Sharptail":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Sharptail"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Sharptail"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"Sharptail"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Sharptail"},"content":"event meeting /at Monday"},{"lineNumber":5,"author":{"gitId":"Sharptail"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Sharptail"},"content":"todo"},{"lineNumber":7,"author":{"gitId":"Sharptail"},"content":"deadline"},{"lineNumber":8,"author":{"gitId":"Sharptail"},"content":"event"},{"lineNumber":9,"author":{"gitId":"Sharptail"},"content":"finish"},{"lineNumber":10,"author":{"gitId":"Sharptail"},"content":"delete"},{"lineNumber":11,"author":{"gitId":"Sharptail"},"content":"finish 1"},{"lineNumber":12,"author":{"gitId":"Sharptail"},"content":"finish 3 4"},{"lineNumber":13,"author":{"gitId":"Sharptail"},"content":"list"},{"lineNumber":14,"author":{"gitId":"Sharptail"},"content":"finish 5"},{"lineNumber":15,"author":{"gitId":"Sharptail"},"content":"delete 3"},{"lineNumber":16,"author":{"gitId":"Sharptail"},"content":"list"},{"lineNumber":17,"author":{"gitId":"Sharptail"},"content":"delete 1 3"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"list"},{"lineNumber":19,"author":{"gitId":"Sharptail"},"content":"bye"}],"authorContributionMap":{"Sharptail":19}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Sharptail"},"content":"java -classpath ..\\bin Snom \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Sharptail":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Sharptail"},"content":"java -classpath ../bin Snom \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":26,"author":{"gitId":"Sharptail"},"content":"diff ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":28,"author":{"gitId":"-"},"content":"then"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":30,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":31,"author":{"gitId":"-"},"content":"else"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":34,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Sharptail":2,"-":32}}]
