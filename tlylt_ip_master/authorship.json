[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"This is a greenfield Java project. It\u0027s named HAHA. Given below are instructions on how to use it."},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":9,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":10,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"1. After the importing is complete, locate the `src/main/java/Haha.java` file, right-click it, and choose `Run Haha.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":17,"author":{"gitId":"-"},"content":"```"},{"lineNumber":18,"author":{"gitId":"-"},"content":"Hello from"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":" _    _          _    _"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"| |  | |   /\\   | |  | |   /\\"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"| |__| |  /  \\  | |__| |  /  \\"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"|  __  | / /\\ \\ |  __  | / /\\ \\"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"| |  | |/ ____ \\| |  | |/ ____ \\"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"|_|  |_/_/    \\_\\_|  |_/_/    \\_\\"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"____________________________________________________________"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"Dude, I\u0027m HAHA"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"What can I do for you?"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"(Oh when you are done, say bye)"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"____________________________________________________________"},{"lineNumber":30,"author":{"gitId":"-"},"content":"```"}],"authorContributionMap":{"tlylt":13,"-":17}},{"path":"src/main/java/tlylt/haha/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of a deadline task."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"     * Constructs a Deadline task."},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"     * @param isDone      Whether task is set as completed."},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"     * @param description Details of task."},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    public Deadline(boolean isDone, String description) {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"        super(\"D\", isDone, description, Parser.getDate(description), Parser.getTime(description));"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"     * Returns string representation of task."},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     * @return String task representation."},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"        return getTypeIcon() + getStatusIcon() + \" \" + modifiedDescription(\"by\");"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":26}},{"path":"src/main/java/tlylt/haha/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of a Event task."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"     * Constructs an Event task."},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"     * @param isDone      Whether task is set as completed."},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"     * @param description Details of task."},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    public Event(boolean isDone, String description) {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"        super(\"E\", isDone, description, Parser.getDate(description), Parser.getTime(description));"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"     * Returns string representation of task."},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     * @return String task representation."},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"        return getTypeIcon() + getStatusIcon() + \" \" + modifiedDescription(\"at\");"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":26}},{"path":"src/main/java/tlylt/haha/Haha.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":"import java.util.List;"},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"public class Haha {"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    private static final Scanner SCANNER \u003d new Scanner(System.in);"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"    private final TaskList database \u003d new TaskList();"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"     * Enters the program execution."},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    public static void main(String[] args) {"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"        Haha haha \u003d new Haha();"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"        List\u003cString\u003e list \u003d haha.storage.getTasks();"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"        haha.database.readTasks(list);"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"        haha.run();"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"     * Drives the program to handle user interaction."},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    public void run() {"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"        ui.welcome();"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"        // Start while loop"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"        boolean end \u003d false;"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"        while (!end) {"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"            try {"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"                LegitCommand command \u003d Parser.parseInput(SCANNER.nextLine());"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"                end \u003d database.executeCommand(command, ui);"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"                ui.lineBreak();"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"            } catch (HahaException ex) {"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"                System.out.println(ex);"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"                ui.lineBreak();"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":40}},{"path":"src/main/java/tlylt/haha/HahaEmptyCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of empty command error."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class HahaEmptyCommandException extends HahaException {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    HahaEmptyCommandException(String command) {"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"        super(command);"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"        return \"Empty Command! Please enter something legit.\";"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":15}},{"path":"src/main/java/tlylt/haha/HahaEmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of no required description error."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class HahaEmptyDescriptionException extends HahaException {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    HahaEmptyDescriptionException(String command) {"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"        super(command);"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"        return \"OOPS!!! The description of a \" + getCommand()"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"                + \" cannot be empty.\";"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":16}},{"path":"src/main/java/tlylt/haha/HahaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Custom exception for Haha."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public abstract class HahaException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    private final String command;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    HahaException(String command) {"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"        this.command \u003d command;"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"     * Returns the actual incorrect user input"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"     * @return String problematic input"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"    public String getCommand() {"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"        return command;"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"     * Specifies all subclass to have specific string representation."},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"     * @return String error message."},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"    public abstract String toString();"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":28}},{"path":"src/main/java/tlylt/haha/HahaTaskNumberNotIntException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of task number error."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class HahaTaskNumberNotIntException extends HahaException {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"    HahaTaskNumberNotIntException(String command) {"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"        super(command);"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"        return \"Is that really a number?\\nTry again with a proper task number!\";"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":16}},{"path":"src/main/java/tlylt/haha/HahaWrongCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of wrong command error."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class HahaWrongCommandException extends HahaException {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    HahaWrongCommandException(String command) {"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"        super(command);"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"        return \"OOPS!!! I\u0027m sorry, \""},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"                + \"but I don\u0027t know what that means :-(\\n\""},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"                + \"Are you sure you mean the following?\\n\""},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"                + \"\\\"\" + getCommand() + \"\\\"\";"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":18}},{"path":"src/main/java/tlylt/haha/LegitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of valid commands."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public enum LegitCommand {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"    EVENT(\"event\"),"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    TODO(\"todo\"),"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"    LIST(\"list\"),"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    DONE(\"done\"),"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    DELETE(\"delete\"),"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    BYE(\"bye\"),"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"    FIND(\"find\");"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    "},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"    private final String rep;"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    private String detail \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     * Constructs a valid command."},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"     * @param rep String representation of a valid command."},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"    LegitCommand(String rep) {"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"        this.rep \u003d rep;"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"    "},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"     * Setter for command detail. This will include information like"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"     * the task number for \"done\" command."},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"     * @param detail Details regarding this command."},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"    void setDetail(String detail) {"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"        this.detail \u003d detail;"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"     * Returns command details for further processing."},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"     * @return String details such as task number."},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"    String getDetail() {"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"        return detail;"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"     * Getter for command representation."},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"     * @return String representation of command."},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"tlylt"},"content":"    String getRep() {"},{"lineNumber":53,"author":{"gitId":"tlylt"},"content":"        return rep;"},{"lineNumber":54,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":56}},{"path":"src/main/java/tlylt/haha/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":" * Utility class to parse user input."},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"     * Returns task number."},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"     * @param command String to be parsed."},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"     * @return Correct task number as an integer."},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"     * @throws HahaTaskNumberNotIntException Task number given is not an integer."},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"    static int taskNumber(String command) throws HahaTaskNumberNotIntException {"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"            return Integer.parseInt(\"\" + command.charAt(command.length() - 1));"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"            throw new HahaTaskNumberNotIntException(command);"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"     * Helps to separate user input into two strings."},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"     * @param command User input string."},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"     * @return Command + details."},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"    static String[] tokenize(String command) {"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"        return command.split(\" \", 2);"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"     * Handles edge case of an empty command."},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"     * @param input User input string."},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyCommandException Command given is empty."},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"    static void handleEmptyCommand(String input) throws HahaEmptyCommandException {"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"        if (input.isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"            throw new HahaEmptyCommandException(input);"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"     * Gets the date in LocalDate."},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"     * @param str User input string."},{"lineNumber":52,"author":{"gitId":"tlylt"},"content":"     * @return Parsed date in LocalDate."},{"lineNumber":53,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"tlylt"},"content":"    static LocalDate getDate(String str) {"},{"lineNumber":55,"author":{"gitId":"tlylt"},"content":"        if (str.contains(\"/at\")) {"},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"            return LocalDate.parse(str.split(\"/at \")[1].split(\" \")[0]);"},{"lineNumber":57,"author":{"gitId":"tlylt"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"tlylt"},"content":"            return LocalDate.parse(str.split(\"/by \")[1].split(\" \")[0]);"},{"lineNumber":59,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":62,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"tlylt"},"content":"     * Gets the time in LocalTime."},{"lineNumber":64,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"tlylt"},"content":"     * @param str User input string."},{"lineNumber":66,"author":{"gitId":"tlylt"},"content":"     * @return Parsed time in LocalTime."},{"lineNumber":67,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"tlylt"},"content":"    static LocalTime getTime(String str) {"},{"lineNumber":69,"author":{"gitId":"tlylt"},"content":"        String[] token \u003d str.split(\" \");"},{"lineNumber":70,"author":{"gitId":"tlylt"},"content":"        return LocalTime.parse(token[token.length - 1]);"},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"tlylt"},"content":"     * Handles edge case of an command without it\u0027s required description."},{"lineNumber":75,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"tlylt"},"content":"     * @param input User input string."},{"lineNumber":77,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyDescriptionException Command\u0027s required description is missing."},{"lineNumber":78,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"tlylt"},"content":"    static void handleEmptyDescriptionCommand(String input) throws HahaEmptyDescriptionException {"},{"lineNumber":80,"author":{"gitId":"tlylt"},"content":"        // TaskType"},{"lineNumber":81,"author":{"gitId":"tlylt"},"content":"        String task \u003d Parser.tokenize(input)[0];"},{"lineNumber":82,"author":{"gitId":"tlylt"},"content":"        String description \u003d Parser.tokenize(input).length \u003d\u003d 2 ? Parser.tokenize(input)[1] : \"\";"},{"lineNumber":83,"author":{"gitId":"tlylt"},"content":"        // Check input has description following task command words"},{"lineNumber":84,"author":{"gitId":"tlylt"},"content":"        if (Arrays"},{"lineNumber":85,"author":{"gitId":"tlylt"},"content":"                .stream(TaskType.values())"},{"lineNumber":86,"author":{"gitId":"tlylt"},"content":"                .map(TaskType::getRep)"},{"lineNumber":87,"author":{"gitId":"tlylt"},"content":"                .anyMatch(x -\u003e x.equals(task)) \u0026\u0026"},{"lineNumber":88,"author":{"gitId":"tlylt"},"content":"                description.isEmpty()"},{"lineNumber":89,"author":{"gitId":"tlylt"},"content":"        ) {"},{"lineNumber":90,"author":{"gitId":"tlylt"},"content":"            throw new HahaEmptyDescriptionException(input);"},{"lineNumber":91,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":94,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"tlylt"},"content":"     * Handles invalid commands."},{"lineNumber":96,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"tlylt"},"content":"     * @param input User input string."},{"lineNumber":98,"author":{"gitId":"tlylt"},"content":"     * @throws HahaWrongCommandException Command not recognized."},{"lineNumber":99,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"tlylt"},"content":"    static void handleWrongCommand(String input) throws HahaWrongCommandException {"},{"lineNumber":101,"author":{"gitId":"tlylt"},"content":"        // Check input starts with specified command words"},{"lineNumber":102,"author":{"gitId":"tlylt"},"content":"        if (Arrays"},{"lineNumber":103,"author":{"gitId":"tlylt"},"content":"                .stream(LegitCommand.values())"},{"lineNumber":104,"author":{"gitId":"tlylt"},"content":"                .map(LegitCommand::getRep)"},{"lineNumber":105,"author":{"gitId":"tlylt"},"content":"                .noneMatch(command -\u003e Parser.tokenize(input)[0].equals(command))) {"},{"lineNumber":106,"author":{"gitId":"tlylt"},"content":"            throw new HahaWrongCommandException(input);"},{"lineNumber":107,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":110,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"tlylt"},"content":"     * Ensures safety of given command."},{"lineNumber":112,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"tlylt"},"content":"     * @param input User input string."},{"lineNumber":114,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyCommandException     Command is empty."},{"lineNumber":115,"author":{"gitId":"tlylt"},"content":"     * @throws HahaWrongCommandException     Command is not recognized."},{"lineNumber":116,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyDescriptionException Command does not have required description."},{"lineNumber":117,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"tlylt"},"content":"    static void handleSafety(String input) throws HahaEmptyCommandException,"},{"lineNumber":119,"author":{"gitId":"tlylt"},"content":"            HahaWrongCommandException,"},{"lineNumber":120,"author":{"gitId":"tlylt"},"content":"            HahaEmptyDescriptionException {"},{"lineNumber":121,"author":{"gitId":"tlylt"},"content":"        Parser.handleEmptyCommand(input);"},{"lineNumber":122,"author":{"gitId":"tlylt"},"content":"        Parser.handleWrongCommand(input);"},{"lineNumber":123,"author":{"gitId":"tlylt"},"content":"        Parser.handleEmptyDescriptionCommand(input);"},{"lineNumber":124,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":126,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"tlylt"},"content":"     * Interprets command and returns respective command using LegitCommand Enum."},{"lineNumber":128,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"tlylt"},"content":"     * @param command User input string."},{"lineNumber":130,"author":{"gitId":"tlylt"},"content":"     * @return Proper command specified in LegitCommand."},{"lineNumber":131,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"tlylt"},"content":"    static LegitCommand handleInterpret(String command) {"},{"lineNumber":133,"author":{"gitId":"tlylt"},"content":"        String[] tokenized \u003d Parser.tokenize(command);"},{"lineNumber":134,"author":{"gitId":"tlylt"},"content":"        String firstWord \u003d tokenized[0];"},{"lineNumber":135,"author":{"gitId":"tlylt"},"content":"        switch (firstWord) {"},{"lineNumber":136,"author":{"gitId":"tlylt"},"content":"        case \"todo\":"},{"lineNumber":137,"author":{"gitId":"tlylt"},"content":"            LegitCommand.TODO.setDetail(tokenized[1]);"},{"lineNumber":138,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.TODO;"},{"lineNumber":139,"author":{"gitId":"tlylt"},"content":"        case \"deadline\":"},{"lineNumber":140,"author":{"gitId":"tlylt"},"content":"            LegitCommand.DEADLINE.setDetail(tokenized[1]);"},{"lineNumber":141,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.DEADLINE;"},{"lineNumber":142,"author":{"gitId":"tlylt"},"content":"        case \"event\":"},{"lineNumber":143,"author":{"gitId":"tlylt"},"content":"            LegitCommand.EVENT.setDetail(tokenized[1]);"},{"lineNumber":144,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.EVENT;"},{"lineNumber":145,"author":{"gitId":"tlylt"},"content":"        case \"list\":"},{"lineNumber":146,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.LIST;"},{"lineNumber":147,"author":{"gitId":"tlylt"},"content":"        case \"done\":"},{"lineNumber":148,"author":{"gitId":"tlylt"},"content":"            LegitCommand.DONE.setDetail(tokenized[1]);"},{"lineNumber":149,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.DONE;"},{"lineNumber":150,"author":{"gitId":"tlylt"},"content":"        case \"delete\":"},{"lineNumber":151,"author":{"gitId":"tlylt"},"content":"            LegitCommand.DELETE.setDetail(tokenized[1]);"},{"lineNumber":152,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.DELETE;"},{"lineNumber":153,"author":{"gitId":"tlylt"},"content":"        case \"find\":"},{"lineNumber":154,"author":{"gitId":"tlylt"},"content":"            LegitCommand.FIND.setDetail(tokenized[1]);"},{"lineNumber":155,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.FIND;"},{"lineNumber":156,"author":{"gitId":"tlylt"},"content":"        case \"bye\":"},{"lineNumber":157,"author":{"gitId":"tlylt"},"content":"            return LegitCommand.BYE;"},{"lineNumber":158,"author":{"gitId":"tlylt"},"content":"        default:"},{"lineNumber":159,"author":{"gitId":"tlylt"},"content":"            throw new IllegalStateException(\"Unexpected value: \" + firstWord);"},{"lineNumber":160,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":163,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":164,"author":{"gitId":"tlylt"},"content":"     * Parses user input string."},{"lineNumber":165,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"tlylt"},"content":"     * @param input User input string."},{"lineNumber":167,"author":{"gitId":"tlylt"},"content":"     * @return Parsed LegitCommand."},{"lineNumber":168,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyCommandException     Command is empty."},{"lineNumber":169,"author":{"gitId":"tlylt"},"content":"     * @throws HahaWrongCommandException     Command is not recognized."},{"lineNumber":170,"author":{"gitId":"tlylt"},"content":"     * @throws HahaEmptyDescriptionException Command does not have required description."},{"lineNumber":171,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"tlylt"},"content":"    static LegitCommand parseInput(String input) throws HahaEmptyCommandException,"},{"lineNumber":173,"author":{"gitId":"tlylt"},"content":"            HahaWrongCommandException,"},{"lineNumber":174,"author":{"gitId":"tlylt"},"content":"            HahaEmptyDescriptionException {"},{"lineNumber":175,"author":{"gitId":"tlylt"},"content":"        // Safety checks"},{"lineNumber":176,"author":{"gitId":"tlylt"},"content":"        Parser.handleSafety(input);"},{"lineNumber":177,"author":{"gitId":"tlylt"},"content":"        // Interpret"},{"lineNumber":178,"author":{"gitId":"tlylt"},"content":"        return Parser.handleInterpret(input);"},{"lineNumber":179,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":181,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"tlylt"},"content":"     * Checks each line and generates corresponding task."},{"lineNumber":183,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":184,"author":{"gitId":"tlylt"},"content":"     * @param line A line of User input."},{"lineNumber":185,"author":{"gitId":"tlylt"},"content":"     * @return Constructed task."},{"lineNumber":186,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":187,"author":{"gitId":"tlylt"},"content":"    static Task parseLine(String line) {"},{"lineNumber":188,"author":{"gitId":"tlylt"},"content":"        String[] tokens \u003d line.split(\"\\\\|\");"},{"lineNumber":189,"author":{"gitId":"tlylt"},"content":"        String type \u003d tokens[0];"},{"lineNumber":190,"author":{"gitId":"tlylt"},"content":"        boolean isDone \u003d tokens[1].equals(\"true\");"},{"lineNumber":191,"author":{"gitId":"tlylt"},"content":"        String description \u003d tokens[2];"},{"lineNumber":192,"author":{"gitId":"tlylt"},"content":"        Task task;"},{"lineNumber":193,"author":{"gitId":"tlylt"},"content":"        switch (type) {"},{"lineNumber":194,"author":{"gitId":"tlylt"},"content":"        case \"T\":"},{"lineNumber":195,"author":{"gitId":"tlylt"},"content":"            task \u003d new Todo(isDone, description);"},{"lineNumber":196,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":197,"author":{"gitId":"tlylt"},"content":"        case \"D\":"},{"lineNumber":198,"author":{"gitId":"tlylt"},"content":"            task \u003d new Deadline(isDone, description);"},{"lineNumber":199,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":200,"author":{"gitId":"tlylt"},"content":"        case \"E\":"},{"lineNumber":201,"author":{"gitId":"tlylt"},"content":"            task \u003d new Event(isDone, description);"},{"lineNumber":202,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":203,"author":{"gitId":"tlylt"},"content":"        default:"},{"lineNumber":204,"author":{"gitId":"tlylt"},"content":"            throw new IllegalStateException(\"Unexpected value: \" + type);"},{"lineNumber":205,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"tlylt"},"content":"        return task;"},{"lineNumber":207,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":208}},{"path":"src/main/java/tlylt/haha/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":" * Utility for storing tasks to file."},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"    private Path file;"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"     * Initialises by checking and creating storage file if needed."},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    public Storage() {"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"            String currentDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"            Path folder \u003d Paths.get(currentDir, \"Haha_data\");"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"            this.file \u003d Paths.get(currentDir, \"Haha_data\", \"database.txt\");"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"            if (Files.notExists(folder)) {"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"                Files.createDirectories(folder);"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"            if (Files.notExists(file)) {"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"                Files.createFile(file);"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"     * Reads storage file content into list for further parsing."},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"     * @return List of String containing task details from file."},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"    public List\u003cString\u003e getTasks() {"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"            return Files.readAllLines(file);"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"            return new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":47}},{"path":"src/main/java/tlylt/haha/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":" * Abstract representation of a task."},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"    protected final String description;"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    protected final String type;"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"    protected LocalDate date;"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    protected LocalTime time;"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"     * Constructor of a task. Mainly used by child classes to create"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"     * a detailed task of type Todo, Event or Deadline."},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     * @param type        specific task type"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"     * @param isDone      whether task is set as completed"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"     * @param description details of task"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    protected Task(String type, boolean isDone, String description) {"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"        this.type \u003d type;"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"        this.description \u003d description;"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"     * Constructor of a task. Mainly used by child classes to create"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"     * a detailed task of type Todo, Event or Deadline."},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"     * Takes in datetime details for Event and Deadline."},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"     * @param type        specific task type"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"     * @param isDone      whether task is set as completed"},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"     * @param description details of task"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"    protected Task(String type, boolean isDone, String description, LocalDate date, LocalTime time) {"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"        this(type, isDone, description);"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"        this.date \u003d date;"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"        this.time \u003d time;"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"     * Returns completion status."},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"     * @return String completion icon."},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"    protected String getStatusIcon() {"},{"lineNumber":52,"author":{"gitId":"tlylt"},"content":"        //return [X] or [ ] symbols"},{"lineNumber":53,"author":{"gitId":"tlylt"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");"},{"lineNumber":54,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"tlylt"},"content":"     * Returns type in nicer format."},{"lineNumber":58,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"tlylt"},"content":"     * @return String type of task."},{"lineNumber":60,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"tlylt"},"content":"    protected String getTypeIcon() {"},{"lineNumber":62,"author":{"gitId":"tlylt"},"content":"        return \"[\" + type + \"]\";"},{"lineNumber":63,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":65,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"tlylt"},"content":"     * Returns nicer representation of task for Event and Deadline."},{"lineNumber":67,"author":{"gitId":"tlylt"},"content":"     * Datetime details are parsed and formatted accordingly."},{"lineNumber":68,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tlylt"},"content":"     * @param id Whether this is for Event or Deadline."},{"lineNumber":70,"author":{"gitId":"tlylt"},"content":"     * @return String nicer representation of task details."},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":"    protected String modifiedDescription(String id) {"},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"        String formatDate \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":74,"author":{"gitId":"tlylt"},"content":"        String formatTime \u003d time.format(DateTimeFormatter.ofPattern(\"hh.mm a\"));"},{"lineNumber":75,"author":{"gitId":"tlylt"},"content":"        String formatDateTime \u003d \"(\" + id + \": \" + formatDate + \" \" + formatTime + \")\";"},{"lineNumber":76,"author":{"gitId":"tlylt"},"content":"        return description.substring(0, description.indexOf(\u0027/\u0027)) + formatDateTime;"},{"lineNumber":77,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":79,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"tlylt"},"content":"     * Sets task status."},{"lineNumber":81,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"tlylt"},"content":"     * @param done Whether done or not done."},{"lineNumber":83,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"tlylt"},"content":"    public void setDone(boolean done) {"},{"lineNumber":85,"author":{"gitId":"tlylt"},"content":"        isDone \u003d done;"},{"lineNumber":86,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":88,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"tlylt"},"content":"     * Getter for isDone"},{"lineNumber":90,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"tlylt"},"content":"     * @return Boolean task status."},{"lineNumber":92,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"tlylt"},"content":"    public boolean getIsDone() {"},{"lineNumber":94,"author":{"gitId":"tlylt"},"content":"        return isDone;"},{"lineNumber":95,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":97,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"tlylt"},"content":"     * Returns formatted string for storing into file."},{"lineNumber":99,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"tlylt"},"content":"     * @return String formatted task details."},{"lineNumber":101,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"tlylt"},"content":"    public String fileStorageFormat() {"},{"lineNumber":103,"author":{"gitId":"tlylt"},"content":"        return type + \"|\" + getIsDone() + \"|\" + description;"},{"lineNumber":104,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":106,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":106}},{"path":"src/main/java/tlylt/haha/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"import java.nio.file.Files;"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"import java.nio.file.StandardOpenOption;"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":" * Representation of a task handler."},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":" * Mainly for handling of task after receiving user input."},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":" * \"database\" in this class refers to the main data structure that will"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":" * hold all the information when program is running."},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    private final List\u003cTask\u003e database \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     * Outputs information about adding of task to database."},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    void tellAdd() {"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"     * Outputs information about size of database."},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"    void tellSize() {"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"        String task \u003d database.size() \u003e 1 ? \" tasks\" : \" task\";"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"        System.out.println(\"Now you have \" + database.size() + task + \" in the list\");"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"     * Adds task into database."},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"     * @param task Task created by user."},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"    void addToDB(Task task) {"},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"        database.add(task);"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"        tellAdd();"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"        System.out.println(\"  \" + database.get(database.size() - 1));"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"        tellSize();"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"     * Removes task from database."},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"     * @param inputNum String that will be parsed for task number."},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"    void deleteFromDB(String inputNum) {"},{"lineNumber":52,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"tlylt"},"content":"            int num \u003d Parser.taskNumber(inputNum);"},{"lineNumber":54,"author":{"gitId":"tlylt"},"content":"            Task currentTask \u003d database.get(num - 1);"},{"lineNumber":55,"author":{"gitId":"tlylt"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"            System.out.println(currentTask);"},{"lineNumber":57,"author":{"gitId":"tlylt"},"content":"            database.remove(currentTask);"},{"lineNumber":58,"author":{"gitId":"tlylt"},"content":"            tellSize();"},{"lineNumber":59,"author":{"gitId":"tlylt"},"content":"        } catch (HahaTaskNumberNotIntException ex) {"},{"lineNumber":60,"author":{"gitId":"tlylt"},"content":"            System.out.println(ex);"},{"lineNumber":61,"author":{"gitId":"tlylt"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":62,"author":{"gitId":"tlylt"},"content":"            System.out.println(\"OOPS! Wrong number!\\nTry specify the right task number\");"},{"lineNumber":63,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":66,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tlylt"},"content":"     * Reads tasks from a file that contains previous usage."},{"lineNumber":68,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tlylt"},"content":"     * @param file Content of previously recorded tasks."},{"lineNumber":70,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"tlylt"},"content":"    void readTasks(List\u003cString\u003e file) {"},{"lineNumber":72,"author":{"gitId":"tlylt"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"tlylt"},"content":"        file.forEach(line -\u003e tasks.add(Parser.parseLine(line)));"},{"lineNumber":74,"author":{"gitId":"tlylt"},"content":"        database.addAll(tasks);"},{"lineNumber":75,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":77,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"tlylt"},"content":"     * Updates database to file."},{"lineNumber":79,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"tlylt"},"content":"    void updateFile() {"},{"lineNumber":81,"author":{"gitId":"tlylt"},"content":"        List\u003cString\u003e str \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"tlylt"},"content":"        database.forEach(task -\u003e str.add(task.fileStorageFormat()));"},{"lineNumber":83,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"tlylt"},"content":"            Files.write(Paths.get(System.getProperty(\"user.dir\"), \"Haha_data\", \"database.txt\"),"},{"lineNumber":85,"author":{"gitId":"tlylt"},"content":"                    str, StandardOpenOption.TRUNCATE_EXISTING);"},{"lineNumber":86,"author":{"gitId":"tlylt"},"content":"        } catch (IOException e) {"},{"lineNumber":87,"author":{"gitId":"tlylt"},"content":"            e.printStackTrace();"},{"lineNumber":88,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":91,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"tlylt"},"content":"     * Lists out all the tasks in database."},{"lineNumber":93,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"tlylt"},"content":"    void listFromDB() {"},{"lineNumber":95,"author":{"gitId":"tlylt"},"content":"        if (database.size() \u003d\u003d 0) {"},{"lineNumber":96,"author":{"gitId":"tlylt"},"content":"            System.out.println(\"You have nothing going on!\");"},{"lineNumber":97,"author":{"gitId":"tlylt"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"tlylt"},"content":"            System.out.println(\"Here are your list of tasks:\");"},{"lineNumber":99,"author":{"gitId":"tlylt"},"content":"            for (int i \u003d 0; i \u003c database.size(); i++) {"},{"lineNumber":100,"author":{"gitId":"tlylt"},"content":"                String idx \u003d Integer.toString(i + 1) + \u0027.\u0027;"},{"lineNumber":101,"author":{"gitId":"tlylt"},"content":"                String task \u003d idx + database.get(i);"},{"lineNumber":102,"author":{"gitId":"tlylt"},"content":"                System.out.println(task);"},{"lineNumber":103,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":107,"author":{"gitId":"tlylt"},"content":"    private void findFromDB(String keyword, Ui ui) {"},{"lineNumber":108,"author":{"gitId":"tlylt"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":109,"author":{"gitId":"tlylt"},"content":"        boolean hasRelated \u003d false;"},{"lineNumber":110,"author":{"gitId":"tlylt"},"content":"        for (int i \u003d 0; i \u003c database.size(); i++) {"},{"lineNumber":111,"author":{"gitId":"tlylt"},"content":"            String idx \u003d Integer.toString(i + 1) + \u0027.\u0027;"},{"lineNumber":112,"author":{"gitId":"tlylt"},"content":"            Task currentTask \u003d database.get(i);"},{"lineNumber":113,"author":{"gitId":"tlylt"},"content":"            if (currentTask.description.contains(keyword)) {"},{"lineNumber":114,"author":{"gitId":"tlylt"},"content":"                String task \u003d idx + database.get(i);"},{"lineNumber":115,"author":{"gitId":"tlylt"},"content":"                System.out.println(task);"},{"lineNumber":116,"author":{"gitId":"tlylt"},"content":"                hasRelated \u003d true;"},{"lineNumber":117,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"tlylt"},"content":"        if (!hasRelated) {"},{"lineNumber":120,"author":{"gitId":"tlylt"},"content":"            ui.taskNotFound();"},{"lineNumber":121,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":124,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"tlylt"},"content":"     * Marks selected task as done."},{"lineNumber":126,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"tlylt"},"content":"     * @param inputNum String for parsing task number."},{"lineNumber":128,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"tlylt"},"content":"    void markDoneToDB(String inputNum) {"},{"lineNumber":130,"author":{"gitId":"tlylt"},"content":"        try {"},{"lineNumber":131,"author":{"gitId":"tlylt"},"content":"            int givenIndex \u003d Parser.taskNumber(inputNum) - 1;"},{"lineNumber":132,"author":{"gitId":"tlylt"},"content":"            if (givenIndex \u003c 0 || givenIndex \u003e\u003d database.size()) {"},{"lineNumber":133,"author":{"gitId":"tlylt"},"content":"                System.out.println(\"OOPS! Wrong number!\\nTry specify the right task number\");"},{"lineNumber":134,"author":{"gitId":"tlylt"},"content":"            } else {"},{"lineNumber":135,"author":{"gitId":"tlylt"},"content":"                Task currentTask \u003d database.get(givenIndex);"},{"lineNumber":136,"author":{"gitId":"tlylt"},"content":"                if (currentTask.getIsDone()) {"},{"lineNumber":137,"author":{"gitId":"tlylt"},"content":"                    System.out.println(\"OOPS! I\u0027ve marked this task as done ALREADY\");"},{"lineNumber":138,"author":{"gitId":"tlylt"},"content":"                } else {"},{"lineNumber":139,"author":{"gitId":"tlylt"},"content":"                    System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":140,"author":{"gitId":"tlylt"},"content":"                    currentTask.setDone(true);"},{"lineNumber":141,"author":{"gitId":"tlylt"},"content":"                    System.out.println(currentTask);"},{"lineNumber":142,"author":{"gitId":"tlylt"},"content":"                }"},{"lineNumber":143,"author":{"gitId":"tlylt"},"content":"            }"},{"lineNumber":144,"author":{"gitId":"tlylt"},"content":"        } catch (HahaTaskNumberNotIntException ex) {"},{"lineNumber":145,"author":{"gitId":"tlylt"},"content":"            System.out.println(ex);"},{"lineNumber":146,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":149,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"tlylt"},"content":"     * Responds to the respective command and perform database related tasks."},{"lineNumber":151,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"tlylt"},"content":"     * @param command Valid command given by user."},{"lineNumber":153,"author":{"gitId":"tlylt"},"content":"     * @param ui      Ui component."},{"lineNumber":154,"author":{"gitId":"tlylt"},"content":"     * @return Whether the user wants to exit."},{"lineNumber":155,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"tlylt"},"content":"    boolean executeCommand(LegitCommand command, Ui ui) {"},{"lineNumber":157,"author":{"gitId":"tlylt"},"content":"        switch (command) {"},{"lineNumber":158,"author":{"gitId":"tlylt"},"content":"        case BYE:"},{"lineNumber":159,"author":{"gitId":"tlylt"},"content":"            ui.bye();"},{"lineNumber":160,"author":{"gitId":"tlylt"},"content":"            return true;"},{"lineNumber":161,"author":{"gitId":"tlylt"},"content":"        case TODO:"},{"lineNumber":162,"author":{"gitId":"tlylt"},"content":"            this.addToDB(new Todo(false, LegitCommand.TODO.getDetail()));"},{"lineNumber":163,"author":{"gitId":"tlylt"},"content":"            this.updateFile();"},{"lineNumber":164,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":165,"author":{"gitId":"tlylt"},"content":"        case EVENT:"},{"lineNumber":166,"author":{"gitId":"tlylt"},"content":"            this.addToDB(new Event(false, LegitCommand.EVENT.getDetail()));"},{"lineNumber":167,"author":{"gitId":"tlylt"},"content":"            this.updateFile();"},{"lineNumber":168,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":169,"author":{"gitId":"tlylt"},"content":"        case DEADLINE:"},{"lineNumber":170,"author":{"gitId":"tlylt"},"content":"            this.addToDB(new Deadline(false, LegitCommand.DEADLINE.getDetail()));"},{"lineNumber":171,"author":{"gitId":"tlylt"},"content":"            this.updateFile();"},{"lineNumber":172,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":173,"author":{"gitId":"tlylt"},"content":"        case LIST:"},{"lineNumber":174,"author":{"gitId":"tlylt"},"content":"            this.listFromDB();"},{"lineNumber":175,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":176,"author":{"gitId":"tlylt"},"content":"        case DONE:"},{"lineNumber":177,"author":{"gitId":"tlylt"},"content":"            this.markDoneToDB(LegitCommand.DONE.getDetail());"},{"lineNumber":178,"author":{"gitId":"tlylt"},"content":"            this.updateFile();"},{"lineNumber":179,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":180,"author":{"gitId":"tlylt"},"content":"        case FIND:"},{"lineNumber":181,"author":{"gitId":"tlylt"},"content":"            this.findFromDB(LegitCommand.FIND.getDetail(), ui);"},{"lineNumber":182,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":183,"author":{"gitId":"tlylt"},"content":"        case DELETE:"},{"lineNumber":184,"author":{"gitId":"tlylt"},"content":"            this.deleteFromDB(LegitCommand.DELETE.getDetail());"},{"lineNumber":185,"author":{"gitId":"tlylt"},"content":"            this.updateFile();"},{"lineNumber":186,"author":{"gitId":"tlylt"},"content":"            break;"},{"lineNumber":187,"author":{"gitId":"tlylt"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"tlylt"},"content":"        return false;"},{"lineNumber":189,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":191,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":192,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":192}},{"path":"src/main/java/tlylt/haha/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of various task types."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    DEADLINE(\"deadline\"),"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"    EVENT(\"event\"),"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    TODO(\"todo\");"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"    private final String rep;"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"     * Constructor of a TaskType."},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"     * @param rep String representation."},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    TaskType(String rep) {"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"        this.rep \u003d rep;"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"     * Returns string representation of task type."},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"     * @return String task type."},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"    String getRep() {"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"        return rep;"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":29}},{"path":"src/main/java/tlylt/haha/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of a Todo task."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"     * Construct a Todo task."},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"     * @param isDone      Whether task is set as completed."},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"     * @param description Details of task."},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    public Todo(boolean isDone, String description) {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"        super(\"T\", isDone, description);"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"     * Returns string representation of task."},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"     * @return String task representation."},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"        return getTypeIcon() + getStatusIcon() + \" \" + description;"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":26}},{"path":"src/main/java/tlylt/haha/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":" * Representation of all user interaction."},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"    private static final String LINE_BREAK \u003d"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"            \"____________________________________________________________\\n\";"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"    private static final String LOGO \u003d \" _    _          _    _\\n\""},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"            + \"| |  | |   /\\\\   | |  | |   /\\\\\\n\""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"            + \"| |__| |  /  \\\\  | |__| |  /  \\\\\\n\""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"            + \"|  __  | / /\\\\ \\\\ |  __  | / /\\\\ \\\\\\n\""},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"            + \"| |  | |/ ____ \\\\| |  | |/ ____ \\\\\\n\""},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"            + \"|_|  |_/_/    \\\\_\\\\_|  |_/_/    \\\\_\\\\\\n\";"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"    private static final String STARTER \u003d \"Hello from\\n\" + LOGO"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"            + LINE_BREAK"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"            + \"Dude, I\u0027m HAHA.\\n\""},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"            + \"What can I do for you?\\n\""},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"            + \"Hint: deadline \u0026 event to include date \u0026 time\\n\""},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"            + \"e.g. 2020-02-02 18:00\\n\""},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"            + \"(Oh when you are done, say bye)\\n\""},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"            + LINE_BREAK;"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"    private static final String TASK_NOT_FOUND \u003d \"OH WAIT A MINUTE!\\n\""},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"            + \":(\\n\""},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"            + \"No related tasks in your list!\";"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"    public void taskNotFound() {"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"        System.out.println(TASK_NOT_FOUND);"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"     * Outputs welcome message."},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"    public void welcome() {"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"        System.out.println(STARTER);"},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"     * Outputs linebreak."},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"    public void lineBreak() {"},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"        System.out.println(LINE_BREAK);"},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"     * Outputs goodbye message."},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"    public void bye() {"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"        System.out.println(\"Bye now!\");"},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":51}},{"path":"src/test/java/tlylt/haha/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    void tokenize_normalCommand_stringArray() {"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"        assertTrue(Arrays.equals(new String[]{\"todo\", \"work\"}, Parser.tokenize(\"todo work\")));"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"        assertTrue(Arrays.equals(new String[]{\"done\", \"1\"}, Parser.tokenize(\"done 1\")));"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"        assertTrue(Arrays.equals(new String[]{\"bye\"}, Parser.tokenize(\"bye\")));"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"        assertTrue(Arrays.equals(new String[]{\"deadline\", \"homework /by 2020-01-02 18:00\"},"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"                Parser.tokenize(\"deadline homework /by 2020-01-02 18:00\")));"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    void taskNumber_notANumber_exceptionThrown() {"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"        assertThrows(HahaTaskNumberNotIntException.class,"},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"                () -\u003e Parser.taskNumber(\"one\"));"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"    void taskNumber_number_int() throws HahaTaskNumberNotIntException {"},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"        assertEquals(2, Parser.taskNumber(\"done 2\"));"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":"}"},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":""}],"authorContributionMap":{"tlylt":32}},{"path":"src/test/java/tlylt/haha/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"package tlylt.haha;"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"import org.junit.jupiter.api.AfterAll;"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"public class UiTest {"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"    private static final ByteArrayOutputStream output \u003d new ByteArrayOutputStream();"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"    private static final PrintStream testOutput \u003d"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"            new PrintStream(output);"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"    @BeforeAll"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"    public static void setUp() {"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"        // With reference to"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"        // https://www.baeldung.com/java-testing-system-out-println"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"        System.setOut(testOutput);"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":24,"author":{"gitId":"tlylt"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tlylt"},"content":"    void lineBreak_whenInvoke_success() {"},{"lineNumber":26,"author":{"gitId":"tlylt"},"content":"        new Ui().lineBreak();"},{"lineNumber":27,"author":{"gitId":"tlylt"},"content":"        assertEquals("},{"lineNumber":28,"author":{"gitId":"tlylt"},"content":"                \"____________________________________________________________\","},{"lineNumber":29,"author":{"gitId":"tlylt"},"content":"                output.toString().trim());"},{"lineNumber":30,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":32,"author":{"gitId":"tlylt"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"tlylt"},"content":"    void welcome_whenInvoke_success() {"},{"lineNumber":34,"author":{"gitId":"tlylt"},"content":"        new Ui().welcome();"},{"lineNumber":35,"author":{"gitId":"tlylt"},"content":"        String expected \u003d \"Hello from\\n\""},{"lineNumber":36,"author":{"gitId":"tlylt"},"content":"                + \" _    _          _    _\\n\""},{"lineNumber":37,"author":{"gitId":"tlylt"},"content":"                + \"| |  | |   /\\\\   | |  | |   /\\\\\\n\""},{"lineNumber":38,"author":{"gitId":"tlylt"},"content":"                + \"| |__| |  /  \\\\  | |__| |  /  \\\\\\n\""},{"lineNumber":39,"author":{"gitId":"tlylt"},"content":"                + \"|  __  | / /\\\\ \\\\ |  __  | / /\\\\ \\\\\\n\""},{"lineNumber":40,"author":{"gitId":"tlylt"},"content":"                + \"| |  | |/ ____ \\\\| |  | |/ ____ \\\\\\n\""},{"lineNumber":41,"author":{"gitId":"tlylt"},"content":"                + \"|_|  |_/_/    \\\\_\\\\_|  |_/_/    \\\\_\\\\\\n\""},{"lineNumber":42,"author":{"gitId":"tlylt"},"content":"                + \"____________________________________________________________\\n\""},{"lineNumber":43,"author":{"gitId":"tlylt"},"content":"                + \"Dude, I\u0027m HAHA.\\n\""},{"lineNumber":44,"author":{"gitId":"tlylt"},"content":"                + \"What can I do for you?\\n\""},{"lineNumber":45,"author":{"gitId":"tlylt"},"content":"                + \"Hint: deadline \u0026 event to include date \u0026 time\\n\""},{"lineNumber":46,"author":{"gitId":"tlylt"},"content":"                + \"e.g. 2020-02-02 18:00\\n\""},{"lineNumber":47,"author":{"gitId":"tlylt"},"content":"                + \"(Oh when you are done, say bye)\\n\""},{"lineNumber":48,"author":{"gitId":"tlylt"},"content":"                + \"____________________________________________________________\";"},{"lineNumber":49,"author":{"gitId":"tlylt"},"content":"        assertEquals("},{"lineNumber":50,"author":{"gitId":"tlylt"},"content":"                expected,"},{"lineNumber":51,"author":{"gitId":"tlylt"},"content":"                output.toString().trim());"},{"lineNumber":52,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tlylt"},"content":""},{"lineNumber":54,"author":{"gitId":"tlylt"},"content":"    @AfterAll"},{"lineNumber":55,"author":{"gitId":"tlylt"},"content":"    public static void tearDown() {"},{"lineNumber":56,"author":{"gitId":"tlylt"},"content":"        System.setOut(System.out);"},{"lineNumber":57,"author":{"gitId":"tlylt"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"tlylt"},"content":"}"}],"authorContributionMap":{"tlylt":58}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tlylt"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"tlylt"},"content":"list"},{"lineNumber":3,"author":{"gitId":"tlylt"},"content":"deadline return book /by 2020-01-02 18:00"},{"lineNumber":4,"author":{"gitId":"tlylt"},"content":"event project meeting /at 2020-03-12 11:00"},{"lineNumber":5,"author":{"gitId":"tlylt"},"content":"todo new project"},{"lineNumber":6,"author":{"gitId":"tlylt"},"content":"list"},{"lineNumber":7,"author":{"gitId":"tlylt"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"tlylt"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"tlylt"},"content":"list"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"done 3"},{"lineNumber":11,"author":{"gitId":"tlylt"},"content":"blah"},{"lineNumber":12,"author":{"gitId":"tlylt"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"tlylt"},"content":"deadline"},{"lineNumber":14,"author":{"gitId":"tlylt"},"content":"event"},{"lineNumber":15,"author":{"gitId":"tlylt"},"content":"done whatever"},{"lineNumber":16,"author":{"gitId":"tlylt"},"content":"blah blah"},{"lineNumber":17,"author":{"gitId":"tlylt"},"content":"delete 1"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"delete 10"},{"lineNumber":19,"author":{"gitId":"tlylt"},"content":"done 2"},{"lineNumber":20,"author":{"gitId":"tlylt"},"content":"done 10"},{"lineNumber":21,"author":{"gitId":"tlylt"},"content":"list"},{"lineNumber":22,"author":{"gitId":"tlylt"},"content":"bye"}],"authorContributionMap":{"tlylt":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"tlylt"},"content":"javac  -cp ..\\src\\main\\java\\tlylt\\haha -Xlint:none -d ..\\bin ..\\src\\main\\java\\tlylt\\haha\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"tlylt"},"content":"java -classpath ..\\bin Haha \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"tlylt":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"tlylt"},"content":"java -classpath ../bin Haha \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"tlylt":1,"-":37}}]
