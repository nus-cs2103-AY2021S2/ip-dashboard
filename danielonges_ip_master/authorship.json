[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"# todobeast project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"1. After that, locate the `src/main/java/todobeast.java` file, right-click it, and choose `Run todobeast.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"danielonges":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    mainClassName \u003d \"todobeast.ToDoBeast\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    archiveBaseName \u003d \"todobeast\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":2,"-":44}},{"path":"src/main/java/todobeast/Application.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.Command;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":" * Contains the main logic of the ToDoBeast application."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"public class Application {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    private Ui ui;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    private static final String DATA_DIRECTORY_NAME \u003d \"./data/\";"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    private static final String DATA_FILE_NAME \u003d \"data.txt\";"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     *Creates a new Application with new Storage, Ui and TaskList components to assist in program logic."},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public Application() {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        storage \u003d new Storage(DATA_DIRECTORY_NAME, DATA_FILE_NAME);"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            ui.showLoading();"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"            taskList \u003d new TaskList(storage.loadTasks());"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"            ui.showLoadingSuccess();"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"            ui.showLoadingError();"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"            taskList \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"     * Contains the main logic of the application. The program will run until the \"exit\" command is given."},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    public void runApplication() {"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        ui.showWelcome();"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        ui.showLine();"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        boolean isExit \u003d false;"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        while (!isExit) {"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"                ui.showLine();"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"                Command command \u003d Parser.parse(fullCommand);"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"                command.execute(taskList, ui);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"            } catch (ToDoBeastException e) {"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"            } finally {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"                try {"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"                    storage.saveToStorage(taskList.formatTaskListForStorage());"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"                } catch (IOException e) {"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"                    ui.showError(e.getMessage());"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"                ui.showLine();"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"        ui.showExit();"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":69}},{"path":"src/main/java/todobeast/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.*;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidCommandException;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":" * A utility class that parses commands given by the user, and generates the appropriate command for the application"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":" * to execute."},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":" *"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":" * If the command given is invalid or in an invalid format, the Parser will throw an exception. Additional helper"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":" * methods are provided in the class to check for such invalid inputs."},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * Provides the main logic to parse user input commands. Commands are given in the following format, and each"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * parameter is separated by a comma (,):"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * \u003ccode\u003ecommand, taskDescription, at/by date in YYYY-MM-DD format (if applicable) and time in HH:MM (24-hr) format"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * (if"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * applicable) \u003c/code\u003e"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * @param fullCommand the full command input given by the user"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * @return a Command corresponding to the user input given"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if the command given by the user is invalid, or in an invalid format."},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     * @see Command"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public static Command parse(String fullCommand) throws ToDoBeastException {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        Command command \u003d null;"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        String[] dateAndTimeTokens \u003d null;"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        // full command will come delimited by \", \""},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        fullCommand \u003d fullCommand.trim();"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        String[] commandArgs \u003d fullCommand.split(\",\");"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        // removing leading and trailing whitespaces"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"        commandArgs \u003d Arrays.stream(commandArgs).map(String::trim).toArray(String[]::new);"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        // command will reside in index 0"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        switch (commandArgs[0].toLowerCase()) {"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        case \"instructions\":"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        case \"instruction\":"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"            command \u003d new ShowInstructionsCommand();"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"        case \"bye\":"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"        case \"exit\":"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        case \"list\":"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"            command \u003d new ListCommand();"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        // format e.g.: done, 1"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        case \"done\":"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"            checkTaskIndex(commandArgs);"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"            int doneIndex \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"            command \u003d new DoneCommand(doneIndex);"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"        // format e.g.: delete, 1"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"        case \"delete\":"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"            checkTaskIndex(commandArgs);"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"            int deleteIndex \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"            command \u003d new DeleteCommand(deleteIndex);"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"        case \"find\":"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"            command \u003d new FindCommand(commandArgs[1]);"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        // format e.g.: todo, thing"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        case \"todo\":"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"            TaskType todoType \u003d TaskType.TODO;"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, todoType);"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddCommand(todoType, commandArgs[1]);"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"        // format e.g.: deadline, thing, by YYYY-MM-DD HH:MM"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"        case \"deadline\":"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"            TaskType deadlineType \u003d TaskType.DEADLINE;"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, deadlineType);"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"            dateAndTimeTokens \u003d splitDateAndTime(commandArgs[2], deadlineType);"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"            checkValidDateAndTimeFormat(dateAndTimeTokens[0], dateAndTimeTokens[1]);"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddCommand(deadlineType, commandArgs[1], LocalDate.parse(dateAndTimeTokens[0]), LocalTime.parse(dateAndTimeTokens[1]));"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"        // format e.g.: event, thing, at YYYY-MM-DD HH:MM"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"        case \"event\":"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"            TaskType eventType \u003d TaskType.EVENT;"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, eventType);"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"            dateAndTimeTokens \u003d splitDateAndTime(commandArgs[2], eventType);"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"            checkValidDateAndTimeFormat(dateAndTimeTokens[0], dateAndTimeTokens[1]);"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddCommand(eventType, commandArgs[1], LocalDate.parse(dateAndTimeTokens[0]), LocalTime.parse(dateAndTimeTokens[1]));"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"            throw new InvalidCommandException(\"Command provided is invalid.\");"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"        return command;"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"     * Checks validity of delete and done commands. They should be given in the following format:"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"     * \u003ccode\u003edelete/done, int task index\u003c/code\u003e"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"     * @param commandArgs the command parameters/arguments parsed from user input"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the number of parameters provided is incorrect, or the index provided is not"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"     * an integer"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"    public static void checkTaskIndex(String[] commandArgs) throws InvalidInputException {"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"        if (commandArgs.length !\u003d 2) {"},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Invalid number of arguments provided.\");"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":"        } else {"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"            try {"},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"                int index \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Index provided is not a number.\");"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":"     * Splits a given string with the appropriate date and time format into a String array. Tasks of \"deadline\" type"},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":"     * must have a \"by\" prefix attached, and tasks of \"event\" type must have a \"at\" prefix attached."},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"     * @param dateAndTime string containing the date and time in appropriate format"},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration that determines the type of task that the date and time is being checked for"},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"     * @return a String array containing the date at index 0 and the time at index 1"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if \"by\" or \"at\" keyword is not specified"},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"    private static String[] splitDateAndTime(String dateAndTime, TaskType taskType) throws InvalidInputException {"},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"        String[] tokens \u003d dateAndTime.split(\" \");"},{"lineNumber":131,"author":{"gitId":"danielonges"},"content":"        switch (tokens[0]) {"},{"lineNumber":132,"author":{"gitId":"danielonges"},"content":"        case \"by\":"},{"lineNumber":133,"author":{"gitId":"danielonges"},"content":"            if (taskType !\u003d TaskType.DEADLINE) {"},{"lineNumber":134,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"\\\"by\\\" keyword only can be used for deadlines.\");"},{"lineNumber":135,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":137,"author":{"gitId":"danielonges"},"content":"        case \"at\":"},{"lineNumber":138,"author":{"gitId":"danielonges"},"content":"            if (taskType !\u003d TaskType.EVENT) {"},{"lineNumber":139,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"\\\"at\\\" keyword only can be used for events.\");"},{"lineNumber":140,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":143,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"No date and time keyword specifier.\");"},{"lineNumber":144,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":146,"author":{"gitId":"danielonges"},"content":"        return new String[]{tokens[1], tokens[2]};"},{"lineNumber":147,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":149,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"danielonges"},"content":"     * Checks if given strings are in the appropriate format specified. YYYY-MM-DD for date, and HH:MM for time."},{"lineNumber":151,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"danielonges"},"content":"     * @param date the date to be checked"},{"lineNumber":153,"author":{"gitId":"danielonges"},"content":"     * @param time the time to be checked"},{"lineNumber":154,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if wrong format is provided"},{"lineNumber":155,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"danielonges"},"content":"    private static void checkValidDateAndTimeFormat(String date, String time) throws InvalidInputException {"},{"lineNumber":157,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":158,"author":{"gitId":"danielonges"},"content":"            LocalDate ld \u003d LocalDate.parse(date);"},{"lineNumber":159,"author":{"gitId":"danielonges"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":160,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Date provided is in wrong format; should be YYYY-MM-DD.\");"},{"lineNumber":161,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":163,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":164,"author":{"gitId":"danielonges"},"content":"            LocalTime lt \u003d LocalTime.parse(time);"},{"lineNumber":165,"author":{"gitId":"danielonges"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":166,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Time provided is in wrong format; should be HH:MM.\");"},{"lineNumber":167,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":170,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"danielonges"},"content":"     * Checks if the user-input command was split properly according to the specified delimiter"},{"lineNumber":172,"author":{"gitId":"danielonges"},"content":"     * @param commandArgs array containing user inputs that have been split according to the delimiter"},{"lineNumber":173,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration that determines the type of task that is being checked for"},{"lineNumber":174,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the length of the user input array differs from what is expected"},{"lineNumber":175,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"danielonges"},"content":"    private static void checkTaskArgsLength(String[] commandArgs, TaskType taskType) throws InvalidInputException {"},{"lineNumber":177,"author":{"gitId":"danielonges"},"content":"        boolean hasInvalidArgsLength \u003d false;"},{"lineNumber":178,"author":{"gitId":"danielonges"},"content":"        switch (taskType) {"},{"lineNumber":179,"author":{"gitId":"danielonges"},"content":"        case TODO:"},{"lineNumber":180,"author":{"gitId":"danielonges"},"content":"            if (commandArgs.length !\u003d 2) {"},{"lineNumber":181,"author":{"gitId":"danielonges"},"content":"                hasInvalidArgsLength \u003d true;"},{"lineNumber":182,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":184,"author":{"gitId":"danielonges"},"content":"        case DEADLINE:"},{"lineNumber":185,"author":{"gitId":"danielonges"},"content":"        case EVENT:"},{"lineNumber":186,"author":{"gitId":"danielonges"},"content":"            if (commandArgs.length !\u003d 3) {"},{"lineNumber":187,"author":{"gitId":"danielonges"},"content":"                hasInvalidArgsLength \u003d true;"},{"lineNumber":188,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":189,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":190,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":191,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":192,"author":{"gitId":"danielonges"},"content":"        if (hasInvalidArgsLength) {"},{"lineNumber":193,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Command arguments have invalid length.\");"},{"lineNumber":194,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":196}},{"path":"src/main/java/todobeast/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import java.io.File;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":" * Handles CRUD functionality for storing the data produced and required by the application into a text file."},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private final File data;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    public static final String STORAGE_DELIMITER \u003d \".\";"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public static final String STORAGE_DELIMITER_REGEX \u003d \"[.]\";"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * Creates a text file to store data in the specified directory, and stores it such that future CRUD"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * functions can be performed on it."},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @param directoryPath the directory in which the text file is to be stored"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     * @param fileName the name of the .txt file that will be created"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public Storage(String directoryPath, String fileName) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        File directory \u003d new File(directoryPath);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        if (!directory.exists()) {"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"            directory.mkdir();"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        data \u003d new File(directoryPath + fileName);"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"            data.createNewFile();"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"        } catch (IOException e) {"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"            System.err.println(\"Could not create new file, exiting process now.\");"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"            System.exit(1);"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"     * Writes the given String data message into the text file that is stored in this Storage object."},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"     * @param message the message to be written"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"     * @throws IOException if unable to write to the file"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    public void saveToStorage(String message) throws IOException {"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        FileWriter fileWriter \u003d new FileWriter(data);"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        fileWriter.write(message);"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        fileWriter.close();"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"     * Loads all the tasks stored in the text file and generates a List of Tasks based on that data."},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"     * @return a List of Tasks generated by the data present in the text file"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"     * @throws FileNotFoundException"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"    public List\u003cTask\u003e loadTasks() throws FileNotFoundException {"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"        Scanner sc \u003d new Scanner(data);"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"            Task newTask \u003d null;"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"            String line \u003d sc.nextLine();"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"            // debug"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"//            System.out.println(line);"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"            String[] taskArgs \u003d line.split(STORAGE_DELIMITER_REGEX);"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"            //debug"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"//            System.out.println(Arrays.toString(taskArgs));"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"            boolean isTaskDone \u003d taskArgs[1].equals(\"1\");"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"            switch (taskArgs[0]) {"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"            // format: TODO.1.desc"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"            case \"TODO\":"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"                newTask \u003d new Todo(taskArgs[2], isTaskDone);"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"            // format: DEADLINE.1.desc.date.time"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"            case \"DEADLINE\":"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"                newTask \u003d new Deadline(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]), LocalTime.parse(taskArgs[4]));"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"            // format: EVENT.1.desc.date.time"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"            case \"EVENT\":"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"                newTask \u003d new Event(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]), LocalTime.parse(taskArgs[4]));"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"            taskList.add(newTask);"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"        sc.close();"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"        return taskList;"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":103}},{"path":"src/main/java/todobeast/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * Wrapper class that stores all tasks for the application into a List."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    protected List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(taskList);"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public void addTask(Task task) {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        taskList.add(task);"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public Task getTask(int taskNumber) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        return taskList.get(taskNumber - 1);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public void setTaskAsDone(Task task) {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        task.setDone();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public boolean isTaskIndexInRange(int taskNumber) {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c taskList.size();"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public int getNumOfTasks() {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        return taskList.size();"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    public void deleteTask(int taskNumber) {"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        taskList.remove(taskNumber - 1);"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        return taskList;"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"     *Formats all tasks in the present TaskList into a format suitable for storing into a data text file."},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"     * @return a String containing all the tasks that have been formatted by this method"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    public String formatTaskListForStorage() {"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"        StringBuilder outputString \u003d new StringBuilder();"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        for (Task task : taskList) {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"            outputString.append(task.formatForStorage(Storage.STORAGE_DELIMITER));"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"            outputString.append(\"\\n\");"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        return outputString.toString();"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":58}},{"path":"src/main/java/todobeast/ToDoBeast.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":" * Main client class for the application."},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public class ToDoBeast {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"    Application app;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    public ToDoBeast() {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"        app \u003d new Application();"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public void runApplication() {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        app.runApplication();"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"     *Runs the main logic of the application."},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"     * @param args not used in this method"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public static void main(String[] args) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        ToDoBeast toDoBeast \u003d new ToDoBeast();"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        toDoBeast.runApplication();"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":28,"-":1}},{"path":"src/main/java/todobeast/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * Handles User Interface interactions for the application. This includes reading of commands, as well as displaying"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" * responses to the user. Note that the business logic of what to respond with is not included in here; this class"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":" * merely contains all the possible responses that the app can produce."},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    private final Scanner sc;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    private final static String line \u003d \"\\t________________________________________________________________\\n\";"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private final static String logo \u003d \"                                                     \\n\" +"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"            \"\\t88                                                   \\n\" +"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"            \"\\t88                                            ,d     \\n\" +"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"            \"\\t88                                            88     \\n\" +"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"            \"\\t88,dPPYba,   ,adPPYba, ,adPPYYba, ,adPPYba, MM88MMM  \\n\" +"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            \"\\t88P\u0027    \\\"8a a8P_____88 \\\"\\\"     `Y8 I8[    \\\"\\\"   88     \\n\" +"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"            \"\\t88       d8 8PP\\\"\\\"\\\"\\\"\\\"\\\"\\\" ,adPPPPP88  `\\\"Y8ba,    88     \\n\" +"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"            \"\\t88b,   ,a8\\\" \\\"8b,   ,aa 88,    ,88 aa    ]8I   88,    \\n\" +"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"            \"\\t8Y\\\"Ybbd8\\\"\u0027   `\\\"Ybbd8\\\"\u0027 `\\\"8bbdP\\\"Y8 `\\\"YbbdP\\\"\u0027   \\\"Y888  \\n\" +"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"            \"\\t                                                     \\n\" +"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"            \"\\t                                                     \\n\";"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public Ui() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    public String readCommand() {"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        return sc.nextLine();"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    public void showLine() {"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        System.out.println(line);"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    public void showLoading() {"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tLoading data from storage...\");"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    public void showLoadingSuccess() {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tData loaded successfully!\");"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    public void showLoadingError() {"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tFailed to load data!\");"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"    public void showDone(Task task) {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tGood job! You\u0027ve just completed this task:\\n\" + \"\\t\\t\" + task);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"    public void showDeleted(Task task) {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tGot it! I\u0027ve removed this task for you:\\n\\t\\t\" + task);"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"    public void showNumOfTasks(int numOfTasks) {"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tYou now have \" + numOfTasks + \" tasks in total.\");"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"    public void showAdded(Task task) {"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tOne more task added to the hustle:\\n\\t\\t\" + task);"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"    public void showWelcome() {"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"        String greeting \u003d line + logo + \"\\tWelcome to ToDoBeast, your best productivity task tracker tool!\\n\" +"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"                \"\\tLet\u0027s get this bread! How would you like to be productive today?\\n\\n\" +"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"                \"\\t[Type \\\"instructions\\\" to display instructions]\";"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        System.out.println(greeting);"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"    public void listTasks() {"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tHere are your tasks:\");"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"    public void findTasks() {"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tHere are the matching tasks in your list:\");"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"    public void printTaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"        int count \u003d 1;"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"        for (Task task : taskList) {"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"            System.out.println(\"\\t\" + count++ + \". \" + task);"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"    public void showInstructions() {"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\tList of commands for ToDoBeast:\\n\\n\" +"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"                \"\\t1. bye/exit - to quit ToDoBeast\\n\" +"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"                \"\\t2. list - lists all the tasks that have been stored in ToDoBeast\\n\" +"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"                \"\\t3. delete, [index] - deletes the task with the corresponding [index]\\n\" +"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"                \"\\t4. done, [index] - marks the task with the corresponding [index] as done\\n\" +"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"                \"\\t5. find, [regex] - finds all tasks with the specified [regex]\\n\" +"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"                \"\\t6. todo, [task description] - creates a to-do task with the specified [task description]\\n\" +"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"                \"\\t7. deadline, [task description], by YYYY-MM-DD HH:MM - creates a deadline task with the specified [task description], date and time\\n\" +"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"                \"\\t8. event, [task description], at YYYY-MM-DD HH:MM - creates an event task with the specified [task description], date and time\\n\");"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"    public void showError(String error) {"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"        System.out.println(\"\\t\" + error);"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"    public void showExit() {"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"        String exitMsg \u003d line + \"\\tThis app may have stopped but the grind never stops.\\n\\tSee you again soon!\\n\" + line;"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"        System.out.println(exitMsg);"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"        System.exit(0);"},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":111}},{"path":"src/main/java/todobeast/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":" * A Command that represents adding a new Task to the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    TaskType taskType;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    String taskDescription;"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    LocalDate taskDate;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    LocalTime taskTime;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * Constructor for tasks that do not have a date and time requirement (e.g. todo-type tasks)"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration representing the type of task to be created"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public AddCommand(TaskType taskType, String taskDescription) {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        this.taskDate \u003d null;"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        this.taskTime \u003d null;"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"     * Constructor for tasks that have a date and time requirement (e.g. deadline and event-type tasks)"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration representing the type of task to be created"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"     * @param taskDate the date corresponding to the current task"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"     * @param taskTime the time corresponding to the current task"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    public AddCommand(TaskType taskType, String taskDescription, LocalDate taskDate, LocalTime taskTime) {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        this.taskDate \u003d taskDate;"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        this.taskTime \u003d taskTime;"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"     * Handles the creation of a new task within the application."},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the command provided by the user is invalid"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws InvalidInputException {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"        Task newTask \u003d null;"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"        switch (taskType) {"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        case TODO:"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"            newTask \u003d new Todo(taskDescription);"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"        case DEADLINE:"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"            if (taskDate \u003d\u003d null || taskTime \u003d\u003d null) {"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Task time and/or date not provided.\");"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"            newTask \u003d new Deadline(taskDescription, taskDate, taskTime);"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"        case EVENT:"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"            if (taskDate \u003d\u003d null || taskTime \u003d\u003d null) {"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Task time and/or date not provided.\");"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"            newTask \u003d new Event(taskDescription, taskDate, taskTime);"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"        taskList.addTask(newTask);"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"        ui.showAdded(newTask);"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"        ui.showNumOfTasks(taskList.getNumOfTasks());"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":81}},{"path":"src/main/java/todobeast/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * Abstract class that defines an implementation of a Command object. This object will contain the necessary business"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * logic for executing specific commands for the application."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * Determines whether to exit the application or not."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    protected boolean isExit;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public Command() {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        isExit \u003d false;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public Command(boolean isExit) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * Method that contains the necessary logic required to execute specific commands. To be implemented by the child"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     * classes. Takes in the TaskList and Ui object specific to the class in order to implement the logic required."},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if there is an error while processing the business logic"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public abstract void execute(TaskList taskList, Ui ui) throws ToDoBeastException;"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        return isExit;"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":38}},{"path":"src/main/java/todobeast/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Command that represents deleting a task from the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"     * The index of the task to be deleted"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    int taskNumber;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * Handles the deletion of a task with the specified index within the application."},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * @throws TaskNotFoundException if the task index provided does not exist within the task list."},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        if (!taskList.isTaskIndexInRange(taskNumber)) {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"            throw new TaskNotFoundException(\"Task with index \" + taskNumber + \" does not exist in the list!\");"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        taskList.deleteTask(taskNumber);"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        ui.showDeleted(taskList.getTask(taskNumber));"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        ui.showNumOfTasks(taskList.getNumOfTasks());"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":35}},{"path":"src/main/java/todobeast/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.TaskNotFoundException;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * A Command that represents marking a task as done in the TaskList. Enclosing business logic is wrapped in the"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" * execute() method."},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * The index of the task to be marked as done"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    int taskNumber;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * Handles the marking of a task with the specified index as done within the application."},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * @throws TaskNotFoundException if the task index provided does not exist within the task list."},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        if (!taskList.isTaskIndexInRange(taskNumber)) {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            throw new TaskNotFoundException(\"Task with index \" + taskNumber + \" does not exist in the list!\");"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        Task currentTask \u003d taskList.getTask(taskNumber);"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        taskList.setTaskAsDone(currentTask);"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        ui.showDone(currentTask);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"}"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":""}],"authorContributionMap":{"danielonges":38}},{"path":"src/main/java/todobeast/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Command that indicates intention to exit the application."},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"     * The isExit property of this command will be set to true, which will trigger the exit process of the application."},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public ExitCommand() {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        super(true);"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"     * Filler method that does not contain any actual logic."},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":27}},{"path":"src/main/java/todobeast/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    String regex;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public FindCommand(String regex) {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        this.regex \u003d regex;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        if (taskList \u003d\u003d null) {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            throw new ToDoBeastException(\"Task list cannot be found.\");"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e filteredList \u003d tasks.stream().filter(task -\u003e task.containsStringInDesc(regex)).collect(Collectors.toList());"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"        ui.findTasks();"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"        ui.printTaskList(filteredList);"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":28}},{"path":"src/main/java/todobeast/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Command that lists all present tasks within the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * Prints all tasks present within the TaskList."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if the taskList is not found"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        if (taskList \u003d\u003d null) {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            throw new ToDoBeastException(\"Task list cannot be found.\");"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        ui.listTasks();"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        ui.printTaskList(taskList.getTaskList());"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":26}},{"path":"src/main/java/todobeast/commands/ShowInstructionsCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public class ShowInstructionsCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"        ui.showInstructions();"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":11}},{"path":"src/main/java/todobeast/commands/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":" * Enumeration that defines the types of tasks that can be created within the application."},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    TODO,"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    EVENT"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":10}},{"path":"src/main/java/todobeast/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class InvalidCommandException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class InvalidInputException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public InvalidInputException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"            super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class TaskNotFoundException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public TaskNotFoundException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/ToDoBeastException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class ToDoBeastException extends Exception {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public ToDoBeastException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Task that represents a deadline-type task. Deadlines have a time and date component."},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    private LocalDate date;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    private LocalTime time;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public Deadline(String taskDescription, LocalDate date, LocalTime time) {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        super(taskDescription);"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        this.time \u003d time;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public Deadline(String taskDescription, boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        super(taskDescription, isDone);"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public String formatForStorage(String delimiter) {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        return \"DEADLINE\" + delimiter + (isDone ? \"1\" : \"0\") + delimiter + taskDescription + delimiter + date.toString() + delimiter + time.toString();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        return \"DEADLINE\" + Task.TASK_DELIMITER + (isDone ? \"done\" : \" \") + Task.TASK_DELIMITER + taskDescription + Task.TASK_DELIMITER + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \", \" + time;"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":34}},{"path":"src/main/java/todobeast/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Task that represents a event-type task. Events have a time and date component."},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    private LocalDate date;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    private LocalTime time;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public Event(String taskDescription, LocalDate date, LocalTime time) {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        super(taskDescription);"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        this.date \u003d date;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        this.time \u003d time;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public Event(String taskDescription, boolean isDone, LocalDate date, LocalTime time) {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        super(taskDescription, isDone);"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        this.time \u003d time;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public String formatForStorage(String delimiter) {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        return \"EVENT\" + delimiter + (isDone ? \"1\" : \"0\") + delimiter + taskDescription + delimiter + date.toString() + delimiter + time.toString();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        return \"EVENT\" + Task.TASK_DELIMITER + (isDone ? \"done\" : \" \") + Task.TASK_DELIMITER + taskDescription + Task.TASK_DELIMITER + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\")) + \", \" + time;"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":34}},{"path":"src/main/java/todobeast/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":" * An abstract class that represents a Task within the application."},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    protected String taskDescription;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    public static final String TASK_DELIMITER \u003d \" | \";"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"     * Default constructor for new tasks."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public Task(String taskDescription) {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     * Constructor for tasks that already have a isDone attribute. This constructor will usually be invoked when"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * tasks are being read from storage."},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @param isDone indicates whether this task has been done"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public Task(String taskDescription, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    public void setDone() {"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"     * Returns true if the regex provided is found within the task description of this particular task."},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"     * @param regex the regex used to match"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"     * @return true if the regex is found within the task description, false otherwise"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    public boolean containsStringInDesc(String regex) {"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        return taskDescription.contains(regex);"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"     * Formats the current task for storage in the disk and returns a String representation of it"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"     * @param delimiter the delimiter used to join the various attributes within the task"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"     * @return the String that contains the formatted attributes of the current task"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"    abstract public String formatForStorage(String delimiter);"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":50}},{"path":"src/main/java/todobeast/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":" * A Task that represents a todo-type task. Todos do not have a date and time component to them."},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    public Todo(String toDoDescription) {"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"        super(toDoDescription);"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    public Todo(String toDoDescription, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"        super(toDoDescription, isDone);"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public String formatForStorage(String delimiter) {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        return \"TODO\" + delimiter + (isDone ? \"1\" : \"0\") + delimiter + taskDescription;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        return \"TODO\" + Task.TASK_DELIMITER + (isDone ? \"done\" : \" \") + Task.TASK_DELIMITER + taskDescription;"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":23}},{"path":"src/test/java/todobeast/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.Command;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ListCommand;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public void testExitCommand() throws ToDoBeastException {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        Command testCommand \u003d Parser.parse(\"exit\");"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand instanceof ExitCommand);"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand.isExit());"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    public void testListCommand() throws ToDoBeastException {"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        Command testCommand \u003d Parser.parse(\"list\");"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand instanceof ListCommand);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        assertFalse(testCommand.isExit());"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void testInvalidCommand() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            Command testCommand \u003d Parser.parse(\"hi\");"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        } catch (ToDoBeastException e) {"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"            assertEquals(\"Command provided is invalid.\", e.getMessage());"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    public void testNonIntegerTaskIndex() {"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"            Parser.checkTaskIndex(new String[]{\"done\", \"a\"});"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        } catch (ToDoBeastException e) {"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"            assertEquals(\"Index provided is not a number.\", e.getMessage());"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":45}},{"path":"src/test/java/todobeast/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"public class StorageTest {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    String testPath \u003d \"./testdata/\";"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    String testFileName \u003d \"data.txt\";"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    String testListData \u003d \"testlistdata.txt\";"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    public void testSaveToStorage() throws IOException {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        Storage storage \u003d new Storage(testPath, testFileName);"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        storage.saveToStorage(\"storage test\");"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        assertEquals(\"storage test\", new Scanner(new File(testPath + testFileName)).nextLine());"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void testLoadTasks() throws FileNotFoundException {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        TaskListStub taskListStub \u003d new TaskListStub(new ArrayList\u003c\u003e());"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        Storage storage \u003d new Storage(testPath, testListData);"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        assertEquals(taskListStub.toString(), storage.loadTasks().toString());"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":33}},{"path":"src/test/java/todobeast/TaskListStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"public class TaskListStub extends TaskList {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public TaskListStub(List\u003cTask\u003e taskList) {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        super(testList());"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public static List\u003cTask\u003e testList() {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        list.add(new Todo(\"test\"));"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        list.add(new Deadline(\"test\", LocalDate.parse(\"2000-01-01\"), LocalTime.parse(\"00:00\")));"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        list.add(new Event(\"test\", LocalDate.parse(\"2000-01-01\"), LocalTime.parse(\"00:00\")));"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        return list;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        return taskList.toString();"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":31}},{"path":"src/test/testdata/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"storage test"}],"authorContributionMap":{"danielonges":1}},{"path":"src/test/testdata/testlistdata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"TODO.0.test"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":"DEADLINE.0.test.2000-01-01.00:00"},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"EVENT.0.test.2000-01-01.00:00"}],"authorContributionMap":{"danielonges":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"deadline huh?"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"deadline huh /at this time"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"event"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"event huh?"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"event huh /by this time"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"list"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"done"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"done a"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"done 10"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"done -1"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"delete 3"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"delete 1"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"delete"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"delete a"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"delete 100"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"delete -10"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"list"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"done 1"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"blah"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"hellooo"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"bye"}],"authorContributionMap":{"danielonges":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"java -classpath ..\\bin todobeast \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"danielonges":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"java -classpath ../bin todobeast \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"danielonges":1,"-":37}}]
