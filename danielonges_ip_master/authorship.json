[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"# todobeast project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"1. After that, locate the `src/main/java/todobeast.java` file, right-click it, and choose `Run todobeast.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"danielonges":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"    mainClassName \u003d \"todobeast.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"    archiveBaseName \u003d \"todobeast\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"# ToDoBeast"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"---"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"Welcome to the ToDo"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":" _                    _   "},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"| |                  | |  "},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"| |__   ___  __ _ ___| |_ "},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"| \u0027_ \\ / _ \\/ _` / __| __|"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"| |_) |  __/ (_| \\__ \\ |_ "},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"|_.__/ \\___|\\__,_|___/\\__| ,"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"your greatest productivity tool!"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"ToDoBeast is a task-tracking chatbot that allows you to keep track of upcoming to-dos, deadlines and events. 📚"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"---"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"### Tracking tasks 📑"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"Three types of tasks can be added: To-Dos, Deadlines, and Events. Once a task is added, ToDoBeast will keep track of the task and its completion progress."},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"Tasks can also be marked as done or deleted accordingly."},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"### Adding notes to tasks 📝"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"You can also add notes/remarks to their tasks, either to new tasks or pre-existing tasks."},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"### Listing tasks 📖"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"ToDoBeast can list all the tasks that you have at once, so that you can keep tabs on the things that you have to do."},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"### Finding tasks 🔎"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"You can search for a task by specific keywords, and ToDoBeast will return the tasks containing matching descriptions."},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"---"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"_** All command parameters are delimited by `, ` **_"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"### 1. `instructions` - Lists instructions"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"Provides a detailed description of the various commands that can be used for ToDobeast."},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"### 2. `todo, [taskDescription], [taskNotes] (optional)` - Add new To-do task"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"Adds a new To-do type task to ToDoBeast. Including notes are optional."},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"Example of usage: "},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"`todo, get milk from the supermarket, farmhouse brand milk`"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"Expected outcome:"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"One more task added to the hustle:"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"    TODO |   | get milk from the supermarket | farmhouse brand milk"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"You now have 1 tasks in total."},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"### 3. `deadline, [taskDescription], by YYYY-MM-DD HH:MM, [taskNotes] (optional)` - Add new Deadline task"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"Adds a new Deadline type task to ToDoBeast. the `by` keyword must be specified, and date and time inputs must be in `YYYY-MM-DD` and `HH:MM` formats respectively. Including notes are optional."},{"lineNumber":66,"author":{"gitId":"-"},"content":""},{"lineNumber":67,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"`deadline, do CS2103 assignment, by 2021-02-19 23:59`"},{"lineNumber":70,"author":{"gitId":"-"},"content":""},{"lineNumber":71,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"One more task added to the hustle:"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"    DEADLINE |   | do CS2103 assignment | by 19 Feb 2021, 23:59"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"You now have 2 tasks in total.  "},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"### 4. `event, [taskDescription], at YYYY-MM-DD HH:MM, [taskNotes] (optional)` - Add new Event task"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"Adds a new Event type task to ToDoBeast. the `at` keyword must be specified, and date and time inputs must be in `YYYY-MM-DD` and `HH:MM` formats respectively. Including notes are optional."},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"Example of usage: "},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"`event, committee meeting, at 2021-03-20 18:00, remember to prepare agenda!`"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"Expected outcome:"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"One more task added to the hustle:"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"    EVENT |   | committee meeting | at 19 Feb 2021, 23:59 | remember to prepare agenda!"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"You now have 3 tasks in total.  "},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"### 5. `list` - Lists all tasks"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"Example outcome: "},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"Here are your tasks:"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"1. TODO |   | get milk from the supermarket | farmhouse brand milk"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"2. DEADLINE |   | do CS2103 assignment | by 19 Feb 2021, 23:59"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"3. EVENT |   | committee meeting | at 19 Feb 2021, 23:59 | remember to prepare agenda!"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"### 6. `note/notes, [taskIndex], [taskNotes]` - Add notes to existing task"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"Adds notes to an existing task. `[taskIndex]` indicates the index of the task as it appears in ToDoBeast. If there were existing notes present, they will be overwritten by the new notes."},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"Note: if `[taskNotes]` is left empty, notes will be deleted from the task."},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"Example of usage: "},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"`notes, 2, merge PR for assignment`"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"Expected outcome:"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":"I\u0027ve added notes to this task:"},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"    DEADLINE |   | do CS2103 assignment | by 19 Feb 2021, 23:59 | merge PR for assignment  "},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":"### 7. `delete, [taskIndex]` - Delete task"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"Deletes the specified task with the respective `[taskIndex]`."},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"danielonges"},"content":"Example of usage: "},{"lineNumber":133,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":134,"author":{"gitId":"danielonges"},"content":"`delete, 1`"},{"lineNumber":135,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":136,"author":{"gitId":"danielonges"},"content":"Expected outcome:"},{"lineNumber":137,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":138,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":139,"author":{"gitId":"danielonges"},"content":"Got it! I\u0027ve removed this task for you:"},{"lineNumber":140,"author":{"gitId":"danielonges"},"content":"    TODO |   | get milk from the supermarket | farmhouse brand milk"},{"lineNumber":141,"author":{"gitId":"danielonges"},"content":"You now have 2 tasks in total."},{"lineNumber":142,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":143,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":144,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":145,"author":{"gitId":"danielonges"},"content":"### 8. `done, [taskIndex]` - Mark task as done"},{"lineNumber":146,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":147,"author":{"gitId":"danielonges"},"content":"Marks task with `[taskIndex]` as done."},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":150,"author":{"gitId":"-"},"content":""},{"lineNumber":151,"author":{"gitId":"danielonges"},"content":"`done, 1`"},{"lineNumber":152,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":153,"author":{"gitId":"danielonges"},"content":"Expected outcome:"},{"lineNumber":154,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":155,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":156,"author":{"gitId":"danielonges"},"content":"Good job! You\u0027ve just completed this task:"},{"lineNumber":157,"author":{"gitId":"danielonges"},"content":"    DEADLINE | ✔ | do CS2103 assignment | by 19 Feb 2021, 23:59 | merge PR for assignment  "},{"lineNumber":158,"author":{"gitId":"danielonges"},"content":"You now have 2 tasks in total."},{"lineNumber":159,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":160,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":161,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":162,"author":{"gitId":"danielonges"},"content":"### 9. `find, [regex]` - Search for tasks"},{"lineNumber":163,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":164,"author":{"gitId":"danielonges"},"content":"Returns a list of all tasks that have the specified keywords, `[regex]`, as defined by the user."},{"lineNumber":165,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":166,"author":{"gitId":"danielonges"},"content":"Example of usage:"},{"lineNumber":167,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":168,"author":{"gitId":"danielonges"},"content":"`find, committee`"},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":173,"author":{"gitId":"danielonges"},"content":"Here are the matching tasks in your list:"},{"lineNumber":174,"author":{"gitId":"danielonges"},"content":"   "},{"lineNumber":175,"author":{"gitId":"danielonges"},"content":"Task #2. EVENT |   | committee meeting | at 19 Feb 2021, 23:59 | remember to prepare agenda!"},{"lineNumber":176,"author":{"gitId":"danielonges"},"content":"```"},{"lineNumber":177,"author":{"gitId":"danielonges"},"content":"\u003cbr/\u003e"},{"lineNumber":178,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":179,"author":{"gitId":"danielonges"},"content":"### 10. `bye/exit` - Exit ToDoBeast"},{"lineNumber":180,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":181,"author":{"gitId":"danielonges"},"content":"Quits the application."}],"authorContributionMap":{"danielonges":159,"-":22}},{"path":"src/main/java/todobeast/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"    public static DialogBox getToDoBeastDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":61}},{"path":"src/main/java/todobeast/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":12}},{"path":"src/main/java/todobeast/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private ToDoBeast toDoBeast \u003d new ToDoBeast();"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setToDoBeast(toDoBeast);"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().getWelcome();"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":32}},{"path":"src/main/java/todobeast/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.util.concurrent.ScheduledExecutorService;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import javafx.scene.control.Button;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    private ToDoBeast toDoBeast;"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/user.png\"));"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    private Image todobeast \u003d new Image(this.getClass().getResourceAsStream(\"/images/todobeast.png\"));"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"    public void getWelcome() {"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        String welcome \u003d toDoBeast.getWelcome();"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        dialogContainer.getChildren().add(DialogBox.getToDoBeastDialog(welcome, todobeast));"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    public void setToDoBeast(ToDoBeast t) {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        toDoBeast \u003d t;"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"    private void handleUserInput() {"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"        String response \u003d toDoBeast.getResponse(input);"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        if (input.equals(\"exit\")) {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"            handleExit();"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"                    DialogBox.getUserDialog(input, user),"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"                    DialogBox.getToDoBeastDialog(response, todobeast)"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"            );"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"            userInput.clear();"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"    @FXML"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"    private void handleExit() {"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"        String exit \u003d toDoBeast.getExit();"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        dialogContainer.getChildren().add(DialogBox.getToDoBeastDialog(exit, todobeast));"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        ScheduledExecutorService executorService \u003d Executors.newSingleThreadScheduledExecutor();"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        executorService.schedule(() -\u003e System.exit(0), 3, TimeUnit.SECONDS);"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":75}},{"path":"src/main/java/todobeast/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.AddCommand;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.AddNotesCommand;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.Command;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ExitCommand;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.FindCommand;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ListCommand;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ShowInstructionsCommand;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidCommandException;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":" * A utility class that parses commands given by the user, and generates the appropriate command for the application"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":" * to execute."},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":" *"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":" * If the command given is invalid or in an invalid format, the Parser will throw an exception. Additional helper"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":" * methods are provided in the class to check for such invalid inputs."},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"public class Parser {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     * Provides the main logic to parse user input commands. Commands are given in the following format, and each"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"     * parameter is separated by a comma (,):"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"     * \u003ccode\u003ecommand, taskDescription, at/by date in YYYY-MM-DD format (if applicable) and time in HH:MM (24-hr) format"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"     * (if"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"     * applicable) \u003c/code\u003e"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"     * @param fullCommand the full command input given by the user"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"     * @return a Command corresponding to the user input given"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if the command given by the user is invalid, or in an invalid format."},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"     * @see Command"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"    public static Command parse(String fullCommand) throws ToDoBeastException {"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        assert fullCommand.length() \u003e 0 : \"Empty command given!\";"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        Command command \u003d null;"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        String[] dateAndTimeTokens \u003d null;"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        // full command will come delimited by \", \""},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"        fullCommand \u003d fullCommand.trim();"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"        String[] commandArgs \u003d fullCommand.split(\",\");"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        // removing leading and trailing whitespaces"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        commandArgs \u003d Arrays.stream(commandArgs).map(String::trim).toArray(String[]::new);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"        // command will reside in index 0"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        switch (commandArgs[0].toLowerCase()) {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        case \"instructions\":"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        case \"instruction\":"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"            command \u003d new ShowInstructionsCommand();"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        case \"bye\":"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"        case \"exit\":"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"            command \u003d new ExitCommand();"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        case \"list\":"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"            command \u003d new ListCommand();"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"        // format e.g.: done, 1"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"        case \"done\":"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"            checkTaskIndex(commandArgs);"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"            int doneIndex \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"            assert doneIndex \u003e\u003d 0 : \"Index provided is a negative number\";"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"            command \u003d new DoneCommand(doneIndex);"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"        // format e.g.: delete, 1"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"        case \"delete\":"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"            checkTaskIndex(commandArgs);"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"            int deleteIndex \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"            assert deleteIndex \u003e\u003d 0 : \"Index provided is a negative number\";"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"            command \u003d new DeleteCommand(deleteIndex);"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"        case \"find\":"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"            command \u003d new FindCommand(commandArgs[1]);"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"        // format e.g.: notes, 1, taskNotes"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"        case \"note\":"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"        case \"notes\":"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"            checkTaskIndex(commandArgs);"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"            int taskIndexToAddNotes \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"            assert taskIndexToAddNotes \u003e\u003d 0 : \"Index provided is a negative number\";"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddNotesCommand(taskIndexToAddNotes, commandArgs[2]);"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"        // format e.g.: todo, thing, (optional) notes"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"        case \"todo\":"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"            TaskType todoType \u003d TaskType.TODO;"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, todoType);"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"            if (commandArgs.length \u003d\u003d 2) {"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"                command \u003d new AddCommand(todoType, commandArgs[1], null, null, null);"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"            } else {"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"                command \u003d new AddCommand(todoType, commandArgs[1], null, null, commandArgs[2]);"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"        // format e.g.: deadline, thing, by YYYY-MM-DD HH:MM, (optional) notes"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"        case \"deadline\":"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"            TaskType deadlineType \u003d TaskType.DEADLINE;"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, deadlineType);"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"            dateAndTimeTokens \u003d splitDateAndTime(commandArgs[2], deadlineType);"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"            checkValidDateAndTimeFormat(dateAndTimeTokens[0], dateAndTimeTokens[1]);"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"            command \u003d getTimeBasedCommand(dateAndTimeTokens, commandArgs, deadlineType);"},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":"        // format e.g.: event, thing, at YYYY-MM-DD HH:MM, (optional) notes"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"        case \"event\":"},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"            TaskType eventType \u003d TaskType.EVENT;"},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"            checkTaskArgsLength(commandArgs, eventType);"},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":"            dateAndTimeTokens \u003d splitDateAndTime(commandArgs[2], eventType);"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"            checkValidDateAndTimeFormat(dateAndTimeTokens[0], dateAndTimeTokens[1]);"},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":"            command \u003d getTimeBasedCommand(dateAndTimeTokens, commandArgs, eventType);"},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"            throw new InvalidCommandException(\"Command provided is invalid.\");"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":"        return command;"},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"    private static Command getTimeBasedCommand(String[] dateAndTimeTokens,"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":"                                               String[] commandArgs, TaskType deadlineType) {"},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":"        Command command;"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"        if (commandArgs.length \u003d\u003d 3) {"},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddCommand(deadlineType, commandArgs[1], LocalDate.parse(dateAndTimeTokens[0]),"},{"lineNumber":131,"author":{"gitId":"danielonges"},"content":"                    LocalTime.parse(dateAndTimeTokens[1]), null);"},{"lineNumber":132,"author":{"gitId":"danielonges"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"danielonges"},"content":"            command \u003d new AddCommand(deadlineType, commandArgs[1], LocalDate.parse(dateAndTimeTokens[0]),"},{"lineNumber":134,"author":{"gitId":"danielonges"},"content":"                    LocalTime.parse(dateAndTimeTokens[1]), commandArgs[3]);"},{"lineNumber":135,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"danielonges"},"content":"        return command;"},{"lineNumber":137,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":139,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"danielonges"},"content":"     * Checks validity of delete and done commands. They should be given in the following format:"},{"lineNumber":141,"author":{"gitId":"danielonges"},"content":"     * \u003ccode\u003edelete/done, int task index\u003c/code\u003e"},{"lineNumber":142,"author":{"gitId":"danielonges"},"content":"     * @param commandArgs the command parameters/arguments parsed from user input"},{"lineNumber":143,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the number of parameters provided is incorrect, or the index provided is not"},{"lineNumber":144,"author":{"gitId":"danielonges"},"content":"     * an integer"},{"lineNumber":145,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"danielonges"},"content":"    public static void checkTaskIndex(String[] commandArgs) throws InvalidInputException {"},{"lineNumber":147,"author":{"gitId":"danielonges"},"content":"        if (commandArgs.length \u003c 2 || commandArgs.length \u003e 3) {"},{"lineNumber":148,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Invalid number of arguments provided.\");"},{"lineNumber":149,"author":{"gitId":"danielonges"},"content":"        } else {"},{"lineNumber":150,"author":{"gitId":"danielonges"},"content":"            try {"},{"lineNumber":151,"author":{"gitId":"danielonges"},"content":"                int index \u003d Integer.parseInt(commandArgs[1]);"},{"lineNumber":152,"author":{"gitId":"danielonges"},"content":"            } catch (NumberFormatException e) {"},{"lineNumber":153,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Index provided is not a number.\");"},{"lineNumber":154,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":158,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"danielonges"},"content":"     * Splits a given string with the appropriate date and time format into a String array. Tasks of \"deadline\" type"},{"lineNumber":160,"author":{"gitId":"danielonges"},"content":"     * must have a \"by\" prefix attached, and tasks of \"event\" type must have a \"at\" prefix attached."},{"lineNumber":161,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"danielonges"},"content":"     * @param dateAndTime string containing the date and time in appropriate format"},{"lineNumber":163,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration that determines the type of task that the date and time is being checked for"},{"lineNumber":164,"author":{"gitId":"danielonges"},"content":"     * @return a String array containing the date at index 0 and the time at index 1"},{"lineNumber":165,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if \"by\" or \"at\" keyword is not specified"},{"lineNumber":166,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"danielonges"},"content":"    private static String[] splitDateAndTime(String dateAndTime, TaskType taskType) throws InvalidInputException {"},{"lineNumber":168,"author":{"gitId":"danielonges"},"content":"        String[] tokens \u003d dateAndTime.split(\" \");"},{"lineNumber":169,"author":{"gitId":"danielonges"},"content":"        switch (tokens[0]) {"},{"lineNumber":170,"author":{"gitId":"danielonges"},"content":"        case \"by\":"},{"lineNumber":171,"author":{"gitId":"danielonges"},"content":"            if (taskType !\u003d TaskType.DEADLINE) {"},{"lineNumber":172,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"\\\"by\\\" keyword only can be used for deadlines.\");"},{"lineNumber":173,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":175,"author":{"gitId":"danielonges"},"content":"        case \"at\":"},{"lineNumber":176,"author":{"gitId":"danielonges"},"content":"            if (taskType !\u003d TaskType.EVENT) {"},{"lineNumber":177,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"\\\"at\\\" keyword only can be used for events.\");"},{"lineNumber":178,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":180,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":181,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"No date and time keyword specifier.\");"},{"lineNumber":182,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":183,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":184,"author":{"gitId":"danielonges"},"content":"        return new String[]{tokens[1], tokens[2]};"},{"lineNumber":185,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":187,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"danielonges"},"content":"     * Checks if given strings are in the appropriate format specified. YYYY-MM-DD for date, and HH:MM for time."},{"lineNumber":189,"author":{"gitId":"danielonges"},"content":"     *"},{"lineNumber":190,"author":{"gitId":"danielonges"},"content":"     * @param date the date to be checked"},{"lineNumber":191,"author":{"gitId":"danielonges"},"content":"     * @param time the time to be checked"},{"lineNumber":192,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if wrong format is provided"},{"lineNumber":193,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":194,"author":{"gitId":"danielonges"},"content":"    private static void checkValidDateAndTimeFormat(String date, String time) throws InvalidInputException {"},{"lineNumber":195,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":196,"author":{"gitId":"danielonges"},"content":"            LocalDate ld \u003d LocalDate.parse(date);"},{"lineNumber":197,"author":{"gitId":"danielonges"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":198,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Date provided is in wrong format; should be YYYY-MM-DD.\");"},{"lineNumber":199,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":201,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":202,"author":{"gitId":"danielonges"},"content":"            LocalTime lt \u003d LocalTime.parse(time);"},{"lineNumber":203,"author":{"gitId":"danielonges"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":204,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Time provided is in wrong format; should be HH:MM.\");"},{"lineNumber":205,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":207,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":208,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":209,"author":{"gitId":"danielonges"},"content":"     * Checks if the user-input command was split properly according to the specified delimiter"},{"lineNumber":210,"author":{"gitId":"danielonges"},"content":"     * @param commandArgs array containing user inputs that have been split according to the delimiter"},{"lineNumber":211,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration that determines the type of task that is being checked for"},{"lineNumber":212,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the length of the user input array differs from what is expected"},{"lineNumber":213,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":214,"author":{"gitId":"danielonges"},"content":"    private static void checkTaskArgsLength(String[] commandArgs, TaskType taskType) throws InvalidInputException {"},{"lineNumber":215,"author":{"gitId":"danielonges"},"content":"        boolean hasInvalidArgsLength \u003d false;"},{"lineNumber":216,"author":{"gitId":"danielonges"},"content":"        switch (taskType) {"},{"lineNumber":217,"author":{"gitId":"danielonges"},"content":"        case TODO:"},{"lineNumber":218,"author":{"gitId":"danielonges"},"content":"            if (commandArgs.length \u003c 2 || commandArgs.length \u003e 3) {"},{"lineNumber":219,"author":{"gitId":"danielonges"},"content":"                hasInvalidArgsLength \u003d true;"},{"lineNumber":220,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":221,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":222,"author":{"gitId":"danielonges"},"content":"        case DEADLINE:"},{"lineNumber":223,"author":{"gitId":"danielonges"},"content":"        case EVENT:"},{"lineNumber":224,"author":{"gitId":"danielonges"},"content":"            if (commandArgs.length \u003c 3 || commandArgs.length \u003e 4) {"},{"lineNumber":225,"author":{"gitId":"danielonges"},"content":"                hasInvalidArgsLength \u003d true;"},{"lineNumber":226,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":227,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":228,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":229,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Invalid task type specified!\");"},{"lineNumber":230,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":232,"author":{"gitId":"danielonges"},"content":"        if (hasInvalidArgsLength) {"},{"lineNumber":233,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Command arguments have invalid length.\");"},{"lineNumber":234,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":235,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":236,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":236}},{"path":"src/main/java/todobeast/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":" * Handles CRUD functionality for storing the data produced and required by the application into a text file."},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    public static final String STORAGE_DELIMITER \u003d \".\";"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    public static final String STORAGE_DELIMITER_REGEX \u003d \"[.]\";"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    private final File data;"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * Creates a text file to store data in the specified directory, and stores it such that future CRUD"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * functions can be performed on it."},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @param directoryPath the directory in which the text file is to be stored"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     * @param fileName the name of the .txt file that will be created"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public Storage(String directoryPath, String fileName) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        assert directoryPath.length() \u003e 0 : \"Empty directory name given!\";"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        assert fileName.length() \u003e 0 : \"Empty file name given!\";"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        File directory \u003d new File(directoryPath);"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        boolean doesDirectoryExist \u003d directory.exists();"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        if (!doesDirectoryExist) {"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"            directory.mkdir();"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"        data \u003d new File(directoryPath + fileName);"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"            data.createNewFile();"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"            e.printStackTrace();"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"            System.err.println(\"Could not create new file, exiting process now.\");"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"            System.exit(1);"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"     * Writes the given String data message into the text file that is stored in this Storage object."},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"     * @param message the message to be written"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"     * @throws IOException if unable to write to the file"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    public void saveToStorage(String message) throws IOException {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"        FileWriter fileWriter \u003d new FileWriter(data);"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"        fileWriter.write(message);"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        fileWriter.close();"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"     * Loads all the tasks stored in the text file and generates a List of Tasks based on that data."},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"     * @return a List of Tasks generated by the data present in the text file"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"     * @throws FileNotFoundException"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"    public List\u003cTask\u003e loadTasks() throws FileNotFoundException, InvalidInputException {"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"        Scanner sc \u003d new Scanner(data);"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"            Task newTask \u003d null;"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"            String line \u003d sc.nextLine();"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"            // debug"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"            // System.out.println(line);"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"            String[] taskArgs \u003d line.split(STORAGE_DELIMITER_REGEX);"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"            // debug"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"            // System.out.println(Arrays.toString(taskArgs));"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"            boolean isTaskDone \u003d taskArgs[1].equals(\"1\");"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"            boolean hasTaskNotes \u003d hasTaskNotes(taskArgs);"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"            switch (taskArgs[0]) {"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"            // format: TODO.1.desc.(optional)taskNotes"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"            case \"TODO\":"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"                if (hasTaskNotes) {"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Todo(taskArgs[2], isTaskDone, taskArgs[3]);"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"                } else {"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Todo(taskArgs[2], isTaskDone, null);"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"            // format: DEADLINE.1.desc.date.time.(optional)taskNotes"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":"            case \"DEADLINE\":"},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"                if (hasTaskNotes) {"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Deadline(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]),"},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"                            LocalTime.parse(taskArgs[4]), taskArgs[5]);"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"                } else {"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Deadline(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]),"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"                            LocalTime.parse(taskArgs[4]), null);"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"            // format: EVENT.1.desc.date.time.(optional)taskNotes"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"            case \"EVENT\":"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":"                if (hasTaskNotes) {"},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Event(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]),"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"                            LocalTime.parse(taskArgs[4]), taskArgs[5]);"},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"                } else {"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Event(taskArgs[2], isTaskDone, LocalDate.parse(taskArgs[3]),"},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"                            LocalTime.parse(taskArgs[4]), null);"},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"                break;"},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":"            default:"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Invalid task type provided!\");"},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"            taskList.add(newTask);"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"        sc.close();"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":"        return taskList;"},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"    private boolean hasTaskNotes(String[] taskArgs) {"},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":"        boolean hasTaskNotes;"},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"        switch (taskArgs[0]) {"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":"        case \"TODO\":"},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":"            hasTaskNotes \u003d taskArgs.length \u003d\u003d 4;"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"        case \"DEADLINE\":"},{"lineNumber":131,"author":{"gitId":"danielonges"},"content":"        case \"EVENT\":"},{"lineNumber":132,"author":{"gitId":"danielonges"},"content":"            hasTaskNotes \u003d taskArgs.length \u003d\u003d 6;"},{"lineNumber":133,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":134,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":135,"author":{"gitId":"danielonges"},"content":"            hasTaskNotes \u003d false;"},{"lineNumber":136,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"danielonges"},"content":"        return hasTaskNotes;"},{"lineNumber":138,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":139}},{"path":"src/main/java/todobeast/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * Wrapper class that stores all tasks for the application into a List."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    protected final List\u003cTask\u003e taskList;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public TaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e(taskList);"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public void addTask(Task task) {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        taskList.add(task);"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public Task getTask(int taskNumber) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        return taskList.get(taskNumber - 1);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public void setTaskAsDone(Task task) {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        task.setDone();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public void setTaskNotes(Task task, String taskNotes) {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        task.setTaskNotes(taskNotes);"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public void clearTaskNotes(Task task) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        task.clearTaskNotes();"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    public boolean isTaskIndexInRange(int taskNumber) {"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c taskList.size();"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    public int getNumOfTasks() {"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        return taskList.size();"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"     * Deletes the task with the specified task number from the task list."},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"     * @param taskNumber the index of the task number to be deleted."},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"     * @return the task that has been deleted from the task list."},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"    public Task deleteTask(int taskNumber) {"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        Task deletedTask \u003d getTask(taskNumber);"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        taskList.remove(taskNumber - 1);"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        return deletedTask;"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    public List\u003cTask\u003e getTaskList() {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        return taskList;"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"     *Formats all tasks in the present TaskList into a format suitable for storing into a data text file."},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"     * @return a String containing all the tasks that have been formatted by this method"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"    public String formatTaskListForStorage() {"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"        StringBuilder outputString \u003d new StringBuilder();"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"        for (Task task : taskList) {"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"            outputString.append(task.formatForStorage(Storage.STORAGE_DELIMITER));"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"            outputString.append(\"\\n\");"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"        return outputString.toString();"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":73}},{"path":"src/main/java/todobeast/ToDoBeast.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.Command;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":" * Main client class for the application."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"public class ToDoBeast {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    private static final String DATA_DIRECTORY_NAME \u003d \"./data/\";"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private static final String DATA_FILE_NAME \u003d \"data.txt\";"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    private Ui ui;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    private TaskList taskList;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * Constructor for ToDoBeast."},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    public ToDoBeast() {"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"        storage \u003d new Storage(DATA_DIRECTORY_NAME, DATA_FILE_NAME);"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"            ui.showLoading();"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            taskList \u003d new TaskList(storage.loadTasks());"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"            ui.showLoadingSuccess();"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        } catch (FileNotFoundException | InvalidInputException e) {"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"            ui.showLoadingError();"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"            taskList \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    String getResponse(String fullCommand) {"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"            Command command \u003d Parser.parse(fullCommand);"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"            assert command !\u003d null : \"No command produced from application!\";"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"            command.execute(taskList, ui);"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"            if (command.isExit()) {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"                return \"exit\";"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        } catch (ToDoBeastException e) {"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"            ui.addToResponseOutput(ui.showError(e.getMessage()));"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        } finally {"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"                storage.saveToStorage(taskList.formatTaskListForStorage());"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"            } catch (IOException e) {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"                ui.addToResponseOutput(ui.showError(e.getMessage()));"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"        return ui.returnResponseOutput();"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"    String getWelcome() {"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showWelcome());"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        return ui.returnResponseOutput();"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"    String getExit() {"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showExit());"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"        return ui.returnResponseOutput();"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"     * Contains the main logic of the application. The program will run until the \"exit\" command is given."},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"    public void runApplication() {"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"        boolean isExit \u003d false;"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"        while (!isExit) {"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"            try {"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"                ui.addToResponseOutput(ui.showLine());"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"                Command command \u003d Parser.parse(fullCommand);"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"                command.execute(taskList, ui);"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"                isExit \u003d command.isExit();"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"            } catch (ToDoBeastException e) {"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"                ui.addToResponseOutput(ui.showError(e.getMessage()));"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"            } finally {"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"                try {"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"                    storage.saveToStorage(taskList.formatTaskListForStorage());"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"                } catch (IOException e) {"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"                    ui.showError(e.getMessage());"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"                ui.addToResponseOutput(ui.showLine());"},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"        ui.showExit();"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"     *Runs the main logic of the application."},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"     * @param args not used in this method"},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"    public static void main(String[] args) {"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"        ToDoBeast toDoBeast \u003d new ToDoBeast();"},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"        toDoBeast.runApplication();"},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"danielonges":104,"-":1}},{"path":"src/main/java/todobeast/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" * Handles User Interface interactions for the application. This includes reading of commands, as well as displaying"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":" * responses to the user. Note that the business logic of what to respond with is not included in here; this class"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":" * merely contains all the possible responses that the app can produce."},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"public class Ui {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    private static final String line \u003d \"\\t________________________________________________________________\\n\";"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private static final String logo \u003d \" _                    _   \\n\""},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"            + \"| |                  | |  \\n\""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"            + \"| |__   ___  __ _ ___| |_ \\n\""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"            + \"| \u0027_ \\\\ / _ \\\\/ _` / __| __|\\n\""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"            + \"| |_) |  __/ (_| \\\\__ \\\\ |_ \\n\""},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            + \"|_.__/ \\\\___|\\\\__,_|___/\\\\__|\\n\";"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    private final Scanner sc;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private StringBuilder responseOutput;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * Constructor for Ui."},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"    public Ui() {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        responseOutput \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    public void addToResponseOutput(String response) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        responseOutput.append(response);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"     * Returns the string that has been built by the responseOutput StringBuilder, and clears the StringBuilder"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"     * @return the response output that has been built by the responseOutput StringBuilder"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    public String returnResponseOutput() {"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        String response \u003d responseOutput.toString();"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"        responseOutput.setLength(0);"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        return response;"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    public String readCommand() {"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"        return sc.nextLine();"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"    public String showLine() {"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        return line;"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"    public String showLoading() {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"        return \"Loading data from storage...\\n\";"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"    public String showLoadingSuccess() {"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"        return \"Data loaded successfully!\\n\";"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"    public String showLoadingError() {"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"        return \"Failed to load data!\\n\";"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"    public String showDone(Task task) {"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"        return \"Good job! You\u0027ve just completed this task:\\n\\t\" + task + \"\\n\";"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"    public String showTaskNotesAdded(Task task) {"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        return \"I\u0027ve added notes to this task:\\n\\t\" + task + \"\\n\";"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"    public String showTaskNotesCleared(Task task) {"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"        return \"I\u0027ve cleared notes from this task:\\n\\t\" + task + \"\\n\";"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"    public String showDeleted(Task task) {"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"        return \"Got it! I\u0027ve removed this task for you:\\n\\t\" + task + \"\\n\";"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"    public String showNumOfTasks(int numOfTasks) {"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"        return \"You now have \" + numOfTasks + \" tasks in total.\" + \"\\n\";"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"     * Returns a string representing the UI output for the task that has been added."},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"     * @param task the task that has been added."},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"     * @return a string representing the UI output for the task that has been added."},{"lineNumber":92,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"danielonges"},"content":"    public String showAdded(Task task) {"},{"lineNumber":94,"author":{"gitId":"danielonges"},"content":"        return \"One more task added to the hustle:\\n\\t\" + task + \"\\n\";"},{"lineNumber":95,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":97,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"danielonges"},"content":"     * Returns a string with the welcome message."},{"lineNumber":99,"author":{"gitId":"danielonges"},"content":"     * @return a string with the welcome message."},{"lineNumber":100,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"danielonges"},"content":"    public String showWelcome() {"},{"lineNumber":102,"author":{"gitId":"danielonges"},"content":"        String greeting \u003d logo + \"\\nWelcome to ToDoBeast, your best productivity task tracker tool!\\n\""},{"lineNumber":103,"author":{"gitId":"danielonges"},"content":"                + \"Let\u0027s get this bread! How would you like to be productive today?\\n\\n\""},{"lineNumber":104,"author":{"gitId":"danielonges"},"content":"                + \"[Type \\\"instructions\\\" to display instructions]\\n\";"},{"lineNumber":105,"author":{"gitId":"danielonges"},"content":"        return greeting;"},{"lineNumber":106,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":108,"author":{"gitId":"danielonges"},"content":"    public String listTasks() {"},{"lineNumber":109,"author":{"gitId":"danielonges"},"content":"        return \"Here are your tasks:\\n\\n\";"},{"lineNumber":110,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":112,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"danielonges"},"content":"     * Returns a string representing all tasks that have been found in the task list."},{"lineNumber":114,"author":{"gitId":"danielonges"},"content":"     * @return a string representing all tasks that have been found in the task list."},{"lineNumber":115,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"danielonges"},"content":"    public String findTasks() {"},{"lineNumber":117,"author":{"gitId":"danielonges"},"content":"        return \"Here are the matching tasks in your list:\\n\\n\";"},{"lineNumber":118,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":120,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"danielonges"},"content":"     * Returns a string representing all tasks in the task list."},{"lineNumber":122,"author":{"gitId":"danielonges"},"content":"     * @param taskList the task list to be printed."},{"lineNumber":123,"author":{"gitId":"danielonges"},"content":"     * @return a string representing all tasks in the task list."},{"lineNumber":124,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"danielonges"},"content":"    public String printTaskList(List\u003cTask\u003e taskList) {"},{"lineNumber":126,"author":{"gitId":"danielonges"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":127,"author":{"gitId":"danielonges"},"content":"        for (Task task : taskList) {"},{"lineNumber":128,"author":{"gitId":"danielonges"},"content":"            int listIndex \u003d taskList.indexOf(task) + 1;"},{"lineNumber":129,"author":{"gitId":"danielonges"},"content":"            output.append(listIndex).append(\". \").append(task).append(\"\\n\");"},{"lineNumber":130,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"danielonges"},"content":"        return output.toString();"},{"lineNumber":132,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":134,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"danielonges"},"content":"     * Returns a string representing all filtered tasks in the map."},{"lineNumber":136,"author":{"gitId":"danielonges"},"content":"     * @param filteredMap the map to be printed."},{"lineNumber":137,"author":{"gitId":"danielonges"},"content":"     * @return a string representing all filtered tasks in the map."},{"lineNumber":138,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"danielonges"},"content":"    public String printFilteredMap(Map\u003cInteger, Task\u003e filteredMap) {"},{"lineNumber":140,"author":{"gitId":"danielonges"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":141,"author":{"gitId":"danielonges"},"content":"        for (Map.Entry\u003cInteger, Task\u003e entry : filteredMap.entrySet()) {"},{"lineNumber":142,"author":{"gitId":"danielonges"},"content":"            int taskIndex \u003d entry.getKey() + 1;"},{"lineNumber":143,"author":{"gitId":"danielonges"},"content":"            Task task \u003d entry.getValue();"},{"lineNumber":144,"author":{"gitId":"danielonges"},"content":"            output.append(\"Task #\").append(taskIndex).append(\". \").append(task).append(\"\\n\");"},{"lineNumber":145,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"danielonges"},"content":"        return output.toString();"},{"lineNumber":147,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":149,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":150,"author":{"gitId":"danielonges"},"content":"     * Returns a string representation of the instructions for ToDoBeast."},{"lineNumber":151,"author":{"gitId":"danielonges"},"content":"     * @return a string representation of the instructions for ToDoBeast."},{"lineNumber":152,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"danielonges"},"content":"    public String showInstructions() {"},{"lineNumber":154,"author":{"gitId":"danielonges"},"content":"        String instructions \u003d \"List of commands for ToDoBeast:\\n\\n\""},{"lineNumber":155,"author":{"gitId":"danielonges"},"content":"                + \"1. bye/exit - to quit ToDoBeast\\n\""},{"lineNumber":156,"author":{"gitId":"danielonges"},"content":"                + \"2. list - lists all the tasks that have been stored in ToDoBeast\\n\""},{"lineNumber":157,"author":{"gitId":"danielonges"},"content":"                + \"3. delete, [index] - deletes the task with the corresponding [index]\\n\""},{"lineNumber":158,"author":{"gitId":"danielonges"},"content":"                + \"4. done, [index] - marks the task with the corresponding [index] as done\\n\""},{"lineNumber":159,"author":{"gitId":"danielonges"},"content":"                + \"5. find, [regex] - finds all tasks with the specified [regex]\\n\""},{"lineNumber":160,"author":{"gitId":"danielonges"},"content":"                + \"6. note/notes, [index], taskNotes - adds specified taskNotes to the task with corresponding \""},{"lineNumber":161,"author":{"gitId":"danielonges"},"content":"                + \"[index]\\n\""},{"lineNumber":162,"author":{"gitId":"danielonges"},"content":"                + \"7. todo, [task description] - creates a to-do task with the specified [task description]\\n\""},{"lineNumber":163,"author":{"gitId":"danielonges"},"content":"                + \"8. deadline, [task description], by YYYY-MM-DD HH:MM \""},{"lineNumber":164,"author":{"gitId":"danielonges"},"content":"                + \"- creates a deadline task with the \""},{"lineNumber":165,"author":{"gitId":"danielonges"},"content":"                + \"specified [task description], date and time\\n\""},{"lineNumber":166,"author":{"gitId":"danielonges"},"content":"                + \"9. event, [task description], at YYYY-MM-DD HH:MM \""},{"lineNumber":167,"author":{"gitId":"danielonges"},"content":"                + \"- creates an event task with the specified \""},{"lineNumber":168,"author":{"gitId":"danielonges"},"content":"                + \"[task description], date and time\\n\";"},{"lineNumber":169,"author":{"gitId":"danielonges"},"content":"        return instructions;"},{"lineNumber":170,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":172,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"danielonges"},"content":"     * Returns a string representation of an error."},{"lineNumber":174,"author":{"gitId":"danielonges"},"content":"     * @param error the error to be shown."},{"lineNumber":175,"author":{"gitId":"danielonges"},"content":"     * @return a string representation of an error."},{"lineNumber":176,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"danielonges"},"content":"    public String showError(String error) {"},{"lineNumber":178,"author":{"gitId":"danielonges"},"content":"        return error;"},{"lineNumber":179,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":181,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":182,"author":{"gitId":"danielonges"},"content":"     * Returns a string representation of the exit message for ToDoBeast."},{"lineNumber":183,"author":{"gitId":"danielonges"},"content":"     * @return a string representation of the exit message for ToDoBeast."},{"lineNumber":184,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":185,"author":{"gitId":"danielonges"},"content":"    public String showExit() {"},{"lineNumber":186,"author":{"gitId":"danielonges"},"content":"        String exitMsg \u003d \"This app may have stopped but the grind never stops.\\n\""},{"lineNumber":187,"author":{"gitId":"danielonges"},"content":"                + \"\\tSee you again soon!\\n\";"},{"lineNumber":188,"author":{"gitId":"danielonges"},"content":"        return exitMsg;"},{"lineNumber":189,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":190}},{"path":"src/main/java/todobeast/commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":" * A Command that represents adding a new Task to the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"public class AddCommand extends Command {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    private final TaskType taskType;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    private final String taskDescription;"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    private final LocalDate taskDate;"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"    private final LocalTime taskTime;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    private final String taskNotes;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * Constructor for tasks."},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     * @param taskType enumeration representing the type of task to be created"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * @param taskDate the date corresponding to the current task"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @param taskTime the time corresponding to the current task"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public AddCommand(TaskType taskType, String taskDescription, LocalDate taskDate, LocalTime taskTime,"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"                      String taskNotes) {"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        this.taskDate \u003d taskDate;"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        this.taskTime \u003d taskTime;"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        this.taskNotes \u003d taskNotes;"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"     * Handles the creation of a new task within the application."},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"     * @throws InvalidInputException if the command provided by the user is invalid"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws InvalidInputException {"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"        Task newTask \u003d null;"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"        boolean hasTaskNotes \u003d taskNotes !\u003d null;"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"        boolean hasDate \u003d taskDate !\u003d null;"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"        boolean hasTime \u003d taskTime !\u003d null;"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"        switch (taskType) {"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"        case TODO:"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"            if (hasTaskNotes) {"},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"                newTask \u003d new Todo(taskDescription, false, taskNotes);"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"            } else {"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"                newTask \u003d new Todo(taskDescription, false, null);"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"danielonges"},"content":"        case DEADLINE:"},{"lineNumber":63,"author":{"gitId":"danielonges"},"content":"            if (hasDate \u0026\u0026 hasTime) {"},{"lineNumber":64,"author":{"gitId":"danielonges"},"content":"                if (hasTaskNotes) {"},{"lineNumber":65,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Deadline(taskDescription, false, taskDate, taskTime, taskNotes);"},{"lineNumber":66,"author":{"gitId":"danielonges"},"content":"                } else {"},{"lineNumber":67,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Deadline(taskDescription, false, taskDate, taskTime, null);"},{"lineNumber":68,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"danielonges"},"content":"            } else {"},{"lineNumber":70,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Task time and/or date not provided.\");"},{"lineNumber":71,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":73,"author":{"gitId":"danielonges"},"content":"        case EVENT:"},{"lineNumber":74,"author":{"gitId":"danielonges"},"content":"            if (hasDate \u0026\u0026 hasTime) {"},{"lineNumber":75,"author":{"gitId":"danielonges"},"content":"                if (hasTaskNotes) {"},{"lineNumber":76,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Event(taskDescription, false, taskDate, taskTime, taskNotes);"},{"lineNumber":77,"author":{"gitId":"danielonges"},"content":"                } else {"},{"lineNumber":78,"author":{"gitId":"danielonges"},"content":"                    newTask \u003d new Event(taskDescription, false, taskDate, taskTime, null);"},{"lineNumber":79,"author":{"gitId":"danielonges"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"danielonges"},"content":"            } else {"},{"lineNumber":81,"author":{"gitId":"danielonges"},"content":"                throw new InvalidInputException(\"Task time and/or date not provided.\");"},{"lineNumber":82,"author":{"gitId":"danielonges"},"content":"            }"},{"lineNumber":83,"author":{"gitId":"danielonges"},"content":"            break;"},{"lineNumber":84,"author":{"gitId":"danielonges"},"content":"        default:"},{"lineNumber":85,"author":{"gitId":"danielonges"},"content":"            throw new InvalidInputException(\"Task type provided is invalid!\");"},{"lineNumber":86,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"danielonges"},"content":"        taskList.addTask(newTask);"},{"lineNumber":88,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showAdded(newTask));"},{"lineNumber":89,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showNumOfTasks(taskList.getNumOfTasks()));"},{"lineNumber":90,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":91}},{"path":"src/main/java/todobeast/commands/AddNotesCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"public class AddNotesCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    private final int taskNumber;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    private final String taskNotes;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     * Constructor for AddNotesCommand."},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * @param taskNumber the task number of the task for the notes to be added to."},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * @param taskNotes the notes to be added."},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public AddNotesCommand(int taskNumber, String taskNotes) {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        this.taskNotes \u003d taskNotes;"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * Adds the task notes to the specified task"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if the task index provided is invalid."},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        if (!taskList.isTaskIndexInRange(taskNumber - 1)) {"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"            throw new TaskNotFoundException(\"Task with index \" + taskNumber + \" does not exist in the list!\");"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        Task currentTask \u003d taskList.getTask(taskNumber);"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"        if (taskNotes.length() \u003d\u003d 0) {"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"            taskList.clearTaskNotes(currentTask);"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"            ui.addToResponseOutput(ui.showTaskNotesCleared(currentTask));"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"            taskList.setTaskNotes(currentTask, taskNotes);"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"            ui.addToResponseOutput(ui.showTaskNotesAdded(currentTask));"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":46}},{"path":"src/main/java/todobeast/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * Abstract class that defines an implementation of a Command object. This object will contain the necessary business"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * logic for executing specific commands for the application."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * Determines whether to exit the application or not."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    protected final boolean isExit;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public Command() {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        isExit \u003d false;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public Command(boolean isExit) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     * Method that contains the necessary logic required to execute specific commands. To be implemented by the child"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"     * classes. Takes in the TaskList and Ui object specific to the class in order to implement the logic required."},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if there is an error while processing the business logic"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public abstract void execute(TaskList taskList, Ui ui) throws ToDoBeastException;"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    public boolean isExit() {"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        return isExit;"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":38}},{"path":"src/main/java/todobeast/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * A Command that represents deleting a task from the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * The index of the task to be deleted"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private final int taskNumber;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public DeleteCommand(int taskNumber) {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * Handles the deletion of a task with the specified index within the application."},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * @throws TaskNotFoundException if the task index provided does not exist within the task list."},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        if (!taskList.isTaskIndexInRange(taskNumber - 1)) {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            throw new TaskNotFoundException(\"Task with index \" + taskNumber + \" does not exist in the list!\");"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        Task deletedTask \u003d taskList.deleteTask(taskNumber);"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showDeleted(deletedTask));"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showNumOfTasks(taskList.getNumOfTasks()));"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":36}},{"path":"src/main/java/todobeast/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.TaskNotFoundException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * A Command that represents marking a task as done in the TaskList. Enclosing business logic is wrapped in the"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" * execute() method."},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * The index of the task to be marked as done"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    private final int taskNumber;"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    public DoneCommand(int taskNumber) {"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"        this.taskNumber \u003d taskNumber;"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * Handles the marking of a task with the specified index as done within the application."},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"     * @throws TaskNotFoundException if the task index provided does not exist within the task list."},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws TaskNotFoundException {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        if (!taskList.isTaskIndexInRange(taskNumber - 1)) {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            throw new TaskNotFoundException(\"Task with index \" + taskNumber + \" does not exist in the list!\");"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"        Task currentTask \u003d taskList.getTask(taskNumber);"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        taskList.setTaskAsDone(currentTask);"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showDone(currentTask));"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"}"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":""}],"authorContributionMap":{"danielonges":38}},{"path":"src/main/java/todobeast/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Command that indicates intention to exit the application."},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"public class ExitCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"     * The isExit property of this command will be set to true, which will trigger the exit process of the application."},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public ExitCommand() {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        super(true);"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"     * Filler method that does not contain any actual logic."},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":27}},{"path":"src/main/java/todobeast/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    private final String regex;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    public FindCommand(String regex) {"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        this.regex \u003d regex;"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     * Finds all tasks that match the regex given"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if task list does not exist."},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        if (taskList \u003d\u003d null) {"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"            throw new ToDoBeastException(\"Task list cannot be found.\");"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e tasks \u003d taskList.getTaskList();"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        Map\u003cInteger, Task\u003e filteredMap \u003d tasks.stream()"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"                .filter(task -\u003e task.containsStringInDesc(regex))"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"                .collect(Collectors.toMap(task -\u003e taskList.getTaskList().indexOf(task), task -\u003e task));"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.findTasks());"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.printFilteredMap(filteredMap));"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":37}},{"path":"src/main/java/todobeast/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":" * A Command that lists all present tasks within the TaskList. Enclosing business logic is wrapped in the execute()"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * method."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"     * Prints all tasks present within the TaskList."},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     * @param taskList the TaskList that belongs to this application"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * @param ui the Ui that belongs to this application"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * @throws ToDoBeastException if the taskList is not found"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) throws ToDoBeastException {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        if (taskList \u003d\u003d null) {"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"            throw new ToDoBeastException(\"Task list cannot be found.\");"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.listTasks());"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.printTaskList(taskList.getTaskList()));"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":26}},{"path":"src/main/java/todobeast/commands/ShowInstructionsCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.TaskList;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.Ui;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public class ShowInstructionsCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"        ui.addToResponseOutput(ui.showInstructions());"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":11}},{"path":"src/main/java/todobeast/commands/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.commands;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":" * Enumeration that defines the types of tasks that can be created within the application."},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"    TODO {"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"        @Override"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"        public String toString() {"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"            return \"TODO\";"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    },"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    DEADLINE {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"        @Override"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        public String toString() {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"            return \"DEADLINE\";"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    },"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    EVENT {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        @Override"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        public String toString() {"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"            return \"EVENT\";"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":25}},{"path":"src/main/java/todobeast/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class InvalidCommandException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class InvalidInputException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public InvalidInputException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/TaskNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class TaskNotFoundException extends ToDoBeastException {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public TaskNotFoundException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/exceptions/ToDoBeastException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.exceptions;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"public class ToDoBeastException extends Exception {"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"    public ToDoBeastException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":7}},{"path":"src/main/java/todobeast/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * A Task that represents a deadline-type task. Deadlines have a time and date component."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class Deadline extends TimeBasedTask {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    public Deadline(String taskDescription, boolean isDone, LocalDate date, LocalTime time, String taskNotes) {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"        super(TaskType.DEADLINE, taskDescription, isDone, date, time, taskNotes, \"by \");"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":16}},{"path":"src/main/java/todobeast/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":" * A Task that represents a event-type task. Events have a time and date component."},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class Event extends TimeBasedTask {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    public Event(String taskDescription, boolean isDone, LocalDate date, LocalTime time, String taskNotes) {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"        super(TaskType.EVENT, taskDescription, isDone, date, time, taskNotes, \"at \");"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":16}},{"path":"src/main/java/todobeast/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":" * An abstract class that represents a Task within the application."},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"    public static final String TASK_DELIMITER \u003d \" | \";"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    protected TaskType taskType;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    protected String taskDescription;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    protected boolean isDone;"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    protected String taskNotes;"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * Constructor that allows user to add notes to the task being created."},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description corresponding to the current task"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"     * @param isDone indicates whether this task has been done"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"     * @param taskNotes any additional notes for the task being created"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    public Task(TaskType taskType, String taskDescription, boolean isDone, String taskNotes) {"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"        this.taskNotes \u003d taskNotes;"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"    public void setDone() {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public void setTaskNotes(String taskNotes) {"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        this.taskNotes \u003d taskNotes;"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    public boolean hasTaskNotes() {"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"        return taskNotes !\u003d null;"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"     * Returns true if the regex provided is found within the task description of this particular task."},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"     * @param regex the regex used to match"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"     * @return true if the regex is found within the task description, false otherwise"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"    public boolean containsStringInDesc(String regex) {"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        return taskDescription.contains(regex);"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"     * Formats the current task for storage in the disk and returns a String representation of it"},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"     * @param delimiter the delimiter used to join the various attributes within the task"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"     * @return the String that contains the formatted attributes of the current task"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":"    public abstract String formatForStorage(String delimiter);"},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":57,"author":{"gitId":"danielonges"},"content":"    public void clearTaskNotes() {"},{"lineNumber":58,"author":{"gitId":"danielonges"},"content":"        taskNotes \u003d null;"},{"lineNumber":59,"author":{"gitId":"danielonges"},"content":"    };"},{"lineNumber":60,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":60}},{"path":"src/main/java/todobeast/tasks/TimeBasedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"public abstract class TimeBasedTask extends Task {"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    protected LocalDate date;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    protected LocalTime time;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    protected String timeKeywordSpecifier;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     * Constructor for TimeBasedTask."},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * @param taskType the type of task"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * @param taskDescription the description for the task"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     * @param isDone whether the task is done or not"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"     * @param date the date for the specified task"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"     * @param time the time for the specified task"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"     * @param taskNotes the notes to be added to this task"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"     * @param timeKeywordSpecifier the keyword specifier for the time"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"    public TimeBasedTask(TaskType taskType, String taskDescription, boolean isDone, LocalDate date, LocalTime time,"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"                         String taskNotes, String timeKeywordSpecifier) {"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"        super(taskType, taskDescription, isDone, taskNotes);"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"        this.date \u003d date;"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"        this.time \u003d time;"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        this.timeKeywordSpecifier \u003d timeKeywordSpecifier;"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    public String formatForStorage(String delimiter) {"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        String doneIndicator \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"        String taskNotesForStorage \u003d hasTaskNotes() ? delimiter + taskDescription : \"\";"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":"        return taskType.toString() + delimiter"},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"                + doneIndicator + delimiter"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"                + taskDescription + delimiter"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"                + date.toString() + delimiter + time.toString()"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"                + taskNotesForStorage;"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"        String doneIndicator \u003d isDone ? \"✔\" : \" \";"},{"lineNumber":46,"author":{"gitId":"danielonges"},"content":"        String taskNotesForDisplay \u003d hasTaskNotes() ? Task.TASK_DELIMITER + taskNotes : \"\";"},{"lineNumber":47,"author":{"gitId":"danielonges"},"content":"        String formattedDate \u003d date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"},{"lineNumber":48,"author":{"gitId":"danielonges"},"content":"        return taskType.toString() + Task.TASK_DELIMITER"},{"lineNumber":49,"author":{"gitId":"danielonges"},"content":"                + doneIndicator + Task.TASK_DELIMITER"},{"lineNumber":50,"author":{"gitId":"danielonges"},"content":"                + taskDescription + Task.TASK_DELIMITER"},{"lineNumber":51,"author":{"gitId":"danielonges"},"content":"                + timeKeywordSpecifier + formattedDate + \", \""},{"lineNumber":52,"author":{"gitId":"danielonges"},"content":"                + time.toString()"},{"lineNumber":53,"author":{"gitId":"danielonges"},"content":"                + taskNotesForDisplay;"},{"lineNumber":54,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":56,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":56}},{"path":"src/main/java/todobeast/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast.tasks;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.TaskType;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":" * A Task that represents a todo-type task. Todos do not have a date and time component to them."},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":" */"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"public class Todo extends Task {"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    public Todo(String toDoDescription, boolean isDone, String taskNotes) {"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"        super(TaskType.TODO, toDoDescription, isDone, taskNotes);"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"     * Formats this ToDo for storage using the specified delimiter"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"     * @param delimiter the delimiter used to join the various attributes within the task"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"     * @return the formatted string output of this task for storage."},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public String formatForStorage(String delimiter) {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        String doneIndicator \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        String taskNotesForStorage \u003d hasTaskNotes() ? delimiter + taskDescription : \"\";"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        return taskType.toString() + delimiter"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"                + doneIndicator + delimiter"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"                + taskDescription + taskNotesForStorage;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        String doneIndicator \u003d isDone ? \"✔\" : \" \";"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        String taskNotesForDisplay \u003d hasTaskNotes() ? Task.TASK_DELIMITER + taskNotes : \"\";"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        return taskType.toString() + Task.TASK_DELIMITER"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"                + doneIndicator + Task.TASK_DELIMITER"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"                + taskDescription + taskNotesForDisplay;"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":35}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"589.0\" style\u003d\"-fx-border-radius: 5px; -fx-border-width: 1px; -fx-border-color: \u0026quot;black\u0026quot;;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"            \u003cFont name\u003d\"Courier\" size\u003d\"13.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"155.0\" fitWidth\u003d\"150.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"danielonges":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"900.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.2\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"todobeast.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"517.0\" layoutY\u003d\"852.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"5.0\" layoutY\u003d\"4.0\" prefHeight\u003d\"842.0\" prefWidth\u003d\"589.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"         \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" maxWidth\u003d\"-Infinity\" prefHeight\u003d\"840.0\" prefWidth\u003d\"588.0\" spacing\u003d\"2.0\"\u003e"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"               \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"               \u003c/padding\u003e\u003c/VBox\u003e"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"         \u003c/content\u003e"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"14.0\" layoutY\u003d\"852.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"491.0\" AnchorPane.bottomAnchor\u003d\"7.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"danielonges":23}},{"path":"src/test/java/todobeast/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.Command;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ExitCommand;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.commands.ListCommand;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.ToDoBeastException;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"public class ParserTest {"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"    public void testExitCommand() throws ToDoBeastException {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"        Command testCommand \u003d Parser.parse(\"exit\");"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand instanceof ExitCommand);"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand.isExit());"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    public void testListCommand() throws ToDoBeastException {"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        Command testCommand \u003d Parser.parse(\"list\");"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        assertTrue(testCommand instanceof ListCommand);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        assertFalse(testCommand.isExit());"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public void testInvalidCommand() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"            Command testCommand \u003d Parser.parse(\"hi\");"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        } catch (ToDoBeastException e) {"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"            assertEquals(\"Command provided is invalid.\", e.getMessage());"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":37,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"danielonges"},"content":"    public void testNonIntegerTaskIndex() {"},{"lineNumber":39,"author":{"gitId":"danielonges"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"danielonges"},"content":"            Parser.checkTaskIndex(new String[]{\"done\", \"a\"});"},{"lineNumber":41,"author":{"gitId":"danielonges"},"content":"        } catch (ToDoBeastException e) {"},{"lineNumber":42,"author":{"gitId":"danielonges"},"content":"            assertEquals(\"Index provided is not a number.\", e.getMessage());"},{"lineNumber":43,"author":{"gitId":"danielonges"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":45}},{"path":"src/test/java/todobeast/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.exceptions.InvalidInputException;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"public class StorageTest {"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"    String testPath \u003d \"./testdata/\";"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    String testFileName \u003d \"data.txt\";"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"    String testListData \u003d \"testlistdata.txt\";"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"    public void testSaveToStorage() throws IOException {"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        Storage storage \u003d new Storage(testPath, testFileName);"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        storage.saveToStorage(\"storage test\");"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"        assertEquals(\"storage test\", new Scanner(new File(testPath + testFileName)).nextLine());"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"    public void testLoadTasks() throws FileNotFoundException, InvalidInputException {"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"        TaskListStub taskListStub \u003d new TaskListStub(new ArrayList\u003c\u003e());"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"        Storage storage \u003d new Storage(testPath, testListData);"},{"lineNumber":32,"author":{"gitId":"danielonges"},"content":"        assertEquals(taskListStub.toString(), storage.loadTasks().toString());"},{"lineNumber":33,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":34}},{"path":"src/test/java/todobeast/TaskListStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"package todobeast;"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"import todobeast.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"public class TaskListStub extends TaskList {"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"    public TaskListStub(List\u003cTask\u003e taskList) {"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"        super(testList());"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"    public static List\u003cTask\u003e testList() {"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"        List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"        list.add(new Todo(\"test\", false, null));"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"        list.add(new Deadline(\"test\", false, LocalDate.parse(\"2000-01-01\"), LocalTime.parse(\"00:00\"), null));"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"        list.add(new Event(\"test\", false, LocalDate.parse(\"2000-01-01\"), LocalTime.parse(\"00:00\"), null));"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"        return list;"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":""},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"danielonges"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"danielonges"},"content":"        return taskList.toString();"},{"lineNumber":30,"author":{"gitId":"danielonges"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"danielonges"},"content":"}"}],"authorContributionMap":{"danielonges":31}},{"path":"src/test/testdata/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"storage test"}],"authorContributionMap":{"danielonges":1}},{"path":"src/test/testdata/testlistdata.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"TODO.0.test"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":"DEADLINE.0.test.2000-01-01.00:00"},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"EVENT.0.test.2000-01-01.00:00"}],"authorContributionMap":{"danielonges":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"danielonges"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"danielonges"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"danielonges"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"danielonges"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"danielonges"},"content":"deadline huh?"},{"lineNumber":6,"author":{"gitId":"danielonges"},"content":"deadline huh /at this time"},{"lineNumber":7,"author":{"gitId":"danielonges"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":8,"author":{"gitId":"danielonges"},"content":"event"},{"lineNumber":9,"author":{"gitId":"danielonges"},"content":"event huh?"},{"lineNumber":10,"author":{"gitId":"danielonges"},"content":"event huh /by this time"},{"lineNumber":11,"author":{"gitId":"danielonges"},"content":"list"},{"lineNumber":12,"author":{"gitId":"danielonges"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"danielonges"},"content":"done"},{"lineNumber":14,"author":{"gitId":"danielonges"},"content":"done a"},{"lineNumber":15,"author":{"gitId":"danielonges"},"content":"done 10"},{"lineNumber":16,"author":{"gitId":"danielonges"},"content":"done -1"},{"lineNumber":17,"author":{"gitId":"danielonges"},"content":"delete 3"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"delete 1"},{"lineNumber":19,"author":{"gitId":"danielonges"},"content":"delete"},{"lineNumber":20,"author":{"gitId":"danielonges"},"content":"delete a"},{"lineNumber":21,"author":{"gitId":"danielonges"},"content":"delete 100"},{"lineNumber":22,"author":{"gitId":"danielonges"},"content":"delete -10"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"list"},{"lineNumber":24,"author":{"gitId":"danielonges"},"content":"done 1"},{"lineNumber":25,"author":{"gitId":"danielonges"},"content":"blah"},{"lineNumber":26,"author":{"gitId":"danielonges"},"content":"hellooo"},{"lineNumber":27,"author":{"gitId":"danielonges"},"content":"bye"}],"authorContributionMap":{"danielonges":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"danielonges"},"content":"java -classpath ..\\bin todobeast \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"danielonges":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"danielonges"},"content":"java -classpath ../bin todobeast \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"danielonges":1,"-":37}}]
