[{"path":"DukeList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"[T][X] CS2105 tut"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":"[D][ ] CS2103T iP tasks (by: 2021-02-18)"}],"authorContributionMap":{"nicoleang09":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    implementation \u0027junit:junit:4.13\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"    mainClassName \u003d \"duke.ui.Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"    archiveBaseName \u003d \"tabby\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicoleang09":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"### View help: `help`"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"Shows a summary of the commands that Tabby recognises."},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"### List tasks: `list`"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"Shows full task list."},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"### Mark task as done: `done`"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"Marks the specified task on the task list as done."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"### Delete task: `delete`"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"Deletes specified task from the task list."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"### Find tasks: `find`"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"Finds all tasks containing the specified keyword in their description."},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"### Add new tasks: `todo`, `deadline`, `event`"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"Adds new tasks of the types todo, deadline or event to the list."},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"### Undo action: `undo`"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"Undos previously executed actions."},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"### Redo action: `redo`"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"Redos previously undone actions."},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"### Exit bot: `bye`"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"Closes the bot."},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e\u003cbr/\u003e"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":"### `help` - View help"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"Tabby will reply with a list of all instructions it recognises."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"    help"},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"![help outcome](help outcome.png)"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":"### `list` - List tasks"},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":"Tabby will reply with a full list of all the tasks entered so far."},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":"    list"},{"lineNumber":81,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":82,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":84,"author":{"gitId":"nicoleang09"},"content":"![list outcome](list outcome.png)"},{"lineNumber":85,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":86,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":87,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":88,"author":{"gitId":"nicoleang09"},"content":"### `done` - Mark task as done"},{"lineNumber":89,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":90,"author":{"gitId":"nicoleang09"},"content":"Task specified will be marked as done. Tasks are identified by their position in the task list."},{"lineNumber":91,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":92,"author":{"gitId":"nicoleang09"},"content":"Format: `done [position number]`"},{"lineNumber":93,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":94,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":95,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":96,"author":{"gitId":"nicoleang09"},"content":"    done 1"},{"lineNumber":97,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":98,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":99,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":100,"author":{"gitId":"nicoleang09"},"content":"![done outcome](done outcome.png)"},{"lineNumber":101,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":102,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":103,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":104,"author":{"gitId":"nicoleang09"},"content":"### `delete` - Delete task"},{"lineNumber":105,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":106,"author":{"gitId":"nicoleang09"},"content":"Task specified will be deleted from the task list. Tasks are identified by their position in the task list."},{"lineNumber":107,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":108,"author":{"gitId":"nicoleang09"},"content":"Format: `delete [position number]`"},{"lineNumber":109,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":110,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":111,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":112,"author":{"gitId":"nicoleang09"},"content":"    delete 3"},{"lineNumber":113,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":114,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":116,"author":{"gitId":"nicoleang09"},"content":"![delete outcome](delete outcome.png)"},{"lineNumber":117,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":118,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":119,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":120,"author":{"gitId":"nicoleang09"},"content":"### `find` - Find tasks"},{"lineNumber":121,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":122,"author":{"gitId":"nicoleang09"},"content":"Tabby will reply with a list of all tasks that contain the specified keyword in their task description. The number on the left of the task indicates its position in the task list."},{"lineNumber":123,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":124,"author":{"gitId":"nicoleang09"},"content":"Format: `find [keyword]`"},{"lineNumber":125,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":126,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":127,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":128,"author":{"gitId":"nicoleang09"},"content":"    find CS2103T"},{"lineNumber":129,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":130,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":131,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":132,"author":{"gitId":"nicoleang09"},"content":"![find outcome](find outcome.png)"},{"lineNumber":133,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":134,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":135,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":136,"author":{"gitId":"nicoleang09"},"content":"### `todo` - Add new todo task"},{"lineNumber":137,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":138,"author":{"gitId":"nicoleang09"},"content":"A new todo task will be added to the task list. Todo tasks do not have specific start/end dates/times."},{"lineNumber":139,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":140,"author":{"gitId":"nicoleang09"},"content":"Format: `todo [description of task]`"},{"lineNumber":141,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":142,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":143,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":144,"author":{"gitId":"nicoleang09"},"content":"    todo CS2105 tut"},{"lineNumber":145,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":146,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":147,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":148,"author":{"gitId":"nicoleang09"},"content":"![todo outcome](todo outcome.png)"},{"lineNumber":149,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":150,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":151,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":152,"author":{"gitId":"nicoleang09"},"content":"### `deadline` - Add new deadline task"},{"lineNumber":153,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":154,"author":{"gitId":"nicoleang09"},"content":"A new deadline task will be added to the task list. Deadline tasks have to be completed by the specified date."},{"lineNumber":155,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":156,"author":{"gitId":"nicoleang09"},"content":"Format: `deadline [description of task] /by [deadline in dd-mm-yyyy format]`"},{"lineNumber":157,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":158,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":159,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":160,"author":{"gitId":"nicoleang09"},"content":"    deadline CS2103T iP tasks /by 18-02-2021"},{"lineNumber":161,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":162,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":163,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":164,"author":{"gitId":"nicoleang09"},"content":"![deadline outcome](deadline outcome.png)"},{"lineNumber":165,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":166,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":167,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":168,"author":{"gitId":"nicoleang09"},"content":"### `event` - Add new event task"},{"lineNumber":169,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":170,"author":{"gitId":"nicoleang09"},"content":"A new event task will be added to the task list. Event tasks occur on a specific date during a specific duration."},{"lineNumber":171,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":172,"author":{"gitId":"nicoleang09"},"content":"Format: `event [description of task] /on [date of event in dd-mm-yyyy format] /from [start time in h am/pm format] /to [end time in h am/pm format]`"},{"lineNumber":173,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":174,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":175,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":176,"author":{"gitId":"nicoleang09"},"content":"    event CS2103T lecture /on 19-02-2021 /from 2 pm /to 4 pm"},{"lineNumber":177,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":178,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":179,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":180,"author":{"gitId":"nicoleang09"},"content":"![event outcome](event outcome.png)"},{"lineNumber":181,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":182,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":183,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":184,"author":{"gitId":"nicoleang09"},"content":"### `undo` - Undo previous action"},{"lineNumber":185,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":186,"author":{"gitId":"nicoleang09"},"content":"Previous action will be undone, starting from most recent action first."},{"lineNumber":187,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":188,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":189,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":190,"author":{"gitId":"nicoleang09"},"content":"    undo"},{"lineNumber":191,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":192,"author":{"gitId":"nicoleang09"},"content":"Expected outcome:"},{"lineNumber":193,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":194,"author":{"gitId":"nicoleang09"},"content":"![undo outcome](undo outcome.png)"},{"lineNumber":195,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":196,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":197,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":198,"author":{"gitId":"nicoleang09"},"content":"### `redo` - Redo previously undone action"},{"lineNumber":199,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":200,"author":{"gitId":"nicoleang09"},"content":"Previously undone action will be done again, starting from most recently undone action first."},{"lineNumber":201,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":202,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":203,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":204,"author":{"gitId":"nicoleang09"},"content":"    redo"},{"lineNumber":205,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":206,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":207,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":208,"author":{"gitId":"nicoleang09"},"content":"![redo outcome](redo outcome.png)"},{"lineNumber":209,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":210,"author":{"gitId":"nicoleang09"},"content":"\u003cbr/\u003e"},{"lineNumber":211,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":212,"author":{"gitId":"nicoleang09"},"content":"### `bye` - Exit bot"},{"lineNumber":213,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":214,"author":{"gitId":"nicoleang09"},"content":"Bot closes."},{"lineNumber":215,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":216,"author":{"gitId":"nicoleang09"},"content":"Example of usage:"},{"lineNumber":217,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":218,"author":{"gitId":"nicoleang09"},"content":"    bye"},{"lineNumber":219,"author":{"gitId":"-"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":221,"author":{"gitId":"-"},"content":""},{"lineNumber":222,"author":{"gitId":"nicoleang09"},"content":"![bye outcome](bye outcome.png)"}],"authorContributionMap":{"nicoleang09":206,"-":16}},{"path":"runtest2.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"javac -d bin src\\main\\java\\*.java"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"if exist text-ui-test\\ACTUAL.txt del text-ui-test\\ACTUAL.txt"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"java -classpath bin Duke \u003c text-ui-test\\input.txt \u003e text-ui-test\\ACTUAL.txt"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"FC text-ui-test\\ACTUAL.TXT text-ui-test\\EXPECTED.TXT"}],"authorContributionMap":{"nicoleang09":7}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import duke.history.RedoHistory;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import duke.history.UndoHistory;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import duke.task.CommandManager;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":" * Duke manages command line inputs."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":" * It takes and handles inputs from the user."},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    public static final String LINE \u003d (char) 9"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"            + \"--------------------------------------------------------------------\";"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    protected static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    protected UndoHistory undoHistory \u003d new UndoHistory();"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    protected RedoHistory redoHistory \u003d new RedoHistory();"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * Takes user inputted tasks and passes them to the CommandManager."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     * @param args  Java command line inputs."},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"        System.out.println(\"Hello! How can I help you?\");"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"        CommandManager taskManager \u003d new CommandManager();"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"            String input \u003d scanner.nextLine();"},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"                System.out.println(LINE + \"\\n\" + (char) 9 + (char) 9 + \"Bye! See you soon :)\\n\" + LINE);"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"                scanner.close();"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"            } else {"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"                System.out.println(taskManager.takeCommand(input, tasks));"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"        return;"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicoleang09":54,"-":3}},{"path":"src/main/java/duke/datetime/DateTimeConverter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.datetime;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" * Converter to convert date and time string inputs into LocalDateTime objects."},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"public class DateTimeConverter {"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    protected String[] inputSplit;"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new DateTimeConverter object to convert date and time Strings to LocalDate and LocalTime."},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"     * @param inputSplit    String input that has been split into description, date, from time and to time."},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    public DateTimeConverter(String[] inputSplit) {"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"        this.inputSplit \u003d inputSplit;"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * Returns LocalDate object converted from user inputted date String of format dd-MM-yyyy."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     * @return LocalDate created from inputted date."},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    public LocalDate convertDate() {"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"        String date \u003d inputSplit[1].substring(3);"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"        if (date.length() \u003e 10) {"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"            date \u003d date.substring(0, date.length() - 1);"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"        LocalDate formattedDate \u003d LocalDate.parse(date, formatter);"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"        return formattedDate;"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"     * Returns LocalTime object converted from user inputted time of format h AM/PM."},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"     * @param s Type of time, start (indicated by \"from\") or end (indicated by \"to\") time."},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"     * @return LocalTime created from input time."},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"    public LocalTime convertTime(String s) {"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"h a\");"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"        if (s.equals(\"from\")) {"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"            String from \u003d inputSplit[2].substring(5, inputSplit[2].length() - 1).toUpperCase();"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"            LocalTime formattedFrom \u003d LocalTime.parse(from, timeFormatter);"},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"            return formattedFrom;"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"        } else if (s.equals((\"to\"))) {"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"            String to \u003d inputSplit[3].substring(3).toUpperCase();"},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"            LocalTime formattedTo \u003d LocalTime.parse(to, timeFormatter);"},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":"            return formattedTo;"},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":"            throw(new IllegalArgumentException());"},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":63}},{"path":"src/main/java/duke/error/ErrorChecker.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import duke.datetime.DateTimeConverter;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":" * Error checker to check for errors in user input."},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"public class ErrorChecker {"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"    protected String input;"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    protected ArrayList\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    protected String errorMessage;"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    private boolean isBye;"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    private boolean isHelp;"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    private boolean isList;"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    private boolean isDone;"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    private boolean isDelete;"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    private boolean isFind;"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    private boolean isUndo;"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    private boolean isRedo;"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    private boolean isTodo;"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    private boolean isDeadline;"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    private boolean isEvent;"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    private boolean isNewTask;"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    private boolean isValidType;"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"    private String taskType \u003d \"\";"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new ErrorChecker object used for checking errors in user input."},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"     * @param tasks Task list."},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"    public ErrorChecker(String input, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"        this.input \u003d input;"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"        isBye \u003d input.equals(\"bye\");"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"        isHelp \u003d input.equals(\"help\");"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"        isList \u003d input.equals(\"list\");"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"        isDone \u003d input.startsWith(\"done\");"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"        isDelete \u003d input.startsWith(\"delete\");"},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"        isFind \u003d input.startsWith(\"find\");"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"        isUndo \u003d input.equals(\"undo\");"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"        isRedo \u003d input.equals(\"redo\");"},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"        isTodo \u003d input.startsWith(\"todo\");"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"        isDeadline \u003d input.startsWith(\"deadline\");"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"        isEvent \u003d input.startsWith(\"event\");"},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"        isNewTask \u003d isTodo || isDeadline || isEvent;"},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":"        isValidType \u003d isBye || isHelp || isList || isDone || isDelete"},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":"                || isFind || isUndo || isRedo || isNewTask;"},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message."},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message string."},{"lineNumber":65,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"    public String getMessage() {"},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":"        return errorMessage;"},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":"     * Checks whether the input is valid and formatted correctly."},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"     * If input is invalid, user will be prompted to re-enter valid input in correct format."},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":"     * @return True if input is valid and formatted correctly, and false otherwise."},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":"    public boolean isValid() {"},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":"        if (!isValidType) {"},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"            errorMessage \u003d new IllegalInputException(\"\").toString();"},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":"            return false;"},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":82,"author":{"gitId":"nicoleang09"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"nicoleang09"},"content":"            checkInputFormat();"},{"lineNumber":84,"author":{"gitId":"nicoleang09"},"content":"        } catch (StringIndexOutOfBoundsException ex) {"},{"lineNumber":85,"author":{"gitId":"nicoleang09"},"content":"            if (isDone || isDelete) {"},{"lineNumber":86,"author":{"gitId":"nicoleang09"},"content":"                errorMessage \u003d new IllegalDoneDeleteException(ex.getMessage(), taskType).toString();"},{"lineNumber":87,"author":{"gitId":"nicoleang09"},"content":"                return false;"},{"lineNumber":88,"author":{"gitId":"nicoleang09"},"content":"            } else if (isFind) {"},{"lineNumber":89,"author":{"gitId":"nicoleang09"},"content":"                errorMessage \u003d new IllegalFindException(ex.getMessage()).toString();"},{"lineNumber":90,"author":{"gitId":"nicoleang09"},"content":"            } else if (isNewTask) {"},{"lineNumber":91,"author":{"gitId":"nicoleang09"},"content":"                errorMessage \u003d new IllegalTaskException(ex.getMessage(), taskType).toString();"},{"lineNumber":92,"author":{"gitId":"nicoleang09"},"content":"                return false;"},{"lineNumber":93,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"nicoleang09"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":95,"author":{"gitId":"nicoleang09"},"content":"            errorMessage \u003d new OutOfBoundsDoneDeleteException(ex.getMessage()).toString();"},{"lineNumber":96,"author":{"gitId":"nicoleang09"},"content":"            return false;"},{"lineNumber":97,"author":{"gitId":"nicoleang09"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":98,"author":{"gitId":"nicoleang09"},"content":"            if (isDeadline) {"},{"lineNumber":99,"author":{"gitId":"nicoleang09"},"content":"                errorMessage \u003d \"Oops, I don\u0027t understand that date format!\\n\""},{"lineNumber":100,"author":{"gitId":"nicoleang09"},"content":"                        + \"Please re-enter with the format DD-MM-YYYY!\";"},{"lineNumber":101,"author":{"gitId":"nicoleang09"},"content":"            } else if (isEvent) {"},{"lineNumber":102,"author":{"gitId":"nicoleang09"},"content":"                errorMessage \u003d \"Oops, I don\u0027t understand that date format!\\n\""},{"lineNumber":103,"author":{"gitId":"nicoleang09"},"content":"                        + \"Please re-enter with the format DD-MM-YYYY /from H AM/PM /to H AM/PM!\";"},{"lineNumber":104,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"nicoleang09"},"content":"            return false;"},{"lineNumber":106,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":108,"author":{"gitId":"nicoleang09"},"content":"        return true;"},{"lineNumber":109,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":111,"author":{"gitId":"nicoleang09"},"content":"    private void checkInputFormat() {"},{"lineNumber":112,"author":{"gitId":"nicoleang09"},"content":"        if (isDone) {"},{"lineNumber":113,"author":{"gitId":"nicoleang09"},"content":"            taskType \u003d \"done\";"},{"lineNumber":114,"author":{"gitId":"nicoleang09"},"content":"            checkDone();"},{"lineNumber":115,"author":{"gitId":"nicoleang09"},"content":"        } else if (isDelete) {"},{"lineNumber":116,"author":{"gitId":"nicoleang09"},"content":"            taskType \u003d \"delete\";"},{"lineNumber":117,"author":{"gitId":"nicoleang09"},"content":"            checkDelete();"},{"lineNumber":118,"author":{"gitId":"nicoleang09"},"content":"        } else if (isFind) {"},{"lineNumber":119,"author":{"gitId":"nicoleang09"},"content":"            input.substring(6); // Checking that search keyword was specified"},{"lineNumber":120,"author":{"gitId":"nicoleang09"},"content":"        } else if (isTodo) {"},{"lineNumber":121,"author":{"gitId":"nicoleang09"},"content":"            taskType \u003d \"todo\";"},{"lineNumber":122,"author":{"gitId":"nicoleang09"},"content":"            input.substring(6); // Checking that task description was specified"},{"lineNumber":123,"author":{"gitId":"nicoleang09"},"content":"        } else if (isDeadline) {"},{"lineNumber":124,"author":{"gitId":"nicoleang09"},"content":"            taskType \u003d \"deadline\";"},{"lineNumber":125,"author":{"gitId":"nicoleang09"},"content":"            checkDeadline();"},{"lineNumber":126,"author":{"gitId":"nicoleang09"},"content":"        } else if (isEvent) {"},{"lineNumber":127,"author":{"gitId":"nicoleang09"},"content":"            taskType \u003d \"event\";"},{"lineNumber":128,"author":{"gitId":"nicoleang09"},"content":"            checkEvent();"},{"lineNumber":129,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":132,"author":{"gitId":"nicoleang09"},"content":"    private void checkDone() {"},{"lineNumber":133,"author":{"gitId":"nicoleang09"},"content":"        input.substring(6); // Checking that task number was specified"},{"lineNumber":134,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":135,"author":{"gitId":"nicoleang09"},"content":"        // Checking that task exists in list"},{"lineNumber":136,"author":{"gitId":"nicoleang09"},"content":"        String taskToMark \u003d input.substring(5);"},{"lineNumber":137,"author":{"gitId":"nicoleang09"},"content":"        int taskToMarkInt \u003d Integer.parseInt(taskToMark);"},{"lineNumber":138,"author":{"gitId":"nicoleang09"},"content":"        tasks.get(taskToMarkInt - 1);"},{"lineNumber":139,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":141,"author":{"gitId":"nicoleang09"},"content":"    private void checkDelete() {"},{"lineNumber":142,"author":{"gitId":"nicoleang09"},"content":"        input.substring(8); // Checking that task number was specified"},{"lineNumber":143,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":144,"author":{"gitId":"nicoleang09"},"content":"        // Checking that task exists in list"},{"lineNumber":145,"author":{"gitId":"nicoleang09"},"content":"        String taskToDelete \u003d input.substring(7);"},{"lineNumber":146,"author":{"gitId":"nicoleang09"},"content":"        int taskToDeleteInt \u003d Integer.parseInt(taskToDelete);"},{"lineNumber":147,"author":{"gitId":"nicoleang09"},"content":"        tasks.get(taskToDeleteInt - 1);"},{"lineNumber":148,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":150,"author":{"gitId":"nicoleang09"},"content":"    private void checkDeadline() {"},{"lineNumber":151,"author":{"gitId":"nicoleang09"},"content":"        input.substring(10); // Checking that task description was specified"},{"lineNumber":152,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":153,"author":{"gitId":"nicoleang09"},"content":"        String[] inputSplit \u003d input.split(\"/\");"},{"lineNumber":154,"author":{"gitId":"nicoleang09"},"content":"        // Checking that format of deadline task input is correct"},{"lineNumber":155,"author":{"gitId":"nicoleang09"},"content":"        if (inputSplit.length \u003c 2) {"},{"lineNumber":156,"author":{"gitId":"nicoleang09"},"content":"            throw (new IllegalTaskException(\"\", \"deadline\"));"},{"lineNumber":157,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"nicoleang09"},"content":"        if (!inputSplit[1].startsWith(\"by\")) {"},{"lineNumber":159,"author":{"gitId":"nicoleang09"},"content":"            throw new IllegalTaskException(\"\", \"deadline\");"},{"lineNumber":160,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"nicoleang09"},"content":"        // Checking that format of date in input is correct"},{"lineNumber":162,"author":{"gitId":"nicoleang09"},"content":"        DateTimeConverter dateTimeConverter \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":163,"author":{"gitId":"nicoleang09"},"content":"        dateTimeConverter.convertDate();"},{"lineNumber":164,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":166,"author":{"gitId":"nicoleang09"},"content":"    private void checkEvent() {"},{"lineNumber":167,"author":{"gitId":"nicoleang09"},"content":"        input.substring(7); // Checking that task description was specified"},{"lineNumber":168,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":169,"author":{"gitId":"nicoleang09"},"content":"        String[] inputSplit \u003d input.split(\"/\");"},{"lineNumber":170,"author":{"gitId":"nicoleang09"},"content":"        // Checking that format of deadline task input is correct"},{"lineNumber":171,"author":{"gitId":"nicoleang09"},"content":"        if (inputSplit.length \u003c 4) {"},{"lineNumber":172,"author":{"gitId":"nicoleang09"},"content":"            throw (new IllegalTaskException(\"\", \"deadline\"));"},{"lineNumber":173,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"nicoleang09"},"content":"        if (!inputSplit[1].startsWith(\"on\")) {"},{"lineNumber":175,"author":{"gitId":"nicoleang09"},"content":"            throw new IllegalTaskException(\"\", \"event\");"},{"lineNumber":176,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"nicoleang09"},"content":"        if (!inputSplit[2].startsWith(\"from\") || !inputSplit[3].startsWith(\"to\")) {"},{"lineNumber":178,"author":{"gitId":"nicoleang09"},"content":"            throw new IllegalTaskException(\"\", \"event\");"},{"lineNumber":179,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"nicoleang09"},"content":"        // Checking that format of date and times in input is correct"},{"lineNumber":181,"author":{"gitId":"nicoleang09"},"content":"        DateTimeConverter dateTimeConverter \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":182,"author":{"gitId":"nicoleang09"},"content":"        dateTimeConverter.convertDate();"},{"lineNumber":183,"author":{"gitId":"nicoleang09"},"content":"        dateTimeConverter.convertTime(\"from\");"},{"lineNumber":184,"author":{"gitId":"nicoleang09"},"content":"        dateTimeConverter.convertTime(\"to\");"},{"lineNumber":185,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":186}},{"path":"src/main/java/duke/error/IllegalDoneDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Exception thrown when task to delete or mark as done is not specified."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class IllegalDoneDeleteException extends StringIndexOutOfBoundsException {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    protected String taskType;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new IllegalDoneDeleteException."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * @param message  Exception message."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     * @param taskType Type of the task, either \"done\" or \"delete\"."},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    IllegalDoneDeleteException(String message, String taskType) {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"        super(message);"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message telling user that they did not enter the task number and to re-enter the input."},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"        if (taskType.equals(\"done\")) {"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"            return \"You forgot to enter the task to mark as done!\\n\" + \"Please re-enter!\";"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"            return \"You forgot to enter the task to delete!\\n\" + \"Please re-enter!\";"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":35}},{"path":"src/main/java/duke/error/IllegalFindException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Exception thrown when \u0027find\u0027 input is incorrectly formatted."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class IllegalFindException extends StringIndexOutOfBoundsException {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new IllegalFindException."},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * @param message  Exception message."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    public IllegalFindException(String message) {"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message telling user that they did not enter the search keyword and to re-enter the input."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message."},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        return \"You forgot to enter the keyword to search for!\\n\" + \"Please re-enter!\";"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":27}},{"path":"src/main/java/duke/error/IllegalInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Exception thrown when input is not of the valid types."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class IllegalInputException extends IllegalArgumentException {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new IllegalInputException."},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * @param message  Exception message."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    IllegalInputException(String message) {"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message telling user that they entered an invalid input and to re-enter the input."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message."},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        return \"I don\u0027t understand what you just entered \u003e.\u003c\\n\" + \"Please re-enter!\";"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":27}},{"path":"src/main/java/duke/error/IllegalTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Exception thrown when \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027 input is incorrectly formatted."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class IllegalTaskException extends StringIndexOutOfBoundsException {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    protected String taskType;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new IllegalTaskException."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * @param message  Exception message."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     * @param taskType Type of the task, either \"todo\", \"deadline\" or \"event\"."},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    public IllegalTaskException(String message, String taskType) {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"        super(message);"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message telling user that they did not enter the task description and to re-enter the input."},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"        return \"Your input for the \" + taskType + \" task is not formatted correctly!\\n\" + \"Please re-enter!\";"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":31}},{"path":"src/main/java/duke/error/OutOfBoundsDoneDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.error;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Exception thrown when task to delete or mark as done does not exist."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class OutOfBoundsDoneDeleteException extends IndexOutOfBoundsException {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new OutOfBoundsDoneDeleteException."},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * @param message  Exception message."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    OutOfBoundsDoneDeleteException(String message) {"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * Returns error message telling user that the task they entered is not on the list and to re-enter the input."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"     * @return Error message."},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        return \"The task you entered does not exist!\\n\" + \"Please re-enter!\";"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":27}},{"path":"src/main/java/duke/file/FileSaver.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.file;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":" * File saver to save task list to a local file."},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"public class FileSaver {"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    private FileWriter fw;"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new FileSaver object to save task list to a local file."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    public FileSaver() {"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * Saves task list to file path specified."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     * If file specified is not found, a new file is created at that location."},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"     * @param filePath  Local path to store task list to."},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"     * @param list  Task list."},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"     * @throws IOException  If file specified is not found."},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"    public void saveToFile(String filePath, ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"        File fileCreator \u003d new File(filePath);"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"        if (!fileCreator.createNewFile()) {"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"            fileCreator.delete();"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"            fileCreator.createNewFile();"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"            fw \u003d new FileWriter(filePath);"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"            for (Task t : list) {"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"                fw.write(t.toString() + \"\\n\");"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"            fw.close();"},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":48}},{"path":"src/main/java/duke/history/ArchivedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.history;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * Archived task consists of the task that was delete from the task list and its index."},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"public class ArchivedTask {"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    protected Integer index;"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"    protected Task task;"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new ArchivedTask object given the task and its index in the task list."},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     * @param index Index in task list."},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"     * @param task Archived task."},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    public ArchivedTask(Integer index, Task task) {"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"        this.index \u003d index;"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"        this.task \u003d task;"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     * Returns index of task."},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"     * @return Task index."},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    public Integer getIndex() {"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"        return index;"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"     * Returns task."},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"     * @return Task."},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"    public Task getTask() {"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"        return task;"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":43}},{"path":"src/main/java/duke/history/History.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.history;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * History stores commands in the form of Strings."},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"public abstract class History extends Stack\u003cString\u003e {"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    public History() {"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"        super();"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":14}},{"path":"src/main/java/duke/history/RedoHistory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.history;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Redo history stores commands that were undone in the form of Strings."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class RedoHistory extends History {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    public RedoHistory() {"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"        super();"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * Returns latest redo-able command."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     * @return Latest redo-able command."},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    public String redo() {"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        return pop();"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":21}},{"path":"src/main/java/duke/history/TaskArchive.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.history;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.util.Stack;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * Task archive stores tasks that were deleted from task list."},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"public class TaskArchive extends Stack\u003cArchivedTask\u003e {"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    public TaskArchive() {"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"        super();"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"}"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":""}],"authorContributionMap":{"nicoleang09":15}},{"path":"src/main/java/duke/history/UndoHistory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.history;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Undo history stores user inputted commands that can be undone in the form of Strings."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class UndoHistory extends History {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    public UndoHistory() {"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"        super();"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * Returns latest undoable command."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     * @return Latest undoable command."},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    public String undo() {"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        return pop();"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":21}},{"path":"src/main/java/duke/task/CommandManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import static duke.task.CommandManager.CommandType.*;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalDate;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"import duke.datetime.DateTimeConverter;"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"import duke.error.ErrorChecker;"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"import duke.file.FileSaver;"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"import duke.history.ArchivedTask;"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"import duke.history.RedoHistory;"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"import duke.history.TaskArchive;"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"import duke.history.UndoHistory;"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":" * Command manager decides what type of action to take based on the user input."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"public class CommandManager {"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    public enum CommandType { BYE, HELP, LIST, DONE, DELETE, FIND, UNDO,"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        REDO, TODO, DEADLINE, EVENT, INVALID };"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    protected ArrayList\u003cTask\u003e tasks;"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    protected FileSaver fileSaver;"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    protected UndoHistory undoHistory;"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    protected RedoHistory redoHistory;"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    protected TaskArchive archive;"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"    private final String BYE_RESPONSE \u003d \"Bye! See you soon :)\";"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"    private final String HELP_RESPONSE \u003d \"list: list all tasks\\ndone {i}: mark task at position {i} as done\\n\""},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"            + \"delete {i}: delete task at position {i}\\nfind {keyword}: find and list all tasks containing {keyword}\\n\""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"            + \"todo {description}: creates a new todo\\ndeadline {description} /by {date}: creates a new deadline\\n\""},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"            + \"event {description} /on {date} /from {time} /to {time}: creates a new event\\n\""},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"            + \"undo: undo previous action\\nredo: redo previously undone action\\nbye: exit bot\";"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new CommandManager object to process tasks."},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"    public CommandManager() {"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"        fileSaver \u003d new FileSaver();"},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"        undoHistory \u003d new UndoHistory();"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"        redoHistory \u003d new RedoHistory();"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"        archive \u003d new TaskArchive();"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"     * Takes the user input and decides how to handle it."},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"     * Returns a feedback message to let user know if action has been taken successfully or not."},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"     * @param tasks Current task list."},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message."},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":"    public String takeCommand(String input, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":"        assert input !\u003d null : \"input should not be null\";"},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"        assert tasks !\u003d null : \"tasks should not be null\";"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"        ErrorChecker e \u003d new ErrorChecker(input, tasks);"},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"        CommandType type \u003d categoriseCommand(input);"},{"lineNumber":64,"author":{"gitId":"nicoleang09"},"content":"        assert type !\u003d null : \"task type should not be null\";"},{"lineNumber":65,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"        if (!e.isValid()) {"},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":"            return e.getMessage();"},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"        switch (type) {"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":"        case UNDO:"},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"            return undoCommand();"},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":"        case REDO:"},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":"            return redoCommand();"},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":"        case BYE:"},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":"        case LIST:"},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":"        case FIND:"},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"            return executeCommand(input, type);"},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":"        default:"},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":"            undoHistory.push(input);"},{"lineNumber":81,"author":{"gitId":"nicoleang09"},"content":"            redoHistory.clear();"},{"lineNumber":82,"author":{"gitId":"nicoleang09"},"content":"            return executeCommand(input, type);"},{"lineNumber":83,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":86,"author":{"gitId":"nicoleang09"},"content":"    private String executeCommand(String input, CommandType type) {"},{"lineNumber":87,"author":{"gitId":"nicoleang09"},"content":"        switch (type) {"},{"lineNumber":88,"author":{"gitId":"nicoleang09"},"content":"        case BYE:"},{"lineNumber":89,"author":{"gitId":"nicoleang09"},"content":"            return BYE_RESPONSE;"},{"lineNumber":90,"author":{"gitId":"nicoleang09"},"content":"        case HELP:"},{"lineNumber":91,"author":{"gitId":"nicoleang09"},"content":"            return HELP_RESPONSE;"},{"lineNumber":92,"author":{"gitId":"nicoleang09"},"content":"        case LIST:"},{"lineNumber":93,"author":{"gitId":"nicoleang09"},"content":"            return listTasks();"},{"lineNumber":94,"author":{"gitId":"nicoleang09"},"content":"        case DONE:"},{"lineNumber":95,"author":{"gitId":"nicoleang09"},"content":"            return markDone(input);"},{"lineNumber":96,"author":{"gitId":"nicoleang09"},"content":"        case DELETE:"},{"lineNumber":97,"author":{"gitId":"nicoleang09"},"content":"            return deleteTask(input);"},{"lineNumber":98,"author":{"gitId":"nicoleang09"},"content":"        case FIND:"},{"lineNumber":99,"author":{"gitId":"nicoleang09"},"content":"            return findTasks(input);"},{"lineNumber":100,"author":{"gitId":"nicoleang09"},"content":"        case TODO:"},{"lineNumber":101,"author":{"gitId":"nicoleang09"},"content":"        case DEADLINE:"},{"lineNumber":102,"author":{"gitId":"nicoleang09"},"content":"        case EVENT:"},{"lineNumber":103,"author":{"gitId":"nicoleang09"},"content":"            return addNewTask(input, type);"},{"lineNumber":104,"author":{"gitId":"nicoleang09"},"content":"        default:"},{"lineNumber":105,"author":{"gitId":"nicoleang09"},"content":"            return \"\";"},{"lineNumber":106,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":108,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":110,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"nicoleang09"},"content":"     * Categorises input into \u0027help\u0027, \u0027done\u0027, \u0027delete\u0027, \u0027find\u0027, \u0027todo\u0027, \u0027deadline\u0027 or \u0027event\u0027."},{"lineNumber":112,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":114,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"nicoleang09"},"content":"    private CommandType categoriseCommand(String input) {"},{"lineNumber":116,"author":{"gitId":"nicoleang09"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":117,"author":{"gitId":"nicoleang09"},"content":"            return BYE;"},{"lineNumber":118,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.equals(\"help\")) {"},{"lineNumber":119,"author":{"gitId":"nicoleang09"},"content":"            return HELP;"},{"lineNumber":120,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":121,"author":{"gitId":"nicoleang09"},"content":"            return LIST;"},{"lineNumber":122,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"done\")) {"},{"lineNumber":123,"author":{"gitId":"nicoleang09"},"content":"            return DONE;"},{"lineNumber":124,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"delete\")) {"},{"lineNumber":125,"author":{"gitId":"nicoleang09"},"content":"            return DELETE;"},{"lineNumber":126,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"find\")) {"},{"lineNumber":127,"author":{"gitId":"nicoleang09"},"content":"            return FIND;"},{"lineNumber":128,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.equals(\"undo\")) {"},{"lineNumber":129,"author":{"gitId":"nicoleang09"},"content":"            return UNDO;"},{"lineNumber":130,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.equals(\"redo\")) {"},{"lineNumber":131,"author":{"gitId":"nicoleang09"},"content":"            return REDO;"},{"lineNumber":132,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"todo\")) {"},{"lineNumber":133,"author":{"gitId":"nicoleang09"},"content":"            return TODO;"},{"lineNumber":134,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"deadline\")) {"},{"lineNumber":135,"author":{"gitId":"nicoleang09"},"content":"            return DEADLINE;"},{"lineNumber":136,"author":{"gitId":"nicoleang09"},"content":"        } else if (input.startsWith(\"event\")) {"},{"lineNumber":137,"author":{"gitId":"nicoleang09"},"content":"            return EVENT;"},{"lineNumber":138,"author":{"gitId":"nicoleang09"},"content":"        } else {"},{"lineNumber":139,"author":{"gitId":"nicoleang09"},"content":"            return INVALID;"},{"lineNumber":140,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":143,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"nicoleang09"},"content":"     * Marks task as done."},{"lineNumber":145,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":147,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message letting user know task was successfully marked as done."},{"lineNumber":148,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"nicoleang09"},"content":"    private String markDone(String input) {"},{"lineNumber":150,"author":{"gitId":"nicoleang09"},"content":"        Task task \u003d tasks.get(Integer.parseInt(input.substring(5)) - 1);"},{"lineNumber":151,"author":{"gitId":"nicoleang09"},"content":"        task.markAsDone();"},{"lineNumber":152,"author":{"gitId":"nicoleang09"},"content":"        return \"Good job! You got \" + task.description + \" done!\";"},{"lineNumber":153,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":155,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"nicoleang09"},"content":"     * Marks task as not done."},{"lineNumber":157,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":159,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message letting user know task was successfully marked as done."},{"lineNumber":160,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"nicoleang09"},"content":"    private void unmarkDone(String input) {"},{"lineNumber":162,"author":{"gitId":"nicoleang09"},"content":"        Task task \u003d tasks.get(Integer.parseInt(input.substring(5)) - 1);"},{"lineNumber":163,"author":{"gitId":"nicoleang09"},"content":"        task.unmarkAsDone();"},{"lineNumber":164,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":166,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"nicoleang09"},"content":"     * Adds new task to the task list."},{"lineNumber":168,"author":{"gitId":"nicoleang09"},"content":"     * Saves an updated copy of current task list to local file."},{"lineNumber":169,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":171,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message letting user know task was successfully added to task list."},{"lineNumber":172,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"nicoleang09"},"content":"    private String addNewTask(String input, CommandType type) {"},{"lineNumber":174,"author":{"gitId":"nicoleang09"},"content":"        Task newTask;"},{"lineNumber":175,"author":{"gitId":"nicoleang09"},"content":"        String[] inputSplit \u003d input.split(\"/\");"},{"lineNumber":176,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":177,"author":{"gitId":"nicoleang09"},"content":"        switch (type) {"},{"lineNumber":178,"author":{"gitId":"nicoleang09"},"content":"        case TODO:"},{"lineNumber":179,"author":{"gitId":"nicoleang09"},"content":"            newTask \u003d new TodoTask(input.substring(5));"},{"lineNumber":180,"author":{"gitId":"nicoleang09"},"content":"            break;"},{"lineNumber":181,"author":{"gitId":"nicoleang09"},"content":"        case DEADLINE:"},{"lineNumber":182,"author":{"gitId":"nicoleang09"},"content":"            String deadlineDescription \u003d inputSplit[0].substring(9, inputSplit[0].length() - 1);"},{"lineNumber":183,"author":{"gitId":"nicoleang09"},"content":"            DateTimeConverter deadlineDateTimeConverter \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":184,"author":{"gitId":"nicoleang09"},"content":"            LocalDate by \u003d deadlineDateTimeConverter.convertDate();"},{"lineNumber":185,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":186,"author":{"gitId":"nicoleang09"},"content":"            newTask \u003d new DeadlineTask(deadlineDescription, by);"},{"lineNumber":187,"author":{"gitId":"nicoleang09"},"content":"            break;"},{"lineNumber":188,"author":{"gitId":"nicoleang09"},"content":"        case EVENT:"},{"lineNumber":189,"author":{"gitId":"nicoleang09"},"content":"            String eventDescription \u003d inputSplit[0].substring(6, inputSplit[0].length() - 1);"},{"lineNumber":190,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":191,"author":{"gitId":"nicoleang09"},"content":"            DateTimeConverter eventDateTimeConverter \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":192,"author":{"gitId":"nicoleang09"},"content":"            LocalDate on \u003d eventDateTimeConverter.convertDate();"},{"lineNumber":193,"author":{"gitId":"nicoleang09"},"content":"            LocalTime from \u003d eventDateTimeConverter.convertTime(\"from\");"},{"lineNumber":194,"author":{"gitId":"nicoleang09"},"content":"            LocalTime to \u003d eventDateTimeConverter.convertTime(\"to\");"},{"lineNumber":195,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":196,"author":{"gitId":"nicoleang09"},"content":"            newTask \u003d new EventTask(eventDescription, on, from, to);"},{"lineNumber":197,"author":{"gitId":"nicoleang09"},"content":"            break;"},{"lineNumber":198,"author":{"gitId":"nicoleang09"},"content":"        default:"},{"lineNumber":199,"author":{"gitId":"nicoleang09"},"content":"            newTask \u003d null;"},{"lineNumber":200,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":201,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":202,"author":{"gitId":"nicoleang09"},"content":"        tasks.add(newTask);"},{"lineNumber":203,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":204,"author":{"gitId":"nicoleang09"},"content":"        if (saveToFile() !\u003d \"\") {"},{"lineNumber":205,"author":{"gitId":"nicoleang09"},"content":"            return saveToFile();"},{"lineNumber":206,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":207,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":208,"author":{"gitId":"nicoleang09"},"content":"        return \"Added: \" + newTask.toString();"},{"lineNumber":209,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":211,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"nicoleang09"},"content":"     * Deletes task from the task list."},{"lineNumber":213,"author":{"gitId":"nicoleang09"},"content":"     * Saves an updated copy of current task list to local file."},{"lineNumber":214,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":215,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":216,"author":{"gitId":"nicoleang09"},"content":"     * @return Feedback message letting user know task was successfully deleted from task list."},{"lineNumber":217,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":218,"author":{"gitId":"nicoleang09"},"content":"    private String deleteTask(String input) {"},{"lineNumber":219,"author":{"gitId":"nicoleang09"},"content":"        int inputIndex \u003d Integer.parseInt(input.substring(7));"},{"lineNumber":220,"author":{"gitId":"nicoleang09"},"content":"        Task task \u003d tasks.get(inputIndex - 1);"},{"lineNumber":221,"author":{"gitId":"nicoleang09"},"content":"        archive.push(new ArchivedTask(inputIndex, task));"},{"lineNumber":222,"author":{"gitId":"nicoleang09"},"content":"        System.out.println(\"archive: \" + archive);"},{"lineNumber":223,"author":{"gitId":"nicoleang09"},"content":"        tasks.remove(Integer.parseInt(input.substring(7)) - 1);"},{"lineNumber":224,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":225,"author":{"gitId":"nicoleang09"},"content":"        if (saveToFile() !\u003d \"\") {"},{"lineNumber":226,"author":{"gitId":"nicoleang09"},"content":"            return saveToFile();"},{"lineNumber":227,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":228,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":229,"author":{"gitId":"nicoleang09"},"content":"        return \"Deleted: \" + task.toString();"},{"lineNumber":230,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":232,"author":{"gitId":"nicoleang09"},"content":"    private String saveToFile() {"},{"lineNumber":233,"author":{"gitId":"nicoleang09"},"content":"        try {"},{"lineNumber":234,"author":{"gitId":"nicoleang09"},"content":"            fileSaver.saveToFile(\"DukeList.txt\", tasks);"},{"lineNumber":235,"author":{"gitId":"nicoleang09"},"content":"        } catch (IOException ex) {"},{"lineNumber":236,"author":{"gitId":"nicoleang09"},"content":"            return \"File path not found: \" + ex.getMessage();"},{"lineNumber":237,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"nicoleang09"},"content":"        return \"\";"},{"lineNumber":239,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":241,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":242,"author":{"gitId":"nicoleang09"},"content":"     * Finds tasks containing a specified keyword in their description."},{"lineNumber":243,"author":{"gitId":"nicoleang09"},"content":"     * Tasks are listed with their position in the task list displayed."},{"lineNumber":244,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":245,"author":{"gitId":"nicoleang09"},"content":"     * @param input User input."},{"lineNumber":246,"author":{"gitId":"nicoleang09"},"content":"     * @return List of tasks containing the keyword in their description."},{"lineNumber":247,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"nicoleang09"},"content":"    private String findTasks(String input) {"},{"lineNumber":249,"author":{"gitId":"nicoleang09"},"content":"        String description \u003d input.substring(5);"},{"lineNumber":250,"author":{"gitId":"nicoleang09"},"content":"        String output \u003d \"Here is a list of your tasks that contain \" + description + \":\";"},{"lineNumber":251,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":252,"author":{"gitId":"nicoleang09"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":253,"author":{"gitId":"nicoleang09"},"content":"            if (tasks.get(i).description.contains(description)) {"},{"lineNumber":254,"author":{"gitId":"nicoleang09"},"content":"                output \u003d output + \"\\n\" + (i + 1) + \". \" + tasks.get(i).toString();"},{"lineNumber":255,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":256,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":257,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":258,"author":{"gitId":"nicoleang09"},"content":"        return output;"},{"lineNumber":259,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":260,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":261,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":262,"author":{"gitId":"nicoleang09"},"content":"     * Lists all tasks in the task list in the order they were added."},{"lineNumber":263,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":264,"author":{"gitId":"nicoleang09"},"content":"     * @return Task list."},{"lineNumber":265,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":266,"author":{"gitId":"nicoleang09"},"content":"    private String listTasks() {"},{"lineNumber":267,"author":{"gitId":"nicoleang09"},"content":"        String output \u003d \"Here is a list of your tasks:\";"},{"lineNumber":268,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":269,"author":{"gitId":"nicoleang09"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":270,"author":{"gitId":"nicoleang09"},"content":"            output \u003d output + \"\\n\" + (i + 1) + \". \" + tasks.get(i).toString();"},{"lineNumber":271,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":272,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":273,"author":{"gitId":"nicoleang09"},"content":"        return output;"},{"lineNumber":274,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":275,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":276,"author":{"gitId":"nicoleang09"},"content":"    private String undoCommand() {"},{"lineNumber":277,"author":{"gitId":"nicoleang09"},"content":"        if (!undoHistory.empty()) {"},{"lineNumber":278,"author":{"gitId":"nicoleang09"},"content":"            String previousInput \u003d undoHistory.undo();"},{"lineNumber":279,"author":{"gitId":"nicoleang09"},"content":"            redoHistory.push(previousInput);"},{"lineNumber":280,"author":{"gitId":"nicoleang09"},"content":"            CommandType type \u003d categoriseCommand(previousInput);"},{"lineNumber":281,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":282,"author":{"gitId":"nicoleang09"},"content":"            switch (type) {"},{"lineNumber":283,"author":{"gitId":"nicoleang09"},"content":"            case DONE:"},{"lineNumber":284,"author":{"gitId":"nicoleang09"},"content":"                unmarkDone(previousInput);"},{"lineNumber":285,"author":{"gitId":"nicoleang09"},"content":"                break;"},{"lineNumber":286,"author":{"gitId":"nicoleang09"},"content":"            case DELETE:"},{"lineNumber":287,"author":{"gitId":"nicoleang09"},"content":"                ArchivedTask archivedTask \u003d archive.pop();"},{"lineNumber":288,"author":{"gitId":"nicoleang09"},"content":"                tasks.add(archivedTask.getIndex() - 1, archivedTask.getTask());"},{"lineNumber":289,"author":{"gitId":"nicoleang09"},"content":"                break;"},{"lineNumber":290,"author":{"gitId":"nicoleang09"},"content":"            case TODO:"},{"lineNumber":291,"author":{"gitId":"nicoleang09"},"content":"            case DEADLINE:"},{"lineNumber":292,"author":{"gitId":"nicoleang09"},"content":"            case EVENT:"},{"lineNumber":293,"author":{"gitId":"nicoleang09"},"content":"                tasks.remove(tasks.size() - 1);"},{"lineNumber":294,"author":{"gitId":"nicoleang09"},"content":"                break;"},{"lineNumber":295,"author":{"gitId":"nicoleang09"},"content":"            default:"},{"lineNumber":296,"author":{"gitId":"nicoleang09"},"content":"                break;"},{"lineNumber":297,"author":{"gitId":"nicoleang09"},"content":"            }"},{"lineNumber":298,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":299,"author":{"gitId":"nicoleang09"},"content":"            return \"Undid \" + previousInput + \".\";"},{"lineNumber":300,"author":{"gitId":"nicoleang09"},"content":"        } else {"},{"lineNumber":301,"author":{"gitId":"nicoleang09"},"content":"            return \"No task to undo!\";"},{"lineNumber":302,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":303,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":305,"author":{"gitId":"nicoleang09"},"content":"    private String redoCommand() {"},{"lineNumber":306,"author":{"gitId":"nicoleang09"},"content":"        if (!redoHistory.empty()) {"},{"lineNumber":307,"author":{"gitId":"nicoleang09"},"content":"            String nextInput \u003d redoHistory.redo();"},{"lineNumber":308,"author":{"gitId":"nicoleang09"},"content":"            CommandType type \u003d categoriseCommand(nextInput);"},{"lineNumber":309,"author":{"gitId":"nicoleang09"},"content":"            executeCommand(nextInput, type);"},{"lineNumber":310,"author":{"gitId":"nicoleang09"},"content":"            undoHistory.push(nextInput);"},{"lineNumber":311,"author":{"gitId":"nicoleang09"},"content":"            return \"Redid \" + nextInput + \".\";"},{"lineNumber":312,"author":{"gitId":"nicoleang09"},"content":"        } else {"},{"lineNumber":313,"author":{"gitId":"nicoleang09"},"content":"            return \"No task to redo!\";"},{"lineNumber":314,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":315,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":316,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":316}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * Deadline tasks are tasks that have to be completed by a specified date."},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    protected LocalDate by;"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new DeadlineTask object given a description and a deadline."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     * @param description   Task description."},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     * @param by    Date task needs to be completed by."},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    public DeadlineTask(String description, LocalDate by) {"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"        this.by \u003d by;"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * Returns a string representation of the deadline task specifying its description and completion date."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     * @return String representation of task."},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":33}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.time.LocalTime;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" * Event tasks are tasks that occur during a specified period of time."},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"public class EventTask extends Task {"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"    protected LocalDate on;"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    protected LocalTime from;"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    protected LocalTime to;"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new EventTask object given a description and a time period."},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"     * @param description   Task description."},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     * @param on    Date event is occurring on."},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"     * @param from  Start time of event."},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"     * @param to    End time of event."},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    public EventTask(String description, LocalDate on, LocalTime from, LocalTime to) {"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"        this.on \u003d on;"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"        this.from \u003d from;"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"        this.to \u003d to;"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"     * Returns a string representation of the event task specifying its description and when it occurs."},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"     * @return String representation of task."},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"        return \"[E]\" + super.toString() + \" (on: \" + on + \", \" + from + \" - \" + to + \")\";"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":40}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Tasks can be added to the task list that the bot manages."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public abstract class Task {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     * Constructs a new Task object given a description."},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     * @param description   Task description."},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"     * Returns a \u0027X\u0027 if the task is marked as done and no symbol otherwise."},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     * @return Status icon of task to indicate whether it is done."},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    public String getStatusIcon() {"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"        return (isDone ? \"X\" : \" \"); //return tick or X symbols"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"     * Marks task as done."},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"    public void markAsDone() {"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"        isDone \u003d true;"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"     * Marks task as not done."},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"    public void unmarkAsDone() {"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"        isDone \u003d false;"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"     * Returns a string representation of the task specifying its description."},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"     * @return String representation of task."},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":54}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":" * Todo tasks are tasks that do not have to be completed by a specified date or during a specified time period."},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class TodoTask extends Task {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    public TodoTask(String description) {"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"     * Returns a string representation of the todo task specifying its description."},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"     * @return String representation of task."},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":22}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.text.Text;"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.text.TextAlignment;"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"/**This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face, a label"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":" * containing the speaker\u0027s name and a label containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    private VBox vbox;"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    private Label messageContent;"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    private Text messageContent2;"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    private Label senderName;"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"    private ImageView displayPicture;"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"    private DialogBox(String name, String text, Image img) {"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"            fxmlLoader.load();"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"        senderName.setText(name);"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"        messageContent2.setText(text);"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"        displayPicture.setImage(img);"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"    private void flip() {"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"        Collections.reverse(tmp);"},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":"        vbox.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"     * Returns dialogue box containing user\u0027s dialogue."},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"nicoleang09"},"content":"     * @param text  Dialogue text."},{"lineNumber":65,"author":{"gitId":"nicoleang09"},"content":"     * @param img   Image representing user."},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"     * @return Dialogue box containing user\u0027s dialogue."},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":"        var db \u003d new DialogBox(\"user\", text, img);"},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":"        db.senderName.setId(\"userName\");"},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":"     * Returns dialogue box containing bot\u0027s dialogue."},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"     * @param text  Dialogue text."},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":"     * @param img   Image representing bot."},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":"     * @return Dialogue box containing bot\u0027s dialogue."},{"lineNumber":81,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"nicoleang09"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":83,"author":{"gitId":"nicoleang09"},"content":"        var db \u003d new DialogBox(\"tabby\", text, img);"},{"lineNumber":84,"author":{"gitId":"nicoleang09"},"content":"        db.senderName.setId(\"tabbyName\");"},{"lineNumber":85,"author":{"gitId":"nicoleang09"},"content":"        db.messageContent2.setTextAlignment(TextAlignment.RIGHT);"},{"lineNumber":86,"author":{"gitId":"nicoleang09"},"content":"        return db;"},{"lineNumber":87,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":88}},{"path":"src/main/java/duke/ui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"     * Launches task bot application."},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"     * @param args  Java command line inputs."},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    public static void main(String[] args) {"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":17}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    private UI ui \u003d new UI();"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"     * Sets up the GUI."},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"     * @param stage JavaFX stage for the task bot application."},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setUI(ui);"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"            stage.setTitle(\"Tabby the Task Bot\");"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"            stage.getIcons().add(new Image(\"/images/tabby icon.png\"));"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"            stage.show();"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":39}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"import javafx.util.Duration;"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"    private UI ui;"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/user icon.png\"));"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tabby icon.png\"));"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"     * Invokes display of welcome message."},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":"        scrollPane.getStylesheets().add(getClass().getResource(\"/view/ui.css\").toExternalForm());"},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"        welcomeUser();"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"     * Sets controller for application."},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"     * @param ui Controller."},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":"    public void setUI(UI ui) {"},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"        this.ui \u003d ui;"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":"     * Displays welcome message."},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"    private void welcomeUser() {"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"        String welcomeMessage \u003d \"Hi, I\u0027m Tabby the task bot!\\n\""},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"                + \"I\u0027ll help you keep tabs on your to-dos, deadlines and events!\\n\""},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":"                + \"Enter help for a summary of commands.\";"},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeMessage, dukeImage));"},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends"},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"     * them to the dialog container. Clears the user input after processing."},{"lineNumber":64,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nicoleang09"},"content":"    @FXML"},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"    private void handleUserInput() {"},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":"        String response \u003d ui.getResponse(input);"},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"        );"},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":"        userInput.clear();"},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":"            PauseTransition wait \u003d new PauseTransition(Duration.seconds(1));"},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":"            wait.setOnFinished(ui -\u003e Platform.exit());"},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":"            wait.play();"},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":80}},{"path":"src/main/java/duke/ui/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"import duke.task.CommandManager;"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":" * UI controls the GUI of bot."},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":" *"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":" * @author  Nicole Ang"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":" */"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"public class UI extends Application {"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    protected static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    protected CommandManager taskManager \u003d new CommandManager();"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"     * Takes user inputted tasks and passes them to the TaskManager."},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"     * @param input Input taken in through GUI."},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    public String getResponse(String input) {"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"        return taskManager.takeCommand(input, tasks);"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"}"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":""}],"authorContributionMap":{"nicoleang09":32}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"600.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"        \u003cVBox fx:id\u003d\"vbox\" alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"-Infinity\" prefWidth\u003d\"400.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"           \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"                \u003cLabel fx:id\u003d\"senderName\" alignment\u003d\"TOP_RIGHT\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"                 \u003cfont\u003e"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"                    \u003cFont name\u003d\"System Bold\" size\u003d\"12.104348182678223\" /\u003e"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"                 \u003c/font\u003e"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"              \u003c/Label\u003e"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"            \u003cText fx:id\u003d\"messageContent2\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\" wrappingWidth\u003d\"340.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"\u003c!--                \u003cLabel fx:id\u003d\"messageContent\" alignment\u003d\"TOP_RIGHT\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"Infinity\" text\u003d\"Label\" textAlignment\u003d\"RIGHT\" wrapText\u003d\"true\" /\u003e--\u003e"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"           \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"         \u003cpadding\u003e"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"            \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"         \u003c/padding\u003e"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"        \u003c/VBox\u003e"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"          \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"85.0\" fitWidth\u003d\"85.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"           \u003cHBox.margin\u003e"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"              \u003cInsets left\u003d\"20.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"           \u003c/HBox.margin\u003e"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"        \u003c/ImageView\u003e"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"     \u003c/children\u003e"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"    \u003cpadding\u003e"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"    \u003c/padding\u003e"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nicoleang09":36}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"\u003c?import java.lang.String?\u003e"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"\u003cAnchorPane maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"680.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #e38e3f;\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" maxWidth\u003d\"1.7976931348623157E308\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"512.0\" style\u003d\"-fx-background-radius: 50px; -fx-background-color: #fff;\" translateX\u003d\"5.0\" translateY\u003d\"75.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"         \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"            \u003cInsets left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"         \u003c/padding\u003e\u003c/TextField\u003e"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"626.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #fff;\" styleClass\u003d\"scrollPane\" stylesheets\u003d\"@ui.css\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"624.0\" prefWidth\u003d\"588.0\" style\u003d\"-fx-background-color: #fff;\"\u003e"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"               \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"10.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"               \u003c/padding\u003e\u003c/VBox\u003e"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"            \u003c/content\u003e"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"         \u003cstyleClass\u003e"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"            \u003cString fx:value\u003d\"scroll-pane\" /\u003e"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"         \u003c/styleClass\u003e"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"        \u003cButton id\u003d\"sendButton\" fx:id\u003d\"sendButton\" layoutX\u003d\"523.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"73.0\" style\u003d\"-fx-background-color: ffe27a; -fx-background-radius: 50px;\" styleClass\u003d\"sendButton\" stylesheets\u003d\"@ui.css\" text\u003d\"Send\" textFill\u003d\"#727272\" translateX\u003d\"-1.0\" translateY\u003d\"75.0\" /\u003e"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"    \u003c/children\u003e"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nicoleang09":30}},{"path":"src/test/java/CommandManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import duke.task.CommandManager;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"public class CommandManagerTest {"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandNewTodo() {"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Added: [T][ ] read book\";"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"todo read book\";"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandNewDeadline() {"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Added: [D][ ] return book (by: 2021-06-06)\";"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"deadline return book /by 06-06-2021\";"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandNewEvent() {"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":33,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Added: [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\";"},{"lineNumber":34,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":35,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\";"},{"lineNumber":36,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":38,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":39,"author":{"gitId":"nicoleang09"},"content":"        input \u003d \"event project meeting /on 06-08-2021 /from 2 Pm /to 4 pm\";"},{"lineNumber":40,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":41,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":42,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":43,"author":{"gitId":"nicoleang09"},"content":"        input \u003d \"event project meeting /on 06-08-2021 /from 2 pm /to 4 PM\";"},{"lineNumber":44,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":45,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":46,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":48,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandBye() {"},{"lineNumber":50,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":51,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Bye! See you soon :)\";"},{"lineNumber":52,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":53,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"bye\";"},{"lineNumber":54,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(input, new ArrayList\u003c\u003e());"},{"lineNumber":55,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":56,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":58,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandDone() {"},{"lineNumber":60,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":61,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Good job! You got join sports club done!\";"},{"lineNumber":63,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":64,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":65,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":66,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":67,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][X] join sports club\";"},{"lineNumber":68,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":69,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":70,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":71,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":72,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo join sports club\", tasks);"},{"lineNumber":73,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":74,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(\"done 4\", tasks);"},{"lineNumber":75,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":76,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":77,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":78,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":79,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":81,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":82,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandDelete() {"},{"lineNumber":83,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":84,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":85,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Deleted: [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\";"},{"lineNumber":86,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":87,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":88,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":89,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [T][ ] join sports club\";"},{"lineNumber":90,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":91,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":92,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":93,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":94,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo join sports club\", tasks);"},{"lineNumber":95,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":96,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(\"delete 3\", tasks);"},{"lineNumber":97,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":98,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":99,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":100,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":101,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":103,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandFind() {"},{"lineNumber":105,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":106,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks that contain book:\\n\""},{"lineNumber":108,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":109,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":110,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][ ] borrow new book\";"},{"lineNumber":111,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":112,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":113,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":114,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":115,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo borrow new book\", tasks);"},{"lineNumber":116,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":117,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"find book\", tasks);"},{"lineNumber":118,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":119,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":121,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":122,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandUndoRedoDone() {"},{"lineNumber":123,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":124,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":125,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Good job! You got join sports club done!\";"},{"lineNumber":126,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":127,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":128,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":129,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":130,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][X] join sports club\";"},{"lineNumber":131,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":132,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":133,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":134,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":135,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo join sports club\", tasks);"},{"lineNumber":136,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":137,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(\"done 4\", tasks);"},{"lineNumber":138,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":139,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":140,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":141,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":142,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Undid done 4.\";"},{"lineNumber":143,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":144,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":145,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":146,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":147,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][ ] join sports club\";"},{"lineNumber":148,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":149,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(\"undo\", tasks);"},{"lineNumber":150,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":151,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":152,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":153,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":154,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Redid done 4.\";"},{"lineNumber":155,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":156,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":157,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":158,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":159,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][X] join sports club\";"},{"lineNumber":160,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":161,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(\"redo\", tasks);"},{"lineNumber":162,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":163,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":164,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":165,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":167,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":168,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandUndoRedoDelete() {"},{"lineNumber":169,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":170,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":171,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Deleted: [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\";"},{"lineNumber":172,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":173,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":174,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":175,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [T][ ] join sports club\";"},{"lineNumber":176,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":177,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":178,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":179,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":180,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo join sports club\", tasks);"},{"lineNumber":181,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":182,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(\"delete 3\", tasks);"},{"lineNumber":183,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":184,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":185,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":186,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":187,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":188,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Undid delete 3.\";"},{"lineNumber":189,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":190,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":191,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":192,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":193,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][ ] join sports club\";"},{"lineNumber":194,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":195,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(\"undo\", tasks);"},{"lineNumber":196,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":197,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":198,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":199,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":200,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":201,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Redid delete 3.\";"},{"lineNumber":202,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":203,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":204,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":205,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [T][ ] join sports club\";"},{"lineNumber":206,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":207,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(\"redo\", tasks);"},{"lineNumber":208,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":209,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":210,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":211,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":212,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":214,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":215,"author":{"gitId":"nicoleang09"},"content":"    void testTakeCommandUndoRedoNewTask() {"},{"lineNumber":216,"author":{"gitId":"nicoleang09"},"content":"        CommandManager cm \u003d new CommandManager();"},{"lineNumber":217,"author":{"gitId":"nicoleang09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":218,"author":{"gitId":"nicoleang09"},"content":"        String correctMsg \u003d \"Good job! You got join sports club done!\";"},{"lineNumber":219,"author":{"gitId":"nicoleang09"},"content":"        String correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":220,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":221,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":222,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":223,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][ ] join sports club\";"},{"lineNumber":224,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":225,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo read book\", tasks);"},{"lineNumber":226,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"deadline return book /by 06-06-2021\", tasks);"},{"lineNumber":227,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm\", tasks);"},{"lineNumber":228,"author":{"gitId":"nicoleang09"},"content":"        cm.takeCommand(\"todo join sports club\", tasks);"},{"lineNumber":229,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":230,"author":{"gitId":"nicoleang09"},"content":"        String outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":231,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":232,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":233,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Undid todo join sports club.\";"},{"lineNumber":234,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":235,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":236,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":237,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\";"},{"lineNumber":238,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":239,"author":{"gitId":"nicoleang09"},"content":"        String outputMsg \u003d cm.takeCommand(\"undo\", tasks);"},{"lineNumber":240,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":241,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":242,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":243,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":244,"author":{"gitId":"nicoleang09"},"content":"        correctMsg \u003d \"Redid todo join sports club.\";"},{"lineNumber":245,"author":{"gitId":"nicoleang09"},"content":"        correctList \u003d \"Here is a list of your tasks:\\n\""},{"lineNumber":246,"author":{"gitId":"nicoleang09"},"content":"                + \"1. [T][ ] read book\\n\""},{"lineNumber":247,"author":{"gitId":"nicoleang09"},"content":"                + \"2. [D][ ] return book (by: 2021-06-06)\\n\""},{"lineNumber":248,"author":{"gitId":"nicoleang09"},"content":"                + \"3. [E][ ] project meeting (on: 2021-08-06, 14:00 - 16:00)\\n\""},{"lineNumber":249,"author":{"gitId":"nicoleang09"},"content":"                + \"4. [T][ ] join sports club\";"},{"lineNumber":250,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":251,"author":{"gitId":"nicoleang09"},"content":"        outputMsg \u003d cm.takeCommand(\"redo\", tasks);"},{"lineNumber":252,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctMsg, outputMsg);"},{"lineNumber":253,"author":{"gitId":"nicoleang09"},"content":"        outputList \u003d cm.takeCommand(\"list\", tasks);"},{"lineNumber":254,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(correctList, outputList);"},{"lineNumber":255,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":256}},{"path":"src/test/java/DateTimeConverterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"import org.junit.Assert;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import duke.datetime.DateTimeConverter;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"public class DateTimeConverterTest {"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"    void testDateConversion() {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"deadline return book /by 06-06-2021\";"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"        String[] inputSplit \u003d input.split(\"/\");"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"        DateTimeConverter dTC \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(\"2021-06-06\", dTC.convertDate().toString());"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    void testTimeConversion() {"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"        String input \u003d \"deadline cs2103t lecture /on 29-01-2021 /from 2 pm /to 4 Pm\";"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        String[] inputSplit \u003d input.split(\"/\");"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"        DateTimeConverter dTC \u003d new DateTimeConverter(inputSplit);"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(\"14:00\", dTC.convertTime(\"from\").toString());"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(\"16:00\", dTC.convertTime(\"to\").toString());"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":25}},{"path":"src/test/java/ErrorCheckerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"import org.junit.Assert;"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"import duke.error.ErrorChecker;"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"public class ErrorCheckerTest {"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"    void testToDo_missingTodoTask_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"        ErrorChecker errorChecker \u003d new ErrorChecker(\"todo \", new ArrayList\u003c\u003e());"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"        boolean hasNoError \u003d errorChecker.isValid();"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(false, hasNoError);"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"    void testDeadline_missingDeadlineTask_exceptionThrown() {"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"        ErrorChecker errorChecker \u003d new ErrorChecker(\"deadline \", new ArrayList\u003c\u003e());"},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"        boolean hasNoError \u003d errorChecker.isValid();"},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(false, hasNoError);"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"    void testDeadline_missingEventTask_exceptionThrown() {"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"        ErrorChecker errorChecker \u003d new ErrorChecker(\"event \", new ArrayList\u003c\u003e());"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":""},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"        boolean hasNoError \u003d errorChecker.isValid();"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"        Assert.assertEquals(false, hasNoError);"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"}"}],"authorContributionMap":{"nicoleang09":32}},{"path":"text-ui-test/DukeList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"[T][ ] read book"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":"[D][X] return book (by: June 6th)"},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"[T][X] join sports club"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"[D][ ] return book (by: Sunday)"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"[E][ ] project meeting (at: Mon 2-4pm)"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"[E][ ] project meeting (at: Aug 8th 7-9pm)"}],"authorContributionMap":{"nicoleang09":6}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicoleang09"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"nicoleang09"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"nicoleang09"},"content":"deadline return book /by 06-06-2021"},{"lineNumber":4,"author":{"gitId":"nicoleang09"},"content":"event project meeting /on Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"nicoleang09"},"content":"event project meeting /on 06-08-2021 /from 2 pm /to 4 pm"},{"lineNumber":6,"author":{"gitId":"nicoleang09"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"nicoleang09"},"content":"todo join sports club"},{"lineNumber":8,"author":{"gitId":"nicoleang09"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"nicoleang09"},"content":"todo borrow book"},{"lineNumber":10,"author":{"gitId":"nicoleang09"},"content":"deadline return book /by Sunday"},{"lineNumber":11,"author":{"gitId":"nicoleang09"},"content":"deadline return book /by 31-12-2021"},{"lineNumber":12,"author":{"gitId":"nicoleang09"},"content":"event project meeting /on 12-08-2021 /from 2 PM /to 4 PM"},{"lineNumber":13,"author":{"gitId":"nicoleang09"},"content":"list"},{"lineNumber":14,"author":{"gitId":"nicoleang09"},"content":"delete 3"},{"lineNumber":15,"author":{"gitId":"nicoleang09"},"content":"event project meeting /on 08-08-2021 /from 7 pM /to 9 Pm"},{"lineNumber":16,"author":{"gitId":"nicoleang09"},"content":"delete 4"},{"lineNumber":17,"author":{"gitId":"nicoleang09"},"content":"list"},{"lineNumber":18,"author":{"gitId":"nicoleang09"},"content":"todo"},{"lineNumber":19,"author":{"gitId":"nicoleang09"},"content":"todo "},{"lineNumber":20,"author":{"gitId":"nicoleang09"},"content":"deadline"},{"lineNumber":21,"author":{"gitId":"nicoleang09"},"content":"deadline "},{"lineNumber":22,"author":{"gitId":"nicoleang09"},"content":"event"},{"lineNumber":23,"author":{"gitId":"nicoleang09"},"content":"event "},{"lineNumber":24,"author":{"gitId":"nicoleang09"},"content":"done"},{"lineNumber":25,"author":{"gitId":"nicoleang09"},"content":"done "},{"lineNumber":26,"author":{"gitId":"nicoleang09"},"content":"done 8"},{"lineNumber":27,"author":{"gitId":"nicoleang09"},"content":"delete"},{"lineNumber":28,"author":{"gitId":"nicoleang09"},"content":"delete "},{"lineNumber":29,"author":{"gitId":"nicoleang09"},"content":"delete 7"},{"lineNumber":30,"author":{"gitId":"nicoleang09"},"content":"random"},{"lineNumber":31,"author":{"gitId":"nicoleang09"},"content":"non a valid action"},{"lineNumber":32,"author":{"gitId":"nicoleang09"},"content":"bye"}],"authorContributionMap":{"nicoleang09":32}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":3,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":4,"author":{"gitId":"-"},"content":"then"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":6,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":10,"author":{"gitId":"-"},"content":"then"},{"lineNumber":11,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":12,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":15,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":16,"author":{"gitId":"-"},"content":"then"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":18,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":19,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":22,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":25,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":26,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":29,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":30,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":31,"author":{"gitId":"-"},"content":"then"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":34,"author":{"gitId":"-"},"content":"else"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":37,"author":{"gitId":"nicoleang09"},"content":"then"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"nicoleang09":1,"-":37}}]
