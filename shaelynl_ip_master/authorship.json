[{"path":"src/main/java/MisterDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaelynl"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"shaelynl"},"content":"import java.text.SimpleDateFormat;"},{"lineNumber":3,"author":{"gitId":"shaelynl"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"shaelynl"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitId":"shaelynl"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"shaelynl"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":8,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"shaelynl"},"content":" * Mister Duke is an interactive chat bot that"},{"lineNumber":10,"author":{"gitId":"shaelynl"},"content":" * keep track of your tasks, deadlines and events"},{"lineNumber":11,"author":{"gitId":"shaelynl"},"content":" * in a list."},{"lineNumber":12,"author":{"gitId":"shaelynl"},"content":" * Some things Mister Duke is good at:"},{"lineNumber":13,"author":{"gitId":"shaelynl"},"content":" * - listing the tasks on your list"},{"lineNumber":14,"author":{"gitId":"shaelynl"},"content":" * - marking specified tasks as done"},{"lineNumber":15,"author":{"gitId":"shaelynl"},"content":" * - removing specified tasks from the list"},{"lineNumber":16,"author":{"gitId":"shaelynl"},"content":" * - find matching tasks given a search word/phrase"},{"lineNumber":17,"author":{"gitId":"shaelynl"},"content":" *"},{"lineNumber":18,"author":{"gitId":"shaelynl"},"content":" * @author Shaelyn"},{"lineNumber":19,"author":{"gitId":"shaelynl"},"content":" * @version CS2103T 20/21 Semester 2, Individual Project"},{"lineNumber":20,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":21,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":22,"author":{"gitId":"shaelynl"},"content":"public class MisterDuke {"},{"lineNumber":23,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":24,"author":{"gitId":"shaelynl"},"content":"    private final Ui ui;"},{"lineNumber":25,"author":{"gitId":"shaelynl"},"content":"    private final Storage storage;"},{"lineNumber":26,"author":{"gitId":"shaelynl"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":27,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":28,"author":{"gitId":"shaelynl"},"content":"    public MisterDuke(String filePath) throws IOException {"},{"lineNumber":29,"author":{"gitId":"shaelynl"},"content":"        ui \u003d new Ui();"},{"lineNumber":30,"author":{"gitId":"shaelynl"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":31,"author":{"gitId":"shaelynl"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"shaelynl"},"content":"            tasks \u003d new ArrayList\u003c\u003e(storage.load());"},{"lineNumber":33,"author":{"gitId":"shaelynl"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"shaelynl"},"content":"            tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":38,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"shaelynl"},"content":"     * Runs Mister Duke"},{"lineNumber":40,"author":{"gitId":"shaelynl"},"content":"     * @throws IOException when the input is wrong/incomplete"},{"lineNumber":41,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"shaelynl"},"content":"    public void run() throws IOException {"},{"lineNumber":43,"author":{"gitId":"shaelynl"},"content":"        storage.load();"},{"lineNumber":44,"author":{"gitId":"shaelynl"},"content":"        ui.printLine();"},{"lineNumber":45,"author":{"gitId":"shaelynl"},"content":"        ui.showWelcome();"},{"lineNumber":46,"author":{"gitId":"shaelynl"},"content":"        ui.printLine();"},{"lineNumber":47,"author":{"gitId":"shaelynl"},"content":"        boolean isRunning \u003d true;"},{"lineNumber":48,"author":{"gitId":"shaelynl"},"content":"        while (isRunning) {"},{"lineNumber":49,"author":{"gitId":"shaelynl"},"content":"            try {"},{"lineNumber":50,"author":{"gitId":"shaelynl"},"content":"                String command \u003d ui.readCommand();"},{"lineNumber":51,"author":{"gitId":"shaelynl"},"content":"                ui.printLine();"},{"lineNumber":52,"author":{"gitId":"shaelynl"},"content":"                Command cmd \u003d Parser.parse(command);"},{"lineNumber":53,"author":{"gitId":"shaelynl"},"content":"                cmd.executeCommand(ui, storage, tasks);"},{"lineNumber":54,"author":{"gitId":"shaelynl"},"content":"                isRunning \u003d cmd.isRunning();"},{"lineNumber":55,"author":{"gitId":"shaelynl"},"content":"            } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"shaelynl"},"content":"                ui.showDefaultError(e);"},{"lineNumber":57,"author":{"gitId":"shaelynl"},"content":"            } finally {"},{"lineNumber":58,"author":{"gitId":"shaelynl"},"content":"                ui.printLine();"},{"lineNumber":59,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"shaelynl"},"content":"        storage.save(tasks);"},{"lineNumber":62,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":64,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"shaelynl"},"content":"     * Main driver function"},{"lineNumber":66,"author":{"gitId":"shaelynl"},"content":"     * @param args command line args"},{"lineNumber":67,"author":{"gitId":"shaelynl"},"content":"     * @throws IOException when the input is wrong/incomplete"},{"lineNumber":68,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"shaelynl"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":70,"author":{"gitId":"shaelynl"},"content":"        new MisterDuke(\"src\\\\main\\\\data\\\\duke.txt\").run();"},{"lineNumber":71,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":73,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":74,"author":{"gitId":"shaelynl"},"content":"/** The user interface class is for printing Mister Duke\u0027s"},{"lineNumber":75,"author":{"gitId":"shaelynl"},"content":" * responses onto the terminal."},{"lineNumber":76,"author":{"gitId":"shaelynl"},"content":" *"},{"lineNumber":77,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":78,"author":{"gitId":"shaelynl"},"content":"class Ui {"},{"lineNumber":79,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":80,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"shaelynl"},"content":"     * Prints horizontal line to partition Mister Duke\u0027s messages"},{"lineNumber":82,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"shaelynl"},"content":"    public void printLine() {"},{"lineNumber":84,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"    _________________________________________________\");"},{"lineNumber":85,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":87,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"shaelynl"},"content":"     * Reads user\u0027s input"},{"lineNumber":89,"author":{"gitId":"shaelynl"},"content":"     * @return user\u0027s input as String"},{"lineNumber":90,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"shaelynl"},"content":"    public String readCommand() {"},{"lineNumber":92,"author":{"gitId":"shaelynl"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":93,"author":{"gitId":"shaelynl"},"content":"        while (sc.hasNext()) {"},{"lineNumber":94,"author":{"gitId":"shaelynl"},"content":"            return sc.nextLine();"},{"lineNumber":95,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"shaelynl"},"content":"        return \"\";"},{"lineNumber":97,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":99,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"shaelynl"},"content":"     * Displays Mister Duke\u0027s welcome message"},{"lineNumber":101,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"shaelynl"},"content":"    public void showWelcome() {"},{"lineNumber":103,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     Hello! Nice to meet you, I\u0027m Mister Duke :)\");"},{"lineNumber":104,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     What can I do for you today?\");"},{"lineNumber":105,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":107,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"shaelynl"},"content":"     * Displays Mister Duke\u0027s goodbye message"},{"lineNumber":109,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"shaelynl"},"content":"    public void showGoodbye() {"},{"lineNumber":111,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     Bye. Hope to see you again soon! :)\");"},{"lineNumber":112,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":114,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"shaelynl"},"content":"     * Displays number of tasks in the list"},{"lineNumber":116,"author":{"gitId":"shaelynl"},"content":"     * @param numOfTasks in the list"},{"lineNumber":117,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"shaelynl"},"content":"    public void showTaskList(int numOfTasks) {"},{"lineNumber":119,"author":{"gitId":"shaelynl"},"content":"        if (numOfTasks \u003d\u003d 1) {"},{"lineNumber":120,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Now you have \" + numOfTasks + \" task in the list.\");"},{"lineNumber":121,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Now you have \" + numOfTasks + \" tasks in the list.\");"},{"lineNumber":123,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":126,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"shaelynl"},"content":"     * Informs user that the task input has been added to the list"},{"lineNumber":128,"author":{"gitId":"shaelynl"},"content":"     * @param task specified by user that needs to be added to the list"},{"lineNumber":129,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"shaelynl"},"content":"    public void showTaskAdded(Task task) {"},{"lineNumber":131,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task: \");"},{"lineNumber":132,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"       \" + task.toString());"},{"lineNumber":133,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":135,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":136,"author":{"gitId":"shaelynl"},"content":"     * Indicates that the specified task has been completed"},{"lineNumber":137,"author":{"gitId":"shaelynl"},"content":"     * @param task specified by user that has been completed"},{"lineNumber":138,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"shaelynl"},"content":"    public void showTaskDone(Task task) {"},{"lineNumber":140,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":141,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"       \" + task.toString());"},{"lineNumber":142,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":144,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"shaelynl"},"content":"     * Lists the tasks"},{"lineNumber":146,"author":{"gitId":"shaelynl"},"content":"     * @param tasksArray array list of tasks"},{"lineNumber":147,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":148,"author":{"gitId":"shaelynl"},"content":"    public void showList(ArrayList\u003cTask\u003e tasksArray) {"},{"lineNumber":149,"author":{"gitId":"shaelynl"},"content":"        if (tasksArray.isEmpty()) {"},{"lineNumber":150,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Your list is empty, there is nothing to do. Yay!\");"},{"lineNumber":151,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":152,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Here are the tasks in your list:\");"},{"lineNumber":153,"author":{"gitId":"shaelynl"},"content":"            for (int i \u003d 0; i \u003c tasksArray.size(); i++) {"},{"lineNumber":154,"author":{"gitId":"shaelynl"},"content":"                System.out.println(\"       \" + (i + 1) + \". \" + tasksArray.get(i).toString());"},{"lineNumber":155,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":159,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"shaelynl"},"content":"     * Informs user that the specified task has been removed from the list"},{"lineNumber":161,"author":{"gitId":"shaelynl"},"content":"     * @param tasksArray array list of tasks"},{"lineNumber":162,"author":{"gitId":"shaelynl"},"content":"     * @param commandNumber the task in the list that will be removed"},{"lineNumber":163,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":164,"author":{"gitId":"shaelynl"},"content":"    public void showTaskDelete(ArrayList\u003cTask\u003e tasksArray, String commandNumber) {"},{"lineNumber":165,"author":{"gitId":"shaelynl"},"content":"        if (tasksArray.isEmpty()) {"},{"lineNumber":166,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Oops! You have no tasks to delete.\");"},{"lineNumber":167,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":168,"author":{"gitId":"shaelynl"},"content":"            int cmdNum \u003d Integer.parseInt(commandNumber); //strArray[1]"},{"lineNumber":169,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Noted. I\u0027ve removed this task: \");"},{"lineNumber":170,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"       \" + tasksArray.get(cmdNum - 1).toString());"},{"lineNumber":171,"author":{"gitId":"shaelynl"},"content":"            tasksArray.remove(cmdNum - 1);"},{"lineNumber":172,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":175,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"shaelynl"},"content":"     * Informs the user of wrong/incomplete input"},{"lineNumber":177,"author":{"gitId":"shaelynl"},"content":"     * @param e error message that specifies wrong/incomplete input"},{"lineNumber":178,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"shaelynl"},"content":"    public void showDefaultError(Exception e) {"},{"lineNumber":180,"author":{"gitId":"shaelynl"},"content":"        System.out.println(e.getMessage());"},{"lineNumber":181,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":183,"author":{"gitId":"shaelynl"},"content":"    public void showOutOfBounds() {"},{"lineNumber":184,"author":{"gitId":"shaelynl"},"content":"        System.out.println(\"     Oops! You don\u0027t have that many tasks\");"},{"lineNumber":185,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":187,"author":{"gitId":"shaelynl"},"content":"    public void showMatchingItems(ArrayList\u003cTask\u003e tasksArray) {"},{"lineNumber":188,"author":{"gitId":"shaelynl"},"content":"        if (tasksArray.isEmpty()) {"},{"lineNumber":189,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Oh no! There are no matching tasks :(\");"},{"lineNumber":190,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":191,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"     Here are the matching tasks in your list:\");"},{"lineNumber":192,"author":{"gitId":"shaelynl"},"content":"            for (int i \u003d 0; i \u003c tasksArray.size(); i++) {"},{"lineNumber":193,"author":{"gitId":"shaelynl"},"content":"                System.out.println(\"       \" + (i + 1) + \". \" + tasksArray.get(i).toString());"},{"lineNumber":194,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":197,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":198,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":199,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":200,"author":{"gitId":"shaelynl"},"content":" * The Storage class is for loading and saving the list of tasks"},{"lineNumber":201,"author":{"gitId":"shaelynl"},"content":" * to the local hard disk."},{"lineNumber":202,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":203,"author":{"gitId":"shaelynl"},"content":"class Storage {"},{"lineNumber":204,"author":{"gitId":"shaelynl"},"content":"    private final File txtFile;"},{"lineNumber":205,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":206,"author":{"gitId":"shaelynl"},"content":"    public Storage (String filePath) throws IOException {"},{"lineNumber":207,"author":{"gitId":"shaelynl"},"content":"        this.txtFile \u003d new File(filePath);"},{"lineNumber":208,"author":{"gitId":"shaelynl"},"content":"        if (txtFile.createNewFile()) {"},{"lineNumber":209,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"File created!\");"},{"lineNumber":210,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":211,"author":{"gitId":"shaelynl"},"content":"            System.out.println(\"File loaded!\");"},{"lineNumber":212,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":215,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":216,"author":{"gitId":"shaelynl"},"content":"     * Loads list of tasks from the hard disk into the list of tasks"},{"lineNumber":217,"author":{"gitId":"shaelynl"},"content":"     * @return array list of tasks"},{"lineNumber":218,"author":{"gitId":"shaelynl"},"content":"     * @throws FileNotFoundException when the file cannot be found on the hard disk"},{"lineNumber":219,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"shaelynl"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":221,"author":{"gitId":"shaelynl"},"content":"        Scanner sc \u003d new Scanner(this.txtFile);"},{"lineNumber":222,"author":{"gitId":"shaelynl"},"content":"        ArrayList\u003cTask\u003e tasksArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":223,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":224,"author":{"gitId":"shaelynl"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":225,"author":{"gitId":"shaelynl"},"content":"            String tempStr \u003d sc.nextLine();"},{"lineNumber":226,"author":{"gitId":"shaelynl"},"content":"            String checkForTick \u003d tempStr.substring(0, 5);"},{"lineNumber":227,"author":{"gitId":"shaelynl"},"content":"            String cmd \u003d tempStr.substring(7);"},{"lineNumber":228,"author":{"gitId":"shaelynl"},"content":"            if (tempStr.contains(\"[T]\")) {"},{"lineNumber":229,"author":{"gitId":"shaelynl"},"content":"                ToDo toDoTask \u003d new ToDo(cmd);"},{"lineNumber":230,"author":{"gitId":"shaelynl"},"content":"                if (!checkForTick.contains(\" \")) {"},{"lineNumber":231,"author":{"gitId":"shaelynl"},"content":"                    toDoTask.markAsDone();"},{"lineNumber":232,"author":{"gitId":"shaelynl"},"content":"                }"},{"lineNumber":233,"author":{"gitId":"shaelynl"},"content":"                tasksArrayList.add(toDoTask);"},{"lineNumber":234,"author":{"gitId":"shaelynl"},"content":"            } else if (tempStr.contains(\"[D]\")) {"},{"lineNumber":235,"author":{"gitId":"shaelynl"},"content":"                String[] strArray \u003d cmd.split(\"by:\", 2);"},{"lineNumber":236,"author":{"gitId":"shaelynl"},"content":"                String inst \u003d strArray[0].substring(0, strArray[0].length() - 2);"},{"lineNumber":237,"author":{"gitId":"shaelynl"},"content":"                String date \u003d strArray[1].substring(0, strArray[1].length() - 1).trim();"},{"lineNumber":238,"author":{"gitId":"shaelynl"},"content":"                try {"},{"lineNumber":239,"author":{"gitId":"shaelynl"},"content":"                    Date deadlineDate \u003d new SimpleDateFormat(\"E MMM dd HH:mm:ss Z yyyy\").parse(date);"},{"lineNumber":240,"author":{"gitId":"shaelynl"},"content":"                    Deadline deadlineTask \u003d new Deadline(inst + \" \", deadlineDate);"},{"lineNumber":241,"author":{"gitId":"shaelynl"},"content":"                    if (!checkForTick.contains(\" \")) {"},{"lineNumber":242,"author":{"gitId":"shaelynl"},"content":"                        deadlineTask.markAsDone();"},{"lineNumber":243,"author":{"gitId":"shaelynl"},"content":"                    }"},{"lineNumber":244,"author":{"gitId":"shaelynl"},"content":"                    tasksArrayList.add(deadlineTask);"},{"lineNumber":245,"author":{"gitId":"shaelynl"},"content":"                } catch (Exception e) {"},{"lineNumber":246,"author":{"gitId":"shaelynl"},"content":"                    e.getStackTrace();"},{"lineNumber":247,"author":{"gitId":"shaelynl"},"content":"                }"},{"lineNumber":248,"author":{"gitId":"shaelynl"},"content":"            } else if (tempStr.contains(\"[E]\")) {"},{"lineNumber":249,"author":{"gitId":"shaelynl"},"content":"                String[] strArray \u003d cmd.split(\"at:\", 2);"},{"lineNumber":250,"author":{"gitId":"shaelynl"},"content":"                String inst \u003d strArray[0].substring(0, strArray[0].length() - 2);"},{"lineNumber":251,"author":{"gitId":"shaelynl"},"content":"                String date \u003d strArray[1].substring(0, strArray[1].length() - 1);"},{"lineNumber":252,"author":{"gitId":"shaelynl"},"content":"                Event eventTask \u003d new Event(inst + \" \", date);"},{"lineNumber":253,"author":{"gitId":"shaelynl"},"content":"                if (!checkForTick.contains(\" \")) {"},{"lineNumber":254,"author":{"gitId":"shaelynl"},"content":"                    eventTask.markAsDone();"},{"lineNumber":255,"author":{"gitId":"shaelynl"},"content":"                }"},{"lineNumber":256,"author":{"gitId":"shaelynl"},"content":"                tasksArrayList.add(eventTask);"},{"lineNumber":257,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":258,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":259,"author":{"gitId":"shaelynl"},"content":"        sc.close();"},{"lineNumber":260,"author":{"gitId":"shaelynl"},"content":"        return tasksArrayList;"},{"lineNumber":261,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":262,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":263,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":264,"author":{"gitId":"shaelynl"},"content":"     * Saves the list of tasks on to the hard disk after Mister Duke"},{"lineNumber":265,"author":{"gitId":"shaelynl"},"content":"     * has been terminated"},{"lineNumber":266,"author":{"gitId":"shaelynl"},"content":"     * @param taskArrayList list of tasks"},{"lineNumber":267,"author":{"gitId":"shaelynl"},"content":"     * @throws IOException when there is a wrong/incomplete user input"},{"lineNumber":268,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":269,"author":{"gitId":"shaelynl"},"content":"    public void save(ArrayList\u003cTask\u003e taskArrayList) throws IOException {"},{"lineNumber":270,"author":{"gitId":"shaelynl"},"content":"        FileWriter fwriter \u003d new FileWriter(this.txtFile);"},{"lineNumber":271,"author":{"gitId":"shaelynl"},"content":"        for (Task task : taskArrayList) {"},{"lineNumber":272,"author":{"gitId":"shaelynl"},"content":"            if (task instanceof ToDo) {"},{"lineNumber":273,"author":{"gitId":"shaelynl"},"content":"                fwriter.write(task.toString() + \"\\n\");"},{"lineNumber":274,"author":{"gitId":"shaelynl"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":275,"author":{"gitId":"shaelynl"},"content":"                fwriter.write(task.toString() + \"\\n\");"},{"lineNumber":276,"author":{"gitId":"shaelynl"},"content":"            } else {"},{"lineNumber":277,"author":{"gitId":"shaelynl"},"content":"                fwriter.write(task.toString() + \"\\n\");"},{"lineNumber":278,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":279,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":280,"author":{"gitId":"shaelynl"},"content":"        fwriter.close();"},{"lineNumber":281,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":282,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":283,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":284,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":285,"author":{"gitId":"shaelynl"},"content":" * The Parser class takes in the user input, parses it,"},{"lineNumber":286,"author":{"gitId":"shaelynl"},"content":" * then display the corresponding message from Mister Duke"},{"lineNumber":287,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":288,"author":{"gitId":"shaelynl"},"content":"class Parser {"},{"lineNumber":289,"author":{"gitId":"shaelynl"},"content":"    private final Ui ui;"},{"lineNumber":290,"author":{"gitId":"shaelynl"},"content":"    private Storage storage;"},{"lineNumber":291,"author":{"gitId":"shaelynl"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":292,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":293,"author":{"gitId":"shaelynl"},"content":"    public Parser(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":294,"author":{"gitId":"shaelynl"},"content":"        this.ui \u003d ui;"},{"lineNumber":295,"author":{"gitId":"shaelynl"},"content":"        this.storage \u003d storage;"},{"lineNumber":296,"author":{"gitId":"shaelynl"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":297,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":299,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":300,"author":{"gitId":"shaelynl"},"content":"     * The parse function takes in the user\u0027s input (command) and"},{"lineNumber":301,"author":{"gitId":"shaelynl"},"content":"     * returns a class that corresponds to the command"},{"lineNumber":302,"author":{"gitId":"shaelynl"},"content":"     * @param command user input"},{"lineNumber":303,"author":{"gitId":"shaelynl"},"content":"     * @return class that corresponds to the command"},{"lineNumber":304,"author":{"gitId":"shaelynl"},"content":"     * @throws DukeException when the user input is wrong/incomplete"},{"lineNumber":305,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":306,"author":{"gitId":"shaelynl"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":307,"author":{"gitId":"shaelynl"},"content":"        String input \u003d command.trim();"},{"lineNumber":308,"author":{"gitId":"shaelynl"},"content":"        String[] strArray \u003d input.split(\" \", 2);"},{"lineNumber":309,"author":{"gitId":"shaelynl"},"content":"        String cmd \u003d strArray[0].trim();"},{"lineNumber":310,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":311,"author":{"gitId":"shaelynl"},"content":"        if (cmd.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":312,"author":{"gitId":"shaelynl"},"content":"            return new ToDoCommand(command);"},{"lineNumber":313,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":314,"author":{"gitId":"shaelynl"},"content":"            return new DeadlineCommand(command);"},{"lineNumber":315,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"event\")) {"},{"lineNumber":316,"author":{"gitId":"shaelynl"},"content":"            return new EventCommand(command);"},{"lineNumber":317,"author":{"gitId":"shaelynl"},"content":"        } else if (input.equalsIgnoreCase(\"list\")) {"},{"lineNumber":318,"author":{"gitId":"shaelynl"},"content":"            return new ListCommand(command);"},{"lineNumber":319,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"done\")) {"},{"lineNumber":320,"author":{"gitId":"shaelynl"},"content":"            return new DoneCommand(command);"},{"lineNumber":321,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"delete\")) {"},{"lineNumber":322,"author":{"gitId":"shaelynl"},"content":"            return new DeleteCommand(command);"},{"lineNumber":323,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"bye\")) {"},{"lineNumber":324,"author":{"gitId":"shaelynl"},"content":"            return new ExitCommand(command);"},{"lineNumber":325,"author":{"gitId":"shaelynl"},"content":"        } else if (cmd.equalsIgnoreCase(\"find\")) {"},{"lineNumber":326,"author":{"gitId":"shaelynl"},"content":"            return new FindCommand(command);"},{"lineNumber":327,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":328,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Oops! I\u0027m sorry but I don\u0027t know what you mean by that :(\");"},{"lineNumber":329,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":332,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":333,"author":{"gitId":"shaelynl"},"content":"abstract class Command {"},{"lineNumber":334,"author":{"gitId":"shaelynl"},"content":"    public abstract void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException;"},{"lineNumber":335,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":336,"author":{"gitId":"shaelynl"},"content":"    public abstract boolean isRunning();"},{"lineNumber":337,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":338,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":339,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":340,"author":{"gitId":"shaelynl"},"content":" * When the user inputs a ToDo task, the ToDoCommand is returned"},{"lineNumber":341,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":342,"author":{"gitId":"shaelynl"},"content":"class ToDoCommand extends Command {"},{"lineNumber":343,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":344,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":345,"author":{"gitId":"shaelynl"},"content":"    public ToDoCommand(String command) {"},{"lineNumber":346,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":347,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":349,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":350,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":351,"author":{"gitId":"shaelynl"},"content":"        String input \u003d command.trim();"},{"lineNumber":352,"author":{"gitId":"shaelynl"},"content":"        String[] strArray \u003d input.split(\" \", 2);"},{"lineNumber":353,"author":{"gitId":"shaelynl"},"content":"        String cmd \u003d strArray[0];"},{"lineNumber":354,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":355,"author":{"gitId":"shaelynl"},"content":"        if (input.equalsIgnoreCase(\"todo\")) {"},{"lineNumber":356,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Could you please specify your task? :)\");"},{"lineNumber":357,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":358,"author":{"gitId":"shaelynl"},"content":"        String cmdTask \u003d strArray[1];"},{"lineNumber":359,"author":{"gitId":"shaelynl"},"content":"        ToDo tempTask \u003d new ToDo(cmdTask);"},{"lineNumber":360,"author":{"gitId":"shaelynl"},"content":"        taskList.add(tempTask);"},{"lineNumber":361,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskAdded(tempTask);"},{"lineNumber":362,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskList(taskList.size());"},{"lineNumber":363,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":365,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":366,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":367,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":368,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":369,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":370,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":371,"author":{"gitId":"shaelynl"},"content":" * When the user inputs a Deadline task, the DeadlineCommand is returned"},{"lineNumber":372,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":373,"author":{"gitId":"shaelynl"},"content":"class DeadlineCommand extends Command {"},{"lineNumber":374,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":375,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":376,"author":{"gitId":"shaelynl"},"content":"    public DeadlineCommand(String command) {"},{"lineNumber":377,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":378,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":379,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":380,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":381,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":382,"author":{"gitId":"shaelynl"},"content":"        String input \u003d command.trim();"},{"lineNumber":383,"author":{"gitId":"shaelynl"},"content":"        if (input.equalsIgnoreCase(\"deadline\")) {"},{"lineNumber":384,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Could you please specify your task? :)\");"},{"lineNumber":385,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":386,"author":{"gitId":"shaelynl"},"content":"        "},{"lineNumber":387,"author":{"gitId":"shaelynl"},"content":"        String[] strArray \u003d input.split(\" \", 2);"},{"lineNumber":388,"author":{"gitId":"shaelynl"},"content":"        if (!strArray[1].contains(\"/by\")) {"},{"lineNumber":389,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Uh oh! Please specify a timing using /by.\");"},{"lineNumber":390,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":391,"author":{"gitId":"shaelynl"},"content":"        "},{"lineNumber":392,"author":{"gitId":"shaelynl"},"content":"        String cmd \u003d strArray[0];"},{"lineNumber":393,"author":{"gitId":"shaelynl"},"content":"        String cmdTask \u003d strArray[1];"},{"lineNumber":394,"author":{"gitId":"shaelynl"},"content":"        String[] tempStrArray \u003d cmdTask.split(\"/by\", 2);"},{"lineNumber":395,"author":{"gitId":"shaelynl"},"content":"        String inputDate \u003d tempStrArray[1].trim();"},{"lineNumber":396,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":397,"author":{"gitId":"shaelynl"},"content":"        SimpleDateFormat format \u003d new SimpleDateFormat(\"dd-MM-yyyy HHmm\", Locale.ENGLISH);"},{"lineNumber":398,"author":{"gitId":"shaelynl"},"content":"        Date date;"},{"lineNumber":399,"author":{"gitId":"shaelynl"},"content":"        try {"},{"lineNumber":400,"author":{"gitId":"shaelynl"},"content":"            date \u003d format.parse(inputDate);"},{"lineNumber":401,"author":{"gitId":"shaelynl"},"content":"        } catch (Exception e) {"},{"lineNumber":402,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Uh oh! Please enter a timing in the format dd-mm-yyyy HHmm\");"},{"lineNumber":403,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":404,"author":{"gitId":"shaelynl"},"content":"        Deadline tempTask \u003d new Deadline(tempStrArray[0], date);"},{"lineNumber":405,"author":{"gitId":"shaelynl"},"content":"        taskList.add(tempTask);"},{"lineNumber":406,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskAdded(tempTask);"},{"lineNumber":407,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskList(taskList.size());"},{"lineNumber":408,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":409,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":410,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":411,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":412,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":413,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":414,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":415,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":416,"author":{"gitId":"shaelynl"},"content":" * When the user inputs an Event task, the EventCommand is returned"},{"lineNumber":417,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":418,"author":{"gitId":"shaelynl"},"content":"class EventCommand extends Command {"},{"lineNumber":419,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":420,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":421,"author":{"gitId":"shaelynl"},"content":"    public EventCommand(String command) {"},{"lineNumber":422,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":423,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":424,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":425,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":426,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":427,"author":{"gitId":"shaelynl"},"content":"        String input \u003d command.trim();"},{"lineNumber":428,"author":{"gitId":"shaelynl"},"content":"        if (input.equalsIgnoreCase(\"event\")) {"},{"lineNumber":429,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Could you please specify your task? :)\");"},{"lineNumber":430,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":431,"author":{"gitId":"shaelynl"},"content":"        String[] strArray \u003d input.split(\" \", 2);"},{"lineNumber":432,"author":{"gitId":"shaelynl"},"content":"        String cmd \u003d strArray[0];"},{"lineNumber":433,"author":{"gitId":"shaelynl"},"content":"        String cmdTask \u003d strArray[1];"},{"lineNumber":434,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":435,"author":{"gitId":"shaelynl"},"content":"        if (!strArray[1].contains(\"/at\")) {"},{"lineNumber":436,"author":{"gitId":"shaelynl"},"content":"            throw new DukeException(\"     Uh oh! Please specify a timing using /at.\");"},{"lineNumber":437,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":438,"author":{"gitId":"shaelynl"},"content":"        String[] tempStrArray \u003d cmdTask.split(\"/at\", 2);"},{"lineNumber":439,"author":{"gitId":"shaelynl"},"content":"        Event tempTask \u003d new Event(tempStrArray[0], tempStrArray[1]);"},{"lineNumber":440,"author":{"gitId":"shaelynl"},"content":"        taskList.add(tempTask);"},{"lineNumber":441,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskAdded(tempTask);"},{"lineNumber":442,"author":{"gitId":"shaelynl"},"content":"        ui.showTaskList(taskList.size());"},{"lineNumber":443,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":444,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":445,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":446,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":447,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":448,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":449,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":450,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":451,"author":{"gitId":"shaelynl"},"content":" * When the user requests for the current list of tasks,"},{"lineNumber":452,"author":{"gitId":"shaelynl"},"content":" * the ListCommand is called"},{"lineNumber":453,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":454,"author":{"gitId":"shaelynl"},"content":"class ListCommand extends Command {"},{"lineNumber":455,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":456,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":457,"author":{"gitId":"shaelynl"},"content":"    public ListCommand(String command) {"},{"lineNumber":458,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":459,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":460,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":461,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":462,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":463,"author":{"gitId":"shaelynl"},"content":"        ui.showList(taskList);"},{"lineNumber":464,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":465,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":466,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":467,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":468,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":469,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":470,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":471,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":472,"author":{"gitId":"shaelynl"},"content":" * When the user marks a specified task as done,"},{"lineNumber":473,"author":{"gitId":"shaelynl"},"content":" * the DoneCommand is called"},{"lineNumber":474,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":475,"author":{"gitId":"shaelynl"},"content":"class DoneCommand extends Command {"},{"lineNumber":476,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":477,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":478,"author":{"gitId":"shaelynl"},"content":"    public DoneCommand(String command) {"},{"lineNumber":479,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":480,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":481,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":482,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":483,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":484,"author":{"gitId":"shaelynl"},"content":"        String[] commandArray \u003d command.trim().split(\" \");"},{"lineNumber":485,"author":{"gitId":"shaelynl"},"content":"        if (Integer.parseInt(commandArray[1]) \u003e taskList.size()) {"},{"lineNumber":486,"author":{"gitId":"shaelynl"},"content":"            ui.showOutOfBounds();"},{"lineNumber":487,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":488,"author":{"gitId":"shaelynl"},"content":"            Task completedTask \u003d taskList.get(Integer.parseInt(commandArray[1]) - 1);"},{"lineNumber":489,"author":{"gitId":"shaelynl"},"content":"            completedTask.markAsDone();"},{"lineNumber":490,"author":{"gitId":"shaelynl"},"content":"            ui.showTaskDone(completedTask);"},{"lineNumber":491,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":492,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":493,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":494,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":495,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":496,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":497,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":498,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":499,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":500,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":501,"author":{"gitId":"shaelynl"},"content":" * When the user deletes a specified task from the task list,"},{"lineNumber":502,"author":{"gitId":"shaelynl"},"content":" * the DeleteCommand is called"},{"lineNumber":503,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":504,"author":{"gitId":"shaelynl"},"content":"class DeleteCommand extends Command {"},{"lineNumber":505,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":506,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":507,"author":{"gitId":"shaelynl"},"content":"    public DeleteCommand(String command) {"},{"lineNumber":508,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":509,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":510,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":511,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":512,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":513,"author":{"gitId":"shaelynl"},"content":"        String[] commandArray \u003d command.trim().split(\" \");"},{"lineNumber":514,"author":{"gitId":"shaelynl"},"content":"        if (Integer.parseInt(commandArray[1]) \u003e taskList.size()) {"},{"lineNumber":515,"author":{"gitId":"shaelynl"},"content":"            ui.showOutOfBounds();"},{"lineNumber":516,"author":{"gitId":"shaelynl"},"content":"        } else {"},{"lineNumber":517,"author":{"gitId":"shaelynl"},"content":"            ui.showTaskDelete(taskList, commandArray[1]);"},{"lineNumber":518,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":519,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":520,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":521,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":522,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":523,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":524,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":525,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":526,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":527,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":528,"author":{"gitId":"shaelynl"},"content":" * When the user bids goodbye, the Exit Command is called"},{"lineNumber":529,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":530,"author":{"gitId":"shaelynl"},"content":"class ExitCommand extends Command {"},{"lineNumber":531,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":532,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":533,"author":{"gitId":"shaelynl"},"content":"    public ExitCommand(String command) {"},{"lineNumber":534,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":535,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":536,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":537,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":538,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":539,"author":{"gitId":"shaelynl"},"content":"        ui.showGoodbye();"},{"lineNumber":540,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":541,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":542,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":543,"author":{"gitId":"shaelynl"},"content":"        return false;"},{"lineNumber":544,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":545,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":546,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":547,"author":{"gitId":"shaelynl"},"content":"class FindCommand extends Command {"},{"lineNumber":548,"author":{"gitId":"shaelynl"},"content":"    private String command;"},{"lineNumber":549,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":550,"author":{"gitId":"shaelynl"},"content":"    public FindCommand(String command){"},{"lineNumber":551,"author":{"gitId":"shaelynl"},"content":"        this.command \u003d command;"},{"lineNumber":552,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":553,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":554,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":555,"author":{"gitId":"shaelynl"},"content":"    public void executeCommand(Ui ui, Storage storage, ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":556,"author":{"gitId":"shaelynl"},"content":"        String input \u003d command.trim();"},{"lineNumber":557,"author":{"gitId":"shaelynl"},"content":"        String[] strArray \u003d input.split(\" \", 2);"},{"lineNumber":558,"author":{"gitId":"shaelynl"},"content":"        String cmd \u003d strArray[0];"},{"lineNumber":559,"author":{"gitId":"shaelynl"},"content":"        String keyword \u003d strArray[1];"},{"lineNumber":560,"author":{"gitId":"shaelynl"},"content":"        ArrayList\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":561,"author":{"gitId":"shaelynl"},"content":"        for (Task task : taskList) {"},{"lineNumber":562,"author":{"gitId":"shaelynl"},"content":"            if (task.toString().contains(keyword)) {"},{"lineNumber":563,"author":{"gitId":"shaelynl"},"content":"                tempTaskList.add(task);"},{"lineNumber":564,"author":{"gitId":"shaelynl"},"content":"            }"},{"lineNumber":565,"author":{"gitId":"shaelynl"},"content":"        }"},{"lineNumber":566,"author":{"gitId":"shaelynl"},"content":"        ui.showMatchingItems(tempTaskList);"},{"lineNumber":567,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":568,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":569,"author":{"gitId":"shaelynl"},"content":"    public boolean isRunning() {"},{"lineNumber":570,"author":{"gitId":"shaelynl"},"content":"        return true;"},{"lineNumber":571,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":572,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":573,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":574,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":575,"author":{"gitId":"shaelynl"},"content":" * The Task class is a parent class for ToDo, Deadline and Event"},{"lineNumber":576,"author":{"gitId":"shaelynl"},"content":" * whereby each Task has a boolean to indicate whether it has been done"},{"lineNumber":577,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":578,"author":{"gitId":"shaelynl"},"content":"class Task {"},{"lineNumber":579,"author":{"gitId":"shaelynl"},"content":"    protected String description;"},{"lineNumber":580,"author":{"gitId":"shaelynl"},"content":"    protected boolean isDone;"},{"lineNumber":581,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":582,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":583,"author":{"gitId":"shaelynl"},"content":"     * The Task applies to inputs with sufficient information to classify as a todo, deadline"},{"lineNumber":584,"author":{"gitId":"shaelynl"},"content":"     * or event task."},{"lineNumber":585,"author":{"gitId":"shaelynl"},"content":"     * @param description describes the details of a task supplied to the chat bot"},{"lineNumber":586,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":587,"author":{"gitId":"shaelynl"},"content":"    public Task(String description) {"},{"lineNumber":588,"author":{"gitId":"shaelynl"},"content":"        this.description \u003d description;"},{"lineNumber":589,"author":{"gitId":"shaelynl"},"content":"        this.isDone \u003d false;"},{"lineNumber":590,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":591,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":592,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":593,"author":{"gitId":"shaelynl"},"content":"     * For a given task, indicate whether it has been done using a space or a tick"},{"lineNumber":594,"author":{"gitId":"shaelynl"},"content":"     * @return if the task has been done, return a tick, else return a space"},{"lineNumber":595,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":596,"author":{"gitId":"shaelynl"},"content":"    public String getStatusIcon() {"},{"lineNumber":597,"author":{"gitId":"shaelynl"},"content":"        return (isDone ? \"\\u2713\" : \" \"); //return tick symbol"},{"lineNumber":598,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":599,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":600,"author":{"gitId":"shaelynl"},"content":"    /**"},{"lineNumber":601,"author":{"gitId":"shaelynl"},"content":"     * For a given task, if it is done, mark it as done by changing the boolean isDone to true"},{"lineNumber":602,"author":{"gitId":"shaelynl"},"content":"     */"},{"lineNumber":603,"author":{"gitId":"shaelynl"},"content":"    public void markAsDone() {"},{"lineNumber":604,"author":{"gitId":"shaelynl"},"content":"        isDone \u003d true;"},{"lineNumber":605,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":606,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":607,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":608,"author":{"gitId":"shaelynl"},"content":"    public String toString() {"},{"lineNumber":609,"author":{"gitId":"shaelynl"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":610,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":611,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":612,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":613,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":614,"author":{"gitId":"shaelynl"},"content":" * The ToDo class is a child class of the Task Class,"},{"lineNumber":615,"author":{"gitId":"shaelynl"},"content":" * it specifies the task as a ToDo using [T]"},{"lineNumber":616,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":617,"author":{"gitId":"shaelynl"},"content":"class ToDo extends Task {"},{"lineNumber":618,"author":{"gitId":"shaelynl"},"content":"    public ToDo(String description) {"},{"lineNumber":619,"author":{"gitId":"shaelynl"},"content":"        super(description);"},{"lineNumber":620,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":621,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":622,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":623,"author":{"gitId":"shaelynl"},"content":"    public String toString() {"},{"lineNumber":624,"author":{"gitId":"shaelynl"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":625,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":626,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":627,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":628,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":629,"author":{"gitId":"shaelynl"},"content":" * The Deadline class is a child class of the Task Class,"},{"lineNumber":630,"author":{"gitId":"shaelynl"},"content":" * it specifies the task as a Deadline using [D]"},{"lineNumber":631,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":632,"author":{"gitId":"shaelynl"},"content":"class Deadline extends Task {"},{"lineNumber":633,"author":{"gitId":"shaelynl"},"content":"    protected Date deadlineBy;"},{"lineNumber":634,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":635,"author":{"gitId":"shaelynl"},"content":"    public Deadline(String description, Date deadlineBy) {"},{"lineNumber":636,"author":{"gitId":"shaelynl"},"content":"        super(description);"},{"lineNumber":637,"author":{"gitId":"shaelynl"},"content":"        this.deadlineBy \u003d deadlineBy;"},{"lineNumber":638,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":639,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":640,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":641,"author":{"gitId":"shaelynl"},"content":"    public String toString() {"},{"lineNumber":642,"author":{"gitId":"shaelynl"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + deadlineBy + \")\";"},{"lineNumber":643,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":644,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":645,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":646,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":647,"author":{"gitId":"shaelynl"},"content":" * The Event class is a child class of the Task Class,"},{"lineNumber":648,"author":{"gitId":"shaelynl"},"content":" * it specifies the task as an Event using [E]"},{"lineNumber":649,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":650,"author":{"gitId":"shaelynl"},"content":"class Event extends Task {"},{"lineNumber":651,"author":{"gitId":"shaelynl"},"content":"    protected String at;"},{"lineNumber":652,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":653,"author":{"gitId":"shaelynl"},"content":"    public Event(String description, String at) {"},{"lineNumber":654,"author":{"gitId":"shaelynl"},"content":"        super(description);"},{"lineNumber":655,"author":{"gitId":"shaelynl"},"content":"        this.at \u003d at;"},{"lineNumber":656,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":657,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":658,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":659,"author":{"gitId":"shaelynl"},"content":"    public String toString() {"},{"lineNumber":660,"author":{"gitId":"shaelynl"},"content":"        return \"[E]\" + super.toString() + \"(at:\" + at + \")\";"},{"lineNumber":661,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":662,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":663,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":664,"author":{"gitId":"shaelynl"},"content":"/**"},{"lineNumber":665,"author":{"gitId":"shaelynl"},"content":" * The DukeException is a child class of the Java Exception class"},{"lineNumber":666,"author":{"gitId":"shaelynl"},"content":" * which throws an exception message when an invalid input is given to the chat bot"},{"lineNumber":667,"author":{"gitId":"shaelynl"},"content":" * either a wrong message (unidentified input) or an unclear message (not specific enough)"},{"lineNumber":668,"author":{"gitId":"shaelynl"},"content":" */"},{"lineNumber":669,"author":{"gitId":"shaelynl"},"content":"class DukeException extends Exception {"},{"lineNumber":670,"author":{"gitId":"shaelynl"},"content":"    public DukeException(String message) {"},{"lineNumber":671,"author":{"gitId":"shaelynl"},"content":"        super(message);"},{"lineNumber":672,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":673,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":674,"author":{"gitId":"shaelynl"},"content":"    @Override"},{"lineNumber":675,"author":{"gitId":"shaelynl"},"content":"    public String toString() {"},{"lineNumber":676,"author":{"gitId":"shaelynl"},"content":"        return super.getMessage();"},{"lineNumber":677,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":678,"author":{"gitId":"shaelynl"},"content":"}"}],"authorContributionMap":{"shaelynl":678}},{"path":"src/main/java/build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"shaelynl"},"content":"apply plugin: \u0027java\u0027"}],"authorContributionMap":{"shaelynl":1}},{"path":"src/test/java/duke/MisterDuke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shaelynl"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":3,"author":{"gitId":"shaelynl"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":5,"author":{"gitId":"shaelynl"},"content":"class ToDoTest {"},{"lineNumber":6,"author":{"gitId":"shaelynl"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"shaelynl"},"content":"    public void testToDoString(){"},{"lineNumber":8,"author":{"gitId":"shaelynl"},"content":"        ToDo toDoTask \u003d new ToDo(\"read book\");"},{"lineNumber":9,"author":{"gitId":"shaelynl"},"content":"        assertEquals(\"[T][ ] read book\", toDoTask.toString());"},{"lineNumber":10,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":12,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":13,"author":{"gitId":"shaelynl"},"content":"class EventTest {"},{"lineNumber":14,"author":{"gitId":"shaelynl"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"shaelynl"},"content":"    public void testEventString() {"},{"lineNumber":16,"author":{"gitId":"shaelynl"},"content":"        Event eventTask \u003d new Event(\"proj meeting \", \" 2pm\");"},{"lineNumber":17,"author":{"gitId":"shaelynl"},"content":"        assertEquals(\"[E][ ] proj meeting (at: 2pm)\", eventTask.toString());"},{"lineNumber":18,"author":{"gitId":"shaelynl"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"shaelynl"},"content":"}"},{"lineNumber":20,"author":{"gitId":"shaelynl"},"content":""},{"lineNumber":21,"author":{"gitId":"shaelynl"},"content":""}],"authorContributionMap":{"shaelynl":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"shaelynl"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"shaelynl"},"content":"deadline return book /by Monday"},{"lineNumber":3,"author":{"gitId":"shaelynl"},"content":"event project meeting /at Tues 2-4pm"},{"lineNumber":4,"author":{"gitId":"shaelynl"},"content":"list"},{"lineNumber":5,"author":{"gitId":"shaelynl"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"shaelynl"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"shaelynl"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"shaelynl"},"content":"list"},{"lineNumber":9,"author":{"gitId":"shaelynl"},"content":"bye"}],"authorContributionMap":{"shaelynl":9}}]
