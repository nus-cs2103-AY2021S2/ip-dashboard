[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"1. After the importing is complete, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"   ![img.png](./././docs/images/successfulSetup.png)"}],"authorContributionMap":{"JodyLorah":2,"-":17}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":15,"-":45}},{"path":"data/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"[T][ ] this"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"[T][ ] that"}],"authorContributionMap":{"JodyLorah":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"## Content Page"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"1. [Introduction](#1-introduction)"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"2. [Getting Started](#2-getting-started)"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"3. [Features](#3-features)"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"4. [Additional Help](#4-additional-help)"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"5. [Acknowledgements](#5-acknowledgements)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"## 1. Introduction "},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"Welcome to Duke, your one stop task manager! :smile:"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"With great usability and a simple design, it\u0027s never been easier to manage your tasks!"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"## 2. Getting Started"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"1. Ensure that you have at least `Java 11` installed."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"2. Download the software [here](https://github.com/JodyLorah/ip/releases/tag/v0.2)"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"3. Once downloaded, you should see the welcome page:"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/successfulSetup.png)"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"   "},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"4. Great! You\u0027re all set. Happy exploring! :grin:"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"## 3. Features"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"1. [Adding Tasks](#31-adding-tasks)"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"2. [Deleting Tasks](#32-deleting-tasks)"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"3. [Updating Tasks](#33-updating-tasks)"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"4. [Marking Task as Done](#34-marking-task-as-done)"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"5. [View Tasks](#35-view-tasks)"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"6. [Find Tasks](#36-find-tasks)"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"7. [Exit](#37-exit)"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"8. [In-App Help](#38-in-app-help)"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"### 3.1 Adding Tasks"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"###### Tutors suddenly bombarding you with assignments and you can\u0027t keep track of it? :no_mouth: Let `Duke` help you!"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"##### There are 3 different types of tasks you can add: `todo`, `deadline` and `event` tasks."},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"##### `todo` task: _`todo \u003ctask name\u003e`_ "},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"* _Add a task to be done with no specific timing._ \\"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/todo.png)"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"##### `deadline` task: _`deadline \u003ctask name\u003e /by \u003cDD/MM/YYYY HH:mm\u003e`_"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"* _Add a task with a deadline and time._ \\"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/deadline.png)"},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"##### `event` task: _`event \u003ctask name\u003e /at \u003cDD/MM/YYYY HH:mm\u003e`_"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"* _Add an event with its corresponding date and time._ \\"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/event.png)"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"  "},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"### 3.2 Deleting Tasks"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"###### Added something wrongly? :cold_sweat: Don\u0027t worry! "},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"#### Change it with the `delete` instruction."},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"##### `delete`: _`delete \u003ctask number\u003e`_"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"* _Delete a task corresponding to its task number._ \\"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"![img_4.png](images/delete.png)"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"### 3.3 Updating Tasks"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"###### Teammates suddenly rescheduled your meeting timing? :unamused: No problem. "},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"#### Just `update` the corresponding task!"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"##### `update`: _`update \u003ctask number\u003e /to \u003c`[task format](#31-adding-tasks)`\u003e`_"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"* _Update details of a task corresponding to its task number._ \\"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"![img_2.png](images/update.png)"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"  "},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"### 3.4 Marking Task as Done"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"###### Finally done with the task but don\u0027t want to delete it so you can see how much you accomplished? :nerd_face: "},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"#### Just mark it as `done`."},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"##### `done`: _`done \u003ctask number\u003e`_ "},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"* _Marks task with a `X` to show it\u0027s done._ \\"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"![img_1.png](images/done.png)"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"  "},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"### 3.5 View Tasks"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"###### So many tasks you can\u0027t even remember what you have? :exploding_head: "},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"#### Just type `list` to view all the tasks you have!"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"##### `list`: _`list`_"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"* _Shows a list of all added tasks._ \\"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/list.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"### 3.6 Find Tasks"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"###### I swear I still had to do something from 2103 but where is it on my list? :woozy_face:"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"#### Just `find` the keyword you are looking for!"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"##### `find`: _`find \u003ckeyword\u003e`_"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"* _Shows a list of all the tasks with the given keyword._ \\"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"![img_3.png](images/find.png)"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"  "},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"### 3.7 Exit"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"###### Finally done with organising my tasks. Time to start on them :sob:"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"#### Just type `bye` to close `Duke`."},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"##### `bye`: _`bye`_"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"* _Saves all tasks added before closing the app._ \\"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"![img.png](images/bye.png)"},{"lineNumber":88,"author":{"gitId":"-"},"content":""},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"### 3.8 In-App Help"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"###### So many instructions, so little brain! How to remember all the instructions :astonished:"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"#### Just type `help` in `Duke` to see all available commands!"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"##### `help`: _`help`_"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"* _Shows a list of all commands._ \\"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"![img_1.png](images/help.png)"},{"lineNumber":95,"author":{"gitId":"-"},"content":""},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"## 4. Additional Help"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"Q: Do I need to copy the Github repo to be able to use Duke? \\"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"A: Nope you just need to [download](https://github.com/JodyLorah/ip/releases/tag/v0.2) the .jar file to run it!"},{"lineNumber":99,"author":{"gitId":"-"},"content":""},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"Q: Why am I unable to run the JAR file? \\"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"A: Please ensure that your laptop supports at least `Java 11`."},{"lineNumber":102,"author":{"gitId":"-"},"content":""},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"If you have any other queries, feel free to contact me on [GitHub](https://github.com/JodyLorah)!"},{"lineNumber":104,"author":{"gitId":"-"},"content":""},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"## 5. Acknowledgements"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"Thank you [@ruilingk](https://github.com/ruilingk) for letting me reference your UI. \\"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"[Image of DaDuke](https://www.refinery29.com/images/10251619.jpg) \\"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"[Image of DaUser](https://www.refinery29.com/en-us/2020/12/10226515/bridgerton-netflix-cast-characters-actors#slide-1)"}],"authorContributionMap":{"JodyLorah":93,"-":15}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * Main class for programme to run."},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public Duke() {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        storage \u003d new Storage(\"data/data.txt\");"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"            tasks \u003d storage.loadData();"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Gets response from user"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     * @param input user\u0027s response"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     * @return Duke\u0027s reply"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    String getResponse(String input) {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        ui.showWelcome();"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            boolean isExit \u003d command.isExit();"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"            if (isExit) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"                return ui.exitDuke();"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            return command.execute(tasks, input, storage);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            return e.getMessage();"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":48,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Main;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     * A main class to workaround classpath issues."},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.DialogBox;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":" * Controller for duke.MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * Initialises the main window."},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * Initialise Duke"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * @param dukeObject to be set to Duke"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    public void setDuke(Duke dukeObject) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        duke \u003d dukeObject;"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    private void handleUserInput() {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"            PauseTransition pause \u003d new PauseTransition(Duration.seconds(3));"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"            pause.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"            pause.play();"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        userInput.clear();"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":70}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" * AddCommand class which is a type of Command to be executed."},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Handles Todo, Deadline and Event commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    public AddCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        String type \u003d input.split(\" \")[0];"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"            if (type.equals(\"todo\")) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addToDo(input);"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            } else if (type.equals(\"deadline\")) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addDeadline(input);"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"            } else if (type.equals(\"event\")) {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addEvent(input);"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            assert false : \"All task commands should be handled.\";"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            return e.getMessage();"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        return \"\";"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":59}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * ByeCommand class which is a type of Command to be executed."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final String line \u003d \"------------------------------------------\";"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Handles Bye commands."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public ByeCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        return \"Bye. Hope to see you again soon!\\n\" + \"This window will close in 3 seconds.\";"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        return true;"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":43}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" * Abstract class for all various commands."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    public abstract String execute(TaskList tasks, String input, Storage storage)"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            throws IOException, DukeException;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    public abstract boolean isExit();"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":28}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeleteException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * DeleteCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Handles Delete commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case there is no input"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \", 2)[1];"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            return tasks.delete(input);"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeleteException();"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":49}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDoneException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * DoneCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Handles Done commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public DoneCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case file is corrupt"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \", 2)[1];"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            return tasks.markDone(input);"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDoneException();"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":52}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.InvalidInstructionException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * ListCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Handles Find commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public FindCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \", 2) [1];"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            return tasks.find(input);"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"            throw new InvalidInstructionException();"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":52}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * ByeCommand class which is a type of Command to be executed."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class HelpCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final String line \u003d \"------------------------------------------\";"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Handles Help commands."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public HelpCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        String print \u003d \"Here is a list of available commands : \\n\""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo add tasks: \\n\""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"                + \"\\t \\t - todo \u003ctask name\u003e \\n\""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"                + \"\\t \\t - deadline \u003ctask name\u003e /by \u003cDD-MM-YYYY HH:mm\u003e \\n\""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"                + \"\\t \\t - event \u003ctask name\u003e /at \u003cDD-MM-YYYY HH:mm\u003e \\n\""},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo delete task: \\n\" + \"\\t \\t - delete \u003ctask number\u003e \\n\""},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo update task information: \\n\" + \"\\t \\t - update \u003ctask number\u003e /to \u003ctask details\u003e \\n\""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo mark task as done: \\n\" + \"\\t \\t - done \u003ctask number\u003e \\n\""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo view all tasks added: \\n\" + \"\\t \\t - list \\n\""},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo find tasks by keyword: \\n\" + \"\\t \\t - find \u003ckeyword\u003e \\n\""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo view all available commands again: \\n\" + \"\\t \\t - help \\n\""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"                + \"\\tTo exit Duke: \\n\" + \"\\t \\t - bye \\n\";"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        return print;"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":60}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * ListCommand class which is a type of Command to be executed."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Handles List commands."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public ListCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"            return \"You have no tasks on your list.\\nAdd one now!\";"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            return tasks.list();"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":47}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyUpdateException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * ListCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Handles Find commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public UpdateCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"        assert !input.isEmpty() : \"Input should not be blank.\";"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \") [1];"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            return tasks.updateEvent(input);"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyUpdateException();"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":51}},{"path":"src/main/java/duke/exception/AlphabetsInsteadOfNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user keys in alphabet when he is supposed to key in a number."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class AlphabetsInsteadOfNumberException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    public AlphabetsInsteadOfNumberException() {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"        super(\"I\u0027m sorry, but you keyed in an alphabet.\\n\""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"                + \"You can only delete the number from the list.\");"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * General exception for the Duke class."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":14}},{"path":"src/main/java/duke/exception/EmptyDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the date or time of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDateTimeException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"Please key in a valid date and/or time in the format\\n \""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"dd/MM/yyyy HH:mm.\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDeadlineException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDeadlineException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a deadline cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027deadline return books /by 12/12/2012 12:00\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task to delete."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDeleteException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDeleteException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a delete cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027delete 1\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task to delete."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDoneException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDoneException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a done cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027done 1\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyEventException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyEventException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of an event cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027event pick the kids /at 12/12/2012 12:00\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyFindException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task to delete."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyFindException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyFindException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a delete cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027delete 1\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyListDeletionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user tries to delete item from an empty list."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"public class EmptyListDeletionException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    public EmptyListDeletionException() {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"        super(\"I\u0027m sorry, but list is empty.\""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"            + \"You have to add an item before you can delete it.\\n\");"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/exception/EmptyTodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyTodoException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyTodoException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a todo cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027todo read a book\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyUpdateException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyUpdateException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of an update cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027update 1 details /to do some work\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/InvalidInstructionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user inputs an invalid task detail."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class InvalidInstructionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public InvalidInstructionException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"You have keyed in an invalid instruction.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Type \u0027help\u0027 to get the full list of available commands.\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/InvalidUpdateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user inputs an invalid update task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class InvalidUpdateException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public InvalidUpdateException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"You have keyed in an invalid instruction.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027update 1 details /to do some work\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/NoSuchIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user inputs an invalid update task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class NoSuchIndexException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public NoSuchIndexException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"You have keyed in an invalid index.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Add an item to that index to update it!\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/exception/WrongUpdateTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user inputs an invalid task detail."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class WrongUpdateTypeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public WrongUpdateTypeException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"You have keyed in an invalid instruction.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Please key in details only corresponding to the type of task.\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.command.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import duke.command.UpdateCommand;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.InvalidInstructionException;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" * Parser class to handle all commands and create the correct command."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     * Returns command corresponding to input."},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"     * @param input user\u0027s input to determine which type of command"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     * @return c Command of the input"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * @throws InvalidInstructionException If user keys in an invalid input"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    public static Command parse(String input) throws InvalidInstructionException {"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"        String type \u003d input.split(\" \")[0];"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        Command command \u003d null;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        if (type.equals(\"todo\")) {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"deadline\")) {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"event\")) {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new DeleteCommand(input);"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new DoneCommand(input);"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"list\")) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new ListCommand(input);"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"find\")) {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new FindCommand(input);"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"bye\")) {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new ByeCommand(input);"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"update\")) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new UpdateCommand(input);"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"help\")) {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new HelpCommand(input);"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"            throw new InvalidInstructionException();"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        assert false : \"All possibilities have been handled.\";"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        return command;"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":57}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Todo;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":" * Stores and Retrieves data from a given .txt file and loads it into TaskList."},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private File file;"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Stores test case inputs"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public Storage() {"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     * Stores data of inputs."},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public Storage(String pathName) {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        this.file \u003d new File(Paths.get(pathName).toString());"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     * Saves data back in file in designated filePath."},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     * @param taskList TaskList of data to be saved"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * @throws IOException  If file is corrupt"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    public void saveData(TaskList taskList) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            FileWriter fileWriter \u003d new FileWriter(file.getAbsolutePath());"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"                String write \u003d taskList.getInd(i) + \"\\n\";"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"                fileWriter.write(write);"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"            fileWriter.close();"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"     * Loads data from designated file and converts it to a TaskList."},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"     * @return list TaskList of all loaded data"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"     * @throws FileNotFoundException  If file cannot be found in path"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    public TaskList loadData() throws IOException {"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"        Boolean doesFileExist \u003d java.nio.file.Files.exists(Path.of(file.toString()));"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        if (doesFileExist) {"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"            try {"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"                File info \u003d new File(this.file.toString());"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"                Scanner sc \u003d new Scanner(info);"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"                while (sc.hasNextLine()) {"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"                    String task \u003d sc.nextLine();"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"                    String[] taskAsArray \u003d task.split(\"\");"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"                    String taskType \u003d taskAsArray[1];"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"                    if (taskType.equals(\"T\")) {"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"                        loadTodo(taskList, taskAsArray);"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"                    } else if (taskType.equals(\"D\")) {"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"                        loadDeadline(taskList, taskAsArray);"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"                    } else if (taskType.equals(\"E\")) {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"                        loadEvent(taskList, taskAsArray);"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"                }"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"                sc.close();"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"            } catch (IOException e) {"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"                e.getMessage();"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"        } else { //create new file in folder"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"            File folder \u003d new File(\"data\");"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"            File file \u003d new File(this.file.toString());"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"            if (!folder.exists()) {"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"                folder.mkdirs();"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"        return taskList;"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"     * Method to load todo tasks"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"     * @param taskList is the task list to add the task to"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"     * @param taskAsArray input loaded from data.txt file"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"    public void loadTodo(TaskList taskList, String[] taskAsArray) {"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"        Boolean isDone \u003d false;"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"        if (taskAsArray[4].equals(\"X\")) {"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"            isDone \u003d true;"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"        String taskDetails \u003d \"\";"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        for (int j \u003d 7; j \u003c taskAsArray.length; j++) {"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"            taskDetails +\u003d taskAsArray[j];"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"        Task todoTask \u003d new Todo(taskDetails);"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"        assert todoTask.isEmpty() : \"Task should not be empty.\";"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"        if (isDone) {"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"            todoTask.setDone();"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"        taskList.addToDo(todoTask);"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"     * Method to load deadline tasks"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"     * @param taskList is the task list to add the task to"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"     * @param taskAsArray input loaded from data.txt file"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"    public void loadDeadline(TaskList taskList, String[] taskAsArray) {"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"        Boolean isDone \u003d false;"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"        if (taskAsArray[4].equals(\"X\")) {"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"            isDone \u003d true;"},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"        String taskDetailsDateAndTime \u003d \"\";"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        for (int j \u003d 7; j \u003c taskAsArray.length; j++) {"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"            taskDetailsDateAndTime +\u003d taskAsArray[j];"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDetailsDateAndTimeAsArray \u003d taskDetailsDateAndTime.split(\"[(]\");"},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDetailsAsArray \u003d taskDetailsDateAndTimeAsArray[0].split(\"\");"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"        String taskDetails \u003d \"\";"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"        for (int k \u003d 0; k \u003c taskDetailsAsArray.length - 1; k++) {"},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"            taskDetails +\u003d taskDetailsAsArray[k];"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"        String taskDateAndTime \u003d taskDetailsDateAndTimeAsArray[1];"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDateAndTimeAsArray \u003d taskDateAndTime.split(\"by: \", 2);"},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"        taskDateAndTime \u003d taskDateAndTimeAsArray[1];"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"        String dateAndTime \u003d \"\";"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"        taskDateAndTimeAsArray \u003d taskDateAndTime.split(\"\");"},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"        for (int k \u003d 0; k \u003c taskDateAndTimeAsArray.length - 1; k++) {"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"            dateAndTime +\u003d taskDateAndTimeAsArray[k];"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"        Task deadlineTask \u003d new Deadline(taskDetails, dateTime);"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"        assert deadlineTask.isEmpty() : \"Task should not be empty.\";"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"        if (isDone) {"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"            deadlineTask.setDone();"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"        taskList.addDeadline(deadlineTask);"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"JodyLorah"},"content":"     * Method to load event tasks"},{"lineNumber":169,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"     * @param taskList is the task list to add the task to"},{"lineNumber":171,"author":{"gitId":"JodyLorah"},"content":"     * @param taskAsArray input loaded from data.txt file"},{"lineNumber":172,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"JodyLorah"},"content":"    public void loadEvent(TaskList taskList, String[] taskAsArray) {"},{"lineNumber":174,"author":{"gitId":"JodyLorah"},"content":"        Boolean isDone \u003d false;"},{"lineNumber":175,"author":{"gitId":"JodyLorah"},"content":"        if (taskAsArray[4].equals(\"X\")) {"},{"lineNumber":176,"author":{"gitId":"JodyLorah"},"content":"            isDone \u003d true;"},{"lineNumber":177,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"JodyLorah"},"content":"        String taskDetailsDateAndTime \u003d \"\";"},{"lineNumber":179,"author":{"gitId":"JodyLorah"},"content":"        for (int j \u003d 7; j \u003c taskAsArray.length; j++) {"},{"lineNumber":180,"author":{"gitId":"JodyLorah"},"content":"            taskDetailsDateAndTime +\u003d taskAsArray[j];"},{"lineNumber":181,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":182,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDetailsDateAndTimeAsArray \u003d taskDetailsDateAndTime.split(\"[(]\");"},{"lineNumber":183,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDetailsAsArray \u003d taskDetailsDateAndTimeAsArray[0].split(\"\");"},{"lineNumber":184,"author":{"gitId":"JodyLorah"},"content":"        String taskDetails \u003d \"\";"},{"lineNumber":185,"author":{"gitId":"JodyLorah"},"content":"        for (int k \u003d 0; k \u003c taskDetailsAsArray.length - 1; k++) {"},{"lineNumber":186,"author":{"gitId":"JodyLorah"},"content":"            taskDetails +\u003d taskDetailsAsArray[k];"},{"lineNumber":187,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":189,"author":{"gitId":"JodyLorah"},"content":"        String taskDateAndTime \u003d taskDetailsDateAndTimeAsArray[1];"},{"lineNumber":190,"author":{"gitId":"JodyLorah"},"content":"        String[] taskDateAndTimeAsArray \u003d taskDateAndTime.split(\"at: \", 2);"},{"lineNumber":191,"author":{"gitId":"JodyLorah"},"content":"        taskDateAndTime \u003d taskDateAndTimeAsArray[1];"},{"lineNumber":192,"author":{"gitId":"JodyLorah"},"content":"        String dateAndTime \u003d \"\";"},{"lineNumber":193,"author":{"gitId":"JodyLorah"},"content":"        taskDateAndTimeAsArray \u003d taskDateAndTime.split(\"\");"},{"lineNumber":194,"author":{"gitId":"JodyLorah"},"content":"        for (int k \u003d 0; k \u003c taskDateAndTimeAsArray.length - 1; k++) {"},{"lineNumber":195,"author":{"gitId":"JodyLorah"},"content":"            dateAndTime +\u003d taskDateAndTimeAsArray[k];"},{"lineNumber":196,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":198,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":199,"author":{"gitId":"JodyLorah"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":200,"author":{"gitId":"JodyLorah"},"content":"        Task eventTask \u003d new Event(taskDetails, dateTime);"},{"lineNumber":201,"author":{"gitId":"JodyLorah"},"content":"        assert eventTask.isEmpty() : \"Task should not be empty.\";"},{"lineNumber":202,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":203,"author":{"gitId":"JodyLorah"},"content":"        if (isDone) {"},{"lineNumber":204,"author":{"gitId":"JodyLorah"},"content":"            eventTask.setDone();"},{"lineNumber":205,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":206,"author":{"gitId":"JodyLorah"},"content":"        taskList.addEvent(eventTask);"},{"lineNumber":207,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":209,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":210,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":210}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Deadline class which creates a deadline task."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private LocalDateTime date;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private String taskType;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Creates Deadline task which keeps track of task details and deadlines."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * @param description description of the task to be saved"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param by deadline of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d by;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        this.taskType \u003d \"deadline\";"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Method to get the type of task"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @return type of task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskType() {"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        return this.taskType;"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"                + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * Method to ammend task details"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     * @params newDetails to be updated"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    public void updateTaskDateAndTime(LocalDateTime newDateTime) {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d newDateTime;"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the deadline task."},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":61}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Event class which creates an event task."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private LocalDateTime date;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private String taskType;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Creates Event task which keeps track of task details and timings."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * @param description description of the task to be saved"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param at timing of the event"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * */"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d at;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        this.taskType \u003d \"event\";"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Method to get the type of task"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @return type of task"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskType() {"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        return this.taskType;"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"                + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * Method to ammend task details"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     * @params newDetails to be updated"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    public void updateTaskDateAndTime(LocalDateTime newDateTime) {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d newDateTime;"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the event task."},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":61}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":" * Class Task which keeps track of the details of the task"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * and whether the task is done."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public abstract class Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private String details;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private boolean done;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Takes in details and creates a Task object."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * @param name details of the task"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    public Task(String name) {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"        this.details \u003d name;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        this.done \u003d false;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"        if (this.done) {"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"            String toPrint \u003d String.format(\"[X] %s\", this.details);"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"            assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"            return toPrint;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"            String toPrint \u003d String.format(\"[ ] %s\", this.details);"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"            assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"            return toPrint;"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * Ammends if the task is done."},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public void setDone() {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        this.done \u003d true;"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the task."},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        return this.details;"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskType() {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        return \"\";"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"     * Method to ammend task details"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"     * @params newDetails to be updated"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"    public void updateTaskDetails(String newDetails) {"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        this.details \u003d newDetails;"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * Method to ammend task details"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     * @params newDetails to be updated"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    public abstract void updateTaskDateAndTime(LocalDateTime newDateTime);"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"    public boolean isEmpty() {"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":80}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.AlphabetsInsteadOfNumberException;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDateTimeException;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeadlineException;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeleteException;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyEventException;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyFindException;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyListDeletionException;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyTodoException;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyUpdateException;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.NoSuchIndexException;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.WrongUpdateTypeException;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":" * TaskList class which stores all the tasks user keyed in."},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"public class TaskList {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    private Storage storage \u003d new Storage(\"data/data.txt\");"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * Creates TaskList which is essentially an ArrayList of Task."},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public TaskList() {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * Retrieves the information in the TaskList."},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @return taskList ArrayList of task inputs"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        return this.taskList;"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     * Returns number of items in taskList."},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     * @return taskList.size() Number of items in the taskList"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    public int getSize() {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        return this.taskList.size();"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * Returns item at a given index."},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"     * @param i Index of item to be retrieved"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"     * @return string Details of item retrieved"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    public String getInd(int i) {"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        ArrayList\u003cTask\u003e arr \u003d this.getList();"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        return arr.get(i).toString();"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"     * Create new Todo task and add it to taskList."},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Todo task"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException If task has no details"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"    public String addToDo(String input) throws DukeException { //when user keys in todo abc"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        String[] inputDetails \u003d input.split(\" \", 2);"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"            Task todoTask \u003d new Todo(inputDetails[1]);"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(todoTask);"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"            int numberOfItems \u003d this.taskList.size();"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"            if (numberOfItems \u003d\u003d 1) {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"                        + todoTask + \"\\nNow you have 1 task in the list.\";"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"                    + todoTask + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyTodoException();"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"    public void addToDo(Task input) { //when loading fr data [T][ ] abc"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"     * Create new Deadline task and add it to taskList."},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Deadline task"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException When user keys in invalid input"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If task has no details"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"     * @throws DateTimeParseException If task has no date or time"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"    public String addDeadline(String input) throws DukeException { //when user keys in deadline abc"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"            String inputDetails \u003d input.split(\" \", 2) [1];"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeadlineException();"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"        String[] inputDetailsDateAndTimeAsArray \u003d input.split(\" \", 2);"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"        String inputDetailsDateAndTime \u003d inputDetailsDateAndTimeAsArray[1];"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"        String description \u003d inputDetailsDateAndTime.split(\" /by \", 2)[0];"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"        String dateAndTime \u003d inputDetailsDateAndTime.split(\" /by \", 2)[1];"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"            Task deadlineTask \u003d new Deadline(description, dateTime);"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(deadlineTask);"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"            int numberOfItems \u003d this.taskList.size();"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"            if (numberOfItems \u003d\u003d 1) {"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"                    + deadlineTask + \"\\nNow you have 1 task in the list.\";"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"                    + deadlineTask + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDateTimeException();"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"    public void addDeadline(Task input) { //when loading fr data [D][ ] abc"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"     * Create new Event task and add it to taskList."},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Event task"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException When user keys in invalid input"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If task has no details"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"     * @throws DateTimeParseException If task has no date or time"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"    public String addEvent(String input) throws DukeException { ////when user keys in event abc"},{"lineNumber":168,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":169,"author":{"gitId":"JodyLorah"},"content":"            String inputDetails \u003d input.split(\" \", 2)[1];"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":171,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyEventException();"},{"lineNumber":172,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"JodyLorah"},"content":"        String[] inputDetailsDateAndTimeAsArray \u003d input.split(\" \", 2);"},{"lineNumber":174,"author":{"gitId":"JodyLorah"},"content":"        String inputDetailsDateAndTime \u003d inputDetailsDateAndTimeAsArray[1];"},{"lineNumber":175,"author":{"gitId":"JodyLorah"},"content":"        String description \u003d inputDetailsDateAndTime.split(\" /at \", 2)[0];"},{"lineNumber":176,"author":{"gitId":"JodyLorah"},"content":"        String dateAndTime \u003d inputDetailsDateAndTime.split(\" /at \", 2)[1];"},{"lineNumber":177,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":178,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":179,"author":{"gitId":"JodyLorah"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":180,"author":{"gitId":"JodyLorah"},"content":"            Task eventTask \u003d new Event(description, dateTime);"},{"lineNumber":181,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(eventTask);"},{"lineNumber":182,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":183,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":184,"author":{"gitId":"JodyLorah"},"content":"            int numberOfItems \u003d this.taskList.size();"},{"lineNumber":185,"author":{"gitId":"JodyLorah"},"content":"            if (numberOfItems \u003d\u003d 1) {"},{"lineNumber":186,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":187,"author":{"gitId":"JodyLorah"},"content":"                        + eventTask + \"\\nNow you have 1 task in the list.\";"},{"lineNumber":188,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":189,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":190,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":191,"author":{"gitId":"JodyLorah"},"content":"                        + eventTask + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":192,"author":{"gitId":"JodyLorah"},"content":"                        + \" tasks in the list.\";"},{"lineNumber":193,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":194,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":195,"author":{"gitId":"JodyLorah"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":196,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDateTimeException();"},{"lineNumber":197,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":200,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":202,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":204,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":205,"author":{"gitId":"JodyLorah"},"content":"    public void addEvent(Task input) { //when loading fr data [E][ ] abc"},{"lineNumber":206,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":207,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":208,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":209,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":211,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":212,"author":{"gitId":"JodyLorah"},"content":"     * Mark an item as done in taskList."},{"lineNumber":213,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":214,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":215,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":216,"author":{"gitId":"JodyLorah"},"content":"    public String markDone(String input) {"},{"lineNumber":217,"author":{"gitId":"JodyLorah"},"content":"        int index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":218,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.get(index).setDone();"},{"lineNumber":219,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":220,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":221,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":222,"author":{"gitId":"JodyLorah"},"content":"                + this.taskList.get(index);"},{"lineNumber":223,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":224,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":226,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":227,"author":{"gitId":"JodyLorah"},"content":"     * Deletes given task from taskList."},{"lineNumber":228,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":229,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be deleted"},{"lineNumber":230,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":231,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":232,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If event has no details"},{"lineNumber":233,"author":{"gitId":"JodyLorah"},"content":"     * @throws NumberFormatException If alphabets were given instead of numbers"},{"lineNumber":234,"author":{"gitId":"JodyLorah"},"content":"     * @throws IndexOutOfBoundsException If task has nothing to be deleted"},{"lineNumber":235,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":236,"author":{"gitId":"JodyLorah"},"content":"    public String delete(String input) throws DukeException {"},{"lineNumber":237,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":238,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \", 2)[1];"},{"lineNumber":239,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":240,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeleteException();"},{"lineNumber":241,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":242,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":243,"author":{"gitId":"JodyLorah"},"content":"        Task taskToBeDeleted;"},{"lineNumber":244,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":245,"author":{"gitId":"JodyLorah"},"content":"            String[] inputDetails \u003d input.split(\" \", 2);"},{"lineNumber":246,"author":{"gitId":"JodyLorah"},"content":"            int taskIndex \u003d Integer.parseInt(inputDetails[1]) - 1;"},{"lineNumber":247,"author":{"gitId":"JodyLorah"},"content":"            taskToBeDeleted \u003d taskList.get(taskIndex);"},{"lineNumber":248,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.remove(taskIndex);"},{"lineNumber":249,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":250,"author":{"gitId":"JodyLorah"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":251,"author":{"gitId":"JodyLorah"},"content":"            throw new AlphabetsInsteadOfNumberException();"},{"lineNumber":252,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":253,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":254,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":255,"author":{"gitId":"JodyLorah"},"content":"            String[] inputDetails \u003d input.split(\" \", 2);"},{"lineNumber":256,"author":{"gitId":"JodyLorah"},"content":"            int taskIndex \u003d Integer.parseInt(inputDetails[1]) - 1;"},{"lineNumber":257,"author":{"gitId":"JodyLorah"},"content":"            taskToBeDeleted \u003d taskList.get(taskIndex);"},{"lineNumber":258,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.remove(taskIndex);"},{"lineNumber":259,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":260,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":261,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyListDeletionException();"},{"lineNumber":262,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":263,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":264,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":265,"author":{"gitId":"JodyLorah"},"content":"        int numberOfItems \u003d this.taskList.size();"},{"lineNumber":266,"author":{"gitId":"JodyLorah"},"content":"        if (numberOfItems \u003d\u003d 1) {"},{"lineNumber":267,"author":{"gitId":"JodyLorah"},"content":"            String toPrint \u003d \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":268,"author":{"gitId":"JodyLorah"},"content":"                + taskToBeDeleted + \"\\nNow you have 1 task in the list.\";"},{"lineNumber":269,"author":{"gitId":"JodyLorah"},"content":"            return toPrint;"},{"lineNumber":270,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":271,"author":{"gitId":"JodyLorah"},"content":"            String toPrint \u003d \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":272,"author":{"gitId":"JodyLorah"},"content":"                + taskToBeDeleted + \"\\nNow you have \""},{"lineNumber":273,"author":{"gitId":"JodyLorah"},"content":"                + this.taskList.size() + \" tasks in the list.\";"},{"lineNumber":274,"author":{"gitId":"JodyLorah"},"content":"            return toPrint;"},{"lineNumber":275,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":276,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":277,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":278,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":279,"author":{"gitId":"JodyLorah"},"content":"     * List all items in taskList."},{"lineNumber":280,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":281,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":282,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"JodyLorah"},"content":"    public String list() {"},{"lineNumber":284,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":285,"author":{"gitId":"JodyLorah"},"content":"        for (int i \u003d 1; i \u003c this.taskList.size() + 1; i++) {"},{"lineNumber":286,"author":{"gitId":"JodyLorah"},"content":"            toPrint +\u003d i + \".\" + this.taskList.get(i - 1) + \"\\n\";"},{"lineNumber":287,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":288,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":289,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":290,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":291,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":292,"author":{"gitId":"JodyLorah"},"content":"     * Finds and lists all relevant items in taskList."},{"lineNumber":293,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":294,"author":{"gitId":"JodyLorah"},"content":"     * @param input input of the item to be found"},{"lineNumber":295,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":296,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":297,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If user does not input what to find"},{"lineNumber":298,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":299,"author":{"gitId":"JodyLorah"},"content":"    public String find(String input) throws DukeException {"},{"lineNumber":300,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":301,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \", 2)[1];"},{"lineNumber":302,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":303,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyFindException();"},{"lineNumber":304,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":305,"author":{"gitId":"JodyLorah"},"content":"        String taskDetails \u003d input.split(\" \", 2)[1];"},{"lineNumber":306,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":307,"author":{"gitId":"JodyLorah"},"content":"        int counter \u003d 1;"},{"lineNumber":308,"author":{"gitId":"JodyLorah"},"content":"        ArrayList\u003cTask\u003e list \u003d this.taskList;"},{"lineNumber":309,"author":{"gitId":"JodyLorah"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":310,"author":{"gitId":"JodyLorah"},"content":"            String details \u003d list.get(i).getTaskDetails().split(\"]\" + \" \", 2)[1];"},{"lineNumber":311,"author":{"gitId":"JodyLorah"},"content":"            if (details.contains(taskDetails)) {"},{"lineNumber":312,"author":{"gitId":"JodyLorah"},"content":"                toPrint +\u003d counter + \".\" + list.get(i) + \"\\n\";"},{"lineNumber":313,"author":{"gitId":"JodyLorah"},"content":"                counter++;"},{"lineNumber":314,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":315,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":316,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":317,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":319,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":320,"author":{"gitId":"JodyLorah"},"content":"     * Method to update an event in the list."},{"lineNumber":321,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":322,"author":{"gitId":"JodyLorah"},"content":"     * @param input of user with details to be ammended"},{"lineNumber":323,"author":{"gitId":"JodyLorah"},"content":"     * @return confirmation message that the update was successful"},{"lineNumber":324,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case of wrong type or insufficient information"},{"lineNumber":325,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":326,"author":{"gitId":"JodyLorah"},"content":"    public String updateEvent(String input) throws DukeException {"},{"lineNumber":327,"author":{"gitId":"JodyLorah"},"content":"        if (input.length() \u003c 7) {"},{"lineNumber":328,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyUpdateException();"},{"lineNumber":329,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":330,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":331,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":332,"author":{"gitId":"JodyLorah"},"content":"            String taskNumber \u003d input.split(\" \")[1];"},{"lineNumber":333,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":334,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyUpdateException();"},{"lineNumber":335,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":336,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":337,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":338,"author":{"gitId":"JodyLorah"},"content":"            int taskNumber \u003d Integer.parseInt(input.split(\" \")[1]);"},{"lineNumber":339,"author":{"gitId":"JodyLorah"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":340,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyUpdateException();"},{"lineNumber":341,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":342,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":343,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":344,"author":{"gitId":"JodyLorah"},"content":"            int taskNumber \u003d Integer.parseInt(input.split(\" \")[1]);"},{"lineNumber":345,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.get(taskNumber);"},{"lineNumber":346,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":347,"author":{"gitId":"JodyLorah"},"content":"            throw new NoSuchIndexException();"},{"lineNumber":348,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":349,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":350,"author":{"gitId":"JodyLorah"},"content":"        int taskNumber \u003d Integer.parseInt(input.split(\" \")[1]);"},{"lineNumber":351,"author":{"gitId":"JodyLorah"},"content":"        int taskIndex \u003d taskNumber - 1;"},{"lineNumber":352,"author":{"gitId":"JodyLorah"},"content":"        String taskType \u003d this.taskList.get(taskIndex).getTaskType();"},{"lineNumber":353,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":354,"author":{"gitId":"JodyLorah"},"content":"            String newDetails \u003d input.split(\"/to \", 2)[1];"},{"lineNumber":355,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":356,"author":{"gitId":"JodyLorah"},"content":"            throw new WrongUpdateTypeException();"},{"lineNumber":357,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":358,"author":{"gitId":"JodyLorah"},"content":"        String newDetails \u003d input.split(\"/to \", 2)[1];"},{"lineNumber":359,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":360,"author":{"gitId":"JodyLorah"},"content":"        if (taskType.equals(\"todo\")) {"},{"lineNumber":361,"author":{"gitId":"JodyLorah"},"content":"            if (newDetails.contains(\"/by\")) {"},{"lineNumber":362,"author":{"gitId":"JodyLorah"},"content":"                throw new WrongUpdateTypeException();"},{"lineNumber":363,"author":{"gitId":"JodyLorah"},"content":"            } else if (newDetails.contains(\"/at\")) {"},{"lineNumber":364,"author":{"gitId":"JodyLorah"},"content":"                throw new WrongUpdateTypeException();"},{"lineNumber":365,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":366,"author":{"gitId":"JodyLorah"},"content":"                this.taskList.get(taskIndex).updateTaskDetails(newDetails);"},{"lineNumber":367,"author":{"gitId":"JodyLorah"},"content":"                Task newTask \u003d this.taskList.get(taskIndex);"},{"lineNumber":368,"author":{"gitId":"JodyLorah"},"content":"                storage.saveData(this);"},{"lineNumber":369,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":370,"author":{"gitId":"JodyLorah"},"content":"                String toPrint \u003d \"Noted. I\u0027ve updated this task:\\n\""},{"lineNumber":371,"author":{"gitId":"JodyLorah"},"content":"                        + taskNumber + \".\" + newTask;"},{"lineNumber":372,"author":{"gitId":"JodyLorah"},"content":"                return toPrint;"},{"lineNumber":373,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":374,"author":{"gitId":"JodyLorah"},"content":"        } else if (taskType.equals(\"deadline\")) {"},{"lineNumber":375,"author":{"gitId":"JodyLorah"},"content":"            try {"},{"lineNumber":376,"author":{"gitId":"JodyLorah"},"content":"                String deadlineDetails \u003d input.split(\"/by \", 2)[1];"},{"lineNumber":377,"author":{"gitId":"JodyLorah"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":378,"author":{"gitId":"JodyLorah"},"content":"                throw new EmptyUpdateException();"},{"lineNumber":379,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":380,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":381,"author":{"gitId":"JodyLorah"},"content":"            if (newDetails.contains(\"/at\")) {"},{"lineNumber":382,"author":{"gitId":"JodyLorah"},"content":"                throw new WrongUpdateTypeException();"},{"lineNumber":383,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":384,"author":{"gitId":"JodyLorah"},"content":"                String description \u003d newDetails.split(\" /by \", 2)[0];"},{"lineNumber":385,"author":{"gitId":"JodyLorah"},"content":"                String dateAndTime \u003d newDetails.split(\" /by \", 2)[1];"},{"lineNumber":386,"author":{"gitId":"JodyLorah"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":387,"author":{"gitId":"JodyLorah"},"content":"                try {"},{"lineNumber":388,"author":{"gitId":"JodyLorah"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":389,"author":{"gitId":"JodyLorah"},"content":"                    this.taskList.get(taskIndex).updateTaskDetails(description);"},{"lineNumber":390,"author":{"gitId":"JodyLorah"},"content":"                    this.taskList.get(taskIndex).updateTaskDateAndTime(dateTime);"},{"lineNumber":391,"author":{"gitId":"JodyLorah"},"content":"                    Task newTask \u003d this.taskList.get(taskIndex);"},{"lineNumber":392,"author":{"gitId":"JodyLorah"},"content":"                    storage.saveData(this);"},{"lineNumber":393,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":394,"author":{"gitId":"JodyLorah"},"content":"                    String toPrint \u003d \"Noted. I\u0027ve updated this task:\\n\""},{"lineNumber":395,"author":{"gitId":"JodyLorah"},"content":"                            + taskNumber + \".\" + newTask;"},{"lineNumber":396,"author":{"gitId":"JodyLorah"},"content":"                    return toPrint;"},{"lineNumber":397,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":398,"author":{"gitId":"JodyLorah"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":399,"author":{"gitId":"JodyLorah"},"content":"                    throw new EmptyDateTimeException();"},{"lineNumber":400,"author":{"gitId":"JodyLorah"},"content":"                }"},{"lineNumber":401,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":402,"author":{"gitId":"JodyLorah"},"content":"        } else if (taskType.equals(\"event\")) {"},{"lineNumber":403,"author":{"gitId":"JodyLorah"},"content":"            try {"},{"lineNumber":404,"author":{"gitId":"JodyLorah"},"content":"                String eventDetails \u003d input.split(\"/at \", 2)[1];"},{"lineNumber":405,"author":{"gitId":"JodyLorah"},"content":"            } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":406,"author":{"gitId":"JodyLorah"},"content":"                throw new EmptyUpdateException();"},{"lineNumber":407,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":408,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":409,"author":{"gitId":"JodyLorah"},"content":"            if (newDetails.contains(\"/by\")) {"},{"lineNumber":410,"author":{"gitId":"JodyLorah"},"content":"                throw new WrongUpdateTypeException();"},{"lineNumber":411,"author":{"gitId":"JodyLorah"},"content":"            } else {"},{"lineNumber":412,"author":{"gitId":"JodyLorah"},"content":"                String description \u003d newDetails.split(\" /at \", 2)[0];"},{"lineNumber":413,"author":{"gitId":"JodyLorah"},"content":"                String dateAndTime \u003d newDetails.split(\" /at \", 2)[1];"},{"lineNumber":414,"author":{"gitId":"JodyLorah"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":415,"author":{"gitId":"JodyLorah"},"content":"                try {"},{"lineNumber":416,"author":{"gitId":"JodyLorah"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(dateAndTime, formatter);"},{"lineNumber":417,"author":{"gitId":"JodyLorah"},"content":"                    this.taskList.get(taskIndex).updateTaskDetails(description);"},{"lineNumber":418,"author":{"gitId":"JodyLorah"},"content":"                    this.taskList.get(taskIndex).updateTaskDateAndTime(dateTime);"},{"lineNumber":419,"author":{"gitId":"JodyLorah"},"content":"                    Task newTask \u003d this.taskList.get(taskIndex);"},{"lineNumber":420,"author":{"gitId":"JodyLorah"},"content":"                    storage.saveData(this);"},{"lineNumber":421,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":422,"author":{"gitId":"JodyLorah"},"content":"                    String toPrint \u003d \"Noted. I\u0027ve updated this task:\\n\""},{"lineNumber":423,"author":{"gitId":"JodyLorah"},"content":"                            + taskNumber + \".\" + newTask;"},{"lineNumber":424,"author":{"gitId":"JodyLorah"},"content":"                    return toPrint;"},{"lineNumber":425,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":426,"author":{"gitId":"JodyLorah"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":427,"author":{"gitId":"JodyLorah"},"content":"                    throw new EmptyDateTimeException();"},{"lineNumber":428,"author":{"gitId":"JodyLorah"},"content":"                }"},{"lineNumber":429,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":430,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":431,"author":{"gitId":"JodyLorah"},"content":"            assert false : \"All cases should be handled by here.\";"},{"lineNumber":432,"author":{"gitId":"JodyLorah"},"content":"            return \"\";"},{"lineNumber":433,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":434,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":435,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":435}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":" * Todo class which creates a todo task."},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private String taskType;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     * Creates Todo task which keeps track of task details."},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * @param todoDetails of the todo task"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    public Todo(String todoDetails) {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"        super(todoDetails);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"        this.taskType \u003d \"todo\";"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"     * Method to get the type of task"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * @return type of task"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskType() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        return this.taskType;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     * Method to ammend task details"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     * @params newDetails to be updated"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    public void updateTaskDateAndTime(LocalDateTime newDateTime) {}"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"[T]\" + super.toString();"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the todo task."},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":55}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.MainWindow;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":" * A custom control using FXML."},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":" * This control represents a dialog box consisting of a Circle to be filled by images to represent the"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" * speaker\u0027s face and a label containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Dialog label for text."},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Circle for speaker\u0027s images."},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    private Circle circle;"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * Constructor for DialogBox."},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param text Inputs and responses."},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @param image Speaker\u0027s image."},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    private DialogBox(String text, Image image) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.load();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"            e.printStackTrace();"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        dialog.setText(text);"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        dialog.setWrapText(true);"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        circle.setFill(new ImagePattern(image));"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"     * Flips the dialog box such that the Circle is on the left and text on the right."},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    private void flip() {"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        Collections.reverse(tmp);"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"     * Creates a new DialogBox for user."},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * @param input User\u0027s input."},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     * @param image Image of user."},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     * @return DialogBox for user."},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    public static DialogBox getUserDialog(String input, Image image) {"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        return new DialogBox(input, image);"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"     * Creates a new DialogBox for Duke."},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"     * @param response Duke\u0027s response."},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"     * @param image Image of Duke."},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"     * @return DialogBox for Duke."},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"    public static DialogBox getDukeDialog(String response, Image image) {"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        DialogBox dialogBox \u003d new DialogBox(response, image);"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        dialogBox.flip();"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        return dialogBox;"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":87}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.MainWindow;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"            stage.setResizable(false);"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"            stage.setHeight(660);"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"            stage.setScene(scene);"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"            stage.show();"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Ui class which stores all the basic UI stuff like welcome message."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Prints a welcome message."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     * @return welcome message"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    public static String showWelcome() {"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"        String logo \u003d"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"                  \"_____        _        \\n\""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"                + \"|  _ \\\\ _  _| | _____ \\n\""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Hello!\\nWelcome to Duke!\\n\" + \"What can I do for you?\";"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        assert !toPrint.isEmpty() : \"Welcome screen should be printed.\";"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Prints an exit message."},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @return exit message"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public String exitDuke() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Bye. Hope to see you again soon!\" + \"\\nThis window will close in 3 seconds.\";"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assert !toPrint.isEmpty() : \"Something should be printed.\";"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c!-- @@author JodyLorah-reused"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Reused from https://github.com/ruilingk/ip/tree/master/src/main/resources/view with minor modifications --\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.paint.RadialGradient?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.paint.Stop?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"650.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"LABEL\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\" styleClass\u003d\"duke\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"14.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c/font\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"WHITE\" radius\u003d\"52.0\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cstroke\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003cRadialGradient centerX\u003d\"0.5866666581895617\" centerY\u003d\"0.5648855253030325\" focusAngle\u003d\"57.58\" focusDistance\u003d\"0.22429902976918448\" radius\u003d\"0.6401869158878505\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                    \u003cstops\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"BLACK\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"#87c7ff\" offset\u003d\"0.9961832061068702\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"#87c7ff\" offset\u003d\"1.0\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \u003c/stops\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003c/RadialGradient\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003c/stroke\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/Circle\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/children\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003cpadding\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"25.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003c/padding\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        \u003c!-- @@author --\u003e"}],"authorContributionMap":{"JodyLorah":2,"-":39}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c!-- @@author JodyLorah-reused"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Reused from https://github.com/ruilingk/ip/tree/master/src/main/resources/view with minor modifications --\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cAnchorPane prefHeight\u003d\"695.5\" prefWidth\u003d\"650.0\" stylesheets\u003d\"@../stylesheets/styles.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"661.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"568.0\" promptText\u003d\"Type here...\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"82.0\" AnchorPane.leftAnchor\u003d\"0.0\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"                \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"16.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"568.0\" layoutY\u003d\"661.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"82.0\" text\u003d\"SEND\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cFont size\u003d\"18.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"580.0\" prefWidth\u003d\"660.0\" vvalue\u003d\"1.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003ccontent\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"580.0\" stylesheets\u003d\"@../stylesheets/styles.css\" AnchorPane.rightAnchor\u003d\"1.0\"/\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/content\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003c/children\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/AnchorPane\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        \u003c!-- @@author --\u003e"}],"authorContributionMap":{"JodyLorah":2,"-":28}},{"path":"src/test/java/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class AddCommandTest {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"        String todoInput \u003d \"todo this\";"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addTodoCommand \u003d new AddCommand(todoInput);"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"        String deadlineInput \u003d \"deadline return book /by 02/12/2019 18:00\";"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addDeadlineCommand \u003d new AddCommand(deadlineInput);"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        String eventInput \u003d \"event return book /at 02/12/2019 18:00\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addEventCommand \u003d new AddCommand(eventInput);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addTodoCommand.isExit());"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addDeadlineCommand.isExit());"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addEventCommand.isExit());"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":24}},{"path":"src/test/java/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ByeCommandTest {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"            String exitInput \u003d \"bye\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            ByeCommand exitCommand \u003d new ByeCommand(exitInput);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            exitCommand.execute(taskList, exitInput, storage);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.addExit(String)\\\" because \\\"tasks\\\" is null\","},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String exitInput \u003d \"bye\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        ByeCommand exitCommand \u003d new ByeCommand(exitInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(exitCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DeleteCommandTest {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDelete() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            String deleteInput \u003d \"delete 1\";"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"            DeleteCommand deleteCommand \u003d new DeleteCommand(deleteInput);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            deleteCommand.execute(taskList, deleteInput, storage);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Index 0 out of bounds for length 0\", e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String deleteInput \u003d \"delete 1\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(deleteInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(deleteCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DoneCommandTest {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            String doneInput \u003d \"done 1\";"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"            DoneCommand doneCommand \u003d new DoneCommand(doneInput);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"            doneCommand.execute(taskList, doneInput, storage);"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException | DukeException e) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Index 0 out of bounds for length 0\", e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String doneInput \u003d \"done 1\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        DoneCommand doneCommand \u003d new DoneCommand(doneInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(doneCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    public void dummyTest() {"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(2, 2);"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":11}},{"path":"src/test/java/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ListCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ListCommandTest {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"            String listInput \u003d \"foo\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            ListCommand listCommand \u003d new ListCommand(listInput);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            listCommand.execute(taskList, listInput, storage);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.list()\\\" because \\\"tasks\\\" is null\","},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String listInput \u003d \"foo\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        ListCommand listCommand \u003d new ListCommand(listInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(listCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"list"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"bye"}],"authorContributionMap":{"JodyLorah":5}}]
