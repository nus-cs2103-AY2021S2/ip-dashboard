[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    String javaFxVersion \u003d \u002711.0.1\u0027"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    mainClassName \u003d \"duke.launcher.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":15,"-":45}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.parser.Parser;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.DialogBox;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Ui;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Application;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.Scene;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.Button;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.Label;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.image.Image;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"import javafx.stage.Stage;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"public class Duke extends Application {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    private Storage storage;"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    private TaskList tasks;"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    private Ui ui;"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    private VBox dialogContainer;"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    private TextField userInput;"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    private Button sendButton;"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    private Scene scene;"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * Main class for programme to run."},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    public Duke() {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        ui \u003d new Ui();"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        storage \u003d new Storage();"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            tasks \u003d storage.loadData();"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    public void start(Stage stage) {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        //Step 1. Setting up required components"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        //The container for the content of the chat to scroll."},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        scrollPane \u003d new ScrollPane();"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setContent(dialogContainer);"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        userInput \u003d new TextField();"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        sendButton \u003d new Button(\"Send\");"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        stage.setScene(scene);"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"        stage.show();"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        //Step 2. Formatting the window to look as expected"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        stage.setResizable(false);"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setPrefSize(385, 535);"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setVvalue(1.0);"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.setFitToWidth(true);"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"        // You will need to import `javafx.scene.layout.Region` for this."},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"        userInput.setPrefWidth(325.0);"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"        sendButton.setPrefWidth(55.0);"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);"},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"        //Part 3. Add functionality to handle user input."},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"            try {"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"                handleUserInput();"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"            } catch (IOException | DukeException e) {"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"                e.printStackTrace();"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"        });"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"            try {"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"                handleUserInput();"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"            } catch (IOException | DukeException e) {"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"                e.printStackTrace();"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"        });"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes."},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"     * Iteration 1:"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"     * Creates a label with the specified text and adds it to the dialog container."},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"     * @param text String containing text to add"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"     * @return a label with the specified text that has word wrap enabled."},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"    private Label getDialogLabel(String text) {"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"        // You will need to import `javafx.scene.control.Label`."},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"        Label textToAdd \u003d new Label(text);"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"        textToAdd.setWrapText(true);"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"        return textToAdd;"},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"     * Iteration 2:"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"    private void handleUserInput() throws IOException, DukeException {"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"        String userText \u003d userInput.getText();"},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"        String dukeText \u003d getResponse(userInput.getText());"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getUserDialog(userText, user),"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getDukeDialog(dukeText, duke)"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"        );"},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"        userInput.clear();"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"     * Gets response from user"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"     * @param input user\u0027s response"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"     * @return Duke\u0027s reply"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"    String getResponse(String input) {"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"        ui.showWelcome();"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"            boolean isExit \u003d command.isExit();"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"            if (isExit) {"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"                ui.exitDuke();"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"            return command.execute(tasks, input, storage);"},{"lineNumber":168,"author":{"gitId":"JodyLorah"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":169,"author":{"gitId":"JodyLorah"},"content":"            return e.getMessage();"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"JodyLorah":170,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Main;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     * A main class to workaround classpath issues."},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    public static void main(String[] args) {"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.DialogBox;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":" * Controller for duke.MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    private Duke duke;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     * Initialises the main window."},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"    public void initialize() {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getDukeDialog(Ui.showWelcome(), dukeImage)"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        );"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        duke \u003d d;"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     * @throws IOException User keys in invalid storage location"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException invalid user input"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"    private void handleUserInput() throws IOException, DukeException {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        userInput.clear();"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":65}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" * AddCommand class which is a type of Command to be executed."},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Handles Todo, Deadline and Event commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    public AddCommand(String input) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Returns the user input of command"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @return user input"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public String getUserInput() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        return this.userInput;"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        String type \u003d input.split(\" \")[0];"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            if (type.equals(\"todo\")) {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addToDo(input);"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"            } else if (type.equals(\"deadline\")) {"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addDeadline(input);"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"            } else if (type.equals(\"event\")) {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"                return tasks.addEvent(input);"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"        } catch (DukeException e) {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"            return e.getMessage();"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"        return \"\";"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":66}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * ByeCommand class which is a type of Command to be executed."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final String line \u003d \"------------------------------------------\";"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Handles Bye commands."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public ByeCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Returns the user input of command"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * @return user input"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public String getUserInput() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        return this.userInput;"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        return true;"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":52}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" * Abstract class for all various commands."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public abstract class Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    public abstract String execute(TaskList tasks, String input, Storage storage) throws IOException, DukeException;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    public abstract boolean isExit();"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":27}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeleteException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * DeleteCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Handles Delete commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public DeleteCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Returns the user input of command"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @return user input"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public String getUserInput() {"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        return this.userInput;"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case there is no input"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2)[1];"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            return tasks.delete(input);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeleteException();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":56}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDoneException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * DoneCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Handles Done commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public DoneCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * Returns the user input of command"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @return user input"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    public String getUserInput() {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"        return this.userInput;"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case file is corrupt"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2)[1];"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"            return tasks.markDone(input);"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDoneException();"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":60}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.InvalidInstructionException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":" * ListCommand class which is a type of Command to be executed."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * Handles List commands."},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public FindCommand(String input) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2) [1];"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"            return tasks.find(input);"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"            throw new InvalidInstructionException();"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":50}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * ListCommand class which is a type of Command to be executed."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private String userInput;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * Handles List commands."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * Triggers the DataHandler to handle the commands."},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public ListCommand(String input) {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        this.userInput \u003d input;"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Returns the user input of command"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @return user input"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public String getUserInput() {"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        return this.userInput;"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     * Executes the Command in DataHandler."},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     * @param tasks list of tasks where this new task is added to"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * @param input details of the task"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param storage handles the various tasks according to their type"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    public String execute(TaskList tasks, String input, Storage storage) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"        if (tasks.getSize() \u003d\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"            return \"You have no tasks on your list.\\n Add one now!\";"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            return tasks.list();"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"     * Checks if it is time to exit Duke."},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    public boolean isExit() {"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        return false;"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":54}},{"path":"src/main/java/duke/exception/AlphabetsInsteadOfNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user keys in alphabet when he is supposed to key in a number."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class AlphabetsInsteadOfNumberException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    public AlphabetsInsteadOfNumberException() {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"        super(\"I\u0027m sorry, but you keyed in an alphabet.\\n\""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"                + \"You can only delete the number from the list.\");"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * General exception for the Duke class."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":14}},{"path":"src/main/java/duke/exception/EmptyDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the date or time of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDateTimeException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDateTimeException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"Please key in a valid date and/or time in the format\\n \""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"dd/MM/yyyy HH:mm.\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDeadlineException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDeadlineException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a deadline cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027deadline return books /by 12/12/2012 12:00\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDeleteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task to delete."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDeleteException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDeleteException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a delete cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027delete 1\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task to delete."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyDoneException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyDoneException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a done cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027done 1\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyEventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyEventException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyEventException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of an event cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027event pick the kids /at 12/12/2012 12:00\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/EmptyListDeletionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user tries to delete item from an empty list."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"public class EmptyListDeletionException extends DukeException {"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    public EmptyListDeletionException() {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"        super(\"I\u0027m sorry, but list is empty.\""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"            + \"You have to add an item before you can delete it.\\n\");"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/exception/EmptyToDoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user left out the details of the task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class EmptyToDoException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public EmptyToDoException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"The description of a todo cannot be empty.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Try \u0027todo read a book\u0027\");"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":15}},{"path":"src/main/java/duke/exception/InvalidInstructionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Exception where user inputs an invalid task detail."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"public class InvalidInstructionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"     * Method to throw the Exception."},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    public InvalidInstructionException() {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"        super(\"You have keyed in an invalid instruction.\\n\""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"                + \"Please ensure your instruction begins with\\n\""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"                + \"todo, deadline, event, list, delete, done or bye\");"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":16}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.InvalidInstructionException;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":" * Parser class to handle all commands and create the correct command."},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     * Returns command corresponding to input."},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     * @param input user\u0027s input to determine which type of command"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"     * @return c Command of the input"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"     * @throws InvalidInstructionException If user keys in an invalid input"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    public static Command parse(String input) throws InvalidInstructionException {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"        String type \u003d input.split(\" \")[0];"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        Command command \u003d null;"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"        if (type.equals(\"todo\")) {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"deadline\")) {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"event\")) {"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new AddCommand(input);"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"delete\")) {"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new DeleteCommand(input);"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"done\")) {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new DoneCommand(input);"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"list\")) {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new ListCommand(input);"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"find\")) {"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new FindCommand(input);"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        } else if (type.equals(\"bye\")) {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            command \u003d new ByeCommand(input);"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            throw new InvalidInstructionException();"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        return command;"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":49}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import java.util.Scanner;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Task;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"import duke.task.Todo;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" * Stores and Retrieves data from a given .txt file and loads it into TaskList."},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    private String filePath;"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     * Stores filePath."},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public Storage() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        this.filePath \u003d System.getProperty(\"user.dir\") + \"/data/duke.txt\";"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     * Gets filePath."},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * @return gets file path of storage location"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"    public String getFilePath() {"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        return this.filePath;"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     * Saves data back in file in designated filePath."},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     * @param li TaskList of data to be saved"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"     * @throws IOException  If file is corrupt"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    public static void saveData(TaskList li) {"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        //potential problem: saveData doesnt update .txt file"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        //when i change done status of item to done. only updates after bye command"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"            Path currPath \u003d Paths.get(\"\");"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"            FileWriter fw \u003d new FileWriter(currPath.toAbsolutePath().toString()"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"                    + \"/src/main/java/duke/duke.txt\");"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"            for (int i \u003d 0; i \u003c li.getSize(); i++) {"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"                String write \u003d li.getInd(i) + \"\\n\";"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"                fw.write(write);"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"            fw.close();"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * Loads data from designated file and converts it to a TaskList."},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     * @return list TaskList of all loaded data"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"     * @throws FileNotFoundException  If file cannot be found in path"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"    public static TaskList loadData() throws IOException {"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"        Path currPath \u003d Paths.get(\"\");"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"        Path dukePath \u003d Paths.get(currPath.toAbsolutePath().toString()"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"                + \"/src/main/java/duke/duke.txt\");"},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"        TaskList list \u003d new TaskList();"},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"        if (Files.exists(dukePath)) { //load list data"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"            File info \u003d new File(String.valueOf(dukePath));"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"            Scanner sc \u003d new Scanner(info);"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"                String task \u003d sc.nextLine();"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"                String[] arr \u003d task.split(\"\");"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"                if (arr[1].equals(\"T\")) {"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"                    Boolean done \u003d false;"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"                    if (arr[4].equals(\"X\")) {"},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"                        done \u003d true;"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"                    String taskDetails \u003d \"\";"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"                    for (int j \u003d 7; j \u003c arr.length; j++) {"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"                        taskDetails +\u003d arr[j];"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"                    Task t \u003d new Todo(taskDetails);"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":"                    if (done) {"},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"                        t.setDone();"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"                    list.addToDo(t);"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"                } else if (arr[1].equals(\"D\")) {"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"                    String taskDetails \u003d \"\";"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"                    Boolean done \u003d false;"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"                    if (arr[4].equals(\"X\")) {"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"                        done \u003d true;"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"                    for (int j \u003d 7; j \u003c arr.length; j++) {"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"                        taskDetails +\u003d arr[j];"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d taskDetails.split(\"[(]\");"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"                    String[] deets \u003d arr[0].split(\"\");"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"                    String description \u003d \"\";"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"                    for (int t \u003d 0; t \u003c arr[0].length() - 1; t++) {"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"                        description +\u003d deets[t];"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"                    taskDetails \u003d arr[1];"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d taskDetails.split(\" by:\", 2);"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"                    String by \u003d \"\";"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"                    String details \u003d arr[0];"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d details.split(\"\");"},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"                    for (int k \u003d 4; k \u003c arr.length - 1; k++) {"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"                        by +\u003d arr[k];"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(by, formatter);"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"                    Task t \u003d new Deadline(description, dateTime);"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"                    if (done) {"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"                        t.setDone();"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":"                    list.addDeadline(t);"},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"                } else if (arr[1].equals(\"E\")) {"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":"                    String taskDetails \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"                    Boolean done \u003d false;"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"                    if (arr[4].equals(\"X\")) {"},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"                        done \u003d true;"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"                    for (int j \u003d 7; j \u003c arr.length; j++) {"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"                        taskDetails +\u003d arr[j];"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d taskDetails.split(\"[(]\");"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"                    String[] deets \u003d arr[0].split(\"\");"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":"                    String description \u003d \"\";"},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"                    for (int t \u003d 0; t \u003c arr[0].length() - 1; t++) {"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"                        description +\u003d deets[t];"},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"                    taskDetails \u003d arr[1];"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d taskDetails.split(\" at: \");"},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":"                    String at \u003d \"\";"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"                    String details \u003d arr[0];"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"                    arr \u003d details.split(\"\");"},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"                    for (int k \u003d 4; k \u003c arr.length - 1; k++) {"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"                        at +\u003d arr[k];"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"                    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"                    LocalDateTime dateTime \u003d LocalDateTime.parse(at, formatter);"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"                    Task t \u003d new Event(description, dateTime);"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"                    if (done) {"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"                        t.setDone();"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"                    }"},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"                    list.addEvent(t);"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"                }"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"        } else { //create new file in folder"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"            File f \u003d new File(currPath.toAbsolutePath().toString() + \"/duke/duke.txt\");"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"        return list;"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":167}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Deadline class which creates a deadline task."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private final LocalDateTime date;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     * Creates Deadline task which keeps track of task details and deadlines."},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * @param description description of the task to be saved"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * @param by deadline of the task"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d by;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"                + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the deadline task."},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":38}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":" * Event class which creates an event task."},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    private final LocalDateTime date;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     * Creates Event task which keeps track of task details and timings."},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     * @param description description of the task to be saved"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"     * @param at timing of the event"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"     * */"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"        this.date \u003d at;"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"                + this.date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\")) + \")\";"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the event task."},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":38}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Class Task which keeps track of the details of the task"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" * and whether the task is done."},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    private String name;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    private boolean done;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     * Takes in details and creates a Task object."},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     * @param name details of the task"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    public Task(String name) {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        this.name \u003d name;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"        this.done \u003d false;"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        if (this.done) {"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"            return String.format(\"[X] %s\", this.name);"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"            return String.format(\"[ ] %s\", this.name);"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Ammends if the task is done."},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    public void setDone() {"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"        this.done \u003d true;"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the task."},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"        return this.name;"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":45}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.AlphabetsInsteadOfNumberException;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDateTimeException;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeadlineException;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyDeleteException;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyEventException;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyListDeletionException;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.EmptyToDoException;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":" * TaskList class which stores all the tasks user keyed in."},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"public class TaskList {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"    private Storage storage \u003d new Storage();"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    private final String line \u003d \"------------------------------------------\";"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * Creates TaskList which is essentially an ArrayList of Task."},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    public TaskList() {"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        this.taskList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"     * Retrieves the information in the TaskList."},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"     * @return taskList ArrayList of task inputs"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"        return this.taskList;"},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"     * Returns number of items in taskList."},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"     * @return taskList.size() Number of items in the taskList"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"    public int getSize() {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"        return this.taskList.size();"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"     * Returns item at a given index."},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"     * @param i Index of item to be retrieved"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"     * @return string Details of item retrieved"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    public String getInd(int i) {"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"        ArrayList\u003cTask\u003e arr \u003d this.getList();"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        return arr.get(i).toString();"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"     * Create new Todo task and add it to taskList."},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Todo task"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException If task has no details"},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"    public String addToDo(String input) throws DukeException { //when user keys in todo abc"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"        String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"            Task t \u003d new Todo(temp[1]);"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(t);"},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"            return \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"                    + t + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyToDoException();"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":87,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":89,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"JodyLorah"},"content":"    public void addToDo(Task input) { //when loading fr data [T][ ] abc"},{"lineNumber":91,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":92,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":93,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":94,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":96,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"JodyLorah"},"content":"     * Create new Deadline task and add it to taskList."},{"lineNumber":98,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Deadline task"},{"lineNumber":100,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":101,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException When user keys in invalid input"},{"lineNumber":102,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If task has no details"},{"lineNumber":103,"author":{"gitId":"JodyLorah"},"content":"     * @throws DateTimeParseException If task has no date or time"},{"lineNumber":104,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"JodyLorah"},"content":"    public String addDeadline(String input) throws DukeException { //when user keys in deadline abc"},{"lineNumber":106,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2) [1];"},{"lineNumber":108,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":109,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeadlineException();"},{"lineNumber":110,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"JodyLorah"},"content":"        String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":112,"author":{"gitId":"JodyLorah"},"content":"        String data \u003d temp[1];"},{"lineNumber":113,"author":{"gitId":"JodyLorah"},"content":"        String description \u003d data.split(\" /by \", 2)[0];"},{"lineNumber":114,"author":{"gitId":"JodyLorah"},"content":"        String by \u003d data.split(\" /by \", 2)[1];"},{"lineNumber":115,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":116,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":117,"author":{"gitId":"JodyLorah"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(by, formatter);"},{"lineNumber":118,"author":{"gitId":"JodyLorah"},"content":"            Task t \u003d new Deadline(description, dateTime);"},{"lineNumber":119,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(t);"},{"lineNumber":120,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":121,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":122,"author":{"gitId":"JodyLorah"},"content":"            return \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":123,"author":{"gitId":"JodyLorah"},"content":"                    + t + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":124,"author":{"gitId":"JodyLorah"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":125,"author":{"gitId":"JodyLorah"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":126,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDateTimeException();"},{"lineNumber":127,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":129,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":131,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":133,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":135,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":136,"author":{"gitId":"JodyLorah"},"content":"    public void addDeadline(Task input) { //when loading fr data [D][ ] abc"},{"lineNumber":137,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":138,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":139,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":141,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"JodyLorah"},"content":"     * Create new Event task and add it to taskList."},{"lineNumber":143,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":144,"author":{"gitId":"JodyLorah"},"content":"     * @param input Details of Event task"},{"lineNumber":145,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":146,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException When user keys in invalid input"},{"lineNumber":147,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If task has no details"},{"lineNumber":148,"author":{"gitId":"JodyLorah"},"content":"     * @throws DateTimeParseException If task has no date or time"},{"lineNumber":149,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"JodyLorah"},"content":"    public String addEvent(String input) throws DukeException { ////when user keys in event abc"},{"lineNumber":151,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":152,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2)[1];"},{"lineNumber":153,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":154,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyEventException();"},{"lineNumber":155,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"JodyLorah"},"content":"        String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":157,"author":{"gitId":"JodyLorah"},"content":"        String data \u003d temp[1];"},{"lineNumber":158,"author":{"gitId":"JodyLorah"},"content":"        String description \u003d data.split(\" /at \", 2)[0];"},{"lineNumber":159,"author":{"gitId":"JodyLorah"},"content":"        String at \u003d data.split(\" /at \", 2)[1];"},{"lineNumber":160,"author":{"gitId":"JodyLorah"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm\");"},{"lineNumber":161,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":162,"author":{"gitId":"JodyLorah"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(at, formatter);"},{"lineNumber":163,"author":{"gitId":"JodyLorah"},"content":"            Task t \u003d new Event(description, dateTime);"},{"lineNumber":164,"author":{"gitId":"JodyLorah"},"content":"            storage.saveData(this);"},{"lineNumber":165,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":166,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.add(t);"},{"lineNumber":167,"author":{"gitId":"JodyLorah"},"content":"            return \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":168,"author":{"gitId":"JodyLorah"},"content":"                    + t + \"\\nNow you have \" + this.taskList.size()"},{"lineNumber":169,"author":{"gitId":"JodyLorah"},"content":"                    + \" tasks in the list.\";"},{"lineNumber":170,"author":{"gitId":"JodyLorah"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":171,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDateTimeException();"},{"lineNumber":172,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":175,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":176,"author":{"gitId":"JodyLorah"},"content":"     * Adds given task to taskList."},{"lineNumber":177,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":178,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be added"},{"lineNumber":179,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":180,"author":{"gitId":"JodyLorah"},"content":"    public void addEvent(Task input) { //when loading fr data [E][ ] abc"},{"lineNumber":181,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.add(input);"},{"lineNumber":182,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":183,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":184,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":186,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":187,"author":{"gitId":"JodyLorah"},"content":"     * Mark an item as done in taskList."},{"lineNumber":188,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":189,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":190,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"JodyLorah"},"content":"    public String markDone(String input) {"},{"lineNumber":192,"author":{"gitId":"JodyLorah"},"content":"        int index \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":193,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.get(index).setDone();"},{"lineNumber":194,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":195,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":196,"author":{"gitId":"JodyLorah"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":197,"author":{"gitId":"JodyLorah"},"content":"                + this.taskList.get(index);"},{"lineNumber":198,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":200,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":201,"author":{"gitId":"JodyLorah"},"content":"     * Deletes given task from taskList."},{"lineNumber":202,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":203,"author":{"gitId":"JodyLorah"},"content":"     * @param input Task to be deleted"},{"lineNumber":204,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":205,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":206,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If event has no details"},{"lineNumber":207,"author":{"gitId":"JodyLorah"},"content":"     * @throws NumberFormatException If alphabets were given instead of numbers"},{"lineNumber":208,"author":{"gitId":"JodyLorah"},"content":"     * @throws IndexOutOfBoundsException If task has nothing to be deleted"},{"lineNumber":209,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":210,"author":{"gitId":"JodyLorah"},"content":"    public String delete(String input) throws DukeException {"},{"lineNumber":211,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":212,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2)[1];"},{"lineNumber":213,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":214,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeleteException();"},{"lineNumber":215,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":217,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":218,"author":{"gitId":"JodyLorah"},"content":"            String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":219,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.get(Integer.parseInt(temp[1]) - 1);"},{"lineNumber":220,"author":{"gitId":"JodyLorah"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":221,"author":{"gitId":"JodyLorah"},"content":"            throw new AlphabetsInsteadOfNumberException();"},{"lineNumber":222,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":223,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":224,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":225,"author":{"gitId":"JodyLorah"},"content":"            String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":226,"author":{"gitId":"JodyLorah"},"content":"            this.taskList.get(Integer.parseInt(temp[1]) - 1);"},{"lineNumber":227,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":228,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyListDeletionException();"},{"lineNumber":229,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"JodyLorah"},"content":"        String[] temp \u003d input.split(\" \", 2);"},{"lineNumber":231,"author":{"gitId":"JodyLorah"},"content":"        int index \u003d Integer.parseInt(temp[1]) - 1;"},{"lineNumber":232,"author":{"gitId":"JodyLorah"},"content":"        this.taskList.remove(index);"},{"lineNumber":233,"author":{"gitId":"JodyLorah"},"content":"        storage.saveData(this);"},{"lineNumber":234,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":235,"author":{"gitId":"JodyLorah"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":236,"author":{"gitId":"JodyLorah"},"content":"                + this.taskList.get(index) + \"\\nNow you have \""},{"lineNumber":237,"author":{"gitId":"JodyLorah"},"content":"                + this.taskList.size() + \" tasks in the list.\";"},{"lineNumber":238,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":239,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":240,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":241,"author":{"gitId":"JodyLorah"},"content":"     * List all items in taskList."},{"lineNumber":242,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":243,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":244,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":245,"author":{"gitId":"JodyLorah"},"content":"    public String list() {"},{"lineNumber":246,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":247,"author":{"gitId":"JodyLorah"},"content":"        for (int i \u003d 1; i \u003c this.taskList.size() + 1; i++) {"},{"lineNumber":248,"author":{"gitId":"JodyLorah"},"content":"            toPrint +\u003d i + \".\" + this.taskList.get(i - 1) + \"\\n\";"},{"lineNumber":249,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":251,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":252,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":253,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":254,"author":{"gitId":"JodyLorah"},"content":"     * Finds and lists all relevant items in taskList."},{"lineNumber":255,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":256,"author":{"gitId":"JodyLorah"},"content":"     * @param input input of the item to be found"},{"lineNumber":257,"author":{"gitId":"JodyLorah"},"content":"     * @return reply from Duke as String"},{"lineNumber":258,"author":{"gitId":"JodyLorah"},"content":"     * @throws DukeException in case input is invalid"},{"lineNumber":259,"author":{"gitId":"JodyLorah"},"content":"     * @throws ArrayIndexOutOfBoundsException If user does not input what to find"},{"lineNumber":260,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":261,"author":{"gitId":"JodyLorah"},"content":"    public String find(String input) throws DukeException {"},{"lineNumber":262,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":263,"author":{"gitId":"JodyLorah"},"content":"            String temp \u003d input.split(\" \", 2)[1];"},{"lineNumber":264,"author":{"gitId":"JodyLorah"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":265,"author":{"gitId":"JodyLorah"},"content":"            throw new EmptyDeleteException();"},{"lineNumber":266,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":267,"author":{"gitId":"JodyLorah"},"content":"        String item \u003d input.split(\" \", 2)[1];"},{"lineNumber":268,"author":{"gitId":"JodyLorah"},"content":"        String toPrint \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":269,"author":{"gitId":"JodyLorah"},"content":"        int counter \u003d 1;"},{"lineNumber":270,"author":{"gitId":"JodyLorah"},"content":"        ArrayList\u003cTask\u003e list \u003d this.taskList;"},{"lineNumber":271,"author":{"gitId":"JodyLorah"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":272,"author":{"gitId":"JodyLorah"},"content":"            String deets \u003d list.get(i).getTaskDetails().split(\"]\" + \" \", 2)[1];"},{"lineNumber":273,"author":{"gitId":"JodyLorah"},"content":"            if (deets.contains(item)) {"},{"lineNumber":274,"author":{"gitId":"JodyLorah"},"content":"                toPrint +\u003d counter + \".\" + list.get(i) + \"\\n\";"},{"lineNumber":275,"author":{"gitId":"JodyLorah"},"content":"                counter++;"},{"lineNumber":276,"author":{"gitId":"JodyLorah"},"content":"            }"},{"lineNumber":277,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":278,"author":{"gitId":"JodyLorah"},"content":"        return toPrint;"},{"lineNumber":279,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":280}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Todo class which creates a todo task."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"    private String task;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     * Creates Todo task which keeps track of task details."},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     * @param task details of the todo task"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public Todo(String task) {"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"        super(task);"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"     * Returns details of the todo task."},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     * @return details of the task"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public String getTaskDetails() {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        return super.toString();"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":33}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.MainWindow;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":" * A custom control using FXML."},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":" * This control represents a dialog box consisting of a Circle to be filled by images to represent the"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":" * speaker\u0027s face and a label containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"     * Dialog label for text."},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"     * Circle for speaker\u0027s images."},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"    private Circle circle;"},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"     * Constructor for DialogBox."},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"     * @param text Inputs and responses."},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":"     * @param image Speaker\u0027s image."},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    private DialogBox(String text, Image image) {"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.load();"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":"            e.printStackTrace();"},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"        dialog.setText(text);"},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"        circle.setFill(new ImagePattern(image));"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":"     * Flips the dialog box such that the Circle is on the left and text on the right."},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    private void flip() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        Collections.reverse(tmp);"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"     * Creates a new DialogBox for user."},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"     * @param input User\u0027s input."},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":"     * @param image Image of user."},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"     * @return DialogBox for user."},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"    public static DialogBox getUserDialog(String input, Image image) {"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"        return new DialogBox(input, image);"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":74,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"JodyLorah"},"content":"     * Creates a new DialogBox for Duke."},{"lineNumber":76,"author":{"gitId":"JodyLorah"},"content":"     * @param response Duke\u0027s response."},{"lineNumber":77,"author":{"gitId":"JodyLorah"},"content":"     * @param image Image of Duke."},{"lineNumber":78,"author":{"gitId":"JodyLorah"},"content":"     * @return DialogBox for Duke."},{"lineNumber":79,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"JodyLorah"},"content":"    public static DialogBox getDukeDialog(String response, Image image) {"},{"lineNumber":81,"author":{"gitId":"JodyLorah"},"content":"        DialogBox dialogBox \u003d new DialogBox(response, image);"},{"lineNumber":82,"author":{"gitId":"JodyLorah"},"content":"        dialogBox.flip();"},{"lineNumber":83,"author":{"gitId":"JodyLorah"},"content":"        return dialogBox;"},{"lineNumber":84,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"JodyLorah"},"content":"}"},{"lineNumber":86,"author":{"gitId":"JodyLorah"},"content":""}],"authorContributionMap":{"JodyLorah":86}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.MainWindow;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"    //private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public void start(Stage stage) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"            stage.setScene(scene);"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":34}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":" * Ui class which stores all the basic UI stuff like welcome message."},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"     * Prints a welcome message."},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"     * @return welcome message"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    public static String showWelcome() {"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"        return \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"     * Prints an exit message."},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"     * @return exit message"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"    public String exitDuke() {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":26}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c!-- @@author JodyLorah-reused"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Reused from https://github.com/ruilingk/ip/tree/master/src/main/resources/view with minor modifications --\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.paint.RadialGradient?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.paint.Stop?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"648.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    \u003cchildren\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"       \u003cLabel fx:id\u003d\"dialog\" text\u003d\"LABEL\" wrapText\u003d\"true\"\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"                \u003cFont name\u003d\"Trebuchet MS\" size\u003d\"14.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"            \u003c/font\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        \u003c/Label\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"WHITE\" radius\u003d\"52.0\" strokeType\u003d\"INSIDE\" strokeWidth\u003d\"2.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"                \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"            \u003cstroke\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"                \u003cRadialGradient centerX\u003d\"0.5866666581895617\" centerY\u003d\"0.5648855253030325\" focusAngle\u003d\"57.58\" focusDistance\u003d\"0.22429902976918448\" radius\u003d\"0.6401869158878505\"\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"                    \u003cstops\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"BLACK\" /\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"#87c7ff\" offset\u003d\"0.9961832061068702\" /\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"                        \u003cStop color\u003d\"#87c7ff\" offset\u003d\"1.0\" /\u003e"},{"lineNumber":31,"author":{"gitId":"-"},"content":"                    \u003c/stops\u003e"},{"lineNumber":32,"author":{"gitId":"-"},"content":"                \u003c/RadialGradient\u003e"},{"lineNumber":33,"author":{"gitId":"-"},"content":"            \u003c/stroke\u003e"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        \u003c/Circle\u003e"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    \u003c/children\u003e"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    \u003cpadding\u003e"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    \u003c/padding\u003e"},{"lineNumber":39,"author":{"gitId":"-"},"content":"\u003c/fx:root\u003e"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"\u003c!-- @@author --\u003e"}],"authorContributionMap":{"JodyLorah":2,"-":39}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"\u003c!-- @@author JodyLorah-reused"},{"lineNumber":4,"author":{"gitId":"-"},"content":"Reused from https://github.com/ruilingk/ip/tree/master/src/main/resources/view with minor modifications --\u003e"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":7,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":8,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":9,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":10,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":11,"author":{"gitId":"-"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"\u003cAnchorPane prefHeight\u003d\"704.0\" prefWidth\u003d\"650.0\" stylesheets\u003d\"@../stylesheets/styles.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    \u003cchildren\u003e"},{"lineNumber":15,"author":{"gitId":"-"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"555.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"568.0\" promptText\u003d\"Type here...\" AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"},{"lineNumber":16,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":17,"author":{"gitId":"-"},"content":"                \u003cFont name\u003d\"Gill Sans MT\" size\u003d\"16.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"-"},"content":"            \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"568.0\" layoutY\u003d\"661.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"82.0\" text\u003d\"SEND\"\u003e"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            \u003cfont\u003e"},{"lineNumber":21,"author":{"gitId":"-"},"content":"                \u003cFont size\u003d\"18.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"-"},"content":"            \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"661.0\" prefWidth\u003d\"650.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"-"},"content":"            \u003ccontent\u003e"},{"lineNumber":25,"author":{"gitId":"-"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"660.0\" prefWidth\u003d\"634.0\" stylesheets\u003d\"@../stylesheets/styles.css\" /\u003e"},{"lineNumber":26,"author":{"gitId":"-"},"content":"            \u003c/content\u003e"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    \u003c/children\u003e"},{"lineNumber":29,"author":{"gitId":"-"},"content":"\u003c/AnchorPane\u003e"},{"lineNumber":30,"author":{"gitId":"-"},"content":"\u003c!-- @@author --\u003e"}],"authorContributionMap":{"JodyLorah":2,"-":28}},{"path":"src/test/java/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.command.AddCommand;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"public class AddCommandTest {"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteTodo() throws IOException {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"            String todoInput \u003d \"todo this\";"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            AddCommand addTodoCommand \u003d new AddCommand(todoInput);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            addTodoCommand.execute(taskList, todoInput, storage);"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.addToDo(String)\\\" because \\\"tasks\\\" is null\","},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDeadline() throws IOException {"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"            String deadlineInput \u003d \"deadline return book /by 02/12/2019 18:00\";"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"            AddCommand addDeadlineCommand \u003d new AddCommand(deadlineInput);"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"            addDeadlineCommand.execute(taskList, deadlineInput, storage);"},{"lineNumber":36,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":37,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.addDeadline(String)\\\" because \\\"tasks\\\" is null\","},{"lineNumber":38,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":39,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":40,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":43,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteEvent() throws IOException {"},{"lineNumber":45,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"JodyLorah"},"content":"            String eventInput \u003d \"event return book /at 02/12/2019 18:00\";"},{"lineNumber":47,"author":{"gitId":"JodyLorah"},"content":"            AddCommand addEventCommand \u003d new AddCommand(eventInput);"},{"lineNumber":48,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":49,"author":{"gitId":"JodyLorah"},"content":"            addEventCommand.execute(taskList, eventInput, storage);"},{"lineNumber":50,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":51,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.addEvent(String)\\\" because \\\"tasks\\\" is null\","},{"lineNumber":52,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":53,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":54,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":57,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":58,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":59,"author":{"gitId":"JodyLorah"},"content":"        String todoInput \u003d \"todo this\";"},{"lineNumber":60,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addTodoCommand \u003d new AddCommand(todoInput);"},{"lineNumber":61,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":62,"author":{"gitId":"JodyLorah"},"content":"        String deadlineInput \u003d \"deadline return book /by 02/12/2019 18:00\";"},{"lineNumber":63,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addDeadlineCommand \u003d new AddCommand(deadlineInput);"},{"lineNumber":64,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":65,"author":{"gitId":"JodyLorah"},"content":"        String eventInput \u003d \"event return book /at 02/12/2019 18:00\";"},{"lineNumber":66,"author":{"gitId":"JodyLorah"},"content":"        AddCommand addEventCommand \u003d new AddCommand(eventInput);"},{"lineNumber":67,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":68,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addTodoCommand.isExit());"},{"lineNumber":69,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addDeadlineCommand.isExit());"},{"lineNumber":70,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(addEventCommand.isExit());"},{"lineNumber":71,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":72}},{"path":"src/test/java/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ByeCommandTest {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"            String exitInput \u003d \"bye\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            ByeCommand exitCommand \u003d new ByeCommand(exitInput);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            exitCommand.execute(taskList, exitInput, storage);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.addExit(String)\\\" because \\\"tasks\\\" is null\","},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String exitInput \u003d \"bye\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        ByeCommand exitCommand \u003d new ByeCommand(exitInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertTrue(exitCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DeleteCommandTest {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDelete() throws DukeException {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            String deleteInput \u003d \"delete 1\";"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"            DeleteCommand deleteCommand \u003d new DeleteCommand(deleteInput);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"            deleteCommand.execute(taskList, deleteInput, storage);"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Index 0 out of bounds for length 0\", e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String deleteInput \u003d \"delete 1\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        DeleteCommand deleteCommand \u003d new DeleteCommand(deleteInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(deleteCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DoneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"public class DoneCommandTest {"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            String doneInput \u003d \"done 1\";"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":"            DoneCommand doneCommand \u003d new DoneCommand(doneInput);"},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"            doneCommand.execute(taskList, doneInput, storage);"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"        } catch (IndexOutOfBoundsException | DukeException e) {"},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Index 0 out of bounds for length 0\", e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String doneInput \u003d \"done 1\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        DoneCommand doneCommand \u003d new DoneCommand(doneInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(doneCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"    public void dummyTest() {"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":10}},{"path":"src/test/java/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":6,"author":{"gitId":"JodyLorah"},"content":"import duke.command.ListCommand;"},{"lineNumber":7,"author":{"gitId":"JodyLorah"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"JodyLorah"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":10,"author":{"gitId":"JodyLorah"},"content":"public class ListCommandTest {"},{"lineNumber":11,"author":{"gitId":"JodyLorah"},"content":"    private final TaskList taskList \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"JodyLorah"},"content":"    private final Storage storage \u003d new Storage();"},{"lineNumber":13,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":14,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JodyLorah"},"content":"    public void testExecuteDone() {"},{"lineNumber":16,"author":{"gitId":"JodyLorah"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JodyLorah"},"content":"            String listInput \u003d \"foo\";"},{"lineNumber":18,"author":{"gitId":"JodyLorah"},"content":"            ListCommand listCommand \u003d new ListCommand(listInput);"},{"lineNumber":19,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":20,"author":{"gitId":"JodyLorah"},"content":"            listCommand.execute(taskList, listInput, storage);"},{"lineNumber":21,"author":{"gitId":"JodyLorah"},"content":"        } catch (NullPointerException e) {"},{"lineNumber":22,"author":{"gitId":"JodyLorah"},"content":"            assertEquals(\"Cannot invoke \\\"TaskList.list()\\\" because \\\"tasks\\\" is null\","},{"lineNumber":23,"author":{"gitId":"JodyLorah"},"content":"                    e.getMessage());"},{"lineNumber":24,"author":{"gitId":"JodyLorah"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":27,"author":{"gitId":"JodyLorah"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"JodyLorah"},"content":"    public void testIsExit() {"},{"lineNumber":29,"author":{"gitId":"JodyLorah"},"content":"        String listInput \u003d \"foo\";"},{"lineNumber":30,"author":{"gitId":"JodyLorah"},"content":"        ListCommand listCommand \u003d new ListCommand(listInput);"},{"lineNumber":31,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":32,"author":{"gitId":"JodyLorah"},"content":"        assertFalse(listCommand.isExit());"},{"lineNumber":33,"author":{"gitId":"JodyLorah"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JodyLorah"},"content":""},{"lineNumber":35,"author":{"gitId":"JodyLorah"},"content":"}"}],"authorContributionMap":{"JodyLorah":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JodyLorah"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"JodyLorah"},"content":"list"},{"lineNumber":3,"author":{"gitId":"JodyLorah"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"JodyLorah"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"JodyLorah"},"content":"bye"}],"authorContributionMap":{"JodyLorah":5}}]
