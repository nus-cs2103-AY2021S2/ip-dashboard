[{"path":"src/main/java/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"T | 0 | borrow book"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":"D | 1 | return book | 2011-11-11"},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"E | 0 | project meeting | 2034-02-28"}],"authorContributionMap":{"arsatis":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Parser;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Storage;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * The Duke program is an interactive application which"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * enables users to store and modify their tasks."},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    /** Task list which manages the tasks created by user input. */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    private TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    /** Storage which manages the loading and storing of tasks. */"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"    private Storage storage;"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    /** Ui which manages interactions with the user. */"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    private Ui ui;"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Duke class."},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"    public Duke(String path, String filename) {"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"        taskList \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"        storage \u003d new Storage(path, filename);"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"        ui \u003d new Ui();"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"     * Runs the Duke program."},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"    public void run() {"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"        boolean isExit \u003d false;"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"        ui.greet();"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"        storage.loadData(taskList);"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        while (!isExit) {"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"            String s \u003d ui.readCommand();"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"            Command c \u003d Parser.parse(s);"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"            c.execute(taskList, ui);"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"            ui.showLine();"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"        storage.saveData(taskList);"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"        ui.bye();"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"     * The main method which is executed when the Duke program"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"     * is executed."},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"     * @param args Unused."},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"    public static void main(String[] args) {"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":"        new Duke(\"../data/\", \"duke.txt\").run();"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"arsatis":62,"-":3}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.DateFormatException;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.EmptyDescriptionException;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.EmptyDateException;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.InvalidInputException;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * The AddCommand class is a command whose execution triggers the"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * addition of a task into the TaskList, based on the user input."},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"public class AddCommand extends Command {"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the AddCommand class."},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    public AddCommand(String command) {"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"        super(command);"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     * Calls the task manager to add a specified task to the"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * list upon receiving a user input that attempts to add"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     * a task to the list."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"            taskList.addTask(command);"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        } catch (EmptyDescriptionException | EmptyDateException | InvalidInputException"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"                | DateFormatException e) {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"     * @return False, since this is not an ExitCommand."},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"        return false;"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":60}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * The Command class is an abstract class which provides methods which"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * the other Command subclasses have to necessarily implement."},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"public abstract class Command {"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"    /** The user input formatted as a String object. */"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"    protected String command;"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Command class."},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    public Command(String command) {"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"        this.command \u003d command;"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * Executes an action, based on the type of the command."},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"    public abstract void execute(TaskList taskList, Ui ui);"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    public abstract boolean isExit();"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":42}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.ListOutOfBoundsException;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * The DeleteCommand class is a command whose execution triggers the"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * deletion of a task from the TaskList, based on the user input."},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the DeleteCommand class."},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    public DeleteCommand(String command) {"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"        super(command);"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * Calls the task manager to delete a specified task from"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     * the list upon receiving a user input that attempts to"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     * delete a task from the list."},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"            taskList.deleteTask(command);"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"        } catch (InvalidInputException | ListOutOfBoundsException e) {"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"     * @return False, since this is not an ExitCommand."},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"        return false;"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":56}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.ListOutOfBoundsException;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * The DoneCommand class is a command whose execution triggers the"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * marking of a task in the TaskList as done, based on the user input."},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"public class DoneCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the DoneCommand class."},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    public DoneCommand(String command) {"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"        super(command);"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * Calls the task manager to mark a specified task as done"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     * upon receiving a user input that attempts to mark a task"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     * as done."},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"            taskList.markDone(command);"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"        } catch (InvalidInputException | ListOutOfBoundsException e) {"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"            ui.showError(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"     * @return False, since this is not an ExitCommand."},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"        return false;"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":56}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * The ExitCommand class is a command whose execution triggers the"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * Duke program to terminate its execution."},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"public class ExitCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the ExitCommand class."},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    public ExitCommand() {"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"        super(\"\");"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     * Does nothing."},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"     * @return True, since this is the ExitCommand."},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"        return true;"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":46}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * The FindCommand class is a command whose execution triggers the"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * printing of tasks in the TaskList containing a keyword specified"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * by user input."},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"public class FindCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the FindCommand class."},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"    public FindCommand(String command) {"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"        super(command);"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"     * Calls the task manager to print a list of tasks in the TaskList"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * containing the specified keyword."},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        taskList.findTasksWithKeyword(command);"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     * @return False, since this is not an ExitCommand."},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":49}},{"path":"src/main/java/duke/command/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.command;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.DateFormatException;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.TaskList;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Ui;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * The PrintCommand class is a command whose execution triggers the"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * printing of tasks in the TaskList, based on the user input."},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"public class PrintCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the PrintCommand class."},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     * @param command The user input formatted as a String object."},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"    public PrintCommand(String command) {"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"        super(command);"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"     * Calls the task manager to either print the entire list of tasks"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     * in the TaskList, or the deadlines and events that are due or happening"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     * on the specified date."},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     * @param taskList A TaskList object containing the list of tasks"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     *                 which the program currently has."},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     * @param ui A Ui object which the current program is using to manage"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     *           interactions with the user."},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    public void execute(TaskList taskList, Ui ui) {"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"        String[] sArray \u003d command.split(\" \");"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"        if (sArray.length \u003d\u003d 1) {"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"            taskList.printTasks();"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"        } else {"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"                taskList.printTasksOnDate(sArray[1]);"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"            } catch (DateFormatException e) {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"     * Returns true if the command is an ExitCommand, and false otherwise."},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"     * @return False, since this is not an ExitCommand."},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"    public boolean isExit() {"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"        return false;"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":61}},{"path":"src/main/java/duke/exceptions/DateFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The DateFormatException class is an exception thrown"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * by the TaskList when the date specified by the user input"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * is incorrectly formatted."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class DateFormatException extends Exception {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the DateFormatException class."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    public DateFormatException() {"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"        super(\"OOPS!!! Please give your date in the format YYYY-MM-DD.\");"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":21}},{"path":"src/main/java/duke/exceptions/EmptyDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The EmptyDateException class is an exception thrown"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * by the TaskList when a date is not supplied for a"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * deadline or event by the user input."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-19"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class EmptyDateException extends Exception {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the EmptyTimeException class."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"     * @param s The type of task which triggered this exception."},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    public EmptyDateException(String s) {"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"        super(\"OOPS!!! The date of a \" + s + \" cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":23}},{"path":"src/main/java/duke/exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The EmptyDescriptionException class is an exception thrown"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * by the TaskList when a description is not supplied for a"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * task by the user input."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-19"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class EmptyDescriptionException extends Exception {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the EmptyDescriptionException class."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"     * @param s The type of task which triggered this exception."},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    public EmptyDescriptionException(String s) {"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"        super(\"OOPS!!! The description of a \" + s + \" cannot be empty.\");"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":23}},{"path":"src/main/java/duke/exceptions/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The InvalidInputException class is an exception thrown"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * by the TaskList when an invalid input or command is"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * supplied by the user."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-19"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the InvalidInputException class."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    public InvalidInputException() {"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"        super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":21}},{"path":"src/main/java/duke/exceptions/ListOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The ListOutOfBoundsException class is an exception thrown"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * by the TaskList when the user attempts to mark a task"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * that is not in the list as done, or delete a task that is"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * not in the list."},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @version 1.0"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-19"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"public class ListOutOfBoundsException extends Exception {"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the ListOutOfBoundsException class."},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     * @param size The current size of the list in a TaskList"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     *             object."},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    public ListOutOfBoundsException(int size) {"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"        super(\"OOPS!!! The list currently only has \" + size + \" elements.\");"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":25}},{"path":"src/main/java/duke/subfiles/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.subfiles;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.DeleteCommand;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.DoneCommand;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.PrintCommand;"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * The Parser class parses the user input as a Command."},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * Parses the user input as either an ExitCommand, PrintCommand, FindCommand,"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     * DoneCommand, DeleteCommand, or AddCommand, based on the"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"     * user input."},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     * @param s The user input."},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"     * @return A Command, whose type is based on the user input."},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"    public static Command parse(String s) {"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"        String[] sArray \u003d s.split(\" \");"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"        switch (sArray[0]) {"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"        case \"bye\":"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"            return new ExitCommand();"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"        case \"list\":"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"            return new PrintCommand(s);"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"        case \"find\":"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"            return new FindCommand(s);"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"        case \"done\":"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"            return new DoneCommand(s);"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"        case \"delete\":"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"            return new DeleteCommand(s);"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"        default:"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"            return new AddCommand(s);"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":47}},{"path":"src/main/java/duke/subfiles/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.subfiles;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.DateFormatException;"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.*;"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" * The Storage class manages the loading and storing of tasks."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"    /** The path leading to the save file. */"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    private String path;"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    /** The name of the save file. */"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    private String filename;"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Storage class."},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     * @param path The path leading to the save file."},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @param filename The name of the save file."},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"    public Storage(String path, String filename) {"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"        this.path \u003d path;"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"        this.filename \u003d filename;"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"     * Loads the data stored in the save file."},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     * @param taskList The list of tasks that the user has in"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     *                 the current execution of the Duke program."},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    public void loadData(TaskList taskList) {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        File f \u003d new File(path);"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"        if (!f.exists()) {"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"            f.mkdir();"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"        f \u003d new File(path + filename);"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"            while (sc.hasNext()) {"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"                taskList.addTaskFromData(sc.nextLine());"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"            try {"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"                f.createNewFile();"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"            } catch (IOException ex) {"},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"                System.out.println(\"Something went wrong during the creation of your save file.\");"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"arsatis"},"content":"        } catch (DateFormatException e) {"},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"There is an error with the format of a date in your save file.\");"},{"lineNumber":65,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":68,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"arsatis"},"content":"     * Saves the list of tasks that the user currently has in"},{"lineNumber":70,"author":{"gitId":"arsatis"},"content":"     * the save file."},{"lineNumber":71,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"arsatis"},"content":"     * @param taskList The list of tasks that the user has in"},{"lineNumber":73,"author":{"gitId":"arsatis"},"content":"     *                 the current execution of the Duke program."},{"lineNumber":74,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"arsatis"},"content":"    public void saveData(TaskList taskList) {"},{"lineNumber":76,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":77,"author":{"gitId":"arsatis"},"content":"            FileWriter fw \u003d new FileWriter(path + filename);"},{"lineNumber":78,"author":{"gitId":"arsatis"},"content":"            ArrayList\u003cTask\u003e tasks \u003d taskList.getTasks();"},{"lineNumber":79,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":80,"author":{"gitId":"arsatis"},"content":"            for (Task t : tasks) {"},{"lineNumber":81,"author":{"gitId":"arsatis"},"content":"                if (t instanceof ToDo) {"},{"lineNumber":82,"author":{"gitId":"arsatis"},"content":"                    fw.write(\"T | \" + (t.isDone() ? 1 : 0)"},{"lineNumber":83,"author":{"gitId":"arsatis"},"content":"                            + \" | \" + t.getName());"},{"lineNumber":84,"author":{"gitId":"arsatis"},"content":"                } else if (t instanceof Deadline) {"},{"lineNumber":85,"author":{"gitId":"arsatis"},"content":"                    Deadline d \u003d (Deadline) t;"},{"lineNumber":86,"author":{"gitId":"arsatis"},"content":"                    fw.write(\"D | \" + (d.isDone() ? 1 : 0) + \" | \""},{"lineNumber":87,"author":{"gitId":"arsatis"},"content":"                            + d.getName() + \" | \" + d.getDate());"},{"lineNumber":88,"author":{"gitId":"arsatis"},"content":"                } else {"},{"lineNumber":89,"author":{"gitId":"arsatis"},"content":"                    Event e \u003d (Event) t;"},{"lineNumber":90,"author":{"gitId":"arsatis"},"content":"                    fw.write(\"E | \" + (e.isDone() ? 1 : 0) + \" | \""},{"lineNumber":91,"author":{"gitId":"arsatis"},"content":"                            + e.getName() + \" | \" + e.getDate());"},{"lineNumber":92,"author":{"gitId":"arsatis"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"arsatis"},"content":"                fw.write(System.lineSeparator());"},{"lineNumber":94,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":96,"author":{"gitId":"arsatis"},"content":"            fw.close();"},{"lineNumber":97,"author":{"gitId":"arsatis"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Something went wrong during the saving of your file.\");"},{"lineNumber":99,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":102,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":102}},{"path":"src/main/java/duke/subfiles/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.subfiles;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.DateFormatException;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.EmptyDescriptionException;"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.EmptyDateException;"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.InvalidInputException;"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"import main.java.duke.exceptions.ListOutOfBoundsException;"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.ToDo;"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":" * The TaskList class contains a list of tasks created by"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":" * user input, and allows the user to add, print, or delete"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":" * tasks, as well as to mark a task in the list as done."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"public class TaskList {"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"    /** List of tasks created by user input. */"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the TaskList class."},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"    public TaskList() {"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"     * Adds a to-do to the list of tasks."},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * @param s User input triggering the addition of a to-do"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     *          to the list of tasks."},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDescriptionException If no description is provided"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     *                                   for the to-do."},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"    private void addTodo(String s)"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"            throws EmptyDescriptionException {"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"            s \u003d s.substring(5);"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"            tasks.add(new ToDo(s));"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"            throw new EmptyDescriptionException(\"todo\");"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"     * Adds a deadline to the list of tasks."},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"     * @param s User input triggering the addition of a deadline"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"     *          to the list of tasks."},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDescriptionException If no description is provided"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":"     *                                   for the deadline."},{"lineNumber":63,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDateException If no date is specified for the deadline."},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":"     * @throws DateFormatException If the specified date is incorrectly"},{"lineNumber":65,"author":{"gitId":"arsatis"},"content":"     *                             formatted."},{"lineNumber":66,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"arsatis"},"content":"    private void addDeadline(String s)"},{"lineNumber":68,"author":{"gitId":"arsatis"},"content":"            throws EmptyDescriptionException, EmptyDateException, DateFormatException {"},{"lineNumber":69,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"arsatis"},"content":"            String[] sArray \u003d s.split(\"/\", 2);"},{"lineNumber":71,"author":{"gitId":"arsatis"},"content":"            s \u003d sArray[0].substring(9, sArray[0].length() - 1);"},{"lineNumber":72,"author":{"gitId":"arsatis"},"content":"            LocalDate t \u003d LocalDate.parse(sArray[1].substring(3));"},{"lineNumber":73,"author":{"gitId":"arsatis"},"content":"            tasks.add(new Deadline(s, t));"},{"lineNumber":74,"author":{"gitId":"arsatis"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":75,"author":{"gitId":"arsatis"},"content":"            throw new EmptyDescriptionException(\"deadline\");"},{"lineNumber":76,"author":{"gitId":"arsatis"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":77,"author":{"gitId":"arsatis"},"content":"            throw new EmptyDateException(\"deadline\");"},{"lineNumber":78,"author":{"gitId":"arsatis"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":79,"author":{"gitId":"arsatis"},"content":"            throw new DateFormatException();"},{"lineNumber":80,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":83,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"arsatis"},"content":"     * Adds an event to the list of tasks."},{"lineNumber":85,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"arsatis"},"content":"     * @param s User input triggering the addition of an event"},{"lineNumber":87,"author":{"gitId":"arsatis"},"content":"     *          to the list of tasks."},{"lineNumber":88,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDescriptionException If no description is provided"},{"lineNumber":89,"author":{"gitId":"arsatis"},"content":"     *                                   for the event."},{"lineNumber":90,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDateException If no date is specified for the event."},{"lineNumber":91,"author":{"gitId":"arsatis"},"content":"     * @throws DateFormatException If the specified date is incorrectly"},{"lineNumber":92,"author":{"gitId":"arsatis"},"content":"     *                             formatted."},{"lineNumber":93,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"arsatis"},"content":"    private void addEvent(String s)"},{"lineNumber":95,"author":{"gitId":"arsatis"},"content":"            throws EmptyDescriptionException, EmptyDateException, DateFormatException {"},{"lineNumber":96,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":97,"author":{"gitId":"arsatis"},"content":"            String[] sArray \u003d s.split(\"/\", 2);"},{"lineNumber":98,"author":{"gitId":"arsatis"},"content":"            s \u003d sArray[0].substring(6, sArray[0].length() - 1);"},{"lineNumber":99,"author":{"gitId":"arsatis"},"content":"            LocalDate t \u003d LocalDate.parse(sArray[1].substring(3));"},{"lineNumber":100,"author":{"gitId":"arsatis"},"content":"            tasks.add(new Event(s, t));"},{"lineNumber":101,"author":{"gitId":"arsatis"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":102,"author":{"gitId":"arsatis"},"content":"            throw new EmptyDescriptionException(\"event\");"},{"lineNumber":103,"author":{"gitId":"arsatis"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":104,"author":{"gitId":"arsatis"},"content":"            throw new EmptyDateException(\"event\");"},{"lineNumber":105,"author":{"gitId":"arsatis"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":106,"author":{"gitId":"arsatis"},"content":"            throw new DateFormatException();"},{"lineNumber":107,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":110,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"arsatis"},"content":"     * Adds a task to the list of tasks. Calls either addTodo,"},{"lineNumber":112,"author":{"gitId":"arsatis"},"content":"     * addDeadline, or addEvent, depending on the type of task"},{"lineNumber":113,"author":{"gitId":"arsatis"},"content":"     * specified by the user."},{"lineNumber":114,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"arsatis"},"content":"     * @param s User input triggering the addition of a task"},{"lineNumber":116,"author":{"gitId":"arsatis"},"content":"     *          to the list of tasks."},{"lineNumber":117,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDescriptionException If no description is provided"},{"lineNumber":118,"author":{"gitId":"arsatis"},"content":"     *                                   for the task."},{"lineNumber":119,"author":{"gitId":"arsatis"},"content":"     * @throws EmptyDateException If no date or time is specified for"},{"lineNumber":120,"author":{"gitId":"arsatis"},"content":"     *                            the task, which is either a deadline"},{"lineNumber":121,"author":{"gitId":"arsatis"},"content":"     *                            or an event."},{"lineNumber":122,"author":{"gitId":"arsatis"},"content":"     * @throws InvalidInputException If the task is neither a to-do, a"},{"lineNumber":123,"author":{"gitId":"arsatis"},"content":"     *                               deadline, nor an event."},{"lineNumber":124,"author":{"gitId":"arsatis"},"content":"     * @throws DateFormatException If the specified date is incorrectly"},{"lineNumber":125,"author":{"gitId":"arsatis"},"content":"     *                             formatted."},{"lineNumber":126,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"arsatis"},"content":"    public void addTask(String s)"},{"lineNumber":128,"author":{"gitId":"arsatis"},"content":"            throws EmptyDescriptionException, EmptyDateException, InvalidInputException,"},{"lineNumber":129,"author":{"gitId":"arsatis"},"content":"            DateFormatException {"},{"lineNumber":130,"author":{"gitId":"arsatis"},"content":"        String command \u003d s.split(\" \", 2)[0];"},{"lineNumber":131,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":132,"author":{"gitId":"arsatis"},"content":"        switch (command) {"},{"lineNumber":133,"author":{"gitId":"arsatis"},"content":"        case \"todo\":"},{"lineNumber":134,"author":{"gitId":"arsatis"},"content":"            addTodo(s);"},{"lineNumber":135,"author":{"gitId":"arsatis"},"content":"            break;"},{"lineNumber":136,"author":{"gitId":"arsatis"},"content":"        case \"deadline\":"},{"lineNumber":137,"author":{"gitId":"arsatis"},"content":"            addDeadline(s);"},{"lineNumber":138,"author":{"gitId":"arsatis"},"content":"            break;"},{"lineNumber":139,"author":{"gitId":"arsatis"},"content":"        case \"event\":"},{"lineNumber":140,"author":{"gitId":"arsatis"},"content":"            addEvent(s);"},{"lineNumber":141,"author":{"gitId":"arsatis"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"arsatis"},"content":"        default:"},{"lineNumber":143,"author":{"gitId":"arsatis"},"content":"            throw new InvalidInputException();"},{"lineNumber":144,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":146,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":147,"author":{"gitId":"arsatis"},"content":"        System.out.println(tasks.get(tasks.size() - 1).toString());"},{"lineNumber":148,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":149,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":151,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":152,"author":{"gitId":"arsatis"},"content":"     * Adds a to-do, deadline, or event, to the list of tasks, based on"},{"lineNumber":153,"author":{"gitId":"arsatis"},"content":"     * previously saved data."},{"lineNumber":154,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":155,"author":{"gitId":"arsatis"},"content":"     * @param s A line from the user\u0027s save data."},{"lineNumber":156,"author":{"gitId":"arsatis"},"content":"     * @throws DateFormatException If the specified date is incorrectly"},{"lineNumber":157,"author":{"gitId":"arsatis"},"content":"     *                             formatted."},{"lineNumber":158,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"arsatis"},"content":"    public void addTaskFromData(String s) throws DateFormatException {"},{"lineNumber":160,"author":{"gitId":"arsatis"},"content":"        String[] sArray \u003d s.split(\" \\\\| \");"},{"lineNumber":161,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":162,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":163,"author":{"gitId":"arsatis"},"content":"            if (sArray[0].equals(\"T\")) {"},{"lineNumber":164,"author":{"gitId":"arsatis"},"content":"                tasks.add(new ToDo(sArray[2]));"},{"lineNumber":165,"author":{"gitId":"arsatis"},"content":"            } else if (sArray[0].equals(\"D\")) {"},{"lineNumber":166,"author":{"gitId":"arsatis"},"content":"                tasks.add(new Deadline(sArray[2], LocalDate.parse(sArray[3])));"},{"lineNumber":167,"author":{"gitId":"arsatis"},"content":"            } else {"},{"lineNumber":168,"author":{"gitId":"arsatis"},"content":"                tasks.add(new Event(sArray[2], LocalDate.parse(sArray[3])));"},{"lineNumber":169,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":170,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":171,"author":{"gitId":"arsatis"},"content":"            if (sArray[1].equals(\"1\")) {"},{"lineNumber":172,"author":{"gitId":"arsatis"},"content":"                tasks.get(tasks.size() - 1).setDone();"},{"lineNumber":173,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":174,"author":{"gitId":"arsatis"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":175,"author":{"gitId":"arsatis"},"content":"            throw new DateFormatException();"},{"lineNumber":176,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":179,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":180,"author":{"gitId":"arsatis"},"content":"     * Prints the list of tasks added by the user till this point,"},{"lineNumber":181,"author":{"gitId":"arsatis"},"content":"     * based on the order they were added by the user."},{"lineNumber":182,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":183,"author":{"gitId":"arsatis"},"content":"    public void printTasks() {"},{"lineNumber":184,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":185,"author":{"gitId":"arsatis"},"content":"        for (int i \u003d 1; i \u003c tasks.size() + 1; i++) {"},{"lineNumber":186,"author":{"gitId":"arsatis"},"content":"            Task task \u003d tasks.get(i - 1);"},{"lineNumber":187,"author":{"gitId":"arsatis"},"content":"            System.out.println(i + \". \" + task.toString());"},{"lineNumber":188,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":191,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"arsatis"},"content":"     * Prints the list of deadlines added by the user till this point,"},{"lineNumber":193,"author":{"gitId":"arsatis"},"content":"     * due on the date specified by the user, based on the order they"},{"lineNumber":194,"author":{"gitId":"arsatis"},"content":"     * were added by the user."},{"lineNumber":195,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"arsatis"},"content":"     * @param date The date specified by the user."},{"lineNumber":197,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"arsatis"},"content":"    private void printDeadlinesOnDate(LocalDate date) {"},{"lineNumber":199,"author":{"gitId":"arsatis"},"content":"        ArrayList\u003cDeadline\u003e deadlines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":200,"author":{"gitId":"arsatis"},"content":"        for (Task t : tasks) {"},{"lineNumber":201,"author":{"gitId":"arsatis"},"content":"            if (t instanceof Deadline) {"},{"lineNumber":202,"author":{"gitId":"arsatis"},"content":"                Deadline d \u003d (Deadline) t;"},{"lineNumber":203,"author":{"gitId":"arsatis"},"content":"                if (d.getDateAsLocalDate().equals(date)) {"},{"lineNumber":204,"author":{"gitId":"arsatis"},"content":"                    deadlines.add(d);"},{"lineNumber":205,"author":{"gitId":"arsatis"},"content":"                }"},{"lineNumber":206,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":207,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":209,"author":{"gitId":"arsatis"},"content":"        if (deadlines.size() \u003d\u003d 0) {"},{"lineNumber":210,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"You have no deadlines due on \" + date.toString() + \".\");"},{"lineNumber":211,"author":{"gitId":"arsatis"},"content":"        } else {"},{"lineNumber":212,"author":{"gitId":"arsatis"},"content":"            int i \u003d 1;"},{"lineNumber":213,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Here are the deadlines due on \" + date.toString() + \":\");"},{"lineNumber":214,"author":{"gitId":"arsatis"},"content":"            for (Deadline d : deadlines) {"},{"lineNumber":215,"author":{"gitId":"arsatis"},"content":"                System.out.println(i + \". \" + d.toString());"},{"lineNumber":216,"author":{"gitId":"arsatis"},"content":"                i++;"},{"lineNumber":217,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":218,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":219,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":221,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"arsatis"},"content":"     * Prints the list of events added by the user till this point,"},{"lineNumber":223,"author":{"gitId":"arsatis"},"content":"     * happening on the date specified by the user, based on the order"},{"lineNumber":224,"author":{"gitId":"arsatis"},"content":"     * they were added by the user."},{"lineNumber":225,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":226,"author":{"gitId":"arsatis"},"content":"     * @param date The date specified by the user."},{"lineNumber":227,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":228,"author":{"gitId":"arsatis"},"content":"    private void printEventsOnDate(LocalDate date) {"},{"lineNumber":229,"author":{"gitId":"arsatis"},"content":"        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"},{"lineNumber":230,"author":{"gitId":"arsatis"},"content":"        for (Task t : tasks) {"},{"lineNumber":231,"author":{"gitId":"arsatis"},"content":"            if (t instanceof Event) {"},{"lineNumber":232,"author":{"gitId":"arsatis"},"content":"                Event e \u003d (Event) t;"},{"lineNumber":233,"author":{"gitId":"arsatis"},"content":"                if (e.getDateAsLocalDate().equals(date)) {"},{"lineNumber":234,"author":{"gitId":"arsatis"},"content":"                    events.add(e);"},{"lineNumber":235,"author":{"gitId":"arsatis"},"content":"                }"},{"lineNumber":236,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":237,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":238,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":239,"author":{"gitId":"arsatis"},"content":"        if (events.size() \u003d\u003d 0) {"},{"lineNumber":240,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"You have no events due on \" + date.toString() + \".\");"},{"lineNumber":241,"author":{"gitId":"arsatis"},"content":"        } else {"},{"lineNumber":242,"author":{"gitId":"arsatis"},"content":"            int i \u003d 1;"},{"lineNumber":243,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Here are the events due on \" + date.toString() + \":\");"},{"lineNumber":244,"author":{"gitId":"arsatis"},"content":"            for (Event e : events) {"},{"lineNumber":245,"author":{"gitId":"arsatis"},"content":"                System.out.println(i + \". \" + e.toString());"},{"lineNumber":246,"author":{"gitId":"arsatis"},"content":"                i++;"},{"lineNumber":247,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":248,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":249,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":250,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":251,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":252,"author":{"gitId":"arsatis"},"content":"     * Prints the list of deadlines and events added by the user till this point,"},{"lineNumber":253,"author":{"gitId":"arsatis"},"content":"     * due or happening on the date specified by the user, based on the order"},{"lineNumber":254,"author":{"gitId":"arsatis"},"content":"     * they were added by the user."},{"lineNumber":255,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":256,"author":{"gitId":"arsatis"},"content":"     * @param s The date specified by the user."},{"lineNumber":257,"author":{"gitId":"arsatis"},"content":"     * @throws DateFormatException If the specified date is incorrectly"},{"lineNumber":258,"author":{"gitId":"arsatis"},"content":"     *                             formatted."},{"lineNumber":259,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"arsatis"},"content":"    public void printTasksOnDate(String s) throws DateFormatException {"},{"lineNumber":261,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":262,"author":{"gitId":"arsatis"},"content":"            LocalDate date \u003d LocalDate.parse(s);"},{"lineNumber":263,"author":{"gitId":"arsatis"},"content":"            printDeadlinesOnDate(date);"},{"lineNumber":264,"author":{"gitId":"arsatis"},"content":"            printEventsOnDate(date);"},{"lineNumber":265,"author":{"gitId":"arsatis"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":266,"author":{"gitId":"arsatis"},"content":"            throw new DateFormatException();"},{"lineNumber":267,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":268,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":269,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":270,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":271,"author":{"gitId":"arsatis"},"content":"     * Prints the list of tasks added by the user till this point,"},{"lineNumber":272,"author":{"gitId":"arsatis"},"content":"     * containing the keyword specified by the user, based on the order"},{"lineNumber":273,"author":{"gitId":"arsatis"},"content":"     * they were added by the user."},{"lineNumber":274,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":275,"author":{"gitId":"arsatis"},"content":"     * @param s User input containing the keyword."},{"lineNumber":276,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":277,"author":{"gitId":"arsatis"},"content":"    public void findTasksWithKeyword(String s) {"},{"lineNumber":278,"author":{"gitId":"arsatis"},"content":"        String keyword \u003d s.split(\" \", 2)[1].toLowerCase();"},{"lineNumber":279,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":280,"author":{"gitId":"arsatis"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":281,"author":{"gitId":"arsatis"},"content":"        for (Task t : tasks) {"},{"lineNumber":282,"author":{"gitId":"arsatis"},"content":"            if (t.getName().toLowerCase().contains(keyword)) {"},{"lineNumber":283,"author":{"gitId":"arsatis"},"content":"                matchingTasks.add(t);"},{"lineNumber":284,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":285,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":286,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":287,"author":{"gitId":"arsatis"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":288,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"You have no matching tasks in your list.\");"},{"lineNumber":289,"author":{"gitId":"arsatis"},"content":"        } else {"},{"lineNumber":290,"author":{"gitId":"arsatis"},"content":"            int i \u003d 1;"},{"lineNumber":291,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":292,"author":{"gitId":"arsatis"},"content":"            for (Task t : matchingTasks) {"},{"lineNumber":293,"author":{"gitId":"arsatis"},"content":"                System.out.println(i + \". \" + t.toString());"},{"lineNumber":294,"author":{"gitId":"arsatis"},"content":"                i++;"},{"lineNumber":295,"author":{"gitId":"arsatis"},"content":"            }"},{"lineNumber":296,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":297,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":298,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":299,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":300,"author":{"gitId":"arsatis"},"content":"     * Marks a task that is specified by the user as done. The"},{"lineNumber":301,"author":{"gitId":"arsatis"},"content":"     * user should specify the index of the task in the list"},{"lineNumber":302,"author":{"gitId":"arsatis"},"content":"     * which he or she intends to mark as done."},{"lineNumber":303,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":304,"author":{"gitId":"arsatis"},"content":"     * @param s User input containing the index of the task to be marked as done"},{"lineNumber":305,"author":{"gitId":"arsatis"},"content":"     *          in the list of tasks, in String format."},{"lineNumber":306,"author":{"gitId":"arsatis"},"content":"     * @throws InvalidInputException If the user provided a non-integer index"},{"lineNumber":307,"author":{"gitId":"arsatis"},"content":"     *                               in the user input."},{"lineNumber":308,"author":{"gitId":"arsatis"},"content":"     * @throws ListOutOfBoundsException If the user provided an index which is"},{"lineNumber":309,"author":{"gitId":"arsatis"},"content":"     *                                  not in the list."},{"lineNumber":310,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":311,"author":{"gitId":"arsatis"},"content":"    public void markDone(String s)"},{"lineNumber":312,"author":{"gitId":"arsatis"},"content":"            throws InvalidInputException, ListOutOfBoundsException {"},{"lineNumber":313,"author":{"gitId":"arsatis"},"content":"        int index;"},{"lineNumber":314,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":315,"author":{"gitId":"arsatis"},"content":"            String[] sArray \u003d s.split(\" \");"},{"lineNumber":316,"author":{"gitId":"arsatis"},"content":"            index \u003d Integer.parseInt(sArray[1]) - 1;"},{"lineNumber":317,"author":{"gitId":"arsatis"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":318,"author":{"gitId":"arsatis"},"content":"            throw new InvalidInputException();"},{"lineNumber":319,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":320,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":321,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":322,"author":{"gitId":"arsatis"},"content":"            tasks.get(index).setDone();"},{"lineNumber":323,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":324,"author":{"gitId":"arsatis"},"content":"            System.out.println(tasks.get(index).toString());"},{"lineNumber":325,"author":{"gitId":"arsatis"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":326,"author":{"gitId":"arsatis"},"content":"            throw new ListOutOfBoundsException(tasks.size());"},{"lineNumber":327,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":328,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":329,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":330,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":331,"author":{"gitId":"arsatis"},"content":"     * Deletes a task that is specified by the user from the"},{"lineNumber":332,"author":{"gitId":"arsatis"},"content":"     * list of tasks. The user should specify the index of the"},{"lineNumber":333,"author":{"gitId":"arsatis"},"content":"     * task in the list which he or she intends to delete."},{"lineNumber":334,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":335,"author":{"gitId":"arsatis"},"content":"     * @param s User input containing the index of the task to be deleted from"},{"lineNumber":336,"author":{"gitId":"arsatis"},"content":"     *          the list of tasks, in String format."},{"lineNumber":337,"author":{"gitId":"arsatis"},"content":"     * @throws InvalidInputException If the user provided a non-integer index"},{"lineNumber":338,"author":{"gitId":"arsatis"},"content":"     *                               in the user input."},{"lineNumber":339,"author":{"gitId":"arsatis"},"content":"     * @throws ListOutOfBoundsException If the user provided an index which is"},{"lineNumber":340,"author":{"gitId":"arsatis"},"content":"     *                                  not in the list."},{"lineNumber":341,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":342,"author":{"gitId":"arsatis"},"content":"    public void deleteTask(String s) throws InvalidInputException, ListOutOfBoundsException {"},{"lineNumber":343,"author":{"gitId":"arsatis"},"content":"        int index;"},{"lineNumber":344,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":345,"author":{"gitId":"arsatis"},"content":"            String[] sArray \u003d s.split(\" \");"},{"lineNumber":346,"author":{"gitId":"arsatis"},"content":"            index \u003d Integer.parseInt(sArray[1]) - 1;"},{"lineNumber":347,"author":{"gitId":"arsatis"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":348,"author":{"gitId":"arsatis"},"content":"            throw new InvalidInputException();"},{"lineNumber":349,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":350,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":351,"author":{"gitId":"arsatis"},"content":"        try {"},{"lineNumber":352,"author":{"gitId":"arsatis"},"content":"            Task t \u003d tasks.remove(index);"},{"lineNumber":353,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":354,"author":{"gitId":"arsatis"},"content":"            System.out.println(t.toString());"},{"lineNumber":355,"author":{"gitId":"arsatis"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":356,"author":{"gitId":"arsatis"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":357,"author":{"gitId":"arsatis"},"content":"            throw new ListOutOfBoundsException(tasks.size());"},{"lineNumber":358,"author":{"gitId":"arsatis"},"content":"        }"},{"lineNumber":359,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":360,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":361,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":362,"author":{"gitId":"arsatis"},"content":"     * Returns the list of tasks which the user currently has in his/her"},{"lineNumber":363,"author":{"gitId":"arsatis"},"content":"     * task list."},{"lineNumber":364,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":365,"author":{"gitId":"arsatis"},"content":"     * @return The list of tasks which the user currently has."},{"lineNumber":366,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":367,"author":{"gitId":"arsatis"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":368,"author":{"gitId":"arsatis"},"content":"        return tasks;"},{"lineNumber":369,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":370,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":371,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":371}},{"path":"src/main/java/duke/subfiles/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.subfiles;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * The Ui class manages interactions with the user, based on"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * user input."},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"public class Ui {"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /** Scanner class used to read user input. */"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"    private Scanner sc;"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Ui class."},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    public Ui() {"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     * Greets the user upon execution of the program."},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    public void greet() {"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"Hello! I\u0027m Duke\");"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     * Bids the user farewell before termination of the program."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"    public void bye() {"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        sc.close();"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * Reads the user\u0027s input from the command line."},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     * @return The user\u0027s input formatted as a String object."},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    public String readCommand() {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        String s \u003d sc.nextLine();"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"        return s;"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"     * Displays a horizontal line on the GUI."},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"    public void showLine() {"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"        System.out.println(\"__________\");"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"     * Displays the error message produced by a command."},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"     * @param s The error message produced by the command."},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":"    public void showError(String s) {"},{"lineNumber":63,"author":{"gitId":"arsatis"},"content":"        System.out.println(s);"},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":66,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":66}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * The Deadline class represents a single deadline created by"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * the user via user input to the Duke program. It contains"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * functions which enable the user to mark the task as done,"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * and a date which the deadline is due."},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"public class Deadline extends Task {"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    /** Date which the deadline is due. */"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    private LocalDate date;"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Deadline class."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"     * @param name Description of the deadline."},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     * @param date Date which the deadline is due."},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    public Deadline(String name, LocalDate date) {"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"        super(name);"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"        this.date \u003d date;"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * Returns the date the Deadline is due on, formatted as a String."},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     * @return The date the Deadline is due on, formatted as a String."},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    public String getDate() {"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        return date.toString();"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * Returns the date the Deadline is due on, formatted as a LocalDate."},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     * @return The date the Deadline is due on, formatted as a LocalDate."},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    public LocalDate getDateAsLocalDate() {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        return date;"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"     * Returns a description of the deadline, formatted with its"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"     * type, followed by an \"X\" if it has been marked as done."},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"     * @return Formatted description of the deadline."},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"        return \"[D][\" + (isDone ? \"X\" : \" \") + \"] \" + name + \" (by: \""},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":61}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" * The Event class represents a single event created by the"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * user via user input to the Duke program. It contains"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * functions which enable the user to mark the task as done,"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * and a date which the event is held on."},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"public class Event extends Task {"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    /** Date which the event is held on. */"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    private LocalDate date;"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Event class."},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"     * @param name Description of the event."},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     * @param date Date which the event is held on."},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    public Event(String name, LocalDate date) {"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"        super(name);"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"        this.date \u003d date;"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * Returns the date the Event is held on, formatted as a String."},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     * @return The date the Event is held on, formatted as a String."},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    public String getDate() {"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        return date.toString();"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * Returns the date the Event is held on, formatted as a LocalDate."},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"     * @return The date the Event is held on, formatted as a LocalDate."},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    public LocalDate getDateAsLocalDate() {"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        return date;"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"     * Returns a description of the event, formatted with its"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"     * type, followed by an \"X\" if it has been marked as done."},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"     * @return Formatted description of the event."},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"        return \"[E][\" + (isDone ? \"X\" : \" \") + \"] \" + name + \" (at: \""},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":61}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The Task class represents a single task created by the"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * user via user input to the Duke program. It contains"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * functions which enable the user to mark the task as done."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.1"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-26"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"    /** Description of the task. */"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    protected String name;"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"    /** Indicates whether the task has been done by the user. */"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    protected boolean isDone;"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the Task class."},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"     * @param name Description of the task."},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    public Task(String name) {"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"        isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"     * Checks whether the task has been marked as done."},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"     * @return True if the task has been marked as done, and"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"     *         false otherwise."},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"    public boolean isDone() {"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"        return isDone;"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"     * Sets the isDone field to true, indicating that the task"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"     * has been marked as done."},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"    public void setDone() {"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        isDone \u003d true;"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"     * Returns the name (description) of the task."},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"     * @return The name (description) of the task."},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"    public String getName() {"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"        return name;"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"     * Returns a description of the task, formatted with an"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"     * \"X\" if it has been marked as done."},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"     * @return Formatted description of the task."},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":63,"author":{"gitId":"arsatis"},"content":"    public String toString() {"},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":"        return \"[ ][\" + (isDone ? \"X\" : \" \") + \"] \" + name;"},{"lineNumber":65,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":67,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":67}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"package main.java.duke.task;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":" * The ToDo class represents a single to-do item created by the"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":" * user via user input to the Duke program. It contains"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":" * functions which enable the user to mark the to-do as done."},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":" *"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":" * @author  arsatis"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":" * @version 1.0"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":" * @since   2021-01-19"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":" */"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class ToDo extends Task {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"     * Default constructor for the ToDo class."},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"     * @param name Description of the to-do."},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    public ToDo(String name) {"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"        super(name);"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"     * Returns a description of the to-do, formatted with its"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"     * type, followed by an \"X\" if it has been marked as done."},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"     * @return Formatted description of the to-do."},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"        return \"[T][\" + (isDone ? \"X\" : \" \") + \"] \" + name;"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":34}},{"path":"src/test/java/ParseTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.AddCommand;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.DeleteCommand;"},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.DoneCommand;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.ExitCommand;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"import main.java.duke.command.PrintCommand;"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import main.java.duke.subfiles.Parser;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"public class ParseTest {"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"    public void parseAsExitCommand() {"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"bye Duke\") instanceof ExitCommand);"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    public void parseAsPrintCommand() {"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"list\") instanceof PrintCommand);"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"list abcde\") instanceof PrintCommand);"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"list 1111-11-11\") instanceof PrintCommand);"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"    public void parseAsDoneCommand() {"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"done\") instanceof DoneCommand);"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"done abcde\") instanceof DoneCommand);"},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":"    public void parseAsDeleteCommand() {"},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"delete\") instanceof DeleteCommand);"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"delete abcde\") instanceof DeleteCommand);"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":"    public void parseAsAddCommand() {"},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"\") instanceof AddCommand);"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"todo abcde\") instanceof AddCommand);"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"deadline abcde\") instanceof AddCommand);"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"deadline abcde /by 1111-11-11\") instanceof AddCommand);"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"event abcde\") instanceof AddCommand);"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"        assertTrue(Parser.parse(\"event abcde /at 1111-11-11\") instanceof AddCommand);"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":49}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Deadline;"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Event;"},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"import main.java.duke.task.ToDo;"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"public class TaskTest {"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"    public void setTaskAsDone_beforeSetDone() {"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"        assertFalse(new Task(\"\").isDone());"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":20,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"arsatis"},"content":"    public void setToDoAsDone_beforeSetDone() {"},{"lineNumber":22,"author":{"gitId":"arsatis"},"content":"        assertFalse(new ToDo(\"\").isDone());"},{"lineNumber":23,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":25,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"arsatis"},"content":"    public void setDeadlineAsDone_beforeSetDone() {"},{"lineNumber":27,"author":{"gitId":"arsatis"},"content":"        assertFalse(new Deadline(\"\", LocalDate.parse(\"1111-11-11\")).isDone());"},{"lineNumber":28,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":30,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"arsatis"},"content":"    public void setEventAsDone_beforeSetDone() {"},{"lineNumber":32,"author":{"gitId":"arsatis"},"content":"        assertFalse(new Event(\"\", LocalDate.parse(\"1111-11-11\")).isDone());"},{"lineNumber":33,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":35,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"arsatis"},"content":"    public void setTaskAsDone_afterSetDone() {"},{"lineNumber":37,"author":{"gitId":"arsatis"},"content":"        Task task \u003d new Task(\"\");"},{"lineNumber":38,"author":{"gitId":"arsatis"},"content":"        task.setDone();"},{"lineNumber":39,"author":{"gitId":"arsatis"},"content":"        assertTrue(task.isDone());"},{"lineNumber":40,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":42,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"arsatis"},"content":"    public void setToDoAsDone_afterSetDone() {"},{"lineNumber":44,"author":{"gitId":"arsatis"},"content":"        ToDo todo \u003d new ToDo(\"\");"},{"lineNumber":45,"author":{"gitId":"arsatis"},"content":"        todo.setDone();"},{"lineNumber":46,"author":{"gitId":"arsatis"},"content":"        assertTrue(todo.isDone());"},{"lineNumber":47,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":49,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"arsatis"},"content":"    public void setDeadlineAsDone_afterSetDone() {"},{"lineNumber":51,"author":{"gitId":"arsatis"},"content":"        Deadline deadline \u003d new Deadline(\"\", LocalDate.parse(\"1111-11-11\"));"},{"lineNumber":52,"author":{"gitId":"arsatis"},"content":"        deadline.setDone();"},{"lineNumber":53,"author":{"gitId":"arsatis"},"content":"        assertTrue(deadline.isDone());"},{"lineNumber":54,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":56,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"arsatis"},"content":"    public void setEventAsDone_afterSetDone() {"},{"lineNumber":58,"author":{"gitId":"arsatis"},"content":"        Event event \u003d new Event(\"\", LocalDate.parse(\"1111-11-11\"));"},{"lineNumber":59,"author":{"gitId":"arsatis"},"content":"        event.setDone();"},{"lineNumber":60,"author":{"gitId":"arsatis"},"content":"        assertTrue(event.isDone());"},{"lineNumber":61,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":63,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":64,"author":{"gitId":"arsatis"},"content":"    public void getTaskName() {"},{"lineNumber":65,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"\", new Task(\"\").getName());"},{"lineNumber":66,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"hi\", new Task(\"hi\").getName());"},{"lineNumber":67,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"qwertyuiopasdfghjklzxcvbnm\","},{"lineNumber":68,"author":{"gitId":"arsatis"},"content":"                new Task(\"qwertyuiopasdfghjklzxcvbnm\").getName());"},{"lineNumber":69,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":71,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":72,"author":{"gitId":"arsatis"},"content":"    public void getTodoName() {"},{"lineNumber":73,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"\", new ToDo(\"\").getName());"},{"lineNumber":74,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"hi\", new ToDo(\"hi\").getName());"},{"lineNumber":75,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"qwertyuiopasdfghjklzxcvbnm\","},{"lineNumber":76,"author":{"gitId":"arsatis"},"content":"                new ToDo(\"qwertyuiopasdfghjklzxcvbnm\").getName());"},{"lineNumber":77,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":79,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"arsatis"},"content":"    public void getDeadlineName() {"},{"lineNumber":81,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"\", new Deadline(\"\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":82,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"hi\", new Deadline(\"hi\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":83,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"qwertyuiopasdfghjklzxcvbnm\","},{"lineNumber":84,"author":{"gitId":"arsatis"},"content":"                new Deadline(\"qwertyuiopasdfghjklzxcvbnm\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":85,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":87,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"arsatis"},"content":"    public void getEventName() {"},{"lineNumber":89,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"\", new Event(\"\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":90,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"hi\", new Event(\"hi\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":91,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"qwertyuiopasdfghjklzxcvbnm\","},{"lineNumber":92,"author":{"gitId":"arsatis"},"content":"                new Event(\"qwertyuiopasdfghjklzxcvbnm\", LocalDate.parse(\"1111-11-11\")).getName());"},{"lineNumber":93,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":95,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"arsatis"},"content":"    public void getTaskToString() {"},{"lineNumber":97,"author":{"gitId":"arsatis"},"content":"        Task t \u003d new Task(\"say hi\");"},{"lineNumber":98,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[ ][ ] say hi\", t.toString());"},{"lineNumber":99,"author":{"gitId":"arsatis"},"content":"        t.setDone();"},{"lineNumber":100,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[ ][X] say hi\", t.toString());"},{"lineNumber":101,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":103,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":104,"author":{"gitId":"arsatis"},"content":"    public void getToDoToString() {"},{"lineNumber":105,"author":{"gitId":"arsatis"},"content":"        ToDo t \u003d new ToDo(\"say hi\");"},{"lineNumber":106,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[T][ ] say hi\", t.toString());"},{"lineNumber":107,"author":{"gitId":"arsatis"},"content":"        t.setDone();"},{"lineNumber":108,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[T][X] say hi\", t.toString());"},{"lineNumber":109,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":111,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":112,"author":{"gitId":"arsatis"},"content":"    public void getDeadlineToString() {"},{"lineNumber":113,"author":{"gitId":"arsatis"},"content":"        Deadline d \u003d new Deadline(\"say hi\", LocalDate.parse(\"1111-11-11\"));"},{"lineNumber":114,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[D][ ] say hi (by: Nov 11 1111)\", d.toString());"},{"lineNumber":115,"author":{"gitId":"arsatis"},"content":"        d.setDone();"},{"lineNumber":116,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[D][X] say hi (by: Nov 11 1111)\", d.toString());"},{"lineNumber":117,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":119,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":120,"author":{"gitId":"arsatis"},"content":"    public void getEventToString() {"},{"lineNumber":121,"author":{"gitId":"arsatis"},"content":"        Event e \u003d new Event(\"say hi\", LocalDate.parse(\"1111-11-11\"));"},{"lineNumber":122,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[E][ ] say hi (at: Nov 11 1111)\", e.toString());"},{"lineNumber":123,"author":{"gitId":"arsatis"},"content":"        e.setDone();"},{"lineNumber":124,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"[E][X] say hi (at: Nov 11 1111)\", e.toString());"},{"lineNumber":125,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":127,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":128,"author":{"gitId":"arsatis"},"content":"    public void getDeadlineDate() {"},{"lineNumber":129,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"1111-11-11\","},{"lineNumber":130,"author":{"gitId":"arsatis"},"content":"                new Deadline(\"\", LocalDate.parse(\"1111-11-11\")).getDate());"},{"lineNumber":131,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":133,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":134,"author":{"gitId":"arsatis"},"content":"    public void getEventDate() {"},{"lineNumber":135,"author":{"gitId":"arsatis"},"content":"        assertEquals(\"1111-11-11\","},{"lineNumber":136,"author":{"gitId":"arsatis"},"content":"                new Event(\"\", LocalDate.parse(\"1111-11-11\")).getDate());"},{"lineNumber":137,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":139,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":140,"author":{"gitId":"arsatis"},"content":"    public void getDeadlineDateAsLocalDate() {"},{"lineNumber":141,"author":{"gitId":"arsatis"},"content":"        assertEquals(LocalDate.parse(\"1111-11-11\"),"},{"lineNumber":142,"author":{"gitId":"arsatis"},"content":"                new Deadline(\"\", LocalDate.parse(\"1111-11-11\")).getDateAsLocalDate());"},{"lineNumber":143,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"arsatis"},"content":""},{"lineNumber":145,"author":{"gitId":"arsatis"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"arsatis"},"content":"    public void getEventDateAsLocalDate() {"},{"lineNumber":147,"author":{"gitId":"arsatis"},"content":"        assertEquals(LocalDate.parse(\"1111-11-11\"),"},{"lineNumber":148,"author":{"gitId":"arsatis"},"content":"                new Event(\"\", LocalDate.parse(\"1111-11-11\")).getDateAsLocalDate());"},{"lineNumber":149,"author":{"gitId":"arsatis"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"arsatis"},"content":"}"}],"authorContributionMap":{"arsatis":150}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"arsatis"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"arsatis"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"arsatis"},"content":"deadline return book /by 2011-11-11"},{"lineNumber":4,"author":{"gitId":"arsatis"},"content":"deadline return book /by 2019-01-01"},{"lineNumber":5,"author":{"gitId":"arsatis"},"content":"deadline return book /by 2034-02-28"},{"lineNumber":6,"author":{"gitId":"arsatis"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":7,"author":{"gitId":"arsatis"},"content":"event project meeting /at 2034-02-28"},{"lineNumber":8,"author":{"gitId":"arsatis"},"content":"list"},{"lineNumber":9,"author":{"gitId":"arsatis"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":"done 4"},{"lineNumber":11,"author":{"gitId":"arsatis"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"arsatis"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"arsatis"},"content":"list"},{"lineNumber":14,"author":{"gitId":"arsatis"},"content":"list Mon 2-4pm"},{"lineNumber":15,"author":{"gitId":"arsatis"},"content":"list 1111-11-11"},{"lineNumber":16,"author":{"gitId":"arsatis"},"content":"list 2034-02-28"},{"lineNumber":17,"author":{"gitId":"arsatis"},"content":"bye"}],"authorContributionMap":{"arsatis":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"arsatis"},"content":"javac -sourcepath ..\\src -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"arsatis"},"content":"java -classpath ..\\bin main.java.duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"arsatis":2,"-":19}}]
