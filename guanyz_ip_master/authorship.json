[{"path":"src/main/java/duke/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":" * Parses user commands and triggers corresponding effects."},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"public class CommandParser {"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"    private static final int SPLIT_LIMIT \u003d 2;"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"    private TaskList tasks;"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    private Ui ui;"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"    public CommandParser(TaskList tasks, Ui ui) {"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"        this.ui \u003d ui;"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"     * Parses a user-input command and triggers the relevant effects."},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"     * @param userInput String representation of the command to be parsed."},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"     * @return Boolean flag used to indicate whether the program should terminate or not."},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"     * @throws DukeException If an Exception occurs due to a malformed command."},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"    public boolean parseCommand(String userInput) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"        if (userInput.toLowerCase().equals(\"list\")) {"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"            // display list"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"            ui.displayList(tasks);"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"        } else if (userInput.toLowerCase().matches(\"^(do(ne)?|finish(ed)?|completed?) \\\\d+$\")) {"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"            // finish a task"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"            String[] bits \u003d userInput.split(\" \");"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"            int idx \u003d Integer.parseInt(bits[1]);"},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"            if (idx \u003c 1 || idx \u003e tasks.size()) {"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! That doesn\u0027t appear to be a valid task number.\");"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"                Task finishedTask \u003d tasks.get(idx);"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"                if (finishedTask.isDone()) {"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"                    throw new DukeException(\"That task\u0027s already done!\");"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"                } else {"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"                    finishedTask.markAsDone();"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"                    ui.showDoneTask(finishedTask);"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"        } else if (userInput.toLowerCase().matches(\"^(delete|remove) \\\\d+$\")) {"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"            // manually remove task"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"            String[] bits \u003d userInput.split(\" \");"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"            int idx \u003d Integer.parseInt(bits[1]);"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"            if (idx \u003c 1 || idx \u003e tasks.size()) {"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! That doesn\u0027t appear to be a valid task number.\");"},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"                Task removedTask \u003d tasks.remove(idx);"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"                ui.showRemovedTask(removedTask, tasks.size());"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"        } else if (userInput.toLowerCase().matches(\"^(todo|deadline|event)( .+)?$\")) {"},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":"            // add task to list"},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"            Task newTask \u003d TaskParser.parseTask(userInput);"},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"            tasks.add(newTask);"},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"            ui.showAddedTask(newTask, tasks.size());"},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"        } else if (userInput.toLowerCase().startsWith(\"find\")) {"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":"            // find task in list"},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"            String[] bits \u003d userInput.split(\" \", SPLIT_LIMIT);"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":"            if (bits.length \u003d\u003d 1) {"},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! Usage: find [search pattern]\");"},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"                TaskList matchingTasks \u003d tasks.find(bits[1]);"},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"                ui.displayList(matchingTasks);"},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"        } else if (userInput.toLowerCase().equals(\"bye\")) {"},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"            // end session"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":"            return false;"},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":"            throw new DukeException(\"I don\u0027t understand that command!\");"},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"        return true;"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":73}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":" * Represents a Deadline object."},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    private LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"     * Returns a String representing this object to be saved into a save data file."},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"     * @return String representation of this object, formatted for save data use."},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"    public String getSaveString() {"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        String datetimeString \u003d deadline.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"        if (this.isDone()) {"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"            return String.format(\"deadline [isDone] %s /by %s\\n\", description, datetimeString);"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"            return String.format(\"deadline %s /by %s\\n\", description, datetimeString);"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"        String datetimeString \u003d deadline.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", getStatus(), description, datetimeString);"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":35}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"    private TaskList tasks;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"    private Ui ui;"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"    private Storage storage;"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"    private CommandParser commandParser;"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"    private boolean isActive;"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    "},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    public Duke(String filepath) {"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"        this.storage \u003d new Storage(filepath);"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"        this.isActive \u003d true;"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"            ui.showError(e);"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        this.commandParser \u003d new CommandParser(tasks, ui);"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"    public static void main(String[] args) {"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"        Duke duke \u003d new Duke(\"savedata.txt\");"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        duke.run();"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"    private void run() {"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"        // display welcome sequence"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"        ui.welcome();"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"        String userInput;"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"        // loop until the user exits"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"        while (isActive) {"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"            // get user input"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"            userInput \u003d ui.readCommand();"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"            try {"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"                isActive \u003d commandParser.parseCommand(userInput);"},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"                storage.saveTasks(tasks);"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"            } catch (Exception e) {"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"                ui.borderPrint(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"        "},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"        // exit sequence"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"        ui.quit();"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"guanyz":48,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"        super(errorMessage);"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":7}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":" * Represents an Event object."},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    private LocalDate datetime;"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    public Event(String description, LocalDate time) {"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"        this.datetime \u003d time;"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"     * Returns a String representing this object to be saved into a save data file."},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"     * @return String representation of this object, formatted for save data use."},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"    public String getSaveString() {"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        String datetimeString \u003d datetime.format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"        if (this.isDone()) {"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"            return String.format(\"event [isDone] %s /on %s\\n\", description, datetimeString);"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"            return String.format(\"event %s /on %s\\n\", description, datetimeString);"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"        String datetimeString \u003d datetime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"        return String.format(\"[E][%s] %s (on: %s)\", getStatus(), description, datetimeString);"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":35}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":" * Handles saving and loading the TaskList to/from the hard disk via a save data text file."},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"    private String filepath;"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    public Storage(String filepath) {"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"        this.filepath \u003d filepath;"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"     * Loads list of Tasks from the text file specified in the Storage object\u0027s filepath."},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"     * @return ArrayList of the Tasks stored in the save data file."},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"     * @throws DukeException If an Exception occurs as a result of the stored save data being malformed."},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"            File savefile \u003d new File(filepath);"},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"            Scanner saveReader \u003d new Scanner(savefile);"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"            while (saveReader.hasNextLine()) {"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"                String savedata \u003d saveReader.nextLine();"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"                tasks.add(TaskParser.parseTask(savedata));"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"            saveReader.close();"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"            tasks.clear();"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"            // create file if it doesn\u0027t exist"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"            File saveFile \u003d new File(filepath);"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"                saveFile.createNewFile();"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"            } catch (Exception err) {"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"                String errorMsg \u003d \"There was an error creating the save file!\\n\""},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"                        + \"You can still use this todo list, but your data won\u0027t be saved.\";"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(errorMsg);"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"            tasks.clear();"},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"            String errorMsg \u003d \"Looks like the save data\u0027s been corrupted.\\n\""},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"                    + \"Please avoid manually editing this file!\\n\""},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"                    + \"For now, I\u0027ve cleared the save data.\";"},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"            throw new DukeException(errorMsg);"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":"        return tasks;"},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"     * Saves list of Tasks to the save data file."},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"     * @param tasks The list of Tasks to be saved to the file."},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"     * @throws DukeException If an Exception occurs as a result of the stored save data being malformed."},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":"    public void saveTasks(TaskList tasks) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":"            FileWriter saveWriter \u003d new FileWriter(filepath);"},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"            StringBuilder saveStringBuilder \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":"            for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"                saveStringBuilder.append(tasks.get(i).getSaveString());"},{"lineNumber":74,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":76,"author":{"gitId":"guanyz"},"content":"            saveWriter.write(saveStringBuilder.toString());"},{"lineNumber":77,"author":{"gitId":"guanyz"},"content":"            saveWriter.close();"},{"lineNumber":78,"author":{"gitId":"guanyz"},"content":"        } catch (Exception e) {"},{"lineNumber":79,"author":{"gitId":"guanyz"},"content":"            String errorMsg \u003d \"Save file not found!\\n\" +"},{"lineNumber":80,"author":{"gitId":"guanyz"},"content":"                    \"Please don\u0027t manually edit the save file.\";"},{"lineNumber":81,"author":{"gitId":"guanyz"},"content":"            throw new DukeException(errorMsg);"},{"lineNumber":82,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":84}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":" * Represents a Task object."},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"        this.isDone \u003d false; // tasks always start as not done"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    public boolean isDone() { return isDone; }"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    public String getDescription() {"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"        return description;"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"    public void markAsDone() {"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        this.isDone \u003d true;"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"    public abstract String getSaveString();"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"     * Returns a String representation of whether this Task is done."},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"     * @return \"X\" if the Task is done, \" \" (one space) otherwise."},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"    protected String getStatus() {"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"        if (this.isDone) {"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"            return \"X\";"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"            return \" \";"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":38}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":" * Represents a list of Task objects, and governs interactions between Tasks and this List."},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"    public TaskList() {"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"     * Adds a Task to the TaskList."},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"     * @param task Task to be added."},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"    public void add(Task task) {"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"        tasks.add(task);"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"     * Removes and returns the Task at the specified index from the TaskList."},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"     * @param idx (1-indexed) index of the Task to be removed from the TaskList."},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"     * @return Task that was removed from the TaskList."},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"    public Task remove(int idx) {"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"        return tasks.remove(idx - 1); // TaskList is 1-indexed"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"     * Returns the Task at the specified index from the TaskList."},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"     * @param idx (1-indexed) index of the Task to be returned from the TaskList."},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"     * @return Task to at the given (1-indexed) index of the TaskList."},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"    public Task get(int idx) {"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"        return tasks.get(idx - 1); // TaskList is 1-indexed"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"     * Returns the number of Tasks in the TaskList."},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"     * @return Number of Tasks in the TaskList."},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"    public int size() {"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":"        return tasks.size();"},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"     * Removes all Tasks from the TaskList."},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"    public void clear() {"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":"        tasks.clear();"},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":"     * Finds all Tasks whose descriptions contain the search parameter and returns them in a TaskList."},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"     * @param search Search parameter, as a String."},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"     * @return TaskList containing all the matching Tasks."},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"    public TaskList find(String search) {"},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"        TaskList matchingTasks \u003d new TaskList();"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":"        String searchPattern \u003d \"^.*\" + search.toLowerCase() + \".*$\";"},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"        for (Task task : tasks) {"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":"            if (task.getDescription().toLowerCase().matches(searchPattern)) {"},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":"                matchingTasks.add(task);"},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"        return matchingTasks;"},{"lineNumber":74,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":75}},{"path":"src/main/java/duke/TaskParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":" * Parses String representations of Tasks into Task objects."},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"public class TaskParser {"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    private static final int SPLIT_LIMIT \u003d 2;"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"     * Parses a String representation of a Task into a Task object, and returns the resultant Task object."},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"     * @param taskString String representation of the Task to be parsed."},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"     * @return Task object parsed from the input String."},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"     * @throws DukeException If an Exception occurs as a result of the String being malformed."},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"    public static Task parseTask(String taskString) throws DukeException {"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"        Task newTask;"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"        String desc;"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        boolean isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"        if (taskString.startsWith(\"todo\")) {"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"            String[] taskParts \u003d taskString.split(\"todo\", SPLIT_LIMIT);"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"            if (taskParts[1].length() \u003d\u003d 0) {"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! Usage: todo [desc]\");"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"                desc \u003d taskParts[1].trim();"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"            if (desc.startsWith(\"[isDone]\")) {"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"                desc \u003d desc.split(\"\\\\[isDone\\\\]\", SPLIT_LIMIT)[1].trim();"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"                isDone \u003d true;"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"            newTask \u003d new Todo(desc);"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"        } else if (taskString.startsWith(\"event\")) {"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"            desc \u003d taskString.split(\"event\", SPLIT_LIMIT)[1].trim();"},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"            String[] taskParts \u003d desc.split(\" /on \");"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"            if (taskParts.length \u003d\u003d 1) {"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! Usage: event [desc] /on [date]\");"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"                if (taskParts[0].startsWith(\"[isDone]\")) {"},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"                    taskParts[0] \u003d taskParts[0].split(\"\\\\[isDone\\\\]\", SPLIT_LIMIT)[1].trim();"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"                    isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"                try {"},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":"                    LocalDate datetime \u003d LocalDate.parse(taskParts[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"                    newTask \u003d new Event(taskParts[0], datetime);"},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"                } catch (Exception e) {"},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"                    throw new DukeException(\"Looks like your date\u0027s formatted incorrectly! Try this: dd/mm/yyyy\");"},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"        } else if (taskString.startsWith(\"deadline\")) {"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":"            desc \u003d taskString.split(\"deadline\", SPLIT_LIMIT)[1].trim();"},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":"            String[] taskParts \u003d desc.split(\" /by \");"},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"            if (taskParts.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"                throw new DukeException(\"Oops! Usage: deadline [desc] /by [date]\");"},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"            } else {"},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"                if (taskParts[0].startsWith(\"[isDone]\", SPLIT_LIMIT)) {"},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"                    taskParts[0] \u003d taskParts[0].split(\"\\\\[isDone\\\\]\")[1].trim();"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":"                    isDone \u003d true;"},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":"                try {"},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"                    LocalDate datetime \u003d LocalDate.parse(taskParts[1], DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":"                    newTask \u003d new Deadline(taskParts[0], datetime);"},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"                } catch (Exception e) {"},{"lineNumber":74,"author":{"gitId":"guanyz"},"content":"                    throw new DukeException(\"Looks like your date\u0027s formatted incorrectly! Try this: dd/mm/yyyy\");"},{"lineNumber":75,"author":{"gitId":"guanyz"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"guanyz"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"guanyz"},"content":"            throw new DukeException(\"Unknown command!\");"},{"lineNumber":79,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"guanyz"},"content":"        if (isDone) {"},{"lineNumber":81,"author":{"gitId":"guanyz"},"content":"            newTask.markAsDone();"},{"lineNumber":82,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"guanyz"},"content":"        return newTask;"},{"lineNumber":84,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":85}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":" * Represents a Todo object."},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"    public Todo(String description) {"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"     * Returns a String representing this object to be saved into a save data file."},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"     * @return String representation of this object, formatted for save data use."},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    public String getSaveString() {"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"        if (this.isDone()) {"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"            return String.format(\"todo [isDone] %s\\n\", description);"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"            return String.format(\"todo %s\\n\", description);"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"        return String.format(\"[T][%s] %s\", getStatus(), description);"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":27}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":" * Handles receiving user input and outputting relevant textual information for the user to see."},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":" */"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    private static final String DIVIDER \u003d \"____________________________________________________________\";"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    private Scanner scanner;"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    public Ui() {"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"        this.scanner \u003d new Scanner(System.in);"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"    public String readCommand() {"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"        return scanner.nextLine();"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"     * Shows a welcome sequence."},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"    public void welcome() {"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"        System.out.println(\"Welcome to Duke!\");"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"        System.out.println(\"What can I do for you?\");"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"     * Shows a goodbye sequence."},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"    public void quit() {"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"        System.out.println(\"Bye! Hope to see you again :)\");"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"     * Prints a given String in between two dividers, for formatting purposes."},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"     * @param msg String to be printed between dividers."},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"    public void borderPrint(String msg) {"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"        System.out.println(msg);"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"        System.out.println(DIVIDER);"},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":"     * Shows details of a Task that\u0027s been added to the TaskList."},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"     * @param task Task that\u0027s added to the TaskList."},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":"     * @param listSize Size of the TaskList, after the Task is added."},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"    public void showAddedTask(Task task, int listSize) {"},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"        String msg \u003d String.format(\"I\u0027ve added this task: %s\\nYou now have %d items on your todo list.\","},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"                task.toString(),"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":"                listSize);"},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"        borderPrint(msg);"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"     * Shows details of a Task that\u0027s been removed from the TaskList."},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"     * @param task Task that\u0027s been removed from the TaskList."},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"     * @param listSize Size of the TaskList, after the Task is added."},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"    public void showRemovedTask(Task task, int listSize) {"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":"        String msg \u003d String.format(\"I\u0027ve removed this task: %s\\nYou now have %d items on your todo list.\","},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"                task.toString(),"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":"                listSize);"},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":"        borderPrint(msg);"},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"guanyz"},"content":"     * Shows details of a Task that\u0027s been marked as done/completed."},{"lineNumber":75,"author":{"gitId":"guanyz"},"content":"     * @param task Task that\u0027s been marked as done/completed."},{"lineNumber":76,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"guanyz"},"content":"    public void showDoneTask(Task task) {"},{"lineNumber":78,"author":{"gitId":"guanyz"},"content":"        String msg \u003d String.format(\"Congrats! The following task has been marked as done:\\n  %s\","},{"lineNumber":79,"author":{"gitId":"guanyz"},"content":"                task.toString());"},{"lineNumber":80,"author":{"gitId":"guanyz"},"content":"        borderPrint(msg);"},{"lineNumber":81,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":83,"author":{"gitId":"guanyz"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"guanyz"},"content":"     * Formats the content of an Exception object between two dividers, for formatting purposes."},{"lineNumber":85,"author":{"gitId":"guanyz"},"content":"     * @param e Exception object to be shown."},{"lineNumber":86,"author":{"gitId":"guanyz"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"guanyz"},"content":"    public void showError(Exception e) {"},{"lineNumber":88,"author":{"gitId":"guanyz"},"content":"        borderPrint(e.getMessage());"},{"lineNumber":89,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":91,"author":{"gitId":"guanyz"},"content":"    public void displayList(TaskList tasks) {"},{"lineNumber":92,"author":{"gitId":"guanyz"},"content":"        StringBuilder items \u003d new StringBuilder();"},{"lineNumber":93,"author":{"gitId":"guanyz"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":94,"author":{"gitId":"guanyz"},"content":"            items.append(String.valueOf(i) + \". \" + tasks.get(i).toString() + \"\\n\");"},{"lineNumber":95,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"guanyz"},"content":"        String output \u003d items.toString().trim();"},{"lineNumber":97,"author":{"gitId":"guanyz"},"content":"        if (output.length() \u003e 0) {"},{"lineNumber":98,"author":{"gitId":"guanyz"},"content":"            output \u003d \"Here\u0027s all the matches I found:\\n\" + output;"},{"lineNumber":99,"author":{"gitId":"guanyz"},"content":"        } else {"},{"lineNumber":100,"author":{"gitId":"guanyz"},"content":"            output \u003d \"I couldn\u0027t find anything!\";"},{"lineNumber":101,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"guanyz"},"content":"        borderPrint(output);"},{"lineNumber":103,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":104}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"public class ParserTest {"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"    public void todoTest() throws DukeException {"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"        Task task \u003d TaskParser.parseTask(\"todo sample todo\");"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"        String expectedParse \u003d \"[T][ ] sample todo\";"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedParse, task.toString());"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    public void todoTest_emptyDescription_exceptionThrown() {"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"todo\");"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Oops! Usage: todo [desc]\", e.getMessage());"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"    public void eventTest() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"        Task task \u003d TaskParser.parseTask(\"event sample event /on 20/11/2021\");"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        String expectedParse \u003d \"[E][ ] sample event (on: 20 Nov 2021)\";"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedParse, task.toString());"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"    public void eventTest_emptyDate_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"event sample event /by 20/11/2021\");"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Oops! Usage: event [desc] /on [date]\", e.getMessage());"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"    public void eventTest_wrongDelimiter_exceptionThrown() {"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"event sample event /by 20/11/2021\");"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Oops! Usage: event [desc] /on [date]\", e.getMessage());"},{"lineNumber":48,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":51,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"guanyz"},"content":"    public void eventTest_badDateFormat_exceptionThrown() {"},{"lineNumber":53,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"event sample event /on 1/1/1970\");"},{"lineNumber":55,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":56,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":57,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Looks like your date\u0027s formatted incorrectly! Try this: dd/mm/yyyy\", e.getMessage());"},{"lineNumber":58,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":61,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"guanyz"},"content":"    public void deadlineTest() throws DukeException {"},{"lineNumber":63,"author":{"gitId":"guanyz"},"content":"        Task task \u003d TaskParser.parseTask(\"deadline sample deadline /by 28/09/2021\");"},{"lineNumber":64,"author":{"gitId":"guanyz"},"content":"        String expectedParse \u003d \"[D][ ] sample deadline (by: 28 Sep 2021)\";"},{"lineNumber":65,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedParse, task.toString());"},{"lineNumber":66,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":68,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":69,"author":{"gitId":"guanyz"},"content":"    public void deadlineTest_emptyDate_exceptionThrown() {"},{"lineNumber":70,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":71,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"deadline sample deadline\");"},{"lineNumber":72,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":73,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":74,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Oops! Usage: deadline [desc] /by [date]\", e.getMessage());"},{"lineNumber":75,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":78,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"guanyz"},"content":"    public void deadlineTest_wrongDelimiter_exceptionThrown() {"},{"lineNumber":80,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"deadline sample deadline /on 28/09/2021\");"},{"lineNumber":82,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":83,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":84,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Oops! Usage: deadline [desc] /by [date]\", e.getMessage());"},{"lineNumber":85,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":88,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":89,"author":{"gitId":"guanyz"},"content":"    public void deadlineTest_badDateFormat_exceptionThrown() {"},{"lineNumber":90,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"guanyz"},"content":"            Task task \u003d TaskParser.parseTask(\"deadline sample deadline /by 1/1/1970\");"},{"lineNumber":92,"author":{"gitId":"guanyz"},"content":"            fail();"},{"lineNumber":93,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":94,"author":{"gitId":"guanyz"},"content":"            assertEquals(\"Looks like your date\u0027s formatted incorrectly! Try this: dd/mm/yyyy\", e.getMessage());"},{"lineNumber":95,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":97}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"public class TaskListTest {"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    public void displayTest() {"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"        Task task1 \u003d new Todo(\"sample todo\");"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"        LocalDate date2 \u003d LocalDate.parse(\"27/10/2021\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"        Task task2 \u003d new Event(\"sample event\", date2);"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"        LocalDate date3 \u003d LocalDate.parse(\"25/12/2050\", DateTimeFormatter.ofPattern(\"dd/MM/yyyy\"));"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"        Task task3 \u003d new Deadline(\"sample deadline\", date3);"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":"        tasks.add(task1);"},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"        tasks.add(task2);"},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"        tasks.add(task3);"},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":"        String expectedString \u003d \"1. [T][ ] sample todo\\n\" +"},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"                \"2. [E][ ] sample event (on: 27 Oct 2021)\\n\" +"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":"                \"3. [D][ ] sample deadline (by: 25 Dec 2050)\";"},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedString, tasks.display());"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":30}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"import java.io.PrintStream;"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"public class UiTest {"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"    @BeforeEach"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"    public void setUp() {"},{"lineNumber":14,"author":{"gitId":"guanyz"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":15,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":17,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"guanyz"},"content":"    void borderPrintTest() {"},{"lineNumber":19,"author":{"gitId":"guanyz"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":21,"author":{"gitId":"guanyz"},"content":"        String expectedPrint \u003d \"____________________________________________________________\\r\\n\""},{"lineNumber":22,"author":{"gitId":"guanyz"},"content":"                + \"Hello world!\\r\\n\""},{"lineNumber":23,"author":{"gitId":"guanyz"},"content":"                + \"____________________________________________________________\";"},{"lineNumber":24,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":25,"author":{"gitId":"guanyz"},"content":"        ui.borderPrint(\"Hello world!\");"},{"lineNumber":26,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":27,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedPrint, outputStreamCaptor.toString().trim());"},{"lineNumber":28,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":30,"author":{"gitId":"guanyz"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"guanyz"},"content":"    void showErrorTest() {"},{"lineNumber":32,"author":{"gitId":"guanyz"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":33,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":34,"author":{"gitId":"guanyz"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"guanyz"},"content":"            throw new DukeException(\"Hello world!\");"},{"lineNumber":36,"author":{"gitId":"guanyz"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"guanyz"},"content":"            ui.showError(e);"},{"lineNumber":38,"author":{"gitId":"guanyz"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":40,"author":{"gitId":"guanyz"},"content":"        String expectedPrint \u003d \"____________________________________________________________\\r\\n\""},{"lineNumber":41,"author":{"gitId":"guanyz"},"content":"                + \"Hello world!\\r\\n\""},{"lineNumber":42,"author":{"gitId":"guanyz"},"content":"                + \"____________________________________________________________\";"},{"lineNumber":43,"author":{"gitId":"guanyz"},"content":""},{"lineNumber":44,"author":{"gitId":"guanyz"},"content":"        assertEquals(expectedPrint, outputStreamCaptor.toString().trim());"},{"lineNumber":45,"author":{"gitId":"guanyz"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"guanyz"},"content":"}"}],"authorContributionMap":{"guanyz":46}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"guanyz"},"content":"todo TODO 1"},{"lineNumber":2,"author":{"gitId":"guanyz"},"content":"deadline DEADLINE 2 /by SOME TIME"},{"lineNumber":3,"author":{"gitId":"guanyz"},"content":"event EVENT 3 /on SOME TIME"},{"lineNumber":4,"author":{"gitId":"guanyz"},"content":"list"},{"lineNumber":5,"author":{"gitId":"guanyz"},"content":"todo TODO 4"},{"lineNumber":6,"author":{"gitId":"guanyz"},"content":"event EVENT 5 /on SOME TIME"},{"lineNumber":7,"author":{"gitId":"guanyz"},"content":"deadline DEADLINE 6 /by SOME TIME"},{"lineNumber":8,"author":{"gitId":"guanyz"},"content":"list"},{"lineNumber":9,"author":{"gitId":"guanyz"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"guanyz"},"content":"finish 2"},{"lineNumber":11,"author":{"gitId":"guanyz"},"content":"complete 3"},{"lineNumber":12,"author":{"gitId":"guanyz"},"content":"list"},{"lineNumber":13,"author":{"gitId":"guanyz"},"content":"bye"}],"authorContributionMap":{"guanyz":13}}]
