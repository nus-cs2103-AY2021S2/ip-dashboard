[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"    archiveBaseName \u003d \"dukeGUI\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"    enableAssertions \u003d true"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"java {"},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"    sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"    targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":21,"-":44}},{"path":"data/modoc_tm.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"T/0/homework"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"E/1/dance/school"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"D/0/cs2103/2021-02-19"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"T/0/revise"}],"authorContributionMap":{"justgnohUG":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"# MODOC_TM User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"MODOC_TM stands for Mechanized Organism Designed Only for Computing_Task Management. "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"This is a chat-bot style task manager that saves existing tasks to your local storage after exit."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"-----"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"## Features"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"### 1. [list](#list---shows-all-the-existing-tasks)"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"### 2. [todo](#todo---adds-a-todo-to-the-task-list)"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"### 3. [event](#event---adds-an-event-to-the-task-list)"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"### 4. [deadline](#deadline---adds-a-deadline-to-the-task-list)"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"### 5. [snooze](#snooze---postpones-a-deadline-to-a-specified-date-or-automatically-snoozes-for-one-day)"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"### 6. [done](#done---marks-a-task-at-given-index-as-completed)"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"### 7. [delete](#delete---deletes-a-task-at-given-index-from-the-task-list)"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"### 8. [find](#find---finds-a-task-with-the-provided-keywordscharactersdetails)"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"### 9. [help](#help---shows-a-list-of-possible-commands-for-the-user)"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"### 10. [bye](#bye---saves-the-current-task-list-onto-local-storage-and-closes-the-program)"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"---"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"## Usage"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"### `list` - Shows all the existing tasks"},{"lineNumber":25,"author":{"gitId":"-"},"content":""},{"lineNumber":26,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"    list"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"    Here is the list of tasks."},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"### `todo` - Adds a todo to the task list."},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"    todo homework"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"    [T][X] homework"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    Now you have 2 tasks in the list"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"### `event` - Adds an event to the task list."},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"    event study /at school"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"    [E][X] study (at: school)"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"    Now you have 3 tasks in the list    "},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"### `deadline` - Adds a deadline to the task list."},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"    deadline cs2103 /by 2021-02-19"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"    Got it. I\u0027ve added this task:"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"    [D][X] cs2103 (by: Feb 19 2021)"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"    Now you have 4 tasks in the list"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"### `snooze` - Postpones a deadline to a specified date or automatically snoozes for one day."},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"    snooze 3"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"Postpones the deadline by `1` day"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":"    snooze 3 /to 2021-09-17 "},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"Postpones the deadline to specified date."},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"    `Deadline has been snoozed to 2021-09-17`"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"### `done` - Marks a task at given index as completed."},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":"    done 2"},{"lineNumber":90,"author":{"gitId":"-"},"content":""},{"lineNumber":91,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":92,"author":{"gitId":"-"},"content":""},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"    Nice! I\u0027ve marked this task as done:"},{"lineNumber":94,"author":{"gitId":"justgnohUG"},"content":"    [✔] completed task"},{"lineNumber":95,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":96,"author":{"gitId":"justgnohUG"},"content":"### `delete` - Deletes a task at given index from the task list."},{"lineNumber":97,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":98,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":99,"author":{"gitId":"justgnohUG"},"content":"    delete 2"},{"lineNumber":100,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":101,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":102,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":103,"author":{"gitId":"justgnohUG"},"content":"    Noted, I\u0027ve removed this task: "},{"lineNumber":104,"author":{"gitId":"justgnohUG"},"content":"    [T][✔] homework"},{"lineNumber":105,"author":{"gitId":"justgnohUG"},"content":"    Now you have 2 tasks in the list"},{"lineNumber":106,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":107,"author":{"gitId":"justgnohUG"},"content":"### `find` - Finds a task with the provided keywords/characters/details."},{"lineNumber":108,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":109,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":110,"author":{"gitId":"justgnohUG"},"content":"    find work"},{"lineNumber":111,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":112,"author":{"gitId":"justgnohUG"},"content":"\"work\" is the search keyword."},{"lineNumber":113,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":114,"author":{"gitId":"justgnohUG"},"content":"Expected outcome:"},{"lineNumber":115,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":116,"author":{"gitId":"justgnohUG"},"content":"    Here are the matching tasks in your list: "},{"lineNumber":117,"author":{"gitId":"justgnohUG"},"content":"    [T][✔] homework"},{"lineNumber":118,"author":{"gitId":"justgnohUG"},"content":"    [E][✔] do work (at: school)"},{"lineNumber":119,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":120,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":121,"author":{"gitId":"justgnohUG"},"content":"### `help` - Shows a list of possible commands for the user."},{"lineNumber":122,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":123,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":124,"author":{"gitId":"justgnohUG"},"content":"    help"},{"lineNumber":125,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":126,"author":{"gitId":"justgnohUG"},"content":"### `bye` - Saves the current task list onto local storage and closes the program."},{"lineNumber":127,"author":{"gitId":"justgnohUG"},"content":"Example of usage:"},{"lineNumber":128,"author":{"gitId":"justgnohUG"},"content":"    "},{"lineNumber":129,"author":{"gitId":"justgnohUG"},"content":"    bye"},{"lineNumber":130,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":131,"author":{"gitId":"justgnohUG"},"content":"# Acknowledgements"},{"lineNumber":132,"author":{"gitId":"justgnohUG"},"content":"User and Duke pictures"},{"lineNumber":133,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":134,"author":{"gitId":"justgnohUG"},"content":"http://brendantobin.blogspot.com/2017/08/modok-and-modam.html "}],"authorContributionMap":{"justgnohUG":119,"-":15}},{"path":"src/data/modoc_tm.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"T/0/read book"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"D/0/return book/2020-06-19"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"E/0/study/school"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"D/1//2020-09-17"}],"authorContributionMap":{"justgnohUG":4}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":59}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import duke.CommandHandler;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"import duke.DukeException;"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":" * A CLI-based task management application that allows users"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":" * to add tasks, events and deadlines."},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":" * @author Justin Gnoh"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":" * @since 2021-02-06"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"    private Ui ui;"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"    private TaskList taskList;"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    private Storage storage;"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    private CommandHandler commandHandler;"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    private Parser parser;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"     * This object is created to encapsulate other objects"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"     * to facilitate Ui and storage paths."},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     * @param filePath This is the storage filePath"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"    public Duke(String filePath) {"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"        ui \u003d new Ui();"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"        parser \u003d new Parser();"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"        commandHandler \u003d new CommandHandler(ui, parser);"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"            ui.showLoadingError();"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    public String getIntroMessage() {"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"        return ui.getIntroMessage();"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     * This method returns a response based on user input"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"     * @param input"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"     * @return This returns a response to user input"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"    public String getResponse(String input) {"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"        String trimmedInput \u003d input.trim();"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"        String command \u003d parser.getCommand(trimmedInput);"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"        switch (command) {"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"        case \"bye\":"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"            storage.save(taskList);"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"            Platform.exit();"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"        case \"list\":"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"            return ui.printList(taskList);"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"        case \"done\":"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processDone(input, taskList);"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"        case \"todo\":"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processTodo(input, taskList);"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":"        case \"deadline\":"},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processDeadline(input, taskList);"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"        case \"event\":"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processEvent(input, taskList);"},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"        case \"delete\":"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processDelete(input, taskList);"},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"        case \"find\":"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processFind(input, taskList);"},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":"        case \"help\":"},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processHelp();"},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"        case \"snooze\":"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":"            return commandHandler.processSnooze(input, taskList);"},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"        default:"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"            return ui.printUnknownCommand();"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"justgnohUG":92,"-":3}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"    private Duke duke \u003d new Duke(\"/data/modoc_tm.txt\");"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"            scene.getStylesheets().add(getClass().getResource(\"/view/application.css\").toExternalForm());"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.image.Image;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"    private Duke duke;"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/modam.jpg\"));"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/modok.jpg\"));"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    public void initialize() {"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"        duke \u003d d;"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"        getIntro();"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"    private void handleUserInput() {"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"        );"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"        userInput.clear();"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"    private void getIntro() {"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"        String intro \u003d duke.getIntroMessage();"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"        dialogContainer.getChildren().add("},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"                DialogBox.getDukeDialog(intro, dukeImage)"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":55}},{"path":"src/main/java/duke/CommandHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" * Handles all the logic behind each command"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"public class CommandHandler {"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"    private static final String AUTO_SNOOZE_VALUE \u003d \"1\";"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"    private Parser parser;"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"     * This object is created to encapsulate a Ui and Parser object."},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"     * @param ui Ui object"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     * @param parser Parser object"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"    public CommandHandler(Ui ui, Parser parser) {"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"        this.ui \u003d ui;"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"        this.parser \u003d parser;"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input for a Todo."},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"    public String processTodo(String input, TaskList taskList) {"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"            String name \u003d parser.getTodoName(input);"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"            Todo todo \u003d new Todo(name);"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"            taskList.addTask(todo);"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"            return ui.printTask(todo, taskList.getSize());"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input to mark a task as completed."},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"    public String processDone(String input, TaskList taskList) {"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"            int index \u003d parser.getIndex(input);"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"            Task task \u003d taskList.getSingleTask(index);"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"            task.markDone();"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"            return ui.printDone(task);"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input for a Deadline."},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":"    public String processDeadline(String input, TaskList taskList) {"},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"            String name \u003d parser.getEventOrDeadlineName(input);"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"            String by \u003d parser.getDeadlineAttribute(input);"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":"            LocalDate date \u003d parser.stringToLocalDate(by);"},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":"            Deadline deadline \u003d new Deadline(name, date);"},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"            taskList.addTask(deadline);"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":"            return ui.printTask(deadline, taskList.getSize());"},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input for an Event."},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"    public String processEvent(String input, TaskList taskList) {"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":"            String name \u003d parser.getEventOrDeadlineName(input);"},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"            String at \u003d parser.getEventAttribute(input);"},{"lineNumber":94,"author":{"gitId":"justgnohUG"},"content":"            Event event \u003d new Event(name, at);"},{"lineNumber":95,"author":{"gitId":"justgnohUG"},"content":"            taskList.addTask(event);"},{"lineNumber":96,"author":{"gitId":"justgnohUG"},"content":"            return ui.printTask(event, taskList.getSize());"},{"lineNumber":97,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":98,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":99,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":100,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":103,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input to delete a task."},{"lineNumber":105,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":107,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":108,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":109,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"justgnohUG"},"content":"    public String processDelete(String input, TaskList taskList) {"},{"lineNumber":111,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":112,"author":{"gitId":"justgnohUG"},"content":"            int deleteIndex \u003d parser.getIndex(input);"},{"lineNumber":113,"author":{"gitId":"justgnohUG"},"content":"            Task deletedTask \u003d taskList.getSingleTask(deleteIndex);"},{"lineNumber":114,"author":{"gitId":"justgnohUG"},"content":"            taskList.deleteTask(deleteIndex);"},{"lineNumber":115,"author":{"gitId":"justgnohUG"},"content":"            return ui.printDelete(deletedTask, taskList.getSize());"},{"lineNumber":116,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":117,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":118,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":121,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input to find a task."},{"lineNumber":123,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":125,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":126,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":127,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"justgnohUG"},"content":"    public String processFind(String input, TaskList taskList) {"},{"lineNumber":129,"author":{"gitId":"justgnohUG"},"content":"        String arguments \u003d parser.getArguments(input);"},{"lineNumber":130,"author":{"gitId":"justgnohUG"},"content":"        TaskList output \u003d taskList.matchTasks(arguments);"},{"lineNumber":131,"author":{"gitId":"justgnohUG"},"content":"        return ui.printMatchingTask(output);"},{"lineNumber":132,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":134,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input to delete a task."},{"lineNumber":136,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the help message"},{"lineNumber":138,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"justgnohUG"},"content":"    public String processHelp() {"},{"lineNumber":140,"author":{"gitId":"justgnohUG"},"content":"        return ui.getHelpMessage();"},{"lineNumber":141,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":142,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":143,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":144,"author":{"gitId":"justgnohUG"},"content":"     * This method processes the input to snooze a Deadline."},{"lineNumber":145,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":147,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the existing taskList"},{"lineNumber":148,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the completion message"},{"lineNumber":149,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"justgnohUG"},"content":"    public String processSnooze(String input, TaskList taskList) {"},{"lineNumber":151,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":152,"author":{"gitId":"justgnohUG"},"content":"            int taskIndex \u003d parser.getIndex(input);"},{"lineNumber":153,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":154,"author":{"gitId":"justgnohUG"},"content":"            if (!(taskList.getSingleTask(taskIndex) instanceof Deadline)) {"},{"lineNumber":155,"author":{"gitId":"justgnohUG"},"content":"                throw new DukeException(\"Task is not a Deadline! Snooze unsuccessful...\");"},{"lineNumber":156,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":157,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":158,"author":{"gitId":"justgnohUG"},"content":"            String snoozeAttribute \u003d parser.getSnoozeAttribute(input);"},{"lineNumber":159,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":160,"author":{"gitId":"justgnohUG"},"content":"            if (snoozeAttribute.length() \u003e 1) {"},{"lineNumber":161,"author":{"gitId":"justgnohUG"},"content":"                String currentDeadlineName \u003d taskList.getSingleTask(taskIndex).getName();"},{"lineNumber":162,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":163,"author":{"gitId":"justgnohUG"},"content":"                LocalDate newDate \u003d parser.stringToLocalDate(snoozeAttribute);"},{"lineNumber":164,"author":{"gitId":"justgnohUG"},"content":"                Deadline newDeadline \u003d new Deadline(currentDeadlineName, newDate);"},{"lineNumber":165,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":166,"author":{"gitId":"justgnohUG"},"content":"                taskList.replaceTask(taskIndex, newDeadline);"},{"lineNumber":167,"author":{"gitId":"justgnohUG"},"content":"                return ui.printDoneSnooze(parser.localDateToString(newDate));"},{"lineNumber":168,"author":{"gitId":"justgnohUG"},"content":"            } else {"},{"lineNumber":169,"author":{"gitId":"justgnohUG"},"content":"                Deadline oldDeadline \u003d (Deadline) taskList.getSingleTask(taskIndex);"},{"lineNumber":170,"author":{"gitId":"justgnohUG"},"content":"                LocalDate currDate \u003d oldDeadline.getByAttribute();"},{"lineNumber":171,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":172,"author":{"gitId":"justgnohUG"},"content":"                LocalDate newDate \u003d currDate.plusDays(1);"},{"lineNumber":173,"author":{"gitId":"justgnohUG"},"content":"                Deadline newDeadline \u003d new Deadline(oldDeadline.getName(), newDate);"},{"lineNumber":174,"author":{"gitId":"justgnohUG"},"content":"                taskList.replaceTask(taskIndex, newDeadline);"},{"lineNumber":175,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":176,"author":{"gitId":"justgnohUG"},"content":"                return ui.printDoneSnooze(parser.localDateToString(newDate))"},{"lineNumber":177,"author":{"gitId":"justgnohUG"},"content":"                        + \"\\n\\n\""},{"lineNumber":178,"author":{"gitId":"justgnohUG"},"content":"                        + \"The deadline has been automatically snoozed by \""},{"lineNumber":179,"author":{"gitId":"justgnohUG"},"content":"                        + AUTO_SNOOZE_VALUE"},{"lineNumber":180,"author":{"gitId":"justgnohUG"},"content":"                        + \" day\";"},{"lineNumber":181,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":182,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":183,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":184,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":186}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" * The Deadline class inherits from Task and allows"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * for date arguments to be parsed."},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"    protected LocalDate by;"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     * Creates a Deadline Task with name and \"by\" attribute"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the description of the task"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"     * @param by This is the deadline of the task"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    public Deadline(String name, LocalDate by) {"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"        this.by \u003d by;"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     * Creates a Deadline Task with specific completion status"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the description of the task"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     * @param by This is the deadline of the task"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"     * @param isDone This is the status of the task"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"    public Deadline(String name, LocalDate by, Boolean isDone) {"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"        super(name, isDone);"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"        this.by \u003d by;"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"     * This method is used to process a given date format into"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"     * a String format."},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"     * @param originalDate This receives an unparsed date"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"     * @return String This returns a String date in \"MMM dd yyyy\" format"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"    public String processDate(LocalDate originalDate) {"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"        String month \u003d originalDate.getMonth().toString();"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"        String threeLetteredMonth \u003d month.substring(0, 1) + month.substring(1, 3).toLowerCase();"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"        String day \u003d Integer.toString(originalDate.getDayOfMonth());"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"        String year \u003d Integer.toString(originalDate.getYear());"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"        String result \u003d threeLetteredMonth + \" \" + day + \" \" + year;"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"        return result;"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"    public LocalDate getByAttribute() {"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"        return this.by;"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + processDate(by) + \")\";"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":65}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"    private String message;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"    public DukeException() {"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"        super();"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"     * This creates a DukeException with the specified message."},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"     * @param message This is the exception message"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    public DukeException(String message) {"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"        super(message);"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"        this.message \u003d message;"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"     * Returns an error message"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"     * @param message This is the error message"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"     * @return Returns the error message as a String"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"    public String printError(String message) {"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"        return message;"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     * Returns an error message"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"     * @return Returns the error message as a String"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"    public String printMessage() {"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"        return this.message;"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":38}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":" * The Event class inherits from Task and"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":" * has an \"at\" attribute"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    protected String at;"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"     * This creates an Event task with description and \"at\" attribute."},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the Event description"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     * @param at This is the location of the Event"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    public Event(String name, String at) {"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"        super(name);"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"        this.at \u003d at;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"     * This creates an Event task with description, \"at\" attribute"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"     * and completion status."},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the Event description"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"     * @param at This is the location of the Event"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     * @param isDone This is the completion status of the Event"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"    public Event(String name, String at, boolean isDone) {"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"        super(name, isDone);"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"        this.at \u003d at;"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":42}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * The Parser class reads lines and extracts"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * commands from read lines in the command-line."},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     * This method converts a LocalDate into String format."},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"     * @param date This is the date in LocalDate format"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"     * @return Returns a String date"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    public String localDateToString(LocalDate date) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Invalid date provided!\");"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     * This method converts a String date into LocalDate format."},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"     * @param dateString This is the date in String format"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"     * @return Returns a LocalDate"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"    public LocalDate stringToLocalDate(String dateString) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"            return LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Invalid date provided!\");"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"     * This method extracts the command from the input"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"     * line that was read."},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"     * @param input This receives a String input"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"     * @return String This returns a command in string format"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"    public String getCommand(String input) {"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"        String command \u003d input.split(\" \")[0];"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"        return command;"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"    public String getArguments(String input) {"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"        // Skips command and gets everything after command"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"        String arguments \u003d input.split(\" \", 2)[1];"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"        return arguments;"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"     * This method returns the integer index from input."},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"     * @param input String with integer index"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"     * @return Integer index"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException When input does not have integer index"},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"    public int getIndex(String input) throws DukeException {"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":"            // Minus 1 to adjust for 0-based indexing in TaskList"},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"            int i \u003d Integer.parseInt(input.split(\" \")[1]) - 1;"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":"            return i;"},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Invalid Index!\");"},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the name of a To-Do task"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is the To-Do task name"},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On input error."},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"    public String getTodoName (String input) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":"            return input.split(\" \", 2)[1].trim();"},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Hmm... You are either lacking a \\\"name\\\" detail!\");"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":95,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the Event or Deadline name"},{"lineNumber":97,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the user input"},{"lineNumber":99,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is the Event or Deadline name"},{"lineNumber":100,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On input error."},{"lineNumber":101,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"justgnohUG"},"content":"    public String getEventOrDeadlineName(String input) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":104,"author":{"gitId":"justgnohUG"},"content":"            return input.split(\"/\")[0].split(\" \", 2)[1].trim();"},{"lineNumber":105,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":106,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Hmm... You are lacking a \\\"name\\\" detail!\");"},{"lineNumber":107,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":110,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the Deadline attribute"},{"lineNumber":112,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"justgnohUG"},"content":"     * @param byDate This is the String input"},{"lineNumber":114,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is the Deadline attribute"},{"lineNumber":115,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On input error"},{"lineNumber":116,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"justgnohUG"},"content":"    public String getDeadlineAttribute(String byDate) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":119,"author":{"gitId":"justgnohUG"},"content":"            return byDate.split(\"/by \")[1];"},{"lineNumber":120,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":121,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Hmm... You are lacking a \\\"/by\\\" detail!\");"},{"lineNumber":122,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":125,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":126,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the Event attribute"},{"lineNumber":127,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":128,"author":{"gitId":"justgnohUG"},"content":"     * @param at This is the task attribute"},{"lineNumber":129,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is the Event attribute"},{"lineNumber":130,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On input error."},{"lineNumber":131,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"justgnohUG"},"content":"    public String getEventAttribute(String at) throws DukeException {"},{"lineNumber":133,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"justgnohUG"},"content":"            return at.split(\"/at\")[1].trim();"},{"lineNumber":135,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":136,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Hmm... You are lacking \\\"/at\\\" detail!\");"},{"lineNumber":137,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":140,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the Snooze attribute"},{"lineNumber":142,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":143,"author":{"gitId":"justgnohUG"},"content":"     * @param input This is the String input"},{"lineNumber":144,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is the Snooze Attribute"},{"lineNumber":145,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On input error"},{"lineNumber":146,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"justgnohUG"},"content":"    public String getSnoozeAttribute(String input) throws DukeException {"},{"lineNumber":148,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":149,"author":{"gitId":"justgnohUG"},"content":"            if (input.split(\" \").length \u003e 2) {"},{"lineNumber":150,"author":{"gitId":"justgnohUG"},"content":"                return input.split(\"/to\")[1].trim();"},{"lineNumber":151,"author":{"gitId":"justgnohUG"},"content":"            } else {"},{"lineNumber":152,"author":{"gitId":"justgnohUG"},"content":"                return String.valueOf(this.getIndex(input));"},{"lineNumber":153,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":154,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":155,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Snooze details incorrect, please check again\");"},{"lineNumber":156,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":158}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":" * The Storage class loads and saves"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":" * data into a specified filepath."},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"    private String filePath;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    public Storage(String filePath) {"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     * This method loads data from file path and"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"     * store into an ArrayList of tasks."},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"     * @return ArrayList This returns an ArrayList of tasks"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"     * @throws DukeException On file not found error"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"    public ArrayList\u003cTask\u003e load() throws DukeException {"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"        ArrayList\u003cTask\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"        // Hardcoded to: \"/data/modoc_tm.txt\";"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"        String currDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"        String expectedDir \u003d currDir + this.filePath;"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"        BufferedReader reader;"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"            reader \u003d new BufferedReader(new FileReader(expectedDir));"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"            String lineRead \u003d reader.readLine();"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"            while (lineRead !\u003d null) {"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"                char taskType \u003d lineRead.charAt(0);"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"                String[] data \u003d lineRead.split(\"/\");"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"                // isDone boolean is represented as \u00271\u0027 or \u00270\u0027"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"                Boolean isDone \u003d (Integer.parseInt(data[1]) \u003d\u003d 1);"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"                if (taskType \u003d\u003d \u0027E\u0027) {"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"                    Event event \u003d new Event(data[2], data[3], isDone);"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"                    result.add(event);"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"                } else if (taskType \u003d\u003d \u0027D\u0027) {"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"                    String unparsedDate \u003d data[3];"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"                    LocalDate date \u003d LocalDate.parse(unparsedDate, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"                    Deadline deadline \u003d new Deadline(data[2], date, isDone);"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"                    result.add(deadline);"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"                    Todo todo \u003d new Todo(data[2], isDone);"},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"                    result.add(todo);"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"                lineRead \u003d reader.readLine();"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException();"},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"        return result;"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":"     * This method saves a given task into the taskList."},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":"     * @param tasks This is the task to be saved"},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"    public void save(TaskList tasks) {"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"        // Currently hard-coded into position"},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":"        String currDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"        String expectedDir \u003d currDir + \"/data\";"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":"            // Creates directory if doesn\u0027t exist"},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"            Files.createDirectories(Paths.get(expectedDir));"},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":"            // Automatically creates file if it does not exist"},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"            FileWriter writer \u003d new FileWriter(expectedDir + \"/modoc_tm.txt\");"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":"            ArrayList\u003cTask\u003e listTask \u003d tasks.getTasks();"},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"            for (Task task : listTask) {"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"                String result;"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"                Class taskType \u003d task.getClass();"},{"lineNumber":94,"author":{"gitId":"justgnohUG"},"content":"                boolean taskStatus \u003d task.isDone;"},{"lineNumber":95,"author":{"gitId":"justgnohUG"},"content":"                String description \u003d task.getName();"},{"lineNumber":96,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":97,"author":{"gitId":"justgnohUG"},"content":"                if (taskType.equals(Event.class)) {"},{"lineNumber":98,"author":{"gitId":"justgnohUG"},"content":"                    result \u003d \"E\" + \"/\" +  (taskStatus ? \"1\" : \"0\") + \"/\" + description + \"/\" + ((Event) task).at;"},{"lineNumber":99,"author":{"gitId":"justgnohUG"},"content":"                } else if (taskType.equals(Deadline.class)) {"},{"lineNumber":100,"author":{"gitId":"justgnohUG"},"content":"                    result \u003d \"D\" + \"/\" +  (taskStatus ? \"1\" : \"0\") + \"/\" + description + \"/\" + ((Deadline) task).by;"},{"lineNumber":101,"author":{"gitId":"justgnohUG"},"content":"                } else {"},{"lineNumber":102,"author":{"gitId":"justgnohUG"},"content":"                    result \u003d \"T\" + \"/\" +  (taskStatus ? \"1\" : \"0\") + \"/\" + description;"},{"lineNumber":103,"author":{"gitId":"justgnohUG"},"content":"                }"},{"lineNumber":104,"author":{"gitId":"justgnohUG"},"content":"                writer.write(result + \"\\n\");"},{"lineNumber":105,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"justgnohUG"},"content":"            writer.close();"},{"lineNumber":107,"author":{"gitId":"justgnohUG"},"content":"        } catch (IOException e) {"},{"lineNumber":108,"author":{"gitId":"justgnohUG"},"content":"            System.out.println(\"saveTask error\");"},{"lineNumber":109,"author":{"gitId":"justgnohUG"},"content":"            e.printStackTrace();"},{"lineNumber":110,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":112}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":" * The Task class encapsulates"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":" * task descriptions and their completion status"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"public class Task {"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"    private String name;"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"     * Creates a Task with specified description."},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the Task description"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    public Task(String name) {"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"        this.name \u003d name;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"     * Creates a Task with specified description and"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"     * completion status"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     * @param name This is the Task description"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"     * @param isDone This is the Task completion status"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"    public Task(String name, Boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"        this.name \u003d name;"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"     * This method marks a task as done"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"    public void markDone() throws DukeException {"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"        this.isDone \u003d true;"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"     * This method gets the current task completion status"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"     * and returns a symbol accordingly"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     * @return String This is a tick or a cross"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"    public String getStatusIcon() {"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\");"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"    public String getName() {"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"        return this.name;"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + name;"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":62}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" * The TaskList class stores an ArrayList of type Task and"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * has methods to add, delete and get the entire Task List"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * or a singular task."},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"     * This methods adds a Task into the TaskList."},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"     * @param task This is a single task"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"    public void addTask(Task task) {"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"        this.tasks.add(task);"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"     * This method deletes a Task at a specified index"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"     * in the TaskList."},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"     * @param index This is the index of the Task to be deleted."},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"    public void deleteTask(int index) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"        this.tasks.remove(index);"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"     * This method matches tasks to provided string and returns"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"     * a new TaskList with matched tasks."},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     * @param match This is the string to be matched"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"     * @return A new TaskList with matched tasks"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"    public TaskList matchTasks(String match) {"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"        TaskList output \u003d new TaskList();"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"            for (int f \u003d 0; f \u003c this.getSize(); f++) {"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"                Task selectedTask \u003d this.getSingleTask(f);"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":"                if (selectedTask.toString().contains(match)) {"},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"                    output.addTask(selectedTask);"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"            return new TaskList();"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"        return output;"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":"     * This method replaces the task at index with a new task."},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"     * @param taskIndex This is the index of old task"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"     * @param newTask This is the new task"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"    public void replaceTask(int taskIndex, Task newTask) {"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":"        this.tasks.set(taskIndex, newTask);"},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"        return this.tasks;"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"    public Task getSingleTask(int index) throws DukeException {"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"            return this.tasks.get(index);"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":"        } catch (Exception e) {"},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"            // Catches invalid index"},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":"            throw new DukeException(\"Task not found! Invalid Index\");"},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"    public int getSize() {"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"        return this.tasks.size();"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":93}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":" * The Todo class inherits from Task and"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":" * uses parent constructor."},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"public class Todo extends Task {"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"    public Todo(String name) {"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"        super(name);"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"    public Todo(String name, Boolean isDone) {"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"        super(name, isDone);"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":25}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":" * The Ui class is a collection of print statements"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":" * that guides the user\u0027s interaction."},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":" *"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":" * @author  Justin Gnoh"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":" * @version 1.0"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":" * @since   2021-02-06"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":" */"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    private static final String EMPTY_STRING \u003d \"\";"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"     * Returns list in the provided TaskList."},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the provided TaskList"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the string version of TaskList"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"    public String printList(TaskList taskList) {"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"                l1 +\u003d (i + 1) + \".\" + taskList.getSingleTask(i).toString()"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"                        + \"\\n\";"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"            e.printMessage();"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"        return l1;"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"     * Returns the done message after a task has been completed."},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"     * @param task This is the task to be marked completed"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the done message"},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"    public String printDone(Task task) {"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"        String l2 \u003d \"[\" + task.getStatusIcon() + \"] \" + task.getName().trim();"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"        return l1 + l2;"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"     * Prints a task that is added and shows how many remaining"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"     * tasks are in the list."},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":"     * @param task This is the task to be added"},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"     * @param remTask This is the number of remaining tasks"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"    public String printTask(Task task, int remTask) {"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":54,"author":{"gitId":"justgnohUG"},"content":"        String l2 \u003d task.toString() + \"\\n\";"},{"lineNumber":55,"author":{"gitId":"justgnohUG"},"content":"        String l3 \u003d \"Now you have \" + remTask + \" tasks in the list\";"},{"lineNumber":56,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":57,"author":{"gitId":"justgnohUG"},"content":"        return l1 + l2 + l3;"},{"lineNumber":58,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":60,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"justgnohUG"},"content":"     * Prints a task that has been deleted and show how many"},{"lineNumber":62,"author":{"gitId":"justgnohUG"},"content":"     * remaining tasks are in the list."},{"lineNumber":63,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"justgnohUG"},"content":"     * @param task This is the task to be deleted"},{"lineNumber":65,"author":{"gitId":"justgnohUG"},"content":"     * @param remTask This is number of remaining tasks"},{"lineNumber":66,"author":{"gitId":"justgnohUG"},"content":"     * @return Returns a task deletion message"},{"lineNumber":67,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"justgnohUG"},"content":"    public String printDelete(Task task, int remTask) {"},{"lineNumber":69,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Noted. I\u0027ve removed this task:\\n\";"},{"lineNumber":70,"author":{"gitId":"justgnohUG"},"content":"        String l2 \u003d task.toString() + \"\\n\";"},{"lineNumber":71,"author":{"gitId":"justgnohUG"},"content":"        String l3 \u003d \"Now you have \" + remTask + \" tasks in the list\\n\";"},{"lineNumber":72,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":73,"author":{"gitId":"justgnohUG"},"content":"        return l1 + l2 + l3;"},{"lineNumber":74,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":76,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"justgnohUG"},"content":"     * returns an unknown command message."},{"lineNumber":78,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the unknown command message"},{"lineNumber":80,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"justgnohUG"},"content":"    public String printUnknownCommand() {"},{"lineNumber":82,"author":{"gitId":"justgnohUG"},"content":"        return \"Hol\u0027up, I don\u0027t know what that means :-(\";"},{"lineNumber":83,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":85,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"justgnohUG"},"content":"     * Prints the tasks given in the TaskList."},{"lineNumber":87,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"justgnohUG"},"content":"     * @param taskList This is the TaskList to be printed"},{"lineNumber":89,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the message"},{"lineNumber":90,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"justgnohUG"},"content":"    public String printMatchingTask(TaskList taskList) {"},{"lineNumber":92,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":93,"author":{"gitId":"justgnohUG"},"content":"        String l2 \u003d EMPTY_STRING;"},{"lineNumber":94,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":95,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"justgnohUG"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":97,"author":{"gitId":"justgnohUG"},"content":"                l2 +\u003d (i + 1) + \".\" + taskList.getSingleTask(i).toString()"},{"lineNumber":98,"author":{"gitId":"justgnohUG"},"content":"                        + \"\\n\";"},{"lineNumber":99,"author":{"gitId":"justgnohUG"},"content":"            }"},{"lineNumber":100,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":101,"author":{"gitId":"justgnohUG"},"content":"            return e.printMessage();"},{"lineNumber":102,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":104,"author":{"gitId":"justgnohUG"},"content":"        if (l2 \u003d\u003d EMPTY_STRING) {"},{"lineNumber":105,"author":{"gitId":"justgnohUG"},"content":"            return \"Sorry! Nothing found!\";"},{"lineNumber":106,"author":{"gitId":"justgnohUG"},"content":"        } else {"},{"lineNumber":107,"author":{"gitId":"justgnohUG"},"content":"            return l1 + l2;"},{"lineNumber":108,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":111,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"justgnohUG"},"content":"     * Prints the snooze complete message with updated date."},{"lineNumber":113,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"justgnohUG"},"content":"     * @param newDate This is the snooze new date"},{"lineNumber":115,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the snooze complete message"},{"lineNumber":116,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"justgnohUG"},"content":"    public String printDoneSnooze(String newDate) {"},{"lineNumber":118,"author":{"gitId":"justgnohUG"},"content":"        String l1 \u003d \"Deadline has been snoozed to \""},{"lineNumber":119,"author":{"gitId":"justgnohUG"},"content":"                + newDate;"},{"lineNumber":120,"author":{"gitId":"justgnohUG"},"content":"        return l1;"},{"lineNumber":121,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":123,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"justgnohUG"},"content":"     * Prints a message of all possible commands"},{"lineNumber":125,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"justgnohUG"},"content":"     * @return This is a text based help page"},{"lineNumber":127,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"justgnohUG"},"content":"    public String getHelpMessage() {"},{"lineNumber":129,"author":{"gitId":"justgnohUG"},"content":"        String commands \u003d \"To get you started, here are some commands:\\n\\n\""},{"lineNumber":130,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"list\\\": displays exisiting commands.\\n\""},{"lineNumber":131,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"done\\\" \u003ctaskNumber\u003e: marks a task complete.\\n \""},{"lineNumber":132,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"delete\\\" \u003ctaskNumber\u003e: deletes a task from your list.\\n\""},{"lineNumber":133,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"find\\\" \u003canyString\u003e: finds a task that matches the string.\\n\""},{"lineNumber":134,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"todo\\\" \u003ctask\u003e : adds a todo task.\\n\""},{"lineNumber":135,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"deadline\\\" \u003ctask\u003e /by \u003cdate YYYY-MM-DD\u003e: adds a deadline.\\n\""},{"lineNumber":136,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"event\\\" \u003ctask\u003e /at \u003clocation\u003e: adds an event.\\n\""},{"lineNumber":137,"author":{"gitId":"justgnohUG"},"content":"                + \"\\\"bye\\\": say bye to save existing tasks and exit\\n\""},{"lineNumber":138,"author":{"gitId":"justgnohUG"},"content":"                + \"\\nType \\\"help\\\" to bring up this page again. :)\";"},{"lineNumber":139,"author":{"gitId":"justgnohUG"},"content":"        return commands;"},{"lineNumber":140,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":142,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":143,"author":{"gitId":"justgnohUG"},"content":"     * Returns the introduction message"},{"lineNumber":144,"author":{"gitId":"justgnohUG"},"content":"     *"},{"lineNumber":145,"author":{"gitId":"justgnohUG"},"content":"     * @return This is the introduction message"},{"lineNumber":146,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"justgnohUG"},"content":"    public String getIntroMessage() {"},{"lineNumber":148,"author":{"gitId":"justgnohUG"},"content":"        String welcome \u003d \"Greetings mortal...\\n\""},{"lineNumber":149,"author":{"gitId":"justgnohUG"},"content":"                + \"Welcome to MODOC_TM\\n\\n\""},{"lineNumber":150,"author":{"gitId":"justgnohUG"},"content":"                + \"How can I be of service?\";"},{"lineNumber":151,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":152,"author":{"gitId":"justgnohUG"},"content":"        return welcome;"},{"lineNumber":153,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":155,"author":{"gitId":"justgnohUG"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"justgnohUG"},"content":"     * This method is called when there are not tasks to be loaded"},{"lineNumber":157,"author":{"gitId":"justgnohUG"},"content":"     * from storage."},{"lineNumber":158,"author":{"gitId":"justgnohUG"},"content":"     */"},{"lineNumber":159,"author":{"gitId":"justgnohUG"},"content":"    public void showLoadingError() {"},{"lineNumber":160,"author":{"gitId":"justgnohUG"},"content":"        System.out.println(\"Existing tasks not found.\");"},{"lineNumber":161,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":163,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":163}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" minHeight\u003d\"-Infinity\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"justgnohUG":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" minHeight\u003d\"-Infinity\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"justgnohUG":19}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import duke.DukeException;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"import duke.Task;"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":"    void addTask() {"},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"        Task dummyTask \u003d new Task(\"homework\");"},{"lineNumber":14,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":15,"author":{"gitId":"justgnohUG"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"        taskArrayList.add(dummyTask);"},{"lineNumber":17,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":18,"author":{"gitId":"justgnohUG"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"justgnohUG"},"content":"        tl.addTask(dummyTask);"},{"lineNumber":20,"author":{"gitId":"justgnohUG"},"content":"        //assertEquals(taskArrayList.get(0), tl.getSingleTask(0));"},{"lineNumber":21,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":23,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"justgnohUG"},"content":"    void deleteTask() {"},{"lineNumber":25,"author":{"gitId":"justgnohUG"},"content":"        Task dummyTask \u003d new Task(\"homework\");"},{"lineNumber":26,"author":{"gitId":"justgnohUG"},"content":"        ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":27,"author":{"gitId":"justgnohUG"},"content":"        taskArrayList.add(dummyTask);"},{"lineNumber":28,"author":{"gitId":"justgnohUG"},"content":"        taskArrayList.remove(0);"},{"lineNumber":29,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":30,"author":{"gitId":"justgnohUG"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"justgnohUG"},"content":"        tl.addTask(dummyTask);"},{"lineNumber":32,"author":{"gitId":"justgnohUG"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"justgnohUG"},"content":"            tl.deleteTask(0);"},{"lineNumber":34,"author":{"gitId":"justgnohUG"},"content":"        } catch (DukeException e) {"},{"lineNumber":35,"author":{"gitId":"justgnohUG"},"content":"            assertEquals(\"delete error\", e.printError(\"delete error\"));"},{"lineNumber":36,"author":{"gitId":"justgnohUG"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":38,"author":{"gitId":"justgnohUG"},"content":"        assertEquals(taskArrayList.size(), tl.getSize());"},{"lineNumber":39,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":41,"author":{"gitId":"justgnohUG"},"content":"    //  To be tested"},{"lineNumber":42,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"justgnohUG"},"content":"    void getTasks() {"},{"lineNumber":44,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":46,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"justgnohUG"},"content":"    void getSingleTask() {"},{"lineNumber":48,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":50,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":51,"author":{"gitId":"justgnohUG"},"content":"    void getSize() {"},{"lineNumber":52,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":53}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"import duke.Todo;"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"class TodoTest {"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"    void testToString() {"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"        Todo todo \u003d new Todo(\"homework\");"},{"lineNumber":10,"author":{"gitId":"justgnohUG"},"content":"        assertEquals(\"[T]\" + \"[\" + todo.getStatusIcon() + \"] \" + todo.name, todo.toString());"},{"lineNumber":11,"author":{"gitId":"justgnohUG"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"justgnohUG"},"content":""},{"lineNumber":13,"author":{"gitId":"justgnohUG"},"content":"}"}],"authorContributionMap":{"justgnohUG":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"justgnohUG"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"justgnohUG"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"justgnohUG"},"content":"event go to library /at Sunday"},{"lineNumber":4,"author":{"gitId":"justgnohUG"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"justgnohUG"},"content":"list"},{"lineNumber":6,"author":{"gitId":"justgnohUG"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"justgnohUG"},"content":"delete 2"},{"lineNumber":8,"author":{"gitId":"justgnohUG"},"content":"list"},{"lineNumber":9,"author":{"gitId":"justgnohUG"},"content":"bye"}],"authorContributionMap":{"justgnohUG":9}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"justgnohUG"},"content":"if ! javac -cp ../src/ -Xlint:none -d ../bin ../src/main/java/*.java;"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"justgnohUG":1,"-":37}}]
