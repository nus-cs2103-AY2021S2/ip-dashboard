[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":15,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"### Basic Add/Delete/Done features "},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"Simple addition, deletion, of task, and the ability to mark them as done"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"### Continuous Saving"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"Duke will continuously save your current list of tasks as you work."},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"### Search tasks"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"Search tasks with a intuitive `search` command."},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"### Different types of tasks to handle different time information"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"Simple `todo`, free-form `event`, and easy `deadline`"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"### `todo`/`event`/`deadline` - Add tasks"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"Adds a task with the corresponding type to the end of the list "},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"Usage:"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"todo (Description)"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"event (Description) /at (Event Time)"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"deadline (Description) /by (Deadline*)"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"\\* The deadline format has special syntax. See below for details."},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"`event blah /at end of the world`"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"Expected response:"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"The following task has been added:"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"Entry 1|[E][ ]: blah (Event Time: end of the world)"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"`todo See the World`"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"Expected response:"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"The following task has been added:"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][ ]: See the World"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"`deadline Surprise /by 20 02 20201`"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"Expected response:"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"The following task has been added:"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"Entry 3|[D][ ]: Surprise (Deadline: February 20, 2021)"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"#### Deadline date format"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"Keywords such as `yesterday`, `today`/`now`, and `tmr`/`tomorrow`, will create a deadline with the appropriate date."},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"Days of the week from `Monday`, `Tuesday` ... `Sunday`, will create a deadline for the next date with that day, excluding today."},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"Eg: Today is Friday, so `Friday` will result in a date exactly one week from now."},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"There is also absolute dates, which must strictly follow the format of `DD MM YYYY`. So `07 03 2020` will be accepted, but **not** `7 03 2020`, `07 3 2020`, or `07 03 20`. "},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"### `ls`/`list` - List all tasks"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"List all tasks in order, showing details and \"done\" status."},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"`list`"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"Example outcome:"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"Entry 1|[E][*]: blah (Event Time: end of the world)"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][ ]: See the World"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"Entry 3|[D][ ]: Surprise (Deadline: February 20, 2021)"},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"### `rm`/`del`/`remove`/`delete` - Remove task"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"Removes a task based on its list index."},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"`rm 2`"},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"Expected outcome:"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"The following Task has been deleted:"},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":"Entry 3|[D][ ]: Surprise (Deadline: February 20, 2021)"},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"### `done` - Mark task as done"},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"Marks a task as completed."},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":116,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":117,"author":{"gitId":"nighoggDatatype"},"content":"`done 2`"},{"lineNumber":118,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":119,"author":{"gitId":"nighoggDatatype"},"content":"Expected outcome:"},{"lineNumber":120,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":121,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":122,"author":{"gitId":"nighoggDatatype"},"content":"The following task is now marked as done:"},{"lineNumber":123,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][*]: See the World"},{"lineNumber":124,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":125,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":126,"author":{"gitId":"nighoggDatatype"},"content":"The resultant list should be as follows:"},{"lineNumber":127,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":128,"author":{"gitId":"nighoggDatatype"},"content":"Entry 1|[E][*]: blah (Event Time: end of the world)"},{"lineNumber":129,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][*]: See the World"},{"lineNumber":130,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":131,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":132,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":133,"author":{"gitId":"nighoggDatatype"},"content":"### `find`/`search` - Describe action"},{"lineNumber":134,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":135,"author":{"gitId":"nighoggDatatype"},"content":"Searches tasks based on a search string"},{"lineNumber":136,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":137,"author":{"gitId":"nighoggDatatype"},"content":"Suppose our current list looks like this:"},{"lineNumber":138,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":139,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":140,"author":{"gitId":"nighoggDatatype"},"content":"Entry 1|[E][*]: blah (Event Time: end of the world)"},{"lineNumber":141,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][*]: See the World"},{"lineNumber":142,"author":{"gitId":"nighoggDatatype"},"content":"Entry 3|[T][ ]: see tokyo"},{"lineNumber":143,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":144,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":145,"author":{"gitId":"nighoggDatatype"},"content":"Example of usage: "},{"lineNumber":146,"author":{"gitId":"nighoggDatatype"},"content":"`find see`"},{"lineNumber":147,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":148,"author":{"gitId":"nighoggDatatype"},"content":"Expected outcome:"},{"lineNumber":149,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":150,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":151,"author":{"gitId":"nighoggDatatype"},"content":"Matching Task(s):"},{"lineNumber":152,"author":{"gitId":"nighoggDatatype"},"content":"Entry 2|[T][*]: See the World"},{"lineNumber":153,"author":{"gitId":"nighoggDatatype"},"content":"Entry 3|[T][ ]: see tokyo"},{"lineNumber":154,"author":{"gitId":"nighoggDatatype"},"content":"```"},{"lineNumber":155,"author":{"gitId":"nighoggDatatype"},"content":"#### More detailed search behaviour:"},{"lineNumber":156,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":157,"author":{"gitId":"nighoggDatatype"},"content":"##### Default search behaviour"},{"lineNumber":158,"author":{"gitId":"nighoggDatatype"},"content":"By default, Duke matches from the beginning of each word in a task, so `find he` would match \"**He**ro of the sea\" but not \"T**he** tales of Genji\""},{"lineNumber":159,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":160,"author":{"gitId":"nighoggDatatype"},"content":"This is *disabled* if you have a multi word search, like `find he tale`, which triggers a substring search, and would successfully match \"T**he tale**s of Genji\""},{"lineNumber":161,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":162,"author":{"gitId":"nighoggDatatype"},"content":"##### Case insensitivity"},{"lineNumber":163,"author":{"gitId":"nighoggDatatype"},"content":"When searching in lowercase, Eg: `find see`, we ignore case and match both \"**see** the world\", and \"**See** Tokyo\""},{"lineNumber":164,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":165,"author":{"gitId":"nighoggDatatype"},"content":"To disable this, search with at least one capital letter, Eg: `find See`, which will match only \"**See** Tokyo\". "},{"lineNumber":166,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":167,"author":{"gitId":"nighoggDatatype"},"content":"Note that a single capital letter will make the entire search case sensitive. So `find See`, will **not** match \"**SEE** HOW TO GO FAST\""},{"lineNumber":168,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":169,"author":{"gitId":"nighoggDatatype"},"content":"### `exit`/`bye` - Exit duke"},{"lineNumber":170,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":171,"author":{"gitId":"nighoggDatatype"},"content":"Exits duke."},{"lineNumber":172,"author":{"gitId":"-"},"content":""},{"lineNumber":173,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":174,"author":{"gitId":"-"},"content":""},{"lineNumber":175,"author":{"gitId":"nighoggDatatype"},"content":"`exit`"},{"lineNumber":176,"author":{"gitId":"-"},"content":""},{"lineNumber":177,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":178,"author":{"gitId":"-"},"content":""},{"lineNumber":179,"author":{"gitId":"nighoggDatatype"},"content":"Duke exits. :)"}],"authorContributionMap":{"nighoggDatatype":165,"-":14}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadIndexException;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    public static final String FILE_DIR \u003d \"data\";"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public static final String FILE_NAME \u003d \"duke.txt\";"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    private final Ui ui;"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    private final Storage storage;"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"    private boolean isTerminated;"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"     * Constructor for Duke"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    public Duke() {"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"        storage \u003d new Storage(FILE_DIR, FILE_NAME);"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"        isTerminated \u003d false;"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"    public boolean getIsTerminated() {"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"        return isTerminated;"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"     * Handle Startup Procedure, which includes messages and loading from file."},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"     * @return dialog for startup."},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"    public String startUpProcedure() {"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"        ui.printStartUp();"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"            ui.printLoadStart();"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"            taskList \u003d storage.loadTaskList();"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"            ui.printLoadSuccess();"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"            ui.printLoadFail();"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"        return ui.flushMessage();"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"     * Checks whether the command is a termination command."},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"     * @param c Command to check"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Whether the command is a termination command"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"    private boolean isCommandTerminate(Command c) {"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"        return c \u003d\u003d null;"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"     * The main application loop"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"     * @param line The input to be processed"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Whether we can process new inputs"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"    public String processInput(String line) {"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"            Command c \u003d Parser.parse(line);"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"            if (isCommandTerminate(c)) { //Bye command"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"                handleTermination();"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"            } else {"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"                updateAndGenerateOutput(c);"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (ParseException e) {"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"            ui.handleParsingError(e);"},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (InvalidCommandException e) {"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"            ui.handleInvalidCommand(e);"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (EmptyArgumentException e) {"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"            ui.handleEmptyArgument(e);"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (BadDateArgumentException e) {"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"            ui.handleBadDate(e);"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (BadIndexException e) {"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"            ui.handleBadIndex(e);"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"        } finally {"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"            saveIfNeeded();"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"        return ui.flushMessage();"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"    private void updateAndGenerateOutput(Command c)"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"            throws EmptyArgumentException, BadDateArgumentException,"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"            InvalidCommandException, BadIndexException {"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"        String data \u003d taskList.run(c);"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"        ui.printCommandMessage(c, data);"},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":"     * Saves the content of taskList if it has been changed by the command"},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":"    private void saveIfNeeded() {"},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"        if (taskList.isEdited()) {"},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":"            try {"},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"                storage.saveTaskList(taskList);"},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":"                taskList.markSaved();"},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"            } catch (IOException e) {"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":"                ui.dumpState(taskList);"},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"     * Handle Termination, including private variables and messages."},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"    private void handleTermination() {"},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":"        isTerminated \u003d true;"},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"        ui.generateShutDownMessage();"},{"lineNumber":116,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":114,"-":3}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import duke.ui.MainWindow;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public void start(Stage stage) {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"        Duke d \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"            stage.setScene(scene);"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(d);"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"            stage.show();"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (IOException e) {"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"            e.printStackTrace();"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":28}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.AddCommand;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.Command;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.SearchCommand;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"     * Parses line of input for commands to the application"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"     * @param line The line to be parsed"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Command to the application"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws ParseException If the line could not be reasonably interpreted"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws InvalidCommandException If there is an unknown instruction at the start"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    public static Command parse(String line) throws ParseException, InvalidCommandException {"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"        line \u003d line.trim();"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"        String[] singleTokens \u003d {\"bye\", \"list\", \"exit\", \"ls\"};"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"        String[] tokens \u003d splitTokenIntoTwo(line, \" \", singleTokens);"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"        Command c \u003d null;"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"        switch (tokens[0].toLowerCase()) {"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"        case \"exit\":"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        case \"bye\":"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"            //Leave as null"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"        case \"ls\":"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"        case \"list\":"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new ListCommand();"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"        case \"done\":"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new DoneCommand(Integer.parseInt(tokens[1]));"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"        case \"todo\":"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new AddCommand(new String[]{\"T\", tokens[1]});"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"        case \"deadline\":"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"            tokens \u003d splitTokenIntoTwo(tokens[1], \" /by \");"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new AddCommand(new String[]{\"D\", tokens[0], tokens[1]});"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"        case \"event\":"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"            tokens \u003d splitTokenIntoTwo(tokens[1], \" /at \");"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new AddCommand(new String[]{\"E\", tokens[0], tokens[1]});"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"        case \"rm\":"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"        case \"remove\":"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"        case \"del\":"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"        case \"delete\":"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new DeleteCommand(Integer.parseInt(tokens[1]));"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"        case \"find\":"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"        case \"search\":"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"            c \u003d new SearchCommand(tokens[1]);"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"            throw new InvalidCommandException(tokens[0]);"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"        return c;"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"    private static String[] splitTokenIntoTwo(String parseTarget, String delimiter) throws ParseException {"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"        String[] tokens \u003d parseTarget.split(delimiter, 2);"},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"        if (tokens.length \u003c 2) {"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"            throw new ParseException(\"Expected delimiter \u0027\" + delimiter + \"\u0027\", tokens[0].length());"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"        return tokens;"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"    private static String[] splitTokenIntoTwo(String parseTarget, String delimiter, String[] exception)"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"            throws ParseException {"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"        List\u003cString\u003e exceptionsList \u003d Arrays.asList(exception);"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"        String[] tokens \u003d parseTarget.split(delimiter, 2);"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"        if (!exceptionsList.contains(tokens[0].toLowerCase()) \u0026\u0026 tokens.length \u003c 2) {"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"            throw new ParseException(\"Expected delimiter \u0027\" + delimiter + \"\u0027\", tokens[0].length());"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"        return tokens;"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":91}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.regex.Matcher;"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.regex.Pattern;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Deadline;"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Event;"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Task;"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.ToDos;"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    private final String fileDir;"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    private final String fileName;"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"     * Create new Storage interface with a particular folder path and file name."},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"     * @param directory Relative directory path to store data in"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"     * @param fileName Name of file to store data in"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"    public Storage(String directory, String fileName) {"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"        this.fileDir \u003d directory;"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        this.fileName \u003d fileName;"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"     * Attempts to parse a line from a file and load a corresponding Task."},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"     * @param line The line to be parsed"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"     * @return A task if successful, or null otherwise"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"    private Task parseLineFromFile(String line) {"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"        Task t;"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"        String pattern \u003d \"([TED]),([01]),(\\\\d*),(.*)\";"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"        Pattern r \u003d Pattern.compile(pattern);"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"        Matcher m \u003d r.matcher(line);"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"        if (!m.find()) {"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"            return null;"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"        String type \u003d m.group(1);"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"        boolean isDone \u003d m.group(2).equals(\"1\");"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"        int taskLength \u003d Integer.parseInt(m.group(3));"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"        String task \u003d m.group(4).substring(0, taskLength);"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"        String leftover \u003d m.group(4).substring(taskLength);"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"            if (type.equals(\"E\") || type.equals(\"D\")) {"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"                line \u003d leftover.substring(1);"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"                pattern \u003d \"(\\\\d*),(.*)\";"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"                r \u003d Pattern.compile(pattern);"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"                m \u003d r.matcher(line);"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"                if (!m.find()) {"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"                    return null;"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"                int timeLength \u003d Integer.parseInt(m.group(1));"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"                String timeData \u003d m.group(2).substring(0, timeLength);"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"                switch (type) {"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"                case \"E\":"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"                    t \u003d new Event(task, timeData);"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"                    break;"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"                case \"D\":"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"                    t \u003d new Deadline(task, timeData);"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"                    break;"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"                default:"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"                    return null;"},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"            } else {"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"                t \u003d new ToDos(task);"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (EmptyArgumentException | BadDateArgumentException e) {"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"            return null;"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"        if (isDone) {"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"            t.setDone();"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"        return t;"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"     * Loads data from a fixed constant, location relative to the program location"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"     * @return TaskList that corresponds to the loaded data"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws IOException Uncontrollable IO Error"},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":"    public TaskList loadTaskList() throws IOException {"},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":"        File file \u003d getOrCreateFile();"},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"        Scanner s \u003d new Scanner(file);"},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":"        while (s.hasNextLine()) {"},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"            Task t \u003d parseLineFromFile(s.nextLine());"},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":"            if (t !\u003d null) {"},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"                taskList.add(t);"},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":"        s.close();"},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"        return new TaskList(taskList);"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":"     * Saves TaskList to disk."},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":"     * @param data TaskList to save to disk"},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws IOException Unable to create subfolder"},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"    public void saveTaskList(TaskList data) throws IOException {"},{"lineNumber":116,"author":{"gitId":"nighoggDatatype"},"content":"        String saveText \u003d data.toFileString();"},{"lineNumber":117,"author":{"gitId":"nighoggDatatype"},"content":"        File f \u003d getOrCreateFile();"},{"lineNumber":118,"author":{"gitId":"nighoggDatatype"},"content":"        FileWriter writer \u003d new FileWriter(f);"},{"lineNumber":119,"author":{"gitId":"nighoggDatatype"},"content":"        writer.write(saveText);"},{"lineNumber":120,"author":{"gitId":"nighoggDatatype"},"content":"        writer.close();"},{"lineNumber":121,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":123,"author":{"gitId":"nighoggDatatype"},"content":"    private File getOrCreateFile() throws IOException {"},{"lineNumber":124,"author":{"gitId":"nighoggDatatype"},"content":"        Files.createDirectories(Paths.get(fileDir));"},{"lineNumber":125,"author":{"gitId":"nighoggDatatype"},"content":"        File file \u003d new File(fileDir, fileName);"},{"lineNumber":126,"author":{"gitId":"nighoggDatatype"},"content":"        file.createNewFile();"},{"lineNumber":127,"author":{"gitId":"nighoggDatatype"},"content":"        return file;"},{"lineNumber":128,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":129}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.stream.IntStream;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadIndexException;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"import duke.task.ToDos;"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    public enum Action {"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"        ADD,"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"        LIST,"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"        DONE,"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"        DELETE,"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"        SEARCH,"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    private boolean edited \u003d false;"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    private final List\u003cTask\u003e store;"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    public TaskList(List\u003cTask\u003e store) {"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"        this.store \u003d store;"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"     * Runs command on TaskList and returns command specific output."},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"     * Side effects are present on some commands"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"     * @param c Command to be run"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Output meant for Ui Class"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws EmptyArgumentException At least one argument is missing"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws BadDateArgumentException An argument that is expected to be a date is ill formatted"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws InvalidCommandException A bad command has been passed that cannot be handled"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws BadIndexException An index in the command is out of bounds and needs to be communicated"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"    public String run(Command c)"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"            throws EmptyArgumentException, BadDateArgumentException,"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"            InvalidCommandException, BadIndexException {"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"        String[] args \u003d c.getCommandParameters();"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"        String result;"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"        Action action \u003d c.getType();"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"        switch (action) {"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"        case ADD:"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d addTask(args);"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"            edited \u003d true;"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"        case DONE:"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"            checkIndex(Integer.parseInt(args[0]));"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d setDone(Integer.parseInt(args[0]));"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"            edited \u003d true;"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"        case DELETE:"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"            checkIndex(Integer.parseInt(args[0]));"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d delete(Integer.parseInt(args[0]));"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"            edited \u003d true;"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"        case LIST:"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d getList();"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"        case SEARCH:"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d getFilteredList(args[0]);"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"        default:"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"            result \u003d \"\";"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"        return result;"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"     * Mark the changes in the TaskList as saved to disk."},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"    public void markSaved() {"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"        edited \u003d false;"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"     * Check whether TaskList has been edited from when it has been last saved to disk"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Whether the TaskList has changed"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"    public boolean isEdited() {"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"        return this.edited;"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"    private String addTask(String[] tokens)"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"            throws EmptyArgumentException, BadDateArgumentException, InvalidCommandException {"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"        generateTask(tokens);"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"        int lastIndex \u003d store.size() - 1;"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"        return formatOrderedPrint(lastIndex);"},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":"    private void generateTask(String[] tokens)"},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"            throws EmptyArgumentException, BadDateArgumentException, InvalidCommandException {"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":"        String type \u003d tokens[0];"},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"        String task \u003d tokens[1];"},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":"        String additional \u003d tokens.length \u003e\u003d 3 ? tokens[2] : null;"},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"        Task t;"},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":"        switch (type) {"},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"        case \"D\":"},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":"            assert tokens.length \u003d\u003d 3;"},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"            t \u003d new Deadline(task, additional);"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"        case \"E\":"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"            assert tokens.length \u003d\u003d 3;"},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":"            t \u003d new Event(task, additional);"},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":"        case \"T\":"},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"            assert tokens.length \u003d\u003d 2;"},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":"            t \u003d new ToDos(task);"},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":"        default:"},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"            assert false"},{"lineNumber":116,"author":{"gitId":"nighoggDatatype"},"content":"                    : \"This assertion failed because an un-processable command has been received\";"},{"lineNumber":117,"author":{"gitId":"nighoggDatatype"},"content":"            throw new InvalidCommandException(\"of type \" + type);"},{"lineNumber":118,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"nighoggDatatype"},"content":"        store.add(t);"},{"lineNumber":120,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nighoggDatatype"},"content":"    private void checkIndex(int index) throws BadIndexException {"},{"lineNumber":122,"author":{"gitId":"nighoggDatatype"},"content":"        if (index \u003c 0 || index \u003e\u003d store.size()) {"},{"lineNumber":123,"author":{"gitId":"nighoggDatatype"},"content":"            throw new BadIndexException(index);"},{"lineNumber":124,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"nighoggDatatype"},"content":"    private String setDone(int doneIndex) {"},{"lineNumber":127,"author":{"gitId":"nighoggDatatype"},"content":"        assert doneIndex \u003e\u003d 0 \u0026\u0026 doneIndex \u003c store.size();"},{"lineNumber":128,"author":{"gitId":"nighoggDatatype"},"content":"        Task t \u003d store.get(doneIndex);"},{"lineNumber":129,"author":{"gitId":"nighoggDatatype"},"content":"        t.setDone();"},{"lineNumber":130,"author":{"gitId":"nighoggDatatype"},"content":"        return formatOrderedPrint(doneIndex);"},{"lineNumber":131,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"nighoggDatatype"},"content":"    private String delete(int deleteIndex) {"},{"lineNumber":133,"author":{"gitId":"nighoggDatatype"},"content":"        assert deleteIndex \u003e\u003d 0 \u0026\u0026 deleteIndex \u003c store.size();"},{"lineNumber":134,"author":{"gitId":"nighoggDatatype"},"content":"        String returnValue \u003d formatOrderedPrint(deleteIndex);"},{"lineNumber":135,"author":{"gitId":"nighoggDatatype"},"content":"        store.remove(deleteIndex);"},{"lineNumber":136,"author":{"gitId":"nighoggDatatype"},"content":"        return returnValue;"},{"lineNumber":137,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":139,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"nighoggDatatype"},"content":"     * Gets a user friendly list of all the task in TaskList"},{"lineNumber":141,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"nighoggDatatype"},"content":"     * @return User friendly state of TaskList"},{"lineNumber":143,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"nighoggDatatype"},"content":"    public String getList() {"},{"lineNumber":145,"author":{"gitId":"nighoggDatatype"},"content":"        return IntStream.range(0, store.size())"},{"lineNumber":146,"author":{"gitId":"nighoggDatatype"},"content":"                        .parallel()"},{"lineNumber":147,"author":{"gitId":"nighoggDatatype"},"content":"                        .mapToObj(this::formatOrderedPrint)"},{"lineNumber":148,"author":{"gitId":"nighoggDatatype"},"content":"                        .map(str -\u003e str + \"\\n\")"},{"lineNumber":149,"author":{"gitId":"nighoggDatatype"},"content":"                        .reduce(\"\", (a, b) -\u003e a + b);"},{"lineNumber":150,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":152,"author":{"gitId":"nighoggDatatype"},"content":"    private String getFilteredList(String searchTerm) {"},{"lineNumber":153,"author":{"gitId":"nighoggDatatype"},"content":"        return IntStream.range(0, store.size())"},{"lineNumber":154,"author":{"gitId":"nighoggDatatype"},"content":"                        .parallel()"},{"lineNumber":155,"author":{"gitId":"nighoggDatatype"},"content":"                        .filter(i -\u003e store.get(i).containsSearch(searchTerm))"},{"lineNumber":156,"author":{"gitId":"nighoggDatatype"},"content":"                        .mapToObj(this::formatOrderedPrint)"},{"lineNumber":157,"author":{"gitId":"nighoggDatatype"},"content":"                        .map(str -\u003e str + \"\\n\")"},{"lineNumber":158,"author":{"gitId":"nighoggDatatype"},"content":"                        .reduce(\"\", (a, b) -\u003e a + b);"},{"lineNumber":159,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"nighoggDatatype"},"content":"    private String formatOrderedPrint(int i) {"},{"lineNumber":161,"author":{"gitId":"nighoggDatatype"},"content":"        return \"Entry \" + (i + 1) + \"|\" + store.get(i).toString();"},{"lineNumber":162,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":164,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates a string that represents the state of TaskList,"},{"lineNumber":166,"author":{"gitId":"nighoggDatatype"},"content":"     * such that the program can recreate it."},{"lineNumber":167,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":168,"author":{"gitId":"nighoggDatatype"},"content":"     * @return A machine interpretable representation of TaskList"},{"lineNumber":169,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"nighoggDatatype"},"content":"    public String toFileString() {"},{"lineNumber":171,"author":{"gitId":"nighoggDatatype"},"content":"        StringBuilder saveText \u003d new StringBuilder();"},{"lineNumber":172,"author":{"gitId":"nighoggDatatype"},"content":"        for (Task t: store) {"},{"lineNumber":173,"author":{"gitId":"nighoggDatatype"},"content":"            saveText.append(t.toFileString());"},{"lineNumber":174,"author":{"gitId":"nighoggDatatype"},"content":"            saveText.append(\u0027\\n\u0027);"},{"lineNumber":175,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"nighoggDatatype"},"content":"        return saveText.toString();"},{"lineNumber":177,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":178}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.text.ParseException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadIndexException;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.InvalidCommandException;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"    private static final String LOGO \u003d"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"              \"The Wondrous Duke of Singapore(TM)\\n\""},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"            + \"(wipe your feet)\\n\";"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    private static final String SEPARATOR \u003d \"------------------\\n\";"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    private final StringBuilder builder;"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"     * Ui constructor"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    public Ui() {"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"        builder \u003d new StringBuilder();"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"     * Returns all the accumulated messages while flushing the buffer."},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"     * @return The message to be printed"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"    public String flushMessage() {"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"        String message \u003d builder.toString();"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"        builder.setLength(0);"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        return message;"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"     * Prints a start up message for when the program starts."},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"    public void printStartUp() {"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Hello from\\n\" + LOGO + \"\\n\");"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"No unicode allowed\" + \"\\n\");"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"     * Prints a shutdown message for when the program ends."},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"    public void generateShutDownMessage() {"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Goodbye from\\n\" + LOGO);"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"     * Indicate to the user that we are loading a file."},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"    public void printLoadStart() {"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Loading From File...\\n\");"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"     * Indicate to the user that we successfully loaded a file."},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"    public void printLoadSuccess() {"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Loaded\\n\");"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"     * Indicates to the user that the file could not be loaded and that we cannot continue."},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"    public void printLoadFail() {"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Failed to Load file. Aborting.\\n\");"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"     * Dumps the state of the task list visually in a manner suitable for the user"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"     * to manually copy and save."},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"     * @param store TaskList that needs to be dumped"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"    public void dumpState(TaskList store) {"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Unable to save list. Dumping ...\\n\");"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(store.getList());"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Continuing Normal operation\\n\");"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"     * Generate and print message based on command and results from that command"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"     * @param command The command that has been issued"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"     * @param data The results of that command, in a pre-processed format"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"    public void printCommandMessage(Command command, String data) {"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"        switch (command.getType()) {"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":"        case LIST:"},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(data);"},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"        case DONE:"},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":"            assert data.length() \u003e 0;"},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(\"The following task is now marked as done:\\n\""},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":"                    + data + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":"        case ADD:"},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"            assert data.length() \u003e 0;"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(\"The following task has been added:\\n\""},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":"                    + data + \"\\n\");"},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":"        case DELETE:"},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"            assert data.length() \u003e 0;"},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(\"The following Task has been deleted:\\n\");"},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(data + \"\\n\");"},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"        case SEARCH:"},{"lineNumber":116,"author":{"gitId":"nighoggDatatype"},"content":"            if (data.length() \u003e 0) {"},{"lineNumber":117,"author":{"gitId":"nighoggDatatype"},"content":"                builder.append(\"Matching Task(s):\\n\");"},{"lineNumber":118,"author":{"gitId":"nighoggDatatype"},"content":"                builder.append(data + \"\\n\");"},{"lineNumber":119,"author":{"gitId":"nighoggDatatype"},"content":"            } else {"},{"lineNumber":120,"author":{"gitId":"nighoggDatatype"},"content":"                builder.append(\"No Matching Task has been found\\n\");"},{"lineNumber":121,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":122,"author":{"gitId":"nighoggDatatype"},"content":"            break;"},{"lineNumber":123,"author":{"gitId":"nighoggDatatype"},"content":"        default:"},{"lineNumber":124,"author":{"gitId":"nighoggDatatype"},"content":"            assert false : \"This Really should not happen ever\";"},{"lineNumber":125,"author":{"gitId":"nighoggDatatype"},"content":"            builder.append(\"ERROR: Unhandled Case!\\n\");"},{"lineNumber":126,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(SEPARATOR);"},{"lineNumber":128,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":130,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates an UI alert for parsing error"},{"lineNumber":132,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":133,"author":{"gitId":"nighoggDatatype"},"content":"     * @param e Exception that requires an error message"},{"lineNumber":134,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"nighoggDatatype"},"content":"    public void handleParsingError(ParseException e) {"},{"lineNumber":136,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Command has invalid parsing.\\n\");"},{"lineNumber":137,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(e.getMessage() + \"\\n\");"},{"lineNumber":138,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":140,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates an UI alert for an invalid command."},{"lineNumber":141,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":142,"author":{"gitId":"nighoggDatatype"},"content":"     * @param e Exception that requires an error message"},{"lineNumber":143,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"nighoggDatatype"},"content":"    public void handleInvalidCommand(InvalidCommandException e) {"},{"lineNumber":145,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(e.getMessage() + \"\\n\");"},{"lineNumber":146,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates an UI alert for empty arguments."},{"lineNumber":149,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"nighoggDatatype"},"content":"     * @param e Exception that requires an error message"},{"lineNumber":151,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":152,"author":{"gitId":"nighoggDatatype"},"content":"    public void handleEmptyArgument(EmptyArgumentException e) {"},{"lineNumber":153,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Cannot have empty argument\\n\");"},{"lineNumber":154,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates an UI alert for bad date formatting."},{"lineNumber":157,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"nighoggDatatype"},"content":"     * @param e Exception that requires an error message"},{"lineNumber":159,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":160,"author":{"gitId":"nighoggDatatype"},"content":"    public void handleBadDate(BadDateArgumentException e) {"},{"lineNumber":161,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"Date must be one of the following:\\n\");"},{"lineNumber":162,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"    Special keyword: Yesterday, Today/Now, Tomorrow/Tmr\");"},{"lineNumber":163,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"    Days of the week; Eg: Mon/M/Mo/Monday\");"},{"lineNumber":164,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(\"    \u0027dd MM yyyy\u0027; Eg: 27 08 2044\\n\");"},{"lineNumber":165,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":167,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":168,"author":{"gitId":"nighoggDatatype"},"content":"     * Generates an UI alert for an out of bounds error"},{"lineNumber":169,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":170,"author":{"gitId":"nighoggDatatype"},"content":"     * @param e Exception that requires an error message"},{"lineNumber":171,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":172,"author":{"gitId":"nighoggDatatype"},"content":"    public void handleBadIndex(BadIndexException e) {"},{"lineNumber":173,"author":{"gitId":"nighoggDatatype"},"content":"        builder.append(e.getMessage());"},{"lineNumber":174,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":175}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList.Action;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class AddCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    private final String[] args;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * Create new Add command"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"     * @param args Parameters describing what to add"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    public AddCommand(String[] args) {"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"        assert args.length \u003e 1 : \"Need at least the type and description\";"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"        this.args \u003d args;"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"    public String[] getCommandParameters() {"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"        return args;"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    public Action getType() {"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"        return Action.ADD;"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":27}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public abstract class Command {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    public abstract String[] getCommandParameters();"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"    public abstract TaskList.Action getType();"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":8}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList.Action;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class DeleteCommand extends IndexedCommand {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Create command to delete Task from TaskList"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param position One index position in TaskList of Task to delete"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    public DeleteCommand(int position) {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        super(position);"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    public Action getType() {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        return Action.DELETE;"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":19}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList.Action;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class DoneCommand extends IndexedCommand {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Create command to mark Task in TaskList as done"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param position One index position in TaskList of Task to mark as done"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    public DoneCommand(int position) {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        super(position);"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    public Action getType() {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        return Action.DONE;"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":19}},{"path":"src/main/java/duke/command/IndexedCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"abstract class IndexedCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"    private final int index;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Create command to manipulate Task in TaskList based on position index"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param position One index position in TaskList of Task to manipulate"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    public IndexedCommand(int position) {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        this.index \u003d position - 1;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    public String[] getCommandParameters() {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        return new String[]{String.valueOf(index)};"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":19}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList.Action;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class ListCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"    public String[] getCommandParameters() {"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"        return new String[0];"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    public Action getType() {"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"        return Action.LIST;"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":16}},{"path":"src/main/java/duke/command/SearchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class SearchCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    private final String searchTerm;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * Create command to search for Task with a particular substring."},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"     * @param searchTerm Case and whitespace sensitive search input"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    public SearchCommand(String searchTerm) {"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"        this.searchTerm \u003d searchTerm;"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    public String[] getCommandParameters() {"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"        return new String[]{this.searchTerm};"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    public TaskList.Action getType() {"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"        return TaskList.Action.SEARCH;"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":26}},{"path":"src/main/java/duke/exception/BadDateArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"public class BadDateArgumentException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":4}},{"path":"src/main/java/duke/exception/BadIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"public class BadIndexException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"    private final int index;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Indicates that a requested index is out of bounds."},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param index Index that was requested"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    public BadIndexException(int index) {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        this.index \u003d index;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public String getMessage() {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"        return \"Index \" + (index + 1) + \" is out of bounds.\";"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":18}},{"path":"src/main/java/duke/exception/EmptyArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"public class EmptyArgumentException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":4}},{"path":"src/main/java/duke/exception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"    private final String badCommand;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Create Exception to indicate an invalid command"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param badCommand Invalid command fragment"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    public InvalidCommandException(String badCommand) {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        this.badCommand \u003d badCommand;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public String getMessage() {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"        return \"Command \u0027\" + badCommand + \"\u0027 is not recognized.\";"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":18}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.time.DayOfWeek;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    protected final LocalDate deadline;"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"     * Creates a Task with a description and a deadline date that it needs"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"     * to be done by."},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"     * @param description Description of Deadline"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"     * @param by When the task needs to be completed"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws EmptyArgumentException Some argument, either \u0027description\u0027 or \u0027by\u0027 is empty."},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws BadDateArgumentException When \u0027by\u0027 is not well formatted"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    public Deadline(String description, String by) throws EmptyArgumentException, BadDateArgumentException {"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"        LocalDate potentialDeadline;"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"        potentialDeadline \u003d attemptToParseAsKeyword(by);"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"        if (potentialDeadline !\u003d null) {"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"            deadline \u003d potentialDeadline;"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"            return;"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"        potentialDeadline \u003d attemptToParseAsRelativeDay(by);"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        if (potentialDeadline !\u003d null) {"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"            deadline \u003d potentialDeadline;"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"            return;"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"        potentialDeadline \u003d attemptToParseAsAbsolute(by);"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"        if (potentialDeadline !\u003d null) {"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"            deadline \u003d potentialDeadline;"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"            return;"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"        throw new BadDateArgumentException();"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"     * Attempts to parse a string as a numeric date and obtain a LocalDate object"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"     * Eg: \"07 12 2021\" -\u003e 7 Dec, 2020"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"     * @param date The String that might be an absolute numeric date"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Either a date if parsing is successful or null otherwise."},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"    private static LocalDate attemptToParseAsAbsolute(String date) {"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MM yyyy\");"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"            return LocalDate.parse(date, formatter);"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"            return null;"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"     * Attempts to parse a string as a day of the week (Eg: Wednesday)"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"     * @param day String that may or may not be a day of the week"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Either a DayOfWeek if successfully parsed or null otherwise."},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"    private static DayOfWeek attemptToParseAsDayOfWeek(String day) {"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"        String[] mondayStrings \u003d {\"m\", \"mo\", \"mon\", \"monday\"};"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"        String[] tuesdayStrings \u003d {\"tu\", \"tue\", \"tues\", \"tuesday\"};"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"        String[] wednesdayStrings \u003d {\"w\", \"we\", \"wed\", \"weds\", \"wednesday\"};"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"        String[] thursdayStrings \u003d {\"th\", \"thu\", \"thur\", \"thurs\", \"thursday\"};"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"        String[] fridayStrings \u003d {\"f\", \"fr\", \"fri\", \"friday\"};"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"        String[] saturdayStrings \u003d {\"sa\", \"sat\", \"saturday\"};"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"        String[] sundayStrings \u003d {\"su\", \"sun\", \"sunday\"};"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"        String[][] dayStrings \u003d {mondayStrings, tuesdayStrings, wednesdayStrings,"},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"                                 thursdayStrings, fridayStrings, saturdayStrings,"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"                                 sundayStrings};"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"        DayOfWeek[] dayOfWeeks \u003d {DayOfWeek.MONDAY, DayOfWeek.TUESDAY, DayOfWeek.WEDNESDAY,"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"                                  DayOfWeek.THURSDAY, DayOfWeek.FRIDAY, DayOfWeek.SATURDAY,"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"                                  DayOfWeek.SUNDAY};"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"        assert dayStrings.length \u003d\u003d dayOfWeeks.length;"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"        String lowerCaseDay \u003d day.toLowerCase().trim();"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"        for (int i \u003d 0; i \u003c dayStrings.length; i++) {"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"            if (Arrays.asList(dayStrings[i]).contains(lowerCaseDay)) {"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"                return dayOfWeeks[i];"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"        return null;"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"     * Interprets a DayOfWeek as a day relative to today."},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"     * Eg: Next Monday if today is Saturday is two days from today."},{"lineNumber":94,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"nighoggDatatype"},"content":"     * @param day DayOfWeek relative to today"},{"lineNumber":96,"author":{"gitId":"nighoggDatatype"},"content":"     * @return A date relative to the passed in day"},{"lineNumber":97,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"nighoggDatatype"},"content":"    private static LocalDate getNextRelativeDay(DayOfWeek day) {"},{"lineNumber":99,"author":{"gitId":"nighoggDatatype"},"content":"        LocalDate candidateDate \u003d LocalDate.now().plusDays(1);"},{"lineNumber":100,"author":{"gitId":"nighoggDatatype"},"content":"        while (!candidateDate.getDayOfWeek().equals(day)) {"},{"lineNumber":101,"author":{"gitId":"nighoggDatatype"},"content":"            candidateDate \u003d candidateDate.plusDays(1);"},{"lineNumber":102,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nighoggDatatype"},"content":"        return candidateDate;"},{"lineNumber":104,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":106,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"nighoggDatatype"},"content":"     * Attempts to parse a string as a day relative to today."},{"lineNumber":108,"author":{"gitId":"nighoggDatatype"},"content":"     * Eg: Next Monday if today is Saturday is two days from today."},{"lineNumber":109,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"nighoggDatatype"},"content":"     * @param day String that might be a day"},{"lineNumber":111,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Either a date if parsing is successful or null otherwise."},{"lineNumber":112,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"nighoggDatatype"},"content":"    private static LocalDate attemptToParseAsRelativeDay(String day) {"},{"lineNumber":114,"author":{"gitId":"nighoggDatatype"},"content":"        DayOfWeek dayOfWeek \u003d attemptToParseAsDayOfWeek(day);"},{"lineNumber":115,"author":{"gitId":"nighoggDatatype"},"content":"        if (dayOfWeek \u003d\u003d null) {"},{"lineNumber":116,"author":{"gitId":"nighoggDatatype"},"content":"            return null;"},{"lineNumber":117,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"nighoggDatatype"},"content":"        return getNextRelativeDay(dayOfWeek);"},{"lineNumber":119,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":121,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"nighoggDatatype"},"content":"     * Attempts to parse a string as a keyword and generate a date"},{"lineNumber":123,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"nighoggDatatype"},"content":"     * @param date String to parse"},{"lineNumber":125,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Either a date if parsing is successful or null otherwise."},{"lineNumber":126,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"nighoggDatatype"},"content":"    private static LocalDate attemptToParseAsKeyword(String date) {"},{"lineNumber":128,"author":{"gitId":"nighoggDatatype"},"content":"        LocalDate now \u003d LocalDate.now();"},{"lineNumber":129,"author":{"gitId":"nighoggDatatype"},"content":"        switch (date.toLowerCase()) {"},{"lineNumber":130,"author":{"gitId":"nighoggDatatype"},"content":"        case \"yesterday\":"},{"lineNumber":131,"author":{"gitId":"nighoggDatatype"},"content":"            return now.minusDays(1);"},{"lineNumber":132,"author":{"gitId":"nighoggDatatype"},"content":"        case \"now\":"},{"lineNumber":133,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":134,"author":{"gitId":"nighoggDatatype"},"content":"        case \"today\":"},{"lineNumber":135,"author":{"gitId":"nighoggDatatype"},"content":"            return now;"},{"lineNumber":136,"author":{"gitId":"nighoggDatatype"},"content":"        case \"tomorrow\":"},{"lineNumber":137,"author":{"gitId":"nighoggDatatype"},"content":"            //Fall-through"},{"lineNumber":138,"author":{"gitId":"nighoggDatatype"},"content":"        case \"tmr\":"},{"lineNumber":139,"author":{"gitId":"nighoggDatatype"},"content":"            return now.plusDays(1);"},{"lineNumber":140,"author":{"gitId":"nighoggDatatype"},"content":"        default:"},{"lineNumber":141,"author":{"gitId":"nighoggDatatype"},"content":"            return null;"},{"lineNumber":142,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":145,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":146,"author":{"gitId":"nighoggDatatype"},"content":"    public String toString() {"},{"lineNumber":147,"author":{"gitId":"nighoggDatatype"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMMM dd, yyyy\");"},{"lineNumber":148,"author":{"gitId":"nighoggDatatype"},"content":"        return \"[D]\" + super.toString() + \" (Deadline: \" + deadline.format(formatter) + \")\";"},{"lineNumber":149,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":151,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":152,"author":{"gitId":"nighoggDatatype"},"content":"    public String toFileString() {"},{"lineNumber":153,"author":{"gitId":"nighoggDatatype"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd MM yyyy\");"},{"lineNumber":154,"author":{"gitId":"nighoggDatatype"},"content":"        String date \u003d deadline.format(formatter);"},{"lineNumber":155,"author":{"gitId":"nighoggDatatype"},"content":"        return \"D,\" + super.toBaseFileString() + \",\" + date.length() + \",\" + date;"},{"lineNumber":156,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":157}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    private final String eventPeriod;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * Creates an Event that has a description and a duration."},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"     * @param description Description of event"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"     * @param eventPeriod When the event takes place"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws EmptyArgumentException When an empty description or eventPeriod is passed"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public Event(String description, String eventPeriod) throws EmptyArgumentException {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"        super(description);"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        eventPeriod \u003d eventPeriod.trim();"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"        if (eventPeriod.isEmpty()) {"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"            throw new EmptyArgumentException();"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"        this.eventPeriod \u003d eventPeriod;"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"        return \"[E]\" + super.toString() + \" (Event Time: \" + eventPeriod + \")\";"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"    public String toFileString() {"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"        return \"E,\" + super.toBaseFileString() + \",\" + eventPeriod.length() + \",\" + eventPeriod;"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":33}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public abstract class Task {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    private final String description;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"    private boolean isDone;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     * Creates a Task that has a description"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"     * @param description Description of Task"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws EmptyArgumentException Description is empty or whitespace"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    public Task(String description) throws EmptyArgumentException {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"        description \u003d description.trim();"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        if (description.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"            throw new EmptyArgumentException();"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"     * Marks the task as done"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"    public void setDone() {"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"        this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"     * Gets the symbol for the status of the task."},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Symbol representing the task status"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"    public String getStatusIcon() {"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"        return (isDone ? \"*\" : \" \"); //Don\u0027t use unicode, cause it can\u0027t test properly"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"        return \"[\" + this.getStatusIcon() + \"]: \" + description;"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"     * Converts the Task into a format suitable for file system storage"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"     * @return A savable string."},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"    public abstract String toFileString();"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"    public int hashCode() {"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"        return this.toString().hashCode();"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"     * Converts raw Task data common to all Tasks into"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"     * a format suitable for file system storage."},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"     * @return A common partial savable string."},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"    String toBaseFileString() {"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"        return (isDone ? \"1\" : \"0\") + \",\" + description.length() + \",\" + description;"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"     * Checks whether the Task contains the following search substring,"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"     * subject to special rules and behaviours based on capitalization and whitespace."},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"     * @param search Case and whitespace sensitive search substring"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"     * @return Whether the task matches the search query."},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"nighoggDatatype"},"content":"    public boolean containsSearch(String search) {"},{"lineNumber":72,"author":{"gitId":"nighoggDatatype"},"content":"        String targetString \u003d description;"},{"lineNumber":73,"author":{"gitId":"nighoggDatatype"},"content":"        boolean isCaseInsensitive \u003d search.toLowerCase().contains(search);"},{"lineNumber":74,"author":{"gitId":"nighoggDatatype"},"content":"        if (isCaseInsensitive) {"},{"lineNumber":75,"author":{"gitId":"nighoggDatatype"},"content":"            targetString \u003d targetString.toLowerCase();"},{"lineNumber":76,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"nighoggDatatype"},"content":"        if (search.contains(\" \")) { //Literal multi word matching"},{"lineNumber":78,"author":{"gitId":"nighoggDatatype"},"content":"            return targetString.contains(search);"},{"lineNumber":79,"author":{"gitId":"nighoggDatatype"},"content":"        } else { //Smart per word start matching"},{"lineNumber":80,"author":{"gitId":"nighoggDatatype"},"content":"            String[] words \u003d targetString.split(\" \");"},{"lineNumber":81,"author":{"gitId":"nighoggDatatype"},"content":"            for (String word: words) {"},{"lineNumber":82,"author":{"gitId":"nighoggDatatype"},"content":"                if (word.length() \u003c search.length()) {"},{"lineNumber":83,"author":{"gitId":"nighoggDatatype"},"content":"                    continue;"},{"lineNumber":84,"author":{"gitId":"nighoggDatatype"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"nighoggDatatype"},"content":"                String subWord \u003d word.substring(0, search.length());"},{"lineNumber":86,"author":{"gitId":"nighoggDatatype"},"content":"                if (subWord.equals(search)) {"},{"lineNumber":87,"author":{"gitId":"nighoggDatatype"},"content":"                    return true;"},{"lineNumber":88,"author":{"gitId":"nighoggDatatype"},"content":"                }"},{"lineNumber":89,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"nighoggDatatype"},"content":"            return false;"},{"lineNumber":91,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":93}},{"path":"src/main/java/duke/task/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"public class ToDos extends Task {"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"     * Creates a To Do object that is essentially a wrapper on task."},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"     * @param description Description of To Do"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"     * @throws EmptyArgumentException when Description is empty or whitespace"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"    public ToDos(String description) throws EmptyArgumentException {"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    public String toFileString() {"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"        return \"T,\" + super.toBaseFileString();"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":25}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":" */"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":61}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.control.Button;"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"import javafx.util.Duration;"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":" */"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"    private TextField userInput;"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    private Button sendButton;"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"    private Duke duke;"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"    public void initialize() {"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"        String message \u003d duke.startUpProcedure();"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"                DialogBox.getDukeDialog(message, dukeImage)"},{"lineNumber":44,"author":{"gitId":"nighoggDatatype"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"nighoggDatatype"},"content":"        System.out.println(message);"},{"lineNumber":46,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":48,"author":{"gitId":"nighoggDatatype"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"nighoggDatatype"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":50,"author":{"gitId":"nighoggDatatype"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":51,"author":{"gitId":"nighoggDatatype"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"nighoggDatatype"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitId":"nighoggDatatype"},"content":"    private void handleUserInput() {"},{"lineNumber":54,"author":{"gitId":"nighoggDatatype"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":55,"author":{"gitId":"nighoggDatatype"},"content":"        String output \u003d duke.processInput(input);"},{"lineNumber":56,"author":{"gitId":"nighoggDatatype"},"content":"        System.out.println(input);"},{"lineNumber":57,"author":{"gitId":"nighoggDatatype"},"content":"        System.out.println(output);"},{"lineNumber":58,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":59,"author":{"gitId":"nighoggDatatype"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":60,"author":{"gitId":"nighoggDatatype"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":61,"author":{"gitId":"nighoggDatatype"},"content":"                DialogBox.getDukeDialog(output, dukeImage)"},{"lineNumber":62,"author":{"gitId":"nighoggDatatype"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"nighoggDatatype"},"content":"        userInput.clear();"},{"lineNumber":64,"author":{"gitId":"nighoggDatatype"},"content":"        if (duke.getIsTerminated()) {"},{"lineNumber":65,"author":{"gitId":"nighoggDatatype"},"content":"            PauseTransition delay \u003d new PauseTransition(Duration.seconds(3));"},{"lineNumber":66,"author":{"gitId":"nighoggDatatype"},"content":"            delay.setOnFinished(event -\u003e Platform.exit());"},{"lineNumber":67,"author":{"gitId":"nighoggDatatype"},"content":"            delay.play();"},{"lineNumber":68,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":70}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nighoggDatatype":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nighoggDatatype":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":12}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.AddCommand;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"public class ParserTest {"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"    public void exitTest() {"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertNull(Parser.parse(\"bye\"));"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertNull(Parser.parse(\"exit\"));"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (Exception e) {"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"            fail(\"Should not throw Exception\");"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"    public void listTest() {"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertTrue(Parser.parse(\"list\") instanceof ListCommand);"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertTrue(Parser.parse(\" ls \") instanceof ListCommand);"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"            fail(\"Should not throw Exception\");"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"    public void todoTest() {"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"            Command c \u003d Parser.parse(\"TODO blow up the moon\");"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertTrue(c instanceof AddCommand);"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertEquals(2, c.getCommandParameters().length);"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertEquals(\"T\", c.getCommandParameters()[0]);"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertEquals(\"blow up the moon\", c.getCommandParameters()[1]);"},{"lineNumber":39,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (Exception e) {"},{"lineNumber":40,"author":{"gitId":"nighoggDatatype"},"content":"            fail(\"Should not throw Exception\");"},{"lineNumber":41,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":43}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.BadDateArgumentException;"},{"lineNumber":9,"author":{"gitId":"nighoggDatatype"},"content":"import duke.exception.EmptyArgumentException;"},{"lineNumber":10,"author":{"gitId":"nighoggDatatype"},"content":""},{"lineNumber":11,"author":{"gitId":"nighoggDatatype"},"content":"public class DeadlineTest {"},{"lineNumber":12,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"nighoggDatatype"},"content":"    public void incorrectParseTest() {"},{"lineNumber":14,"author":{"gitId":"nighoggDatatype"},"content":"        String[] badList \u003d {\"2202 10 31\", \"May 20 2421\", \"11 30 2020\", \"13 8 2000\"};"},{"lineNumber":15,"author":{"gitId":"nighoggDatatype"},"content":"        for (String badString: badList) {"},{"lineNumber":16,"author":{"gitId":"nighoggDatatype"},"content":"            try {"},{"lineNumber":17,"author":{"gitId":"nighoggDatatype"},"content":"                new Deadline(\"Dud Desc.\", badString);"},{"lineNumber":18,"author":{"gitId":"nighoggDatatype"},"content":"                fail(\"Exception not thrown\");"},{"lineNumber":19,"author":{"gitId":"nighoggDatatype"},"content":"            } catch (EmptyArgumentException e) {"},{"lineNumber":20,"author":{"gitId":"nighoggDatatype"},"content":"                fail(\"Wrong Exception Thrown\");"},{"lineNumber":21,"author":{"gitId":"nighoggDatatype"},"content":"            } catch (BadDateArgumentException e) {"},{"lineNumber":22,"author":{"gitId":"nighoggDatatype"},"content":"                //Pass"},{"lineNumber":23,"author":{"gitId":"nighoggDatatype"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nighoggDatatype"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"nighoggDatatype"},"content":"    public void basicToStringTest() {"},{"lineNumber":28,"author":{"gitId":"nighoggDatatype"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"nighoggDatatype"},"content":"            Deadline d \u003d new Deadline(\"Dud Desc.\", \"13 08 2020\");"},{"lineNumber":30,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertEquals(\"[D][ ]: Dud Desc. (Deadline: August 13, 2020)\", d.toString());"},{"lineNumber":31,"author":{"gitId":"nighoggDatatype"},"content":"            d.setDone();"},{"lineNumber":32,"author":{"gitId":"nighoggDatatype"},"content":"            Assertions.assertEquals(\"[D][*]: Dud Desc. (Deadline: August 13, 2020)\", d.toString());"},{"lineNumber":33,"author":{"gitId":"nighoggDatatype"},"content":"        } catch (Exception e) {"},{"lineNumber":34,"author":{"gitId":"nighoggDatatype"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"nighoggDatatype"},"content":"            fail(\"Should not have exception\");"},{"lineNumber":36,"author":{"gitId":"nighoggDatatype"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"nighoggDatatype"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nighoggDatatype"},"content":"}"}],"authorContributionMap":{"nighoggDatatype":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nighoggDatatype"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":2,"author":{"gitId":"nighoggDatatype"},"content":"todo Dab on Homies"},{"lineNumber":3,"author":{"gitId":"nighoggDatatype"},"content":"event Ninja_0 /at 3pm EST"},{"lineNumber":4,"author":{"gitId":"nighoggDatatype"},"content":"list"},{"lineNumber":5,"author":{"gitId":"nighoggDatatype"},"content":"done 3"},{"lineNumber":6,"author":{"gitId":"nighoggDatatype"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"nighoggDatatype"},"content":"list"},{"lineNumber":8,"author":{"gitId":"nighoggDatatype"},"content":"bye"}],"authorContributionMap":{"nighoggDatatype":8}}]
