[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":45,"DarkDestry-t":16}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"![Ui Image](Ui.png)"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"### List Tasks"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"List all tasks created by the user"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"### `list` - Lists all tasks"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"Displays all tasks in a numbered list"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"`list`"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"1.[T][✗] borrow book"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"2.[D][✗] return book (by: Sunday)"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"3.[E][✗] project meeting (at: Mon 2-4pm)"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"### Mark Task as Done"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"Marks a specified task as done"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"### `done \u003ctask#\u003e` - Marks task \u003ctask#\u003e as done"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"Marks the task specified by \u003ctask#\u003e as done"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"`done 2`"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"  [E][✓] project meeting (at: Mon 2-4pm)"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"### Delete a Task"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"Deletes the specified task"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"### `delete \u003ctask#\u003e` - Deletes task \u003ctask#\u003e"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"Deletes the task specified by \u003ctask#\u003e"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"`delete 2`"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"  [T][✗] help you"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"Now you have 1 task in the list."},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"### Create a Todo Task"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"Creates a todo task with the info supplied"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":"### `todo \u003ctask info\u003e` - Creates a Todo task with \u003ctask info\u003e"},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"Creates a todo task with \u003ctask info\u003e as the task name"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"`todo Collect book from library`"},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"  [T][✗] Collect book from library"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"Now you have 1 tasks in the list."},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":"### Create a Deadline Task"},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"Creates a deadline task with the supplied info and deadline"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":93,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":94,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":95,"author":{"gitId":"DarkDestry-t"},"content":"### `deadline \u003ctask info\u003e /by \u003cdate\u003e \u003ctime\u003e` - Creates a deadline task with \u003ctask info\u003e and the deadline of \u003cdate\u003e and \u003ctime\u003e"},{"lineNumber":96,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":97,"author":{"gitId":"DarkDestry-t"},"content":"Creates a deadline task with \u003ctask info\u003e as the task name and \u003cdate\u003e and \u003ctime\u003e as the deadline"},{"lineNumber":98,"author":{"gitId":"DarkDestry-t"},"content":"- \u003cdate\u003e should be in the format of DD/MM/YYYY"},{"lineNumber":99,"author":{"gitId":"DarkDestry-t"},"content":"- \u003ctime\u003e should be in the format of HHHH"},{"lineNumber":100,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":101,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":102,"author":{"gitId":"DarkDestry-t"},"content":"`deadline return book /by 02/03/2020 1400`"},{"lineNumber":103,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":104,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":105,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":106,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":107,"author":{"gitId":"DarkDestry-t"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":108,"author":{"gitId":"DarkDestry-t"},"content":"  [D][✗] return book (by: Mar 02 2020 1400)"},{"lineNumber":109,"author":{"gitId":"DarkDestry-t"},"content":"Now you have 1 tasks in the list."},{"lineNumber":110,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":111,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":112,"author":{"gitId":"DarkDestry-t"},"content":"### Create a Event Task"},{"lineNumber":113,"author":{"gitId":"DarkDestry-t"},"content":"Creates an event task with the supplied info and time"},{"lineNumber":114,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":115,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":116,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":117,"author":{"gitId":"DarkDestry-t"},"content":"### `event \u003ctask info\u003e /at \u003cdate\u003e \u003ctime\u003e` - Creates a event task with \u003ctask info\u003e and the time of \u003cdate\u003e and \u003ctime\u003e"},{"lineNumber":118,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":119,"author":{"gitId":"DarkDestry-t"},"content":"Creates a event task with \u003ctask info\u003e as the task name and \u003cdate\u003e and \u003ctime\u003e as the time"},{"lineNumber":120,"author":{"gitId":"DarkDestry-t"},"content":"- \u003cdate\u003e should be in the format of DD/MM/YYYY"},{"lineNumber":121,"author":{"gitId":"DarkDestry-t"},"content":"- \u003ctime\u003e should be in the format of HHHH"},{"lineNumber":122,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":123,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":124,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":125,"author":{"gitId":"DarkDestry-t"},"content":"`event project meeting /at 01/03/2020 1400`"},{"lineNumber":126,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":127,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":128,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":129,"author":{"gitId":"DarkDestry-t"},"content":"`outcome`"},{"lineNumber":130,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":131,"author":{"gitId":"DarkDestry-t"},"content":"### Search for a task"},{"lineNumber":132,"author":{"gitId":"-"},"content":"Description of feature."},{"lineNumber":133,"author":{"gitId":"-"},"content":""},{"lineNumber":134,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":135,"author":{"gitId":"-"},"content":""},{"lineNumber":136,"author":{"gitId":"-"},"content":"### `Keyword` - Describe action"},{"lineNumber":137,"author":{"gitId":"-"},"content":""},{"lineNumber":138,"author":{"gitId":"-"},"content":"Describe action and its outcome."},{"lineNumber":139,"author":{"gitId":"-"},"content":""},{"lineNumber":140,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":141,"author":{"gitId":"-"},"content":""},{"lineNumber":142,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":145,"author":{"gitId":"-"},"content":""},{"lineNumber":146,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":147,"author":{"gitId":"DarkDestry-t"},"content":"Got it. I\u0027ve added this task:"},{"lineNumber":148,"author":{"gitId":"DarkDestry-t"},"content":"  [E][✗] project meeting (at: Mar 01 2020 1400)"},{"lineNumber":149,"author":{"gitId":"DarkDestry-t"},"content":"Now you have 1 tasks in the list."},{"lineNumber":150,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":151,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":152,"author":{"gitId":"DarkDestry-t"},"content":"### Archive a task"},{"lineNumber":153,"author":{"gitId":"DarkDestry-t"},"content":"Archives the specified task"},{"lineNumber":154,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":155,"author":{"gitId":"DarkDestry-t"},"content":"## Usage"},{"lineNumber":156,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":157,"author":{"gitId":"DarkDestry-t"},"content":"### `archive \u003ctask#\u003e` - Archive task \u003ctask#\u003e"},{"lineNumber":158,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":159,"author":{"gitId":"DarkDestry-t"},"content":"Archives the task specified by \u003ctask#\u003e"},{"lineNumber":160,"author":{"gitId":"DarkDestry-t"},"content":"Archived task will be exported to a file in the working directory called `archived_tasks`"},{"lineNumber":161,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":162,"author":{"gitId":"DarkDestry-t"},"content":"Example of usage: "},{"lineNumber":163,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":164,"author":{"gitId":"DarkDestry-t"},"content":"`Archive 2`"},{"lineNumber":165,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":166,"author":{"gitId":"DarkDestry-t"},"content":"Expected outcome:"},{"lineNumber":167,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":168,"author":{"gitId":"DarkDestry-t"},"content":"```"},{"lineNumber":169,"author":{"gitId":"DarkDestry-t"},"content":"Got it. I\u0027ve archived this task:"},{"lineNumber":170,"author":{"gitId":"DarkDestry-t"},"content":"  [E][✗] project meeting (at: Mar 01 2020 1400)"},{"lineNumber":171,"author":{"gitId":"DarkDestry-t"},"content":"Now you have 1 tasks in the list."},{"lineNumber":172,"author":{"gitId":"DarkDestry-t"},"content":"```"}],"authorContributionMap":{"DarkDestry-t":154,"-":18}},{"path":"src/main/java/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    private LocalDateTime deadline;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"     * Constructor"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"     * @param info Task info"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"     * @param deadline date in the form \"d/M/yyyy HHmm\""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public DeadlineTask(String info, String deadline) {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        this.deadline \u003d LocalDateTime.parse(deadline, DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public String getDeadline() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        return deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), getDeadline());"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":26}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.HashMap;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidInputException;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import gui.MainWindow;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"public class Duke extends Application {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    protected static Storage storage \u003d new Storage();"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    protected static TaskList taskList \u003d new TaskList(storage);"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"     * Entry point for program"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"     * "},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"     * @param args"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"     *                 command line arguments"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        UI.greet(System.out);"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        assert(storage.inputs !\u003d null);"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        assert(storage.tasks !\u003d null);"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"            storage.loadHistory();"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        chatLoop(System.in, System.out);"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    MainWindow window \u003d new MainWindow();"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"    Thread t;"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        window.createChatWindow();"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"        primaryStage.setScene(window.getScene());"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"        UI.greet(window.getOutputStream());"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"        assert(storage.inputs !\u003d null);"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        assert(storage.tasks !\u003d null);"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"            storage.loadHistory();"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"            e.printStackTrace();"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        primaryStage.show();"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"        t \u003d new Thread(() -\u003e chatLoop(window.getInputStream(), window.getOutputStream()));"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"        t.start();"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"        t.stop();"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"    protected static void chatLoop(InputStream in, OutputStream out) {"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"        PrintStream writer \u003d getWriter(out);"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":"        String line \u003d readLine(in);"},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":"        while (line !\u003d null) {"},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"            try {"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"                writer.println(parseInput(line));"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"                storage.inputs.add(line);"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"                storage.saveHistory();"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":"            } catch (DukeException e) {"},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"                handleException(e, writer);"},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"            } catch (Exception e) {"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"                writer.println(e.toString());"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":"            if (line.equals(\"bye\")) {"},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"                break;"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"            line \u003d readLine(in);"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"    private static void handleException(DukeException e, PrintStream writer) {"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"        writer.println(e.getMessage());"},{"lineNumber":93,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":95,"author":{"gitId":"DarkDestry-t"},"content":"    protected static String parseInput(String input) throws DukeException {"},{"lineNumber":96,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(input);"},{"lineNumber":97,"author":{"gitId":"DarkDestry-t"},"content":"        switch (tokenizedInput.get(\"command\")) {"},{"lineNumber":98,"author":{"gitId":"DarkDestry-t"},"content":"        case \"bye\":"},{"lineNumber":99,"author":{"gitId":"DarkDestry-t"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":100,"author":{"gitId":"DarkDestry-t"},"content":"        case \"list\":"},{"lineNumber":101,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeList();"},{"lineNumber":102,"author":{"gitId":"DarkDestry-t"},"content":"        case \"done\":"},{"lineNumber":103,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeDone(tokenizedInput);"},{"lineNumber":104,"author":{"gitId":"DarkDestry-t"},"content":"        case \"delete\":"},{"lineNumber":105,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeDelete(tokenizedInput);"},{"lineNumber":106,"author":{"gitId":"DarkDestry-t"},"content":"        case \"todo\":"},{"lineNumber":107,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeTodo(tokenizedInput);"},{"lineNumber":108,"author":{"gitId":"DarkDestry-t"},"content":"        case \"deadline\":"},{"lineNumber":109,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeDeadline(tokenizedInput);"},{"lineNumber":110,"author":{"gitId":"DarkDestry-t"},"content":"        case \"event\":"},{"lineNumber":111,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeEvent(tokenizedInput);"},{"lineNumber":112,"author":{"gitId":"DarkDestry-t"},"content":"        case \"find\":"},{"lineNumber":113,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeFind(tokenizedInput);"},{"lineNumber":114,"author":{"gitId":"DarkDestry-t"},"content":"        case \"archive\":"},{"lineNumber":115,"author":{"gitId":"DarkDestry-t"},"content":"            return taskList.executeArchive(tokenizedInput);"},{"lineNumber":116,"author":{"gitId":"DarkDestry-t"},"content":"        default:"},{"lineNumber":117,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidInputException(input);"},{"lineNumber":118,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":121,"author":{"gitId":"DarkDestry-t"},"content":"    private static PrintStream getWriter(OutputStream out) {"},{"lineNumber":122,"author":{"gitId":"DarkDestry-t"},"content":"        return new PrintStream(out);"},{"lineNumber":123,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":125,"author":{"gitId":"DarkDestry-t"},"content":"    private static BufferedReader getReader(InputStream in) {"},{"lineNumber":126,"author":{"gitId":"DarkDestry-t"},"content":"        return new BufferedReader(new InputStreamReader(in));"},{"lineNumber":127,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":129,"author":{"gitId":"DarkDestry-t"},"content":"    private static String readLine(InputStream stream) {"},{"lineNumber":130,"author":{"gitId":"DarkDestry-t"},"content":"        char c \u003d 0;"},{"lineNumber":131,"author":{"gitId":"DarkDestry-t"},"content":"        String s \u003d \"\";"},{"lineNumber":132,"author":{"gitId":"DarkDestry-t"},"content":"        while (true) {"},{"lineNumber":133,"author":{"gitId":"DarkDestry-t"},"content":"            try {"},{"lineNumber":134,"author":{"gitId":"DarkDestry-t"},"content":"                int temp \u003d stream.read();"},{"lineNumber":135,"author":{"gitId":"DarkDestry-t"},"content":"                if (temp \u003d\u003d -1) {"},{"lineNumber":136,"author":{"gitId":"DarkDestry-t"},"content":"                    if (s.equals(\"\")) {"},{"lineNumber":137,"author":{"gitId":"DarkDestry-t"},"content":"                        return null;"},{"lineNumber":138,"author":{"gitId":"DarkDestry-t"},"content":"                    }"},{"lineNumber":139,"author":{"gitId":"DarkDestry-t"},"content":"                    return s;"},{"lineNumber":140,"author":{"gitId":"DarkDestry-t"},"content":"                }"},{"lineNumber":141,"author":{"gitId":"DarkDestry-t"},"content":"                c \u003d (char) temp;"},{"lineNumber":142,"author":{"gitId":"DarkDestry-t"},"content":"            } catch (IOException e) {"},{"lineNumber":143,"author":{"gitId":"DarkDestry-t"},"content":"                e.printStackTrace();"},{"lineNumber":144,"author":{"gitId":"DarkDestry-t"},"content":"                System.exit(1);"},{"lineNumber":145,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":146,"author":{"gitId":"DarkDestry-t"},"content":"            if (c \u003d\u003d \u0027\\n\u0027)"},{"lineNumber":147,"author":{"gitId":"DarkDestry-t"},"content":"                break;"},{"lineNumber":148,"author":{"gitId":"DarkDestry-t"},"content":"            s +\u003d c + \"\";"},{"lineNumber":149,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"DarkDestry-t"},"content":"        return s;"},{"lineNumber":151,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":149,"-":3}},{"path":"src/main/java/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"public class EventTask extends Task {"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    private LocalDateTime date;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"     * Constructor for Event Task"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"     * @param info Task info"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"     * @param date date in the form \"d/M/yyyy HHmm\""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public EventTask(String info, String date) {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        this.date \u003d LocalDateTime.parse(date, DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"     * Accessor for date string"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    public String getDate() {"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), getDate());"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":30}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":8}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.Arrays;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.HashMap;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"     * Tokenize inputs and return dictionary of inputs."},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"     * @param input The raw user input to be tokenized"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"     * @return tokenized inputs keyed by token type"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public static HashMap\u003cString, String\u003e parseInput(String input) throws DukeInvalidArgumentsException {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e keyValuePairs \u003d new HashMap\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        String[] commands \u003d input.split(\" /\");"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        String[] firstWords \u003d commands[0].trim().split(\" \");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        String command \u003d firstWords[0];"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        keyValuePairs.put(\"command\", command);"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        if (firstWords.length \u003e 1) {"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"            String info \u003d String.join(\" \", Arrays.copyOfRange(firstWords, 1, firstWords.length));"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"            keyValuePairs.put(\"info\", info);"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        for (int i \u003d 1; i \u003c commands.length; i++) {"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"            String[] words \u003d commands[i].trim().split(\" \");"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"            String key \u003d words[0];"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"            String value \u003d String.join(\" \", Arrays.copyOfRange(words, 1, words.length));"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"            if (keyValuePairs.containsKey(key)) {"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"                throw new DukeInvalidArgumentsException(command, String.format(\"Duplicate argument /%s\", key));"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"            keyValuePairs.put(key, value);"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"        return keyValuePairs;"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":42}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.FileInputStream;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStream;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStreamReader;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    protected static String sessionFile \u003d \"./saved_session\";"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    protected static String archiveFile \u003d \"./archived_tasks\";"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    protected ArrayList\u003cTask\u003e tasks;"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    protected ArrayList\u003cString\u003e inputs;"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    public Storage() {"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        inputs \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"     * Saves current session state to file"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"    public void saveHistory() {"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        File file \u003d new File(sessionFile);"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"            if (file.exists()) {"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"                file.delete();"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"            file.createNewFile();"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"            PrintStream out \u003d new PrintStream(file);"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"            for (int i \u003d 0; i \u003c inputs.size(); i++) {"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"                out.println(inputs.get(i));"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"            out.close();"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"            // TODO Auto-generated catch block"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"            e.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"     * Load previous session state from file"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"     * @throws IOException when file cannot be read"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"    public void loadHistory() throws IOException {"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"        if (!new File(sessionFile).exists()) {"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream fileInStream;"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"            fileInStream \u003d new FileInputStream(sessionFile);"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"            return;"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"        BufferedReader reader \u003d getReader(fileInStream);"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"        String line;"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"            try {"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"                Duke.parseInput(line);"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"                inputs.add(line);"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"            } catch (DukeException e) {"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"                // undefined behaviour"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"                // Old command encountered"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"    public void archiveTask(Task t) throws IOException {"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"        File file \u003d new File(archiveFile);"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"        if (!file.exists()) {"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"            file.createNewFile();"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"        PrintStream out \u003d new PrintStream(file);"},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(t.toString());"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        out.close();"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"    private static BufferedReader getReader(InputStream in) {"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"        return new BufferedReader(new InputStreamReader(in));"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":88}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"    private boolean done;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"    private String info;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    private boolean archived;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"     * Constructor for Task"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"     * @param info task info"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public Task(String info) {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        done \u003d false;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        this.info \u003d info;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"     * Accessor for task completion state"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"     * @return completion state"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public boolean getCompletionState() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        return done;"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"     * Accessor for task info"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"     * @return task info"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"    public String getTaskInfo() {"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        return info;"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[%s] %s\", done ? \"O\" : \"X\", info);"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"     * Sets the completion state for the task as done"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"    public void setTaskAsDone() {"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"        done \u003d true;"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"    public boolean isArchived() {"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        return archived;"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"    public void setArchived(boolean archived) {"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        this.archived \u003d archived;"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":49}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.HashMap;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    private Storage storage;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public TaskList(Storage storage) {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        this.storage \u003d storage;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeEvent(HashMap\u003cString, String\u003e input) throws DukeInvalidArgumentsException {"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        if (!input.containsKey(\"info\")) {"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"event\", \"The description of an event cannot be empty\");"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        if (!input.containsKey(\"at\")) {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"event\", \"The date for an event cannot be empty\");"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new EventTask(input.get(\"info\"), input.get(\"at\")));"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeDeadline(HashMap\u003cString, String\u003e input) throws DukeInvalidArgumentsException {"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        if (!input.containsKey(\"info\")) {"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"deadline\", \"The description of a deadline cannot be empty\");"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        if (!input.containsKey(\"by\")) {"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"deadline\", \"The date for a deadline cannot be empty\");"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new DeadlineTask(input.get(\"info\"), input.get(\"by\")));"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeTodo(HashMap\u003cString, String\u003e input) throws DukeInvalidArgumentsException {"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        if (!input.containsKey(\"info\")) {"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"todo\", \"The description of a todo cannot be empty\");"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new TodoTask(input.get(\"info\")));"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeList() {"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        String output \u003d \"\";"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        for (int i \u003d 0; i \u003c storage.tasks.size(); i++) {"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"            output +\u003d String.format(\"%d.%s\\n\", i + 1, storage.tasks.get(i));"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"        return output.substring(0, output.length() - 1);"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeDelete(HashMap\u003cString, String\u003e tokenizedInput) {"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"        // TODO: Add Exception for out of range deletion"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d storage.tasks.remove(Integer.parseInt(tokenizedInput.get(\"info\")) - 1);"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n  %s\\nNow you have %d tasks in the list.\","},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"                t.toString(), storage.tasks.size());"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeDone(HashMap\u003cString, String\u003e tokenizedInput) {"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"        // TODO: Add Exception for out of range done"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d storage.tasks.get(Integer.parseInt(tokenizedInput.get(\"info\")) - 1);"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n  \" + t.toString();"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"    protected String executeFind(HashMap\u003cString, String\u003e tokenizedInput) {"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"        String searchString \u003d tokenizedInput.get(\"info\");"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"        String output \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"        for (int i \u003d 0; i \u003c storage.tasks.size(); i++) {"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"            if (storage.tasks.get(i).getTaskInfo().contains(searchString)) {"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"                output +\u003d String.format(\"%d.%s\\n\", i + 1, storage.tasks.get(i));"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":"        return output.substring(0, output.length() - 1);"},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":"    protected String addTaskAndReturnMessage(Task task) {"},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"        storage.tasks.add(task);"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\", task.toString(),"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"                storage.tasks.size());"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"    public String executeArchive(HashMap\u003cString, String\u003e tokenizedInput) {"},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d storage.tasks.remove(Integer.parseInt(tokenizedInput.get(\"info\")) - 1);"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        t.setArchived(true);"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":"            storage.archiveTask(t);"},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (IOException e) {"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"            e.printStackTrace();"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n  [E][X] project meeting (at: Mar 01 2020 1400)\\nNow you have 1 tasks in the list.\", t.toString(),"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":"                storage.tasks.size());"},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":92}},{"path":"src/main/java/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"public class TodoTask extends Task {"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"    public TodoTask(String info) {"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":10}},{"path":"src/main/java/UI.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.OutputStream;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.PrintWriter;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"public class UI {"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    private static final String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    private static final String greetingMessage \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"     * Sends the greeting message"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public static void greet(OutputStream outs) {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        PrintWriter out \u003d new PrintWriter(outs);"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"Hello from\");"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        out.println();"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(logo);"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(greetingMessage);"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":20}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeException() {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"        super();"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeException(String message) {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":13}},{"path":"src/main/java/exception/DukeInvalidArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidArgumentsException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    private String command;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    private String error;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"     * Constructor for Invalid Args Exception"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"     * @param command command causing error"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"     * @param error Error message"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidArgumentsException(String command, String error) {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        super(String.format(\"Command %s encountered invalid arguments: %s\", command, error));"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        this.command \u003d command;"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        this.error \u003d error;"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    public String getCommand() {"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        return command;"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    public String getError() {"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        return error;"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":26}},{"path":"src/main/java/exception/DukeInvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidInputException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    private String invalidInput;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidInputException() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"     * Constructs an Invalid Input Exception with the invalid input string"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"     * @return"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidInputException(String invalidInput) {"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        super(String.format(\"Invalid Input: %s\", invalidInput));"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        this.invalidInput \u003d invalidInput;"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    public String getInvalidInput() {"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        return invalidInput;"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":23}},{"path":"src/main/java/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package gui;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.layout.BorderPane;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.OutputStream;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"public class MainWindow {"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    private ScrollPane chatLog;"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    private TextField chatInput;"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    private BorderPane chatLogLayout;"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    private Scene scene;"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    private TextAreaOutputStream textAreaOut;"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    private TextFieldInputStream textFieldIn;"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    public void createChatWindow() {"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        textAreaOut \u003d new TextAreaOutputStream();"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        textFieldIn \u003d new TextFieldInputStream();"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        chatLog \u003d new ScrollPane();"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        chatLog.setContent(textAreaOut.textArea);"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        chatLog.heightProperty().addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"            textAreaOut.textArea.setPrefHeight(chatLog.getHeight() - 5);"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        chatLogLayout \u003d new BorderPane();"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"        chatLogLayout.setMinWidth(200);"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        chatLogLayout.setMinHeight(500);"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        chatLogLayout.setCenter(chatLog);"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        chatLogLayout.setBottom(textFieldIn.field);"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"        scene \u003d new Scene(chatLogLayout);"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"    public Scene getScene() {"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        return scene;"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"    public OutputStream getOutputStream() {"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        return textAreaOut;"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"    public InputStream getInputStream() {"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        return textFieldIn;"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":53}},{"path":"src/main/java/gui/TextAreaOutputStream.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package gui;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.text.Font;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.OutputStream;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"public class TextAreaOutputStream extends OutputStream {"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public TextArea textArea;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    public TextAreaOutputStream() {"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        textArea \u003d new TextArea();"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        textArea.setEditable(false);"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        textArea.setMaxHeight(9999999);"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        textArea.setFont(Font.font(\"monospaced\"));"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    public void write(int b) throws IOException {"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        textArea.appendText(new String(new char[]{(char)b}));"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":24}},{"path":"src/main/java/gui/TextFieldInputStream.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package gui;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.event.EventHandler;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStream;"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.Queue;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.concurrent.ArrayBlockingQueue;"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"public class TextFieldInputStream extends InputStream {"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public TextField field;"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    ArrayBlockingQueue\u003cByte\u003e buffer;"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    public TextFieldInputStream() {"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        super();"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        field \u003d new TextField();"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        buffer \u003d new ArrayBlockingQueue\u003cByte\u003e(1000);"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        field.setOnKeyPressed(new EventHandler\u003cKeyEvent\u003e()"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        {"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"            @Override"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"            public void handle(KeyEvent ke)"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"            {"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"                if (ke.getCode().equals(KeyCode.ENTER))"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"                {"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"                    buffer.addAll(Arrays.asList(toObject((field.getText()+\"\\n\").getBytes()).clone()));"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"                    field.setText(\"\");"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"                }"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    public static Byte[] toObject(byte[] array) {"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"        if (array \u003d\u003d null) {"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"            return null;"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        } else if (array.length \u003d\u003d 0) {"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"            return new Byte[0];"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        final Byte[] result \u003d new Byte[array.length];"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"        for (int i \u003d 0; i \u003c array.length; i++) {"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"            result[i] \u003d array[i];"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"        return result;"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"    public int read() throws IOException {"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"            return buffer.take();"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"            e.printStackTrace();"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        return -1;"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":61}},{"path":"src/test/java/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class DeadlineTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newDeadlineTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"02/03/2020 1400\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDeadline());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][X] return book (by: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public void deadlineTaskSetDoneChangesCompletionState() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"02/03/2020 1400\");"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDeadline());"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][X] return book (by: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDeadline());"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][O] return book (by: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    public void deadlineTaskIsOfTypeTask() {"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"02/03/2020 1400\");"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":40}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidInputException;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeTest {"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputArchiveArchivesTask() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task 1\");"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task 2\");"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"archive 1\");"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        assertFalse(Duke.storage.tasks.get(0).isArchived());"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(1, Duke.storage.tasks.size());"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputFindAbleToFindTasks() throws IOException, DukeException{"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task 1\");"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task to find 1\");"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task 2\");"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo test task to find 2\");"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Here are the matching tasks in your list:\\n\"+"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"            \"2.[T][X] test task to find 1\\n\" +"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"            \"4.[T][X] test task to find 2\","},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"find to find\"));"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeleteRemovesTaskFromList() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo task 1\");"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo task 2\");"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo task 3\");"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"delete 2\");"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(2, Duke.storage.tasks.size());"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(Duke.storage.tasks.get(0).getTaskInfo(), \"task 1\");"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(Duke.storage.tasks.get(1).getTaskInfo(), \"task 3\");"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopExceptionThrownPrintsMessageToOutput() throws IOException {"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"invalid input\\nevent test /at 01/03/2020 1400 /at 01/03/2020 1400\\n\";"},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Invalid Input: invalid input\\n\""},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Command event encountered invalid arguments: Duplicate argument /at\\n\";"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputInvalidInputThrowException() {"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidInputException exception \u003d assertThrows(DukeInvalidInputException.class, () -\u003e {"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"invalid input\");"},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"invalid input\", exception.getInvalidInput());"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":94,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":95,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputTodoNoArgumentsThrowException() {"},{"lineNumber":96,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":97,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"todo\");"},{"lineNumber":98,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":99,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":100,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo\", exception.getCommand());"},{"lineNumber":101,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of a todo cannot be empty\", exception.getError());"},{"lineNumber":102,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":104,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":105,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineNoArgumentsThrowException() {"},{"lineNumber":106,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":107,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline\");"},{"lineNumber":108,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":109,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":110,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":111,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of a deadline cannot be empty\", exception.getError());"},{"lineNumber":112,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":114,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineInsufficientArgumentsThrowException() {"},{"lineNumber":116,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":117,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline test event no date\");"},{"lineNumber":118,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":119,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":120,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":121,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The date for a deadline cannot be empty\", exception.getError());"},{"lineNumber":122,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":124,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":125,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineTooManyArgumentsThrowException() {"},{"lineNumber":126,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":127,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline test event /by 02/03/2020 1400 /by 02/03/2020 1400\");"},{"lineNumber":128,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":129,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":130,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":131,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Duplicate argument /by\", exception.getError());"},{"lineNumber":132,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":134,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":135,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventNoArgumentsThrowException() {"},{"lineNumber":136,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":137,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event\");"},{"lineNumber":138,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":139,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":140,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":141,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of an event cannot be empty\", exception.getError());"},{"lineNumber":142,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":144,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventInsufficientArgumentsThrowException() {"},{"lineNumber":146,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":147,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event test event no date\");"},{"lineNumber":148,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":149,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":150,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":151,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The date for an event cannot be empty\", exception.getError());"},{"lineNumber":152,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":154,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":155,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventTooManyArgumentsThrowException() {"},{"lineNumber":156,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":157,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event test event /at 01/03/2020 1400 /at 01/03/2020 1400\");"},{"lineNumber":158,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":159,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":160,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":161,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Duplicate argument /at\", exception.getError());"},{"lineNumber":162,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":164,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":165,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewDeadlineTask() throws DukeException {"},{"lineNumber":166,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":167,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":168,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":169,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":170,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [D][X] return book (by: Mar 02 2020 1400)\\nNow you have 1 tasks in the list.\";"},{"lineNumber":171,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"deadline return book /by 02/03/2020 1400\"));"},{"lineNumber":172,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":173,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", Duke.storage.tasks.get(0).getTaskInfo());"},{"lineNumber":174,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.storage.tasks.get(0).getCompletionState());"},{"lineNumber":175,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][X] return book (by: Mar 02 2020 1400)\", Duke.storage.tasks.get(0).toString());"},{"lineNumber":176,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.storage.tasks.get(0) instanceof DeadlineTask);"},{"lineNumber":177,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":179,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":180,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewEventTask() throws DukeException {"},{"lineNumber":181,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":182,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":183,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":184,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":185,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [E][X] project meeting (at: Mar 01 2020 1400)\\nNow you have 1 tasks in the list.\";"},{"lineNumber":186,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"event project meeting /at 01/03/2020 1400\"));"},{"lineNumber":187,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":188,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"project meeting\", Duke.storage.tasks.get(0).getTaskInfo());"},{"lineNumber":189,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.storage.tasks.get(0).getCompletionState());"},{"lineNumber":190,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][X] project meeting (at: Mar 01 2020 1400)\", Duke.storage.tasks.get(0).toString());"},{"lineNumber":191,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.storage.tasks.get(0) instanceof EventTask);"},{"lineNumber":192,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":193,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":194,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":195,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewTodoTask() throws DukeException {"},{"lineNumber":196,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":197,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":198,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":199,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":200,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][X] borrow book\\nNow you have 1 tasks in the list.\";"},{"lineNumber":201,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"todo borrow book\"));"},{"lineNumber":202,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":203,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"borrow book\", Duke.storage.tasks.get(0).getTaskInfo());"},{"lineNumber":204,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.storage.tasks.get(0).getCompletionState());"},{"lineNumber":205,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][X] borrow book\", Duke.storage.tasks.get(0).toString());"},{"lineNumber":206,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.storage.tasks.get(0) instanceof TodoTask);"},{"lineNumber":207,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":208,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":209,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":210,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseEventTaskInteractionOutput() throws IOException {"},{"lineNumber":211,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":212,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":213,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":214,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":215,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"event project meeting /at 01/03/2020 1400\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":216,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":217,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":218,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":219,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":220,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":221,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":222,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [E][X] project meeting (at: Mar 01 2020 1400)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":223,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[E][X] project meeting (at: Mar 01 2020 1400)\\n\""},{"lineNumber":224,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [E][O] project meeting (at: Mar 01 2020 1400)\\n\""},{"lineNumber":225,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[E][O] project meeting (at: Mar 01 2020 1400)\\n\";"},{"lineNumber":226,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":227,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":229,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":230,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseDeadlineTaskInteractionOutput() throws IOException {"},{"lineNumber":231,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":232,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":233,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":234,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":235,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"deadline return book /by 01/03/2020 1400\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":236,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":237,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":238,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":239,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":240,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":241,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":242,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [D][X] return book (by: Mar 01 2020 1400)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":243,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[D][X] return book (by: Mar 01 2020 1400)\\n\""},{"lineNumber":244,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [D][O] return book (by: Mar 01 2020 1400)\\n\""},{"lineNumber":245,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[D][O] return book (by: Mar 01 2020 1400)\\n\";"},{"lineNumber":246,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":247,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":248,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":249,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":250,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseTodoTaskInteractionOutput() throws IOException {"},{"lineNumber":251,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":252,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":253,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":254,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":255,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"todo borrow book\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":256,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":257,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":258,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":259,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":260,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":261,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":262,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][X] borrow book\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":263,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[T][X] borrow book\\n\" + \"Nice! I\u0027ve marked this task as done:\\n  [T][O] borrow book\\n\""},{"lineNumber":264,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[T][O] borrow book\\n\";"},{"lineNumber":265,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":266,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":267,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":268,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":269,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseDoneSetsTaskAsDone() throws IOException {"},{"lineNumber":270,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":271,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":272,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":273,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":274,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"todo help people\\n\" + \"todo help myself\\n\" + \"done 1\\n\" + \"list\\n\";"},{"lineNumber":275,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":276,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":277,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":278,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":279,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":280,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":281,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][X] help people\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":282,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Got it. I\u0027ve added this task:\\n  [T][X] help myself\\nNow you have 2 tasks in the list.\\n\""},{"lineNumber":283,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [T][O] help people\\n\" + \"1.[T][O] help people\\n\""},{"lineNumber":284,"author":{"gitId":"DarkDestry-t"},"content":"                + \"2.[T][X] help myself\\n\";"},{"lineNumber":285,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":286,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":287,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":288,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":289,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDoneSetsTaskAsDone() throws DukeException {"},{"lineNumber":290,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":291,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":292,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":293,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":294,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":295,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.storage.tasks.get(0).getTaskInfo());"},{"lineNumber":296,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.storage.tasks.get(0).getCompletionState());"},{"lineNumber":297,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][X] help people\", Duke.storage.tasks.get(0).toString());"},{"lineNumber":298,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":299,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Nice! I\u0027ve marked this task as done:\\n  [T][O] help people\";"},{"lineNumber":300,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"done 1\"));"},{"lineNumber":301,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":302,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.storage.tasks.get(0).getTaskInfo());"},{"lineNumber":303,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, Duke.storage.tasks.get(0).getCompletionState());"},{"lineNumber":304,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][O] help people\", Duke.storage.tasks.get(0).toString());"},{"lineNumber":305,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":307,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":308,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputAddToList() throws DukeException {"},{"lineNumber":309,"author":{"gitId":"DarkDestry-t"},"content":"        int tasksStateLength \u003d Duke.storage.tasks.size();"},{"lineNumber":310,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":311,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":312,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":313,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(tasksStateLength + 1, Duke.storage.tasks.size());"},{"lineNumber":314,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":315,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.storage.tasks.get(tasksStateLength).getTaskInfo());"},{"lineNumber":316,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.storage.tasks.get(tasksStateLength).getCompletionState());"},{"lineNumber":317,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][X] help people\", Duke.storage.tasks.get(tasksStateLength).toString());"},{"lineNumber":318,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":319,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":320,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":321,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputAddToListMaintainsOrder() throws DukeException {"},{"lineNumber":322,"author":{"gitId":"DarkDestry-t"},"content":"        int tasksStateLength \u003d Duke.storage.tasks.size();"},{"lineNumber":323,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":324,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":325,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo blah\");"},{"lineNumber":326,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo read book\");"},{"lineNumber":327,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":328,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(tasksStateLength + 3, Duke.storage.tasks.size());"},{"lineNumber":329,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":330,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.storage.tasks.get(tasksStateLength).getTaskInfo());"},{"lineNumber":331,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"blah\", Duke.storage.tasks.get(tasksStateLength + 1).getTaskInfo());"},{"lineNumber":332,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", Duke.storage.tasks.get(tasksStateLength + 2).getTaskInfo());"},{"lineNumber":333,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":334,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":335,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":336,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputListOutputTasksState() throws DukeException {"},{"lineNumber":337,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":338,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":339,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":340,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo blah\");"},{"lineNumber":341,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo read book\");"},{"lineNumber":342,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":343,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedString \u003d \"1.[T][X] help people\\n2.[T][X] blah\\n3.[T][X] read book\";"},{"lineNumber":344,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":345,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":346,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedString, Duke.parseInput(\"list\"));"},{"lineNumber":347,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":348,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":349,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":350,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputByeOutputFarewell() throws DukeException {"},{"lineNumber":351,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\", Duke.parseInput(\"bye\"));"},{"lineNumber":352,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":353,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":354,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":355,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatInputByeExitsLoop() throws IOException {"},{"lineNumber":356,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"bye\\n\" + \"hello\\n\" + \"bye\\n\";"},{"lineNumber":357,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":358,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":359,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":360,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":361,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":362,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\\n\", new String(out.toByteArray()).replace(\"\\r\",\"\"));"},{"lineNumber":363,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":364,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":365,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":366,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopWritesToOutput() throws IOException {"},{"lineNumber":367,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"echoThis\\n\" + \"echoThisAsWell\\n\" + \"echoThisFinally\\n\";"},{"lineNumber":368,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":369,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":370,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":371,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":372,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":373,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":374,"author":{"gitId":"DarkDestry-t"},"content":"        assertNotEquals(\"\", new String(out.toByteArray()));"},{"lineNumber":375,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":376,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":377,"author":{"gitId":"DarkDestry-t"},"content":"    private ByteArrayInputStream makeInputStreamFromString(String testInput) {"},{"lineNumber":378,"author":{"gitId":"DarkDestry-t"},"content":"        return new ByteArrayInputStream(testInput.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":379,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":380,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":380}},{"path":"src/test/java/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class EventTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newEventTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"02/03/2020 1400\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDate());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][X] group meeting (at: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public void eventTaskSetDoneChangesCompletionState() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"02/03/2020 1400\");"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDate());"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][X] group meeting (at: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Mar 02 2020 1400\", t.getDate());"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][O] group meeting (at: Mar 02 2020 1400)\", t.toString());"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    public void eventTaskIsOfTypeTask() {"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"02/03/2020 1400\");"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":40}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseDone() throws DukeInvalidArgumentsException {"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"done 2\");"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"info\"));"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"done\", tokenizedInput.get(\"command\"));"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"2\", tokenizedInput.get(\"info\"));"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseTodo() throws DukeInvalidArgumentsException {"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"todo this is a todo\");"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"info\"));"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo\", tokenizedInput.get(\"command\"));"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"this is a todo\", tokenizedInput.get(\"info\"));"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseDeadline() throws DukeInvalidArgumentsException {"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"deadline this is a deadline /by 10/10/1010 1010\");"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"info\"));"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"by\"));"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", tokenizedInput.get(\"command\"));"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"this is a deadline\", tokenizedInput.get(\"info\"));"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"10/10/1010 1010\", tokenizedInput.get(\"by\"));"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseEvent() throws DukeInvalidArgumentsException {"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"event this is a event /at 10/10/1010 1010\");"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"info\"));"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"at\"));"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", tokenizedInput.get(\"command\"));"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"this is a event\", tokenizedInput.get(\"info\"));"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"10/10/1010 1010\", tokenizedInput.get(\"at\"));"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseList() throws DukeInvalidArgumentsException {"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"list\");"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"list\", tokenizedInput.get(\"command\"));"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"    public void parserAbleToParseDelete() throws DukeInvalidArgumentsException {"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"        HashMap\u003cString, String\u003e tokenizedInput \u003d Parser.parseInput(\"delete 2\");"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"        "},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"command\"));"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(tokenizedInput.containsKey(\"info\"));"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"delete\", tokenizedInput.get(\"command\"));"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"2\", tokenizedInput.get(\"info\"));"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":68}},{"path":"src/test/java/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.*;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"public class StorageTest {"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    public void saveSessionAbleToLoad() throws IOException {"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        File testFile \u003d new File(Storage.sessionFile);"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        if (testFile.exists())"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"            testFile.delete();"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        testFile.createNewFile();"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        PrintWriter out \u003d new PrintWriter(testFile);"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"todo test history 1\");"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"todo test history 2\");"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"list\");"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"todo test history 3\");"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"todo test history 4\");"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"done 2\");"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        out.println(\"delete 3\");"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        out.close();"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.loadHistory();"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(3, Duke.storage.tasks.size());"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.storage.tasks.get(1).getCompletionState());"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"test history 4\", Duke.storage.tasks.get(2).getTaskInfo());"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(7, Duke.storage.inputs.size());"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"    public void saveSessionAbleToSave() throws IOException, FileNotFoundException {"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        File testFile \u003d new File(Storage.sessionFile);"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"        if (testFile.exists())"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"            testFile.delete();"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"        testFile.createNewFile();"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"todo test history 1\");"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"todo test history 2\");"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"list\");"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"todo test history 3\");"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"todo test history 4\");"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"done 2\");"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.inputs.add(\"delete 3\");"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.saveHistory();"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(Storage.sessionFile));"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo test history 1\", in.readLine());"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo test history 2\", in.readLine());"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"list\", in.readLine());"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo test history 3\", in.readLine());"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo test history 4\", in.readLine());"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"done 2\", in.readLine());"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"delete 3\", in.readLine());"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"        in.close();"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":"    public void archiveTaskWritesToArchiveFile() throws IOException {"},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"        File actual \u003d new File(Storage.archiveFile);"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"        File temp \u003d new File(Storage.archiveFile+\"_temp\");"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"        actual.renameTo(temp);"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":"        actual.createNewFile();"},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"        //Test"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"storage Test\");"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.storage.archiveTask(t);"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"        BufferedReader in \u003d new BufferedReader(new FileReader(Storage.archiveFile));"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(t.toString(), in.readLine());"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"        actual.delete();"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":"        temp.renameTo(actual);"},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":92}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public void newTaskPopulatesFields() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"        assertFalse(t.getCompletionState());"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testing task\", t.getTaskInfo());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[X] testing task\", t.toString());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void taskSetDoneChangesTaskCompletionState() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t.getCompletionState());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"    public void taskDefaultCompletionStateIsFalse() {"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        assertFalse(t.getCompletionState());"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"    public void taskSetArchivedSetsArchivedState() {"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        t.setArchived(true);"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t.isArchived());"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    public void taskDefaultArchivedStateIsFalse() {"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        assertFalse(t.isArchived());"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":44}},{"path":"src/test/java/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class TodoTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newTodoTaskTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][X] read book\", t.toString());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    public void todoTaskSetDoneChangesCompletionState() {"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][X] read book\", t.toString());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][O] read book\", t.toString());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    public void todoTaskIsOfTypeTask() {"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":37}},{"path":"src/test/java/exception/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeExceptionTest {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public void dukeExceptionIsOfTypeException() {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeException() instanceof Exception);"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":14}},{"path":"src/test/java/exception/DukeInvalidArgumentsExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidArgumentsExceptionTest {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidArgumentsExceptionIsOfTypeDukeException() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeInvalidArgumentsException(\"test\", \"test\") instanceof DukeException);"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidArgumentsExceptionPopulatesField() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d new DukeInvalidArgumentsException(\"testCommand\","},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"                \"Test Error Message\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testCommand\", exception.getCommand());"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Test Error Message\", exception.getError());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Command testCommand encountered invalid arguments: Test Error Message\", exception.getMessage());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":23}},{"path":"src/test/java/exception/DukeInvalidInputExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidInputExceptionTest {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidInputExceptionIsOfTypeDukeException() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeInvalidInputException() instanceof DukeException);"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidInputExceptionPopulatesFields() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidInputException exception \u003d new DukeInvalidInputException("},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"                \"testInvalidInputCommand with /invalid arguments\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testInvalidInputCommand with /invalid arguments\", exception.getInvalidInput());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Invalid Input: testInvalidInputCommand with /invalid arguments\", exception.getMessage());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"bye"}],"authorContributionMap":{"DarkDestry-t":12}}]
