[{"path":"src/main/java/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    private String deadline;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    public DeadlineTask(String info, String deadline) {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public String getDeadline() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        return deadline;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), deadline);"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":19}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.BufferedReader;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStream;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.InputStreamReader;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.OutputStream;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidInputException;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    protected static ArrayList\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    private static final String greetingMessage \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    private static final String logo \u003d \" ____        _        \\n\" + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\" + \"| |_| | |_| |   \u003c  __/\\n\" + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"        System.out.println(greetingMessage);"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        chatLoop(System.in, System.out);"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"    public static void chatLoop(InputStream in, OutputStream out) throws IOException {"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"        BufferedReader reader \u003d getReader(in);"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        PrintStream writer \u003d getWriter(out);"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        String line \u003d reader.readLine();"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"        while (line !\u003d null) {"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"                writer.println(parseInput(line));"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"            } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":"                handleException(e, writer);"},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"            if (line.equals(\"bye\")) {"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"            line \u003d reader.readLine();"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":"    private static void handleException(DukeException e, PrintStream writer) {"},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        writer.println(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":"    public static String parseInput(String input) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"        String[] tokenizedInput \u003d input.split(\" \");"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"        switch (tokenizedInput[0]) {"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"        case \"bye\":"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        case \"list\":"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":"            return executeList();"},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"        case \"done\":"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"            return executeDone(tokenizedInput);"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"        case \"todo\":"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":"            return executeTodo(input);"},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"        case \"deadline\":"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"            return executeDeadline(input);"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"        case \"event\":"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"            return executeEvent(input);"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"        default:"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidInputException(input);"},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":"    private static String executeEvent(String input) throws DukeInvalidArgumentsException {"},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"        if (input.trim().equals(\"event\")) {"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"event\", \"The description of an event cannot be empty\");"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"        String[] data \u003d input.substring(6).split(\"/at\");"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":"        if (data.length \u003c 2) {"},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"event\", \"The date for an event cannot be empty\");"},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        if (data.length \u003e 2) {"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"event\", \"There are too many date arguments\");"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new EventTask(data[0].trim(), data[1].trim()));"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"    private static String executeDeadline(String input) throws DukeInvalidArgumentsException {"},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"        if (input.trim().equals(\"deadline\")) {"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"deadline\", \"The description of a deadline cannot be empty\");"},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"        String[] data \u003d input.substring(9).split(\"/by\");"},{"lineNumber":93,"author":{"gitId":"DarkDestry-t"},"content":"        if (data.length \u003c 2) {"},{"lineNumber":94,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"deadline\", \"The date for a deadline cannot be empty\");"},{"lineNumber":95,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"DarkDestry-t"},"content":"        if (data.length \u003e 2) {"},{"lineNumber":97,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"deadline\", \"There are too many date arguments\");"},{"lineNumber":98,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new DeadlineTask(data[0].trim(), data[1].trim()));"},{"lineNumber":100,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":102,"author":{"gitId":"DarkDestry-t"},"content":"    private static String executeTodo(String input) throws DukeInvalidArgumentsException {"},{"lineNumber":103,"author":{"gitId":"DarkDestry-t"},"content":"        if (input.trim().equals(\"todo\")) {"},{"lineNumber":104,"author":{"gitId":"DarkDestry-t"},"content":"            throw new DukeInvalidArgumentsException(\"todo\", \"The description of a todo cannot be empty\");"},{"lineNumber":105,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"DarkDestry-t"},"content":"        String info \u003d input.substring(5);"},{"lineNumber":107,"author":{"gitId":"DarkDestry-t"},"content":"        return addTaskAndReturnMessage(new TodoTask(info));"},{"lineNumber":108,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":110,"author":{"gitId":"DarkDestry-t"},"content":"    private static String addTaskAndReturnMessage(Task task) {"},{"lineNumber":111,"author":{"gitId":"DarkDestry-t"},"content":"        tasks.add(task);"},{"lineNumber":112,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"Got it. I\u0027ve added this task:\\n  %s\\nNow you have %d tasks in the list.\", task.toString(),"},{"lineNumber":113,"author":{"gitId":"DarkDestry-t"},"content":"                tasks.size());"},{"lineNumber":114,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":116,"author":{"gitId":"DarkDestry-t"},"content":"    private static String executeList() {"},{"lineNumber":117,"author":{"gitId":"DarkDestry-t"},"content":"        String output \u003d \"\";"},{"lineNumber":118,"author":{"gitId":"DarkDestry-t"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":119,"author":{"gitId":"DarkDestry-t"},"content":"            output +\u003d String.format(\"%d.%s\\n\", i + 1, tasks.get(i));"},{"lineNumber":120,"author":{"gitId":"DarkDestry-t"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"DarkDestry-t"},"content":"        return output.substring(0, output.length() - 1);"},{"lineNumber":122,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":124,"author":{"gitId":"DarkDestry-t"},"content":"    private static String executeDone(String[] tokenizedInput) {"},{"lineNumber":125,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d tasks.get(Integer.parseInt(tokenizedInput[1]) - 1);"},{"lineNumber":126,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":127,"author":{"gitId":"DarkDestry-t"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n  \" + t.toString();"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":130,"author":{"gitId":"DarkDestry-t"},"content":"    private static PrintStream getWriter(OutputStream out) {"},{"lineNumber":131,"author":{"gitId":"DarkDestry-t"},"content":"        return new PrintStream(out);"},{"lineNumber":132,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":134,"author":{"gitId":"DarkDestry-t"},"content":"    private static BufferedReader getReader(InputStream in) {"},{"lineNumber":135,"author":{"gitId":"DarkDestry-t"},"content":"        return new BufferedReader(new InputStreamReader(in));"},{"lineNumber":136,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":132,"-":5}},{"path":"src/main/java/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"public class EventTask extends Task {"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    private String time;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    public EventTask(String info, String time) {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        this.time \u003d time;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public Object getTime() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        return time;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(), time);"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":20}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"    private boolean done;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"    private String info;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    public Task(String info) {"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"        done \u003d false;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"        this.info \u003d info;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public boolean getCompletionState() {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        return done;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    public String getTaskInfo() {"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        return info;"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[%c] %s\", done ? \u0027✓\u0027 : \u0027✗\u0027, info);"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    public void setTaskAsDone() {"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        done \u003d true;"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":26}},{"path":"src/main/java/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"public class TodoTask extends Task {"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"    public TodoTask(String info) {"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"        super(info);"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":10}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeException() {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"        super();"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeException(String message) {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        super(message);"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":13}},{"path":"src/main/java/exception/DukeInvalidArgumentsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidArgumentsException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    private String command;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    private String error;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidArgumentsException(String command, String error) {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        super(String.format(\"Command %s encountered invalid arguments: %s\", command, error));"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"        this.command \u003d command;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        this.error \u003d error;"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    public String getCommand() {"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"        return command;"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public String getError() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        return error;"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":21}},{"path":"src/main/java/exception/DukeInvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidInputException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"    private String invalidInput;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidInputException() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        super();"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public DukeInvalidInputException(String invalidInput) {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        super(String.format(\"Invalid Input: %s\", invalidInput));"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        this.invalidInput \u003d invalidInput;"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public String getInvalidInput() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        return invalidInput;"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":19}},{"path":"src/test/java/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class DeadlineTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newDeadlineTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"June 6th\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getDeadline());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][✗] return book (by: June 6th)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public void deadlineTaskSetDoneChangesCompletionState() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"June 6th\");"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getDeadline());"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][✗] return book (by: June 6th)\", t.toString());"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", t.getTaskInfo());"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getDeadline());"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][✓] return book (by: June 6th)\", t.toString());"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    public void deadlineTaskIsOfTypeTask() {"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        DeadlineTask t \u003d new DeadlineTask(\"return book\", \"Today\");"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":40}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertNotEquals;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import java.io.*;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"import java.nio.charset.StandardCharsets;"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeException;"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidArgumentsException;"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"import exception.DukeInvalidInputException;"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeTest {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopExceptionThrownPrintsMessageToOutput() throws IOException {"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"invalid input\\nevent test /at too many /at date\\n\";"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Invalid Input: invalid input\\n\""},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Command event encountered invalid arguments: There are too many date arguments\\n\";"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()));"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputInvalidInputThrowException() {"},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidInputException exception \u003d assertThrows(DukeInvalidInputException.class, () -\u003e {"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"invalid input\");"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":41,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":42,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"invalid input\", exception.getInvalidInput());"},{"lineNumber":43,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":45,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputTodoNoArgumentsThrowException() {"},{"lineNumber":47,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":48,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"todo\");"},{"lineNumber":49,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":50,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":51,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"todo\", exception.getCommand());"},{"lineNumber":52,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of a todo cannot be empty\", exception.getError());"},{"lineNumber":53,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":55,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineNoArgumentsThrowException() {"},{"lineNumber":57,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":58,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline\");"},{"lineNumber":59,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":60,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":61,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":62,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of a deadline cannot be empty\", exception.getError());"},{"lineNumber":63,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":65,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineInsufficientArgumentsThrowException() {"},{"lineNumber":67,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":68,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline test event no date\");"},{"lineNumber":69,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":70,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":71,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":72,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The date for a deadline cannot be empty\", exception.getError());"},{"lineNumber":73,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":75,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":76,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDeadlineTooManyArgumentsThrowException() {"},{"lineNumber":77,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":78,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"deadline test event /by too many /by dates\");"},{"lineNumber":79,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":80,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":81,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"deadline\", exception.getCommand());"},{"lineNumber":82,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"There are too many date arguments\", exception.getError());"},{"lineNumber":83,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":85,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":86,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventNoArgumentsThrowException() {"},{"lineNumber":87,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":88,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event\");"},{"lineNumber":89,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":90,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":91,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":92,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The description of an event cannot be empty\", exception.getError());"},{"lineNumber":93,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":95,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":96,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventInsufficientArgumentsThrowException() {"},{"lineNumber":97,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":98,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event test event no date\");"},{"lineNumber":99,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":100,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":101,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":102,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"The date for an event cannot be empty\", exception.getError());"},{"lineNumber":103,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":105,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputEventTooManyArgumentsThrowException() {"},{"lineNumber":107,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d assertThrows(DukeInvalidArgumentsException.class, () -\u003e {"},{"lineNumber":108,"author":{"gitId":"DarkDestry-t"},"content":"            Duke.parseInput(\"event test event /at too many /at dates\");"},{"lineNumber":109,"author":{"gitId":"DarkDestry-t"},"content":"        });"},{"lineNumber":110,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":111,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"event\", exception.getCommand());"},{"lineNumber":112,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"There are too many date arguments\", exception.getError());"},{"lineNumber":113,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":115,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":116,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewDeadlineTask() throws DukeException {"},{"lineNumber":117,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":118,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":119,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":120,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":121,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [D][✗] return book (by: Sunday)\\nNow you have 1 tasks in the list.\";"},{"lineNumber":122,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"deadline return book /by Sunday\"));"},{"lineNumber":123,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":124,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"return book\", Duke.tasks.get(0).getTaskInfo());"},{"lineNumber":125,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.tasks.get(0).getCompletionState());"},{"lineNumber":126,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[D][✗] return book (by: Sunday)\", Duke.tasks.get(0).toString());"},{"lineNumber":127,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.tasks.get(0) instanceof DeadlineTask);"},{"lineNumber":128,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":130,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewEventTask() throws DukeException {"},{"lineNumber":132,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":133,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":134,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":135,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":136,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [E][✗] project meeting (at: Mon 2-4pm)\\nNow you have 1 tasks in the list.\";"},{"lineNumber":137,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"event project meeting /at Mon 2-4pm\"));"},{"lineNumber":138,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":139,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"project meeting\", Duke.tasks.get(0).getTaskInfo());"},{"lineNumber":140,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.tasks.get(0).getCompletionState());"},{"lineNumber":141,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][✗] project meeting (at: Mon 2-4pm)\", Duke.tasks.get(0).toString());"},{"lineNumber":142,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.tasks.get(0) instanceof EventTask);"},{"lineNumber":143,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":145,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":146,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputNewTodoTask() throws DukeException {"},{"lineNumber":147,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":148,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":149,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":150,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":151,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][✗] borrow book\\nNow you have 1 tasks in the list.\";"},{"lineNumber":152,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"todo borrow book\"));"},{"lineNumber":153,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":154,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"borrow book\", Duke.tasks.get(0).getTaskInfo());"},{"lineNumber":155,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.tasks.get(0).getCompletionState());"},{"lineNumber":156,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✗] borrow book\", Duke.tasks.get(0).toString());"},{"lineNumber":157,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(Duke.tasks.get(0) instanceof TodoTask);"},{"lineNumber":158,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":160,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":161,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseEventTaskInteractionOutput() throws IOException {"},{"lineNumber":162,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":163,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":164,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":165,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":166,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"event project meeting /at Mon 2-4pm\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":167,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":168,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":169,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":170,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":171,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":172,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":173,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [E][✗] project meeting (at: Mon 2-4pm)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":174,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[E][✗] project meeting (at: Mon 2-4pm)\\n\""},{"lineNumber":175,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [E][✓] project meeting (at: Mon 2-4pm)\\n\""},{"lineNumber":176,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[E][✓] project meeting (at: Mon 2-4pm)\\n\";"},{"lineNumber":177,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()));"},{"lineNumber":178,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":180,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":181,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseDeadlineTaskInteractionOutput() throws IOException {"},{"lineNumber":182,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":183,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":184,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":185,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":186,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"deadline return book /by Sunday\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":187,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":188,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":189,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":190,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":191,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":192,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":193,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [D][✗] return book (by: Sunday)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":194,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[D][✗] return book (by: Sunday)\\n\""},{"lineNumber":195,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [D][✓] return book (by: Sunday)\\n\""},{"lineNumber":196,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[D][✓] return book (by: Sunday)\\n\";"},{"lineNumber":197,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()));"},{"lineNumber":198,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":199,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":200,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":201,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseTodoTaskInteractionOutput() throws IOException {"},{"lineNumber":202,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":203,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":204,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":205,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":206,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"todo borrow book\\nlist\\ndone 1\\nlist\\n\";"},{"lineNumber":207,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":208,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":209,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":210,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":211,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":212,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":213,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][✗] borrow book\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":214,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[T][✗] borrow book\\n\" + \"Nice! I\u0027ve marked this task as done:\\n  [T][✓] borrow book\\n\""},{"lineNumber":215,"author":{"gitId":"DarkDestry-t"},"content":"                + \"1.[T][✓] borrow book\\n\";"},{"lineNumber":216,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()));"},{"lineNumber":217,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":218,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":219,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":220,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopParseDoneSetsTaskAsDone() throws IOException {"},{"lineNumber":221,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":222,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":223,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":224,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":225,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"todo help people\\n\" + \"todo help myself\\n\" + \"done 1\\n\" + \"list\\n\";"},{"lineNumber":226,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":227,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":228,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":229,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":230,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":231,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":232,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Got it. I\u0027ve added this task:\\n  [T][✗] help people\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":233,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Got it. I\u0027ve added this task:\\n  [T][✗] help myself\\nNow you have 2 tasks in the list.\\n\""},{"lineNumber":234,"author":{"gitId":"DarkDestry-t"},"content":"                + \"Nice! I\u0027ve marked this task as done:\\n  [T][✓] help people\\n\" + \"1.[T][✓] help people\\n\""},{"lineNumber":235,"author":{"gitId":"DarkDestry-t"},"content":"                + \"2.[T][✗] help myself\\n\";"},{"lineNumber":236,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, new String(out.toByteArray()));"},{"lineNumber":237,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":239,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":240,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputDoneSetsTaskAsDone() throws DukeException {"},{"lineNumber":241,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":242,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":243,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":244,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":245,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":246,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.tasks.get(0).getTaskInfo());"},{"lineNumber":247,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.tasks.get(0).getCompletionState());"},{"lineNumber":248,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✗] help people\", Duke.tasks.get(0).toString());"},{"lineNumber":249,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":250,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedOutput \u003d \"Nice! I\u0027ve marked this task as done:\\n  [T][✓] help people\";"},{"lineNumber":251,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedOutput, Duke.parseInput(\"done 1\"));"},{"lineNumber":252,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":253,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.tasks.get(0).getTaskInfo());"},{"lineNumber":254,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, Duke.tasks.get(0).getCompletionState());"},{"lineNumber":255,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✓] help people\", Duke.tasks.get(0).toString());"},{"lineNumber":256,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":257,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":258,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":259,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputAddToList() throws DukeException {"},{"lineNumber":260,"author":{"gitId":"DarkDestry-t"},"content":"        int tasksStateLength \u003d Duke.tasks.size();"},{"lineNumber":261,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":262,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":263,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":264,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(tasksStateLength + 1, Duke.tasks.size());"},{"lineNumber":265,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":266,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.tasks.get(tasksStateLength).getTaskInfo());"},{"lineNumber":267,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, Duke.tasks.get(tasksStateLength).getCompletionState());"},{"lineNumber":268,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✗] help people\", Duke.tasks.get(tasksStateLength).toString());"},{"lineNumber":269,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":270,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":271,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":272,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputAddToListMaintainsOrder() throws DukeException {"},{"lineNumber":273,"author":{"gitId":"DarkDestry-t"},"content":"        int tasksStateLength \u003d Duke.tasks.size();"},{"lineNumber":274,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":275,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":276,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo blah\");"},{"lineNumber":277,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo read book\");"},{"lineNumber":278,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":279,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(tasksStateLength + 3, Duke.tasks.size());"},{"lineNumber":280,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":281,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"help people\", Duke.tasks.get(tasksStateLength).getTaskInfo());"},{"lineNumber":282,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"blah\", Duke.tasks.get(tasksStateLength + 1).getTaskInfo());"},{"lineNumber":283,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", Duke.tasks.get(tasksStateLength + 2).getTaskInfo());"},{"lineNumber":284,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":285,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":286,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":287,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputListOutputTasksState() throws DukeException {"},{"lineNumber":288,"author":{"gitId":"DarkDestry-t"},"content":"        // Setup"},{"lineNumber":289,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.tasks \u003d new ArrayList\u003c\u003e(100);"},{"lineNumber":290,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo help people\");"},{"lineNumber":291,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo blah\");"},{"lineNumber":292,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.parseInput(\"todo read book\");"},{"lineNumber":293,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":294,"author":{"gitId":"DarkDestry-t"},"content":"        final String expectedString \u003d \"1.[T][✗] help people\\n2.[T][✗] blah\\n3.[T][✗] read book\";"},{"lineNumber":295,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":296,"author":{"gitId":"DarkDestry-t"},"content":"        // Test"},{"lineNumber":297,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(expectedString, Duke.parseInput(\"list\"));"},{"lineNumber":298,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":299,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":300,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":301,"author":{"gitId":"DarkDestry-t"},"content":"    public void parseInputByeOutputFarewell() throws DukeException {"},{"lineNumber":302,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\", Duke.parseInput(\"bye\"));"},{"lineNumber":303,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":304,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":305,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":306,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatInputByeExitsLoop() throws IOException {"},{"lineNumber":307,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"bye\\n\" + \"hello\\n\" + \"bye\\n\";"},{"lineNumber":308,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":309,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":310,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":311,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":312,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":313,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\\n\", new String(out.toByteArray()));"},{"lineNumber":314,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":315,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":316,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":317,"author":{"gitId":"DarkDestry-t"},"content":"    public void chatLoopWritesToOutput() throws IOException {"},{"lineNumber":318,"author":{"gitId":"DarkDestry-t"},"content":"        String testInput \u003d \"echoThis\\n\" + \"echoThisAsWell\\n\" + \"echoThisFinally\\n\";"},{"lineNumber":319,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":320,"author":{"gitId":"DarkDestry-t"},"content":"        InputStream in \u003d makeInputStreamFromString(testInput);"},{"lineNumber":321,"author":{"gitId":"DarkDestry-t"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":322,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":323,"author":{"gitId":"DarkDestry-t"},"content":"        Duke.chatLoop(in, out);"},{"lineNumber":324,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":325,"author":{"gitId":"DarkDestry-t"},"content":"        assertNotEquals(\"\", new String(out.toByteArray()));"},{"lineNumber":326,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":327,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":328,"author":{"gitId":"DarkDestry-t"},"content":"    private ByteArrayInputStream makeInputStreamFromString(String testInput) {"},{"lineNumber":329,"author":{"gitId":"DarkDestry-t"},"content":"        return new ByteArrayInputStream(testInput.getBytes(StandardCharsets.UTF_8));"},{"lineNumber":330,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":331,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":331}},{"path":"src/test/java/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class EventTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newEventTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"June 6th\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getTime());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][✗] group meeting (at: June 6th)\", t.toString());"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"    public void eventTaskSetDoneChangesCompletionState() {"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"June 6th\");"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getTime());"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][✗] group meeting (at: June 6th)\", t.toString());"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"group meeting\", t.getTaskInfo());"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"June 6th\", t.getTime());"},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[E][✓] group meeting (at: June 6th)\", t.toString());"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"    public void eventTaskIsOfTypeTask() {"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"        EventTask t \u003d new EventTask(\"group meeting\", \"Today\");"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":38,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":39,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":40}},{"path":"src/test/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"public class TaskTest {"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    public void newTaskPopulatesFields() {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testing task\", t.getTaskInfo());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[✗] testing task\", t.toString());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void taskSetDoneChangesTaskCompletionState() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        Task t \u003d new Task(\"testing task\");"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testing task\", t.getTaskInfo());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[✓] testing task\", t.toString());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":24}},{"path":"src/test/java/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"public class TodoTaskTest {"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"    public void newTodoTaskTaskPopulatesFields() {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✗] read book\", t.toString());"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"    public void todoTaskSetDoneChangesCompletionState() {"},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(false, t.getCompletionState());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✗] read book\", t.toString());"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":24,"author":{"gitId":"DarkDestry-t"},"content":"        t.setTaskAsDone();"},{"lineNumber":25,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":26,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(true, t.getCompletionState());"},{"lineNumber":27,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"read book\", t.getTaskInfo());"},{"lineNumber":28,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"[T][✓] read book\", t.toString());"},{"lineNumber":29,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":31,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"DarkDestry-t"},"content":"    public void todoTaskIsOfTypeTask() {"},{"lineNumber":33,"author":{"gitId":"DarkDestry-t"},"content":"        TodoTask t \u003d new TodoTask(\"read book\");"},{"lineNumber":34,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":35,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(t instanceof Task);"},{"lineNumber":36,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":37}},{"path":"src/test/java/exception/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeExceptionTest {"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    public void dukeExceptionIsOfTypeException() {"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeException() instanceof Exception);"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":14}},{"path":"src/test/java/exception/DukeInvalidArgumentsExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidArgumentsExceptionTest {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidArgumentsExceptionIsOfTypeDukeException() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeInvalidArgumentsException(\"test\", \"test\") instanceof DukeException);"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidArgumentsExceptionPopulatesField() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidArgumentsException exception \u003d new DukeInvalidArgumentsException(\"testCommand\","},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"                \"Test Error Message\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testCommand\", exception.getCommand());"},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Test Error Message\", exception.getError());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Command testCommand encountered invalid arguments: Test Error Message\", exception.getMessage());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":23}},{"path":"src/test/java/exception/DukeInvalidInputExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"public class DukeInvalidInputExceptionTest {"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidInputExceptionIsOfTypeDukeException() {"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"        assertTrue(new DukeInvalidInputException() instanceof DukeException);"},{"lineNumber":13,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":15,"author":{"gitId":"DarkDestry-t"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"DarkDestry-t"},"content":"    public void invalidInputExceptionPopulatesFields() {"},{"lineNumber":17,"author":{"gitId":"DarkDestry-t"},"content":"        DukeInvalidInputException exception \u003d new DukeInvalidInputException("},{"lineNumber":18,"author":{"gitId":"DarkDestry-t"},"content":"                \"testInvalidInputCommand with /invalid arguments\");"},{"lineNumber":19,"author":{"gitId":"DarkDestry-t"},"content":""},{"lineNumber":20,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"testInvalidInputCommand with /invalid arguments\", exception.getInvalidInput());"},{"lineNumber":21,"author":{"gitId":"DarkDestry-t"},"content":"        assertEquals(\"Invalid Input: testInvalidInputCommand with /invalid arguments\", exception.getMessage());"},{"lineNumber":22,"author":{"gitId":"DarkDestry-t"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"DarkDestry-t"},"content":"}"}],"authorContributionMap":{"DarkDestry-t":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DarkDestry-t"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":3,"author":{"gitId":"DarkDestry-t"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"DarkDestry-t"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":6,"author":{"gitId":"DarkDestry-t"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":7,"author":{"gitId":"DarkDestry-t"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":9,"author":{"gitId":"DarkDestry-t"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":11,"author":{"gitId":"DarkDestry-t"},"content":"list"},{"lineNumber":12,"author":{"gitId":"DarkDestry-t"},"content":"bye"}],"authorContributionMap":{"DarkDestry-t":12}}]
