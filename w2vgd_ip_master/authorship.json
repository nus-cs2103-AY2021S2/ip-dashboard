[{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"T | 1 | read book"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":"D | 1 | return book | Feb 22 2021, 6:00PM"},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"T | 0 | help"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"T | 0 | boo keke"}],"authorContributionMap":{"w2vgd":4}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import duke.commands.Command;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import duke.commands.CommandResult;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import duke.commands.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import duke.commands.InvalidDescriptionException;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import duke.commands.NoDescriptionException;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import duke.parser.Parser;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import duke.storage.InvalidStorageFilePathException;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import duke.storage.Storage;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import duke.storage.StorageException;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.TaskList;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import duke.ui.Ui;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":" * The main entry point to the chatbot application."},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":" * Initializes the application and starts user interaction."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"public class Main {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    private Storage storage;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    private Ui ui;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    private TaskList taskList;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * Entry point of the application."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     * @param args an optional user-specified filepath used to initialize the storage"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public static void main(String[] args) {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        new Main().run(args);"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     * Runs the application until user terminates with an exit command."},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     * @param args an optional user-specified filepath used to initialize the storage"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    public void run(String[] args) {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        // Initialize the required components"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        initialize(args);"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        // Run infinite loop asking for user command until user enter exit command"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        runLoop();"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        // Exit the program"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        exit();"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     * Initializes the required components and prints the welcome greeting."},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"     * @param args an optional user-specified filepath used to initialize the storage"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    private void initialize(String[] args) {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"            // Initialize the required components"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"            ui \u003d new Ui();"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"            storage \u003d initializeStorage(args);"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"            taskList \u003d storage.loadTasks();"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"            // Print the welcome greeting "},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"            ui.printDivider();"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"            ui.printGreeting();"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        } catch (InvalidStorageFilePathException ex) {"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"            ui.print(\"Failed to initialize storage. Exiting...\");"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"            throw new RuntimeException(ex);"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        } catch (IOException ex) {"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"            ui.print(\"Failed to load storage file. Exiting...\");"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"            throw new RuntimeException(ex);"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"     * Prints the exit message"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    private void exit() {"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        ui.printExitMessage();"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"        ui.printDivider();"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"     * Initializes the storage using the specified filepath. If user did not specify a filepath,"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"     * then the default filepath will be used."},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"     * @param args an optional user-specified filepath used to initialize the storage"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"     * @return a Storage object that is used to read and write to a file"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidStorageFilePathException if the specified filepath is invalid"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"    private Storage initializeStorage(String[] args) throws InvalidStorageFilePathException {"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        if (args.length \u003e 0) {"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"            // User has specified a file path for the storage"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"            return new Storage(args[0]);"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"            // Using the default file path as user did not specify a file path"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"            return new Storage();"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"     * Runs the loop asking for user commands and execute the command until user enters exit command."},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"    private void runLoop() {"},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        Command command \u003d null;"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"        do {"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"            try {"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":"                // Ask for user input"},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"                ui.printDivider();"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"                String userInput \u003d ui.getUserInput();"},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"                ui.printDivider();"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":"                // Parse the user input into an executable command"},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":"                command \u003d new Parser().parseCommand(userInput);"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"                // Execute the command"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"                CommandResult commandResult \u003d executeCommand(command);"},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"                // Update the cached task list and save it to file"},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"                storage.saveTasksIfPresent(commandResult.getUpdatedTaskList());"},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"                updateTaskListIfPresent(commandResult.getUpdatedTaskList());"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":"                // Print the message for the user"},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"                ui.print(commandResult.getMessageForUser());"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"            } catch (InvalidCommandException | StorageException | InvalidDescriptionException"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"                    | NoDescriptionException ex) {"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":"                ui.print(ex.getMessage());"},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"        } while (!ByeCommand.isByeCommand(command));"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":"     * Executes the command and return a CommandResult instance."},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"     * @param command user command"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"     * @return result command"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"    private CommandResult executeCommand(Command command) {"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"        command.setTaskList(taskList);"},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"        return command.execute();"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"     * Update the cached task list if it was modified by the previous command."},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"     * @param taskList updated task list"},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"    private void updateTaskListIfPresent(TaskList taskList) {"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        if (taskList !\u003d null) {"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"            this.taskList \u003d taskList;"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":158}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_EXIT;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":" * Exits the application."},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"public class ByeCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(MESSAGE_EXIT);"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"     * Checks if a command is an instance of ByeCommand."},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     * @param command user command"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     * @return true if command is an instance of ByeCommand, else false"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public static boolean isByeCommand(Command command) {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        return command instanceof ByeCommand;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":25}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":" * Represents a user command."},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    protected TaskList taskList;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"     * Sets the current instance of task list that the command will operate on."},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"     * @param taskList the current instance of task list"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public void setTaskList(TaskList taskList) {"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"     * Executes the command."},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     * @return result command"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public abstract CommandResult execute();"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":26}},{"path":"src/main/java/duke/commands/CommandResult.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.TaskList;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":" * Represents the result of a command after execution."},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"public class CommandResult {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    private final String messageForUser;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    private final TaskList updatedTaskList;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public CommandResult(String messageForUser) {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        this.messageForUser \u003d messageForUser;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        updatedTaskList \u003d null;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public CommandResult(String messageForUser, TaskList updatedTaskList) {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.messageForUser \u003d messageForUser;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        this.updatedTaskList \u003d updatedTaskList;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     * Returns the message to be printed to the user."},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     * @return message for the user"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public String getMessageForUser() {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        return messageForUser;"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * Returns the updated task list after the execution of a command."},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     * @return updated task list"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public TaskList getUpdatedTaskList() {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        return updatedTaskList;"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        } else if (obj instanceof CommandResult) {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"            CommandResult objCommandResult \u003d (CommandResult) obj;"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"            if (!messageForUser.equals(objCommandResult.messageForUser)) {"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"                return false;"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            if (updatedTaskList !\u003d null \u0026\u0026 objCommandResult.updatedTaskList !\u003d null) {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"                return updatedTaskList.equals(objCommandResult.updatedTaskList);"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"            } else {"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"                return updatedTaskList \u003d\u003d null \u0026\u0026 objCommandResult.updatedTaskList \u003d\u003d null;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        } else {"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":58}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.DeadlineTask;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_ADDED_TASK;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_TASKLIST_SIZE_FORMAT;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" * Creates a Deadline task."},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    private final String taskName;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    private final LocalDateTime deadline;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public DeadlineCommand(String taskName, LocalDateTime deadline) {"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        DeadlineTask task \u003d new DeadlineTask(taskName, deadline);"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        taskList.addTask(task);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(MESSAGE_ADDED_TASK + \"\\n  \" + task.toString() + \"\\n\""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"                + String.format(MESSAGE_TASKLIST_SIZE_FORMAT, taskList.size()), taskList);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":31}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_DELETED_TASK;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_INVALID_INDEX;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_TASKLIST_SIZE_FORMAT;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Deletes a task."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final int index;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.index \u003d index;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"            Task task \u003d taskList.getTask(index);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            taskList.deleteTask(index);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_DELETED_TASK + \"\\n  \" + task.toString() + \"\\n\""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"                    + String.format(MESSAGE_TASKLIST_SIZE_FORMAT, taskList.size()), taskList);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_INVALID_INDEX);"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":32}},{"path":"src/main/java/duke/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_DONE_TASK;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_INVALID_INDEX;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Completes a task."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class DoneCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    private final int index;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public DoneCommand(int index) {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"        this.index \u003d index;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"            taskList.completeTask(index);"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_DONE_TASK + \"\\n\""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"                    + taskList.getTask(index).toString(), taskList);"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_INVALID_INDEX);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":28}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.EventTask;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_ADDED_TASK;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_TASKLIST_SIZE_FORMAT;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" * Creates an Event task."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"public class EventCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private final String taskName;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final String eventTime;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public EventCommand(String taskName, String eventTime) {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        EventTask task \u003d new EventTask(taskName, eventTime);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        taskList.addTask(task);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(MESSAGE_ADDED_TASK + \"\\n  \" + task.toString() + \"\\n\""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"                + String.format(MESSAGE_TASKLIST_SIZE_FORMAT, taskList.size()), taskList);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":29}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_FOUND_TASKS;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_INDEX_TASK_FORMAT;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_NO_MATCHES;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" * Finds tasks that contains specific keywords or phrases."},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final String searchWord;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public FindCommand(String searchWord) {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.searchWord \u003d searchWord;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        StringBuilder tasksWithSearchWord \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            Task task \u003d taskList.getTask(i - 1);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"            if (task.getName().contains(searchWord)) {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"                tasksWithSearchWord.append(String.format(MESSAGE_INDEX_TASK_FORMAT, i, taskList.getTask(i - 1)));"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"                tasksWithSearchWord.append(\"\\n\");"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        if (tasksWithSearchWord.length() \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_NO_MATCHES);"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"            tasksWithSearchWord.deleteCharAt(tasksWithSearchWord.length() - 1);"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_FOUND_TASKS + \"\\n\" + tasksWithSearchWord.toString());"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":38}},{"path":"src/main/java/duke/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_HELP;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":" * Show help menu to user."},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"help\";"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(MESSAGE_HELP);"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":15}},{"path":"src/main/java/duke/commands/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Signals an invalid user command."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class InvalidCommandException extends Exception {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":11}},{"path":"src/main/java/duke/commands/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Signals an invalid description for the command."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class InvalidDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    public InvalidDescriptionException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":11}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_EMPTY_TASKLIST;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_INDEX_TASK_FORMAT;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_SHOW_TASKLIST;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Lists the current tasks."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_EMPTY_TASKLIST);"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"            StringBuilder tasksListAsString \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"            for (int i \u003d 1; i \u003c\u003d taskList.size(); i++) {"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                tasksListAsString.append(String.format(MESSAGE_INDEX_TASK_FORMAT, i, taskList.getTask(i - 1)));"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"                if (i !\u003d taskList.size()) {"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"                    tasksListAsString.append(\"\\n\");"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"                }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            return new CommandResult(MESSAGE_SHOW_TASKLIST + \"\\n\" + tasksListAsString.toString());"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":28}},{"path":"src/main/java/duke/commands/NoDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Signals an empty description."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class NoDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    public NoDescriptionException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":11}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.ToDoTask;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_ADDED_TASK;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static duke.utils.Messages.MESSAGE_TASKLIST_SIZE_FORMAT;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" * Creates a ToDo task."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private final String taskName;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public ToDoCommand(String taskName) {"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        ToDoTask task \u003d new ToDoTask(taskName);"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        taskList.addTask(task);"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        return new CommandResult(MESSAGE_ADDED_TASK + task.toString() + \"\\n\""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"                + String.format(MESSAGE_TASKLIST_SIZE_FORMAT, taskList.size()), taskList);"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":27}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import duke.commands.Command;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import duke.commands.DeadlineCommand;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import duke.commands.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import duke.commands.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import duke.commands.EventCommand;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import duke.commands.FindCommand;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import duke.commands.HelpCommand;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import duke.commands.InvalidCommandException;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import duke.commands.InvalidDescriptionException;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import duke.commands.ListCommand;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import duke.commands.NoDescriptionException;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"import duke.commands.ToDoCommand;"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"import duke.utils.Formatter;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"import java.util.regex.Matcher;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"import java.util.regex.Pattern;"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":" * Parses user input."},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"public class Parser {"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Regex to separate the command word and arguments."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    public static final Pattern USER_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommand\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     * Parses user input into a command."},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     * @param userInput full user input string"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"     * @return user command"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidCommandException     if the user pass in an unrecognized command"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the format of the arguments do not match the command"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException      if the arguments is empty when further information is required"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public Command parseCommand(String userInput) throws InvalidCommandException,"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"            InvalidDescriptionException, NoDescriptionException {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        Matcher matcher \u003d USER_COMMAND_FORMAT.matcher(userInput.strip());"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidCommandException(\"Please enter a command.\");"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        // Get the command word as captured by the named-capturing group"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        String command \u003d matcher.group(\"command\");"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"        // Get the arguments as captured by the named-capturing group"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        String arguments \u003d matcher.group(\"arguments\").strip();"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        switch (command) {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        case ToDoCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForToDo(arguments);"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForDeadline(arguments);"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForEvent(arguments);"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"        case ByeCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"            return new ByeCommand();"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForDone(arguments);"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForDelete(arguments);"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"            return new ListCommand();"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"            return new HelpCommand();"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"            return parseArgumentsForFind(arguments);"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidCommandException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"     * Parses the arguments for the todo command."},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"     * @param arguments user input arguments string"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"     * @return {@code ToDoCommand}"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException if the description of the task is empty"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForToDo(String arguments) throws NoDescriptionException {"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"        return new ToDoCommand(arguments);"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"     * Parses the arguments for the deadline command."},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"     * @param arguments user input arguments string"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"     * @return {@code DeadlineCommand}"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException      if the description of the task is empty"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the format of the deadline is invalid"},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"     * @see Parser#parseDateTime(String)"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForDeadline(String arguments) throws NoDescriptionException,"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"            InvalidDescriptionException {"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":"        if (!arguments.contains(\"/by\")) {"},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidDescriptionException(\"Invalid description syntax. \""},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"                    + \"Please follow the usage as shown below:\\n\""},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"                    + \"Usage: deadline \u003ctask_description\u003e /by dd/mm/yyyy HHHH\");"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":"        String[] deadlineInputArr \u003d arguments.split(\"/by\");"},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"        String deadlineTaskName \u003d deadlineInputArr[0].strip();"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":"        String userInputDateTime \u003d deadlineInputArr[1].strip();"},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"        LocalDateTime deadline \u003d parseDateTime(userInputDateTime);"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":"        return new DeadlineCommand(deadlineTaskName, deadline);"},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"     * Parses the input date string format into a LocalDateTime object."},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":"     * @param dateString user input date of the format \"dd/mm/yyyy HHHH\""},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"     * @return {@code LocalDateTime} object representing the date and time"},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the format of the date and time is invalid"},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"    private static LocalDateTime parseDateTime(String dateString) throws InvalidDescriptionException {"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"            return LocalDateTime.parse(dateString, Formatter.INPUT_DATE_FORMATTER);"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidDescriptionException(\"Please enter a valid date and time for a deadline task \""},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":"                    + \"using this format:\\ndeadline task_name /by dd/mm/yyyy HHHH\");"},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"     * Parses the arguments for the event command."},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"     * @param arguments user input arguments string"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"     * @return {@code EventCommand}"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException if the description of the task is empty"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the format of the event time is invalid"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForEvent(String arguments) throws NoDescriptionException, "},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"            InvalidDescriptionException {"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"OOPS!!! The description of a task cannot be empty.\");"},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"        if (!arguments.contains(\"/at\")) {"},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidDescriptionException(\"Invalid description syntax. \""},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"                    + \"Please follow the usage as shown below:\\n\""},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"                    + \"Usage: event \u003ctask_description\u003e /at \u003cevent_time\u003e\");"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"        String[] eventInputArr \u003d arguments.split(\"/at\");"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"        String eventTaskName \u003d eventInputArr[0].strip();"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"        String eventTime \u003d eventInputArr[1].strip();"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"        return new EventCommand(eventTaskName, eventTime);"},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"     * Parses the arguments for the done command."},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":"     * @param arguments user input arguments string"},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"     * @return {@code DoneCommand}"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the description is not a valid index"},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException      if the description of the task is empty"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":"     * @throws IndexOutOfBoundsException   if the specified task number is outside of range"},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForDone(String arguments) throws InvalidDescriptionException,"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"            NoDescriptionException, IndexOutOfBoundsException {"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"Please indicate a task number to be marked as done.\");"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"            int index \u003d Integer.parseInt(arguments.strip()) - 1;  // Account for 0-based indexing"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"            return new DoneCommand(index);"},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidDescriptionException(\"Please enter a valid task number\");"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":181,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":182,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":183,"author":{"gitId":"w2vgd"},"content":"     * Parses the arguments for the delete command."},{"lineNumber":184,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":185,"author":{"gitId":"w2vgd"},"content":"     * @param arguments user input arguments string"},{"lineNumber":186,"author":{"gitId":"w2vgd"},"content":"     * @return {@code DeleteCommand}"},{"lineNumber":187,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidDescriptionException if the description is not a valid index"},{"lineNumber":188,"author":{"gitId":"w2vgd"},"content":"     * @throws NoDescriptionException      if the description of the task is empty"},{"lineNumber":189,"author":{"gitId":"w2vgd"},"content":"     * @throws IndexOutOfBoundsException   if the specified task number is outside of range"},{"lineNumber":190,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForDelete(String arguments) throws InvalidDescriptionException,"},{"lineNumber":192,"author":{"gitId":"w2vgd"},"content":"            NoDescriptionException, IndexOutOfBoundsException {"},{"lineNumber":193,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":194,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"Please indicate a task number to be marked as done.\");"},{"lineNumber":195,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":196,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":197,"author":{"gitId":"w2vgd"},"content":"            int index \u003d Integer.parseInt(arguments.strip()) - 1;  // Account for 0-based indexing"},{"lineNumber":198,"author":{"gitId":"w2vgd"},"content":"            return new DeleteCommand(index);"},{"lineNumber":199,"author":{"gitId":"w2vgd"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":200,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidDescriptionException(\"Please enter a valid task number\");"},{"lineNumber":201,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":202,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":204,"author":{"gitId":"w2vgd"},"content":"    private Command parseArgumentsForFind(String arguments) throws NoDescriptionException {"},{"lineNumber":205,"author":{"gitId":"w2vgd"},"content":"        if (arguments.isBlank()) {"},{"lineNumber":206,"author":{"gitId":"w2vgd"},"content":"            throw new NoDescriptionException(\"Please enter a search word or phrase!\");"},{"lineNumber":207,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"w2vgd"},"content":"        return new FindCommand(arguments);"},{"lineNumber":209,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":210}},{"path":"src/main/java/duke/storage/InvalidStorageFilePathException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Signals an invalid file path for storage."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class InvalidStorageFilePathException extends Exception {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    public InvalidStorageFilePathException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":10}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.DeadlineTask;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.EventTask;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.ToDoTask;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import duke.utils.Formatter;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"import java.nio.file.Path;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":" * Used to read and write to a file."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    private static final String DEFAULT_FILEPATH \u003d \"duke.txt\";"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    private final Path path;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     * Creates a {@code Storage} object with the default file path."},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidStorageFilePathException if the default file path is invalid"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    public Storage() throws InvalidStorageFilePathException {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        this(DEFAULT_FILEPATH);"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     * Creates a {@code Storage} object with the given file path."},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     * @param path file path to read or write to"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     * @throws InvalidStorageFilePathException if the file path is invalid"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public Storage(String path) throws InvalidStorageFilePathException {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        if (!isValidFilePath(path)) {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidStorageFilePathException(\"The file path of a storage file should end with \u0027.txt\u0027\");"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"            this.path \u003d Path.of(path);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        } catch (InvalidPathException ex) {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"            throw new InvalidStorageFilePathException(\"Invalid path detected.\");"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"     * Checks if a file indicated by the given file path is text file."},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"     * @param filePath file path to be checked"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"     * @return true if the file path ends with \u0027.txt\u0027, else false"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"    private static boolean isValidFilePath(String filePath) {"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"        return filePath.endsWith(\".txt\");"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"     * Saves the list of tasks by writing into the file if the list if updated by the previous command."},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"     * @param taskList updated task list"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"     * @throws StorageException if an error occurs while writing to the file"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"    public void saveTasksIfPresent(TaskList taskList) throws StorageException {"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"        if (taskList \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"            return;"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"            List\u003cString\u003e taskStrings \u003d Storage.convertAllTasksToString(taskList);"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"            Files.write(path, taskStrings);"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"        } catch (IOException ex) {"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"            throw new StorageException(\"Error writing data to file: \" + path);"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"     * Loads the list of tasks found in the file and parses the tasks into an operational format."},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"     * @return {@code TaskList} that represents the current list of tasks in the file"},{"lineNumber":87,"author":{"gitId":"w2vgd"},"content":"     * @throws IOException if an error occurs while reading from the file"},{"lineNumber":88,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"w2vgd"},"content":"    public TaskList loadTasks() throws IOException {"},{"lineNumber":90,"author":{"gitId":"w2vgd"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":91,"author":{"gitId":"w2vgd"},"content":"        if (!Files.exists(path) || !Files.isRegularFile(path)) {"},{"lineNumber":92,"author":{"gitId":"w2vgd"},"content":"            return taskList;"},{"lineNumber":93,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"w2vgd"},"content":"        List\u003cString\u003e taskStrings \u003d Files.readAllLines(path);"},{"lineNumber":95,"author":{"gitId":"w2vgd"},"content":"        for (String s : taskStrings) {"},{"lineNumber":96,"author":{"gitId":"w2vgd"},"content":"            taskList.addTask(Storage.convertStringToTask(s));"},{"lineNumber":97,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"w2vgd"},"content":"        return taskList;"},{"lineNumber":99,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":101,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"w2vgd"},"content":"     * Converts a task string into a {@code Task} object."},{"lineNumber":103,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"w2vgd"},"content":"     * @param taskString task string to be converted"},{"lineNumber":105,"author":{"gitId":"w2vgd"},"content":"     * @return {@code Task}"},{"lineNumber":106,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"w2vgd"},"content":"    public static Task convertStringToTask(String taskString) {"},{"lineNumber":108,"author":{"gitId":"w2vgd"},"content":"        Task task \u003d null;"},{"lineNumber":109,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":110,"author":{"gitId":"w2vgd"},"content":"        String[] arr \u003d taskString.split(\"\\\\s\\\\|\\\\s\");"},{"lineNumber":111,"author":{"gitId":"w2vgd"},"content":"        String taskType \u003d arr[0];"},{"lineNumber":112,"author":{"gitId":"w2vgd"},"content":"        String taskStatus \u003d arr[1];"},{"lineNumber":113,"author":{"gitId":"w2vgd"},"content":"        String taskName \u003d arr[2];"},{"lineNumber":114,"author":{"gitId":"w2vgd"},"content":"        boolean isTaskCompleted \u003d taskStatus.equals(\"1\");"},{"lineNumber":115,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":116,"author":{"gitId":"w2vgd"},"content":"        switch (taskType) {"},{"lineNumber":117,"author":{"gitId":"w2vgd"},"content":"        case ToDoTask.IDENTIFIER:"},{"lineNumber":118,"author":{"gitId":"w2vgd"},"content":"            task \u003d new ToDoTask(taskName, isTaskCompleted);"},{"lineNumber":119,"author":{"gitId":"w2vgd"},"content":"            break;"},{"lineNumber":120,"author":{"gitId":"w2vgd"},"content":"        case DeadlineTask.IDENTIFIER:"},{"lineNumber":121,"author":{"gitId":"w2vgd"},"content":"            String deadlineTaskDescription \u003d arr[3];"},{"lineNumber":122,"author":{"gitId":"w2vgd"},"content":"            LocalDateTime deadline \u003d LocalDateTime.parse(deadlineTaskDescription, Formatter.OUTPUT_DATE_FORMATTER);"},{"lineNumber":123,"author":{"gitId":"w2vgd"},"content":"            task \u003d new DeadlineTask(taskName, isTaskCompleted, deadline);"},{"lineNumber":124,"author":{"gitId":"w2vgd"},"content":"            break;"},{"lineNumber":125,"author":{"gitId":"w2vgd"},"content":"        case EventTask.IDENTIFIER:"},{"lineNumber":126,"author":{"gitId":"w2vgd"},"content":"            String eventTaskDescription \u003d arr[3];"},{"lineNumber":127,"author":{"gitId":"w2vgd"},"content":"            task \u003d new EventTask(taskName, isTaskCompleted, eventTaskDescription);"},{"lineNumber":128,"author":{"gitId":"w2vgd"},"content":"            break;"},{"lineNumber":129,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":130,"author":{"gitId":"w2vgd"},"content":"        return task;"},{"lineNumber":131,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":133,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":134,"author":{"gitId":"w2vgd"},"content":"     * Converts a list of tasks into a list of strings formatted to be stored in a file."},{"lineNumber":135,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":136,"author":{"gitId":"w2vgd"},"content":"     * @param taskList task list to be converted"},{"lineNumber":137,"author":{"gitId":"w2vgd"},"content":"     * @return a list of formatted task strings"},{"lineNumber":138,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"w2vgd"},"content":"    public static List\u003cString\u003e convertAllTasksToString(TaskList taskList) {"},{"lineNumber":140,"author":{"gitId":"w2vgd"},"content":"        List\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":141,"author":{"gitId":"w2vgd"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":142,"author":{"gitId":"w2vgd"},"content":"            Task task \u003d taskList.getTask(i);"},{"lineNumber":143,"author":{"gitId":"w2vgd"},"content":"            taskStrings.add(Storage.convertTaskToString(task));"},{"lineNumber":144,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":145,"author":{"gitId":"w2vgd"},"content":"        return taskStrings;"},{"lineNumber":146,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":148,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"w2vgd"},"content":"     * Converts a {@code Task} into a formatted task string."},{"lineNumber":150,"author":{"gitId":"w2vgd"},"content":"     * String format: \"taskType | taskStatus | taskName\", with an additional \" | additionalInfo]\""},{"lineNumber":151,"author":{"gitId":"w2vgd"},"content":"     * depending on the type of the task."},{"lineNumber":152,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":153,"author":{"gitId":"w2vgd"},"content":"     * @param task task object to be converted"},{"lineNumber":154,"author":{"gitId":"w2vgd"},"content":"     * @return formatted string describing the task"},{"lineNumber":155,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"w2vgd"},"content":"    public static String convertTaskToString(Task task) {"},{"lineNumber":157,"author":{"gitId":"w2vgd"},"content":"        // "},{"lineNumber":158,"author":{"gitId":"w2vgd"},"content":"        StringBuilder encodedTaskString \u003d new StringBuilder();"},{"lineNumber":159,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":160,"author":{"gitId":"w2vgd"},"content":"        encodedTaskString.append(task.getTaskType());"},{"lineNumber":161,"author":{"gitId":"w2vgd"},"content":"        encodedTaskString.append(\" | \");"},{"lineNumber":162,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":163,"author":{"gitId":"w2vgd"},"content":"        encodedTaskString.append(task.isDone() ? \"1\" : \"0\");"},{"lineNumber":164,"author":{"gitId":"w2vgd"},"content":"        encodedTaskString.append(\" | \");"},{"lineNumber":165,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":166,"author":{"gitId":"w2vgd"},"content":"        encodedTaskString.append(task.getName());"},{"lineNumber":167,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":168,"author":{"gitId":"w2vgd"},"content":"        if (task.getTaskType().equals(\"D\")) {"},{"lineNumber":169,"author":{"gitId":"w2vgd"},"content":"            DeadlineTask deadlineTask \u003d (DeadlineTask) task;"},{"lineNumber":170,"author":{"gitId":"w2vgd"},"content":"            encodedTaskString.append(\" | \");"},{"lineNumber":171,"author":{"gitId":"w2vgd"},"content":"            encodedTaskString.append(deadlineTask.getDeadline());"},{"lineNumber":172,"author":{"gitId":"w2vgd"},"content":"        } else if (task.getTaskType().equals(\"E\")) {"},{"lineNumber":173,"author":{"gitId":"w2vgd"},"content":"            EventTask eventTask \u003d (EventTask) task;"},{"lineNumber":174,"author":{"gitId":"w2vgd"},"content":"            encodedTaskString.append(\" | \");"},{"lineNumber":175,"author":{"gitId":"w2vgd"},"content":"            encodedTaskString.append(eventTask.getEventTime());"},{"lineNumber":176,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":177,"author":{"gitId":"w2vgd"},"content":"        return encodedTaskString.toString();"},{"lineNumber":178,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":179}},{"path":"src/main/java/duke/storage/StorageException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Signals an error writing to file."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class StorageException extends Exception {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    public StorageException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":10}},{"path":"src/main/java/duke/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.utils.Formatter;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Represents a task with a deadline."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String IDENTIFIER \u003d \"D\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private LocalDateTime deadline;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    public DeadlineTask(String name, LocalDateTime deadline) {"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name);"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public DeadlineTask(String name, boolean isCompleted, LocalDateTime deadline) {"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name, isCompleted);"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     * Returns the deadline in a nicely formatted string."},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"     * @return formatted deadline string"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public String getDeadline() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        return deadline.format(Formatter.OUTPUT_DATE_FORMATTER);"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public String getTaskType() {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        return taskType;"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getDeadline() + \")\";"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":43}},{"path":"src/main/java/duke/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Represents a task with an event time."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class EventTask extends Task {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    public static final String IDENTIFIER \u003d \"E\";"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    private String eventTime;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public EventTask(String name, String eventTime) {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name);"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public EventTask(String name, boolean isCompleted, String eventTime) {"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name, isCompleted);"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"     * Returns the event time."},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * @return event time"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    public String getEventTime() {"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        return eventTime;"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    public String getTaskType() {"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        return taskType;"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + eventTime + \")\";"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":39}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Represents a task."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    protected final String taskType;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    protected final String name;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    protected boolean isCompleted;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public Task(String taskType, String name) {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        isCompleted \u003d false;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public Task(String taskType, String name, boolean isCompleted) {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        this.name \u003d name;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"     * Returns the name of the task."},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     * @return name of task"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    public String getName() {"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        return name;"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"     * Returns the identifier of the type of task."},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     * @return identifier of task type"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    public abstract String getTaskType();"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"     * Checks if the task is already completed."},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"     * @return true if task is completed, else false"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public boolean isDone() {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        return isCompleted;"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"     * Marks a task as completed."},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"    public void completeTask() {"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        isCompleted \u003d true;"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        return String.format(\"[%s] %s\", (isCompleted ? \"X\" : \" \"), name);"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":59}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" * Represents a list of {@code Task}."},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    private final List\u003cTask\u003e taskList;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"     * Checks if the list of tasks is empty."},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"     * @return true if there are no tasks in the list, else false"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public boolean isEmpty() {"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        return taskList.isEmpty();"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"     * Returns the number of tasks in the list of tasks."},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"     * @return number of tasks in task list"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public int size() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        return taskList.size();"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"     * @param task task to be added"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public void addTask(Task task) {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        taskList.add(task);"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"     * Deletes a task from the list of tasks."},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"     * @param index the index of the task to be removed in the list"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public void deleteTask(int index) {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        taskList.remove(index);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"     * Returns a task from the list of tasks according to the index specified."},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"     * @param index the index of the task to be retrieved"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"     * @return {@code Task}"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    public Task getTask(int index) {"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        return taskList.get(index);"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"     * Marks a task in the list of tasks as completed."},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"     * @param index the index of the task to be marked as completed"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"    public void completeTask(int index) {"},{"lineNumber":68,"author":{"gitId":"w2vgd"},"content":"        taskList.get(index).completeTask();"},{"lineNumber":69,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":71,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"w2vgd"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":73,"author":{"gitId":"w2vgd"},"content":"        if (this \u003d\u003d obj) {"},{"lineNumber":74,"author":{"gitId":"w2vgd"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"w2vgd"},"content":"        } else if (obj instanceof TaskList) {"},{"lineNumber":76,"author":{"gitId":"w2vgd"},"content":"            TaskList otherTaskList \u003d (TaskList) obj;"},{"lineNumber":77,"author":{"gitId":"w2vgd"},"content":"            if (taskList !\u003d null \u0026\u0026 otherTaskList.taskList !\u003d null) {"},{"lineNumber":78,"author":{"gitId":"w2vgd"},"content":"                return taskList.equals(otherTaskList.taskList);"},{"lineNumber":79,"author":{"gitId":"w2vgd"},"content":"            } else {"},{"lineNumber":80,"author":{"gitId":"w2vgd"},"content":"                return taskList \u003d\u003d null \u0026\u0026 otherTaskList.taskList \u003d\u003d null;"},{"lineNumber":81,"author":{"gitId":"w2vgd"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"w2vgd"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"w2vgd"},"content":"            return false;"},{"lineNumber":84,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":86}},{"path":"src/main/java/duke/tasks/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Represents a normal task."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class ToDoTask extends Task {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    public static final String IDENTIFIER \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    public ToDoTask(String name) {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name);"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public ToDoTask(String name, boolean isCompleted) {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        super(IDENTIFIER, name, isCompleted);"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public String getTaskType() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        return taskType;"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.io.PrintStream;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":" * Handles the input/output of the application."},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":" * Responsible for getting user input and printing messages to the console."},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    private static final String DIVIDER \u003d \"------------------------------------------------------------\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    private static final String MESSAGE_EXIT \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    private final Scanner in;"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    private final PrintStream out;"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public Ui() {"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"        in \u003d new Scanner(System.in);"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        out \u003d System.out;"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"     * Reads the user input string."},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"     * @return full user input string"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    public String getUserInput() {"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        return in.nextLine();"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"     * Prints a horizontal line dividing separate messages."},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public void printDivider() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        out.println(DIVIDER);"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"     * Prints the welcome greeting."},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    public void printGreeting() {"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        String welcomeMsg \u003d String.format(\"Hello! I\u0027m\\n%s\\nWhat can I do for you?\", LOGO);"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        out.println(welcomeMsg);"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"     * Prints the exit message."},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    public void printExitMessage() {"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        out.println(MESSAGE_EXIT);"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"     * Prints the message to be shown to the user to the console."},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"     * @param messageForUser message to be shown to user"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"w2vgd"},"content":"    public void print(String messageForUser) {"},{"lineNumber":65,"author":{"gitId":"w2vgd"},"content":"        out.println(messageForUser);"},{"lineNumber":66,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":67}},{"path":"src/main/java/duke/utils/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":" * Specify the date time formats used as input and output."},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"public class Formatter {"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"     * User input datetime format, e.g. 23/1/2021 1933"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter INPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/y HHmm\");"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"     * Output message datetime format, e.g. Jan 23 2021, 7:33PM"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public static final DateTimeFormatter OUTPUT_DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM d y, h:mma\");"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":18}},{"path":"src/main/java/duke/utils/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.utils;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":" * Container for messages to be shown to user."},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":" */"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_EXIT \u003d \"Exiting...\";"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"    "},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_ADDED_TASK \u003d \"Got it. I\u0027ve added this task:\";"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_DELETED_TASK \u003d \"Noted. I\u0027ve removed this task:\";"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_FOUND_TASKS \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_NO_MATCHES \u003d \"Sorry, there are no matching tasks in your list\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_INDEX_TASK_FORMAT \u003d \"%d.%s\";"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_TASKLIST_SIZE_FORMAT \u003d \"Now you have %d tasks in your list.\";"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Please enter a valid index!\";"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    "},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_EMPTY_TASKLIST \u003d \"You do not have anything to do at the moment!\";"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_SHOW_TASKLIST \u003d \"Here are the tasks in your list:\";"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    "},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    public static final String MESSAGE_HELP \u003d \"Here are the list of available commands:\\n\""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"            + \"BYE:\\nExit the program\\nUsage: bye\\n\""},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"            + \"LIST:\\nPrint the list of current tasks\\nUsage: list\\n\""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"            + \"DONE:\\nMark a task as completed\\nUsage: done \u003ctask_number\u003e\\n\""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"            + \"DELETE:\\nDelete a task\\nUsage: delete \u003ctask_number\u003e\\n\""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"            + \"TODO:\\nAdd a todo task\\nUsage: todo \u003ctask_description\u003e\\n\""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"            + \"DEADLINE:\\nAdd a deadline task\\nUsage: deadline \u003ctask_description\u003e /by dd/mm/yyyy HHHH\\n\""},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"            + \"EVENT:\\nAdd an event task\\nUsage: event \u003ctask_description\u003e /at \u003cevent_time\u003e\\n\""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"            + \"HELP:\\nPrint available commands\\nUsage: help\";"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":32}},{"path":"src/test/java/duke/commands/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class ByeCommandTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    public void isByeCommand_byeCommand_true() {"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"        assertTrue(ByeCommand.isByeCommand(new ByeCommand()));"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    public void isByeCommand_nullInput_false() {"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        assertFalse(ByeCommand.isByeCommand(null));"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    public void execute_exit_success() {"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"        CommandResult expected \u003d new CommandResult(\"Exiting...\");"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        assertEquals(expected, new ByeCommand().execute());"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":25}},{"path":"src/test/java/duke/commands/CommandResultTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertNull;"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"public class CommandResultTest {"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    public void getMessageForUser_emptyMessage_success() {"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"\", new CommandResult(\"\").getMessageForUser());"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    public void getMessageForUser_nonEmptyMessage_success() {"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Working\", new CommandResult(\"Working\").getMessageForUser());"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    public void getUpdatedTaskList_nullInput_nullReturned() {"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"        assertNull(new CommandResult(\"\", null).getUpdatedTaskList());"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    public void getUpdatedTaskList_nonEmptyTaskList_success() {"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        TaskListStub taskListStub \u003d new TaskListStub();"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertEquals(taskListStub, new CommandResult(\"\", taskListStub).getUpdatedTaskList());"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public void equals() {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        CommandResult commandResult \u003d new CommandResult(\"Message: completed\");"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"Message: completed\")));"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"        assertTrue(commandResult.equals(new CommandResult(\"Message: completed\", null)));"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"Message: not completed\")));"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        assertFalse(commandResult.equals(new CommandResult(\"Message: completed\", new TaskListStub())));"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        assertFalse(commandResult.equals(1));"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    class TaskListStub extends TaskList {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        private List\u003cTask\u003e taskList;"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        public TaskListStub() {"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"            this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        @Override"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        public boolean equals(Object obj) {"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"            return this \u003d\u003d obj;"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":61}},{"path":"src/test/java/duke/tasks/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import duke.utils.Formatter;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"public class DeadlineTaskTest {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    private static final String taskName \u003d \"Return Book\";"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private static final LocalDateTime dateTime \u003d LocalDateTime.parse(\"24/1/2021 1800\","},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"            Formatter.INPUT_DATE_FORMATTER);"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[D][ ] Return Book (by: Jan 24 2021, 6:00PM)\","},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                new DeadlineTask(taskName, dateTime).toString());"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[D][ ] Return Book (by: Jan 24 2021, 6:00PM)\","},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"                new DeadlineTask(taskName, false, dateTime).toString());"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[D][X] Return Book (by: Jan 24 2021, 6:00PM)\","},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"                new DeadlineTask(taskName, true, dateTime).toString());"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    public void getName_emptyString_success() {"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"\", new DeadlineTask(\"\", dateTime).getName());"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    public void getName_nonEmptyString_success() {"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"        assertEquals(taskName, new DeadlineTask(taskName, dateTime).getName());"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public void getTaskType_deadlineTask_success() {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"D\", new DeadlineTask(\"\", dateTime).getTaskType());"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    public void isDone_completedTask_true() {"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"        assertTrue(new DeadlineTask(taskName, true, dateTime).isDone());"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    public void isDone_notCompletedTask_false() {"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"        assertFalse(new DeadlineTask(taskName, false, dateTime).isDone());"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    public void completeTask_notCompletedTask_success() {"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":"        DeadlineTask deadlineTask \u003d new DeadlineTask(taskName, false, dateTime);"},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"        deadlineTask.completeTask();"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"        assertTrue(deadlineTask.isDone());"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"    public void getDeadline_deadlineTask_success() {"},{"lineNumber":61,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Jan 24 2021, 6:00PM\", new DeadlineTask(taskName, dateTime).getDeadline());"},{"lineNumber":62,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":63}},{"path":"src/test/java/duke/tasks/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class EventTaskTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    private static final String taskName \u003d \"Project Meeting\";"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"    private static final String eventTime \u003d \"Friday 2-4pm\";"},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[E][ ] Project Meeting (at: Friday 2-4pm)\","},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"                new EventTask(taskName, eventTime).toString());"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[E][ ] Project Meeting (at: Friday 2-4pm)\","},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"                new EventTask(taskName, false, eventTime).toString());"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[E][X] Project Meeting (at: Friday 2-4pm)\","},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"                new EventTask(taskName, true, eventTime).toString());"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    public void getName_emptyString_success() {"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"\", new EventTask(\"\", eventTime).getName());"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    public void getName_nonEmptyString_success() {"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Project Meeting\", new EventTask(taskName, eventTime).getName());"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    public void getTaskType_eventTask_success() {"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"E\", new EventTask(\"\", eventTime).getTaskType());"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    public void isDone_completedTask_true() {"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        assertTrue(new EventTask(taskName, true, eventTime).isDone());"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    public void isDone_notCompletedTask_false() {"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        assertFalse(new EventTask(taskName, false, eventTime).isDone());"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    public void completeTask_notCompletedTask_success() {"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"        EventTask eventTask \u003d new EventTask(taskName, false, eventTime);"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        eventTask.completeTask();"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertTrue(eventTask.isDone());"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    public void getEventTime_eventTask_success() {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Friday 2-4pm\", new EventTask(taskName, eventTime).getEventTime());"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":59}},{"path":"src/test/java/duke/tasks/ToDoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"public class ToDoTaskTest {"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"    private static final String taskName \u003d \"Read Book\";"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    public void testStringConversion() {"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[T][ ] Read Book\", new ToDoTask(taskName).toString());"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[T][ ] Read Book\", new ToDoTask(taskName, false).toString());"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"[T][X] Read Book\", new ToDoTask(taskName, true).toString());"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"    public void getName_emptyString_success() {"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"\", new ToDoTask(\"\").getName());"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public void getName_nonEmptyString_success() {"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        assertEquals(taskName, new ToDoTask(taskName).getName());"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    public void getTaskType_toDoTask_success() {"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"T\", new ToDoTask(\"\").getTaskType());"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    public void isDone_completedTask_true() {"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":"        assertTrue(new ToDoTask(taskName, true).isDone());"},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"    public void isDone_notCompletedTask_false() {"},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"        assertFalse(new ToDoTask(taskName, false).isDone());"},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"    public void completeTask_notCompletedTask_success() {"},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"        ToDoTask toDoTask \u003d new ToDoTask(taskName, false);"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"        toDoTask.completeTask();"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":"        assertTrue(toDoTask.isDone());"},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":50}},{"path":"src/test/java/duke/ui/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"public class UiTest {"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"    // Ui testing adapted from https://www.baeldung.com/java-testing-system-out-println"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"    private final PrintStream stdout \u003d System.out;"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"    @BeforeEach"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"    public void setUp() {"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"        // Reassign the standard output stream to a new PrintStream with a ByteArrayOutputStream"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"        // Any output will now be directed to this output stream"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":22,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":24,"author":{"gitId":"w2vgd"},"content":"    @AfterEach"},{"lineNumber":25,"author":{"gitId":"w2vgd"},"content":"    public void tearDown() {"},{"lineNumber":26,"author":{"gitId":"w2vgd"},"content":"        // Restore to original state by assigning output stream back to System.out"},{"lineNumber":27,"author":{"gitId":"w2vgd"},"content":"        System.setOut(stdout);"},{"lineNumber":28,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":30,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"w2vgd"},"content":"    public void printDivider_whenInvoke_thenOutputCaptorSuccess() {"},{"lineNumber":32,"author":{"gitId":"w2vgd"},"content":"        new Ui().printDivider();"},{"lineNumber":33,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"------------------------------------------------------------\","},{"lineNumber":34,"author":{"gitId":"w2vgd"},"content":"                outputStreamCaptor.toString().trim());"},{"lineNumber":35,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":37,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"w2vgd"},"content":"    public void printGreeting_whenInvoke_thenOutputCaptorSuccess() {"},{"lineNumber":39,"author":{"gitId":"w2vgd"},"content":"        new Ui().printGreeting();"},{"lineNumber":40,"author":{"gitId":"w2vgd"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":41,"author":{"gitId":"w2vgd"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":42,"author":{"gitId":"w2vgd"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":43,"author":{"gitId":"w2vgd"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":44,"author":{"gitId":"w2vgd"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":45,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Hello! I\u0027m\\n\" + logo + \"\\nWhat can I do for you?\","},{"lineNumber":46,"author":{"gitId":"w2vgd"},"content":"                outputStreamCaptor.toString().trim());"},{"lineNumber":47,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":49,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"w2vgd"},"content":"    public void printExitMessage_whenInvoke_thenOutputCaptorSuccess() {"},{"lineNumber":51,"author":{"gitId":"w2vgd"},"content":"        new Ui().printExitMessage();"},{"lineNumber":52,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\", outputStreamCaptor.toString().trim());"},{"lineNumber":53,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"w2vgd"},"content":""},{"lineNumber":55,"author":{"gitId":"w2vgd"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"w2vgd"},"content":"    public void print_whenInvoke_thenOutputCaptorSuccess() {"},{"lineNumber":57,"author":{"gitId":"w2vgd"},"content":"        new Ui().print(\"Testing print method of Ui class.\");"},{"lineNumber":58,"author":{"gitId":"w2vgd"},"content":"        assertEquals(\"Testing print method of Ui class.\", outputStreamCaptor.toString().trim());"},{"lineNumber":59,"author":{"gitId":"w2vgd"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"w2vgd"},"content":"}"}],"authorContributionMap":{"w2vgd":60}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":2,"author":{"gitId":"w2vgd"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"w2vgd"},"content":"deadline return book /by 24/1/2021 1800"},{"lineNumber":4,"author":{"gitId":"w2vgd"},"content":"event project meeting for cs2103t /at next friday 2-4pm"},{"lineNumber":5,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":6,"author":{"gitId":"w2vgd"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":8,"author":{"gitId":"w2vgd"},"content":"deadline"},{"lineNumber":9,"author":{"gitId":"w2vgd"},"content":"deadline cs2103t luminus quiz 2 /by 22/1/2021 1400"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":11,"author":{"gitId":"w2vgd"},"content":"done "},{"lineNumber":12,"author":{"gitId":"w2vgd"},"content":"done read book"},{"lineNumber":13,"author":{"gitId":"w2vgd"},"content":"done 100"},{"lineNumber":14,"author":{"gitId":"w2vgd"},"content":"done 4"},{"lineNumber":15,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":16,"author":{"gitId":"w2vgd"},"content":"blah"},{"lineNumber":17,"author":{"gitId":"w2vgd"},"content":"delete read book"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"delete 2"},{"lineNumber":19,"author":{"gitId":"w2vgd"},"content":"delete 3"},{"lineNumber":20,"author":{"gitId":"w2vgd"},"content":"list"},{"lineNumber":21,"author":{"gitId":"w2vgd"},"content":"bye"}],"authorContributionMap":{"w2vgd":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"w2vgd"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"w2vgd"},"content":"java -classpath ..\\bin duke.Main \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"w2vgd":2}}]
