[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"swayongshen":2,"-":21}},{"path":"Test.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":"ECHO Testing your lab..."},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"java -jar checkstyle-8.2-all.jar -c cs2030_checks.xml *.java"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"@PAUSE"}],"authorContributionMap":{"swayongshen":4}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    /** Stores list of tasks */"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    TaskList list;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public Duke() {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"            this.list \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"        } catch (DukeException e) {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"        greet();"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    public void executeCommand(Command command) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        command.execute(this.list);"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    private void greet() {"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(new String[]{\"Hello! I\u0027m Duke\", \"What can I do for you?\"});"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        Duke duke \u003d new Duke();"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        while (scanner.hasNextLine()) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            String input \u003d scanner.nextLine();"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            Command command;"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"                command \u003d Parser.handleInput(input);"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"                duke.executeCommand(command);"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"                if (command.isExit()) {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"                    break;"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"                }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            } catch (DukeException e) {"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"                Ui.printWithStyle(e.getMessage());"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":41,"-":4}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"    public DukeException(String error) {"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"        super(error);"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":7}},{"path":"src/main/java/duke/Helper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.IntStream;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":" * Contains helper functions that are used across several classes."},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class Helper {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"     * Joins a sub-array of strings into 1 string where each element in sub-array is separate by a space."},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * @param arr array containing sub-array to join"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param start start index of sub-array to join"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param end end index of sub-array to join"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @return string of sub-array joined with space"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public static String join(String[] arr, int start, int end) {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d start; i \u003c\u003d end; i++) {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            output.append(arr[i]);"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"            if (i \u003c end) {"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"                output.append(\" \");"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        return output.toString();"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    public static String join(String[] arr, int start) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return join(arr, start, arr.length - 1);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    public static \u003cT\u003e int arrayIndexOf(T[] arr, T value) {"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        return IntStream.range(0, arr.length).filter(i -\u003e arr[i].equals(value)).findFirst().orElse(-1);"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":35}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.command.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.command.ListCommand;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.command.ByeCommand;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.command.FindCommand;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import duke.task.ToDo;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"import java.util.regex.Pattern;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"public class Parser {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    static final String TODO_REGEX \u003d \"^\\\\[T\\\\] \\\\[(?: |X)\\\\] ..*$\";"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    static final String DEADLINE_REGEX \u003d \"^\\\\[D\\\\] \\\\[(?: |X)\\\\] ..* \\\\(by: ..*\\\\)$\";"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    static final String EVENT_REGEX \u003d \"^\\\\[E\\\\] \\\\[(?: |X)\\\\] ..* \\\\(at: ..*\\\\)$\";"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"     * Parses the user input to find and handle commands containing keywords."},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"     * @param userInput user command input to be parsed"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if command is in an incorrect format."},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    public static Command handleInput(String userInput) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        String[] splitBySpaces \u003d userInput.trim().split(\"\\\\s+\");"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d splitBySpaces[0];"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        if (keyword.equals(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            return new ListCommand(splitBySpaces);"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"done\")) {"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"            return new DoneCommand(splitBySpaces);"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"deadline\") || keyword.equals(\"todo\") || keyword.equals(\"event\")) {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"            return new AddCommand(splitBySpaces);"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"delete\")) {"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            return new DeleteCommand(splitBySpaces);"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"bye\")) {"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"            return new ByeCommand(splitBySpaces);"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"find\")) {"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"            return new FindCommand(splitBySpaces);"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"     * Parses input string as a duke.task.Task."},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"     * @param input input string to be parsed."},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"     * @return duke.task.Task object corresponding to input string."},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"    public static Task stringToTask(String input) throws TaskException, DukeException {"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        //Check if it is a valid task first"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"        Pattern toDoPattern \u003d Pattern.compile(TODO_REGEX);"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(DEADLINE_REGEX);"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"        Pattern eventPattern \u003d Pattern.compile(EVENT_REGEX);"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"        //If it is a To Do command"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        if (toDoPattern.matcher(input).find()) {"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"            String[] inputSplitBySpaces \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"            //[ ] Task description"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"            String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1);"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"            String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(4);"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"            return new ToDo(taskDescription);"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"            boolean matchDeadline \u003d deadlinePattern.matcher(input).find();"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"            boolean matchEvent \u003d eventPattern.matcher(input).find();"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"            //If it is a deadline or event command"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"            if (matchDeadline || matchEvent) {"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"                String[] inputSplitBySpaces \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"                if (matchDeadline) {"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"                    //Index of /by"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"                    int byIndex \u003d Helper.arrayIndexOf(inputSplitBySpaces, \"(by:\");"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"                    //E.g. [ ] sample_description"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"                    String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1, byIndex - 1);"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"                    String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(4);"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"                    String dueDateWithClosingBracket \u003d Helper.join(inputSplitBySpaces, byIndex + 1,"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"                            inputSplitBySpaces.length - 1);"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"                    String dueDate \u003d dueDateWithClosingBracket.substring(0, dueDateWithClosingBracket.length() - 1);"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"                    return new Deadline(taskDescription, dueDate);"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"                } else {"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"                    //Index of /at"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"                    int atIndex \u003d Helper.arrayIndexOf(inputSplitBySpaces, \"(at:\");"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"                    //E.g. [ ] sample_description"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"                    String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1, atIndex - 1);"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"                    String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(4);"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"                    String eventDateWithClosingBracket \u003d Helper.join(inputSplitBySpaces, atIndex + 1,"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"                            inputSplitBySpaces.length - 1);"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"                    String eventDate \u003d eventDateWithClosingBracket.substring(0,"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"                            eventDateWithClosingBracket.length() - 1);"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"                    return new Event(taskDescription, eventDate);"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"                }"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"            } else {"},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"                throw new TaskException(\"Invalid task entry.\");"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":100}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Files;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Path;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Paths;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    private static final String LIST_FILE_PATH \u003d \"storage/\";"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    private static final String LIST_FILE \u003d LIST_FILE_PATH + \"list.txt\";"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    public Storage() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        //Create directory if not exist"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"        Path path \u003d Paths.get(LIST_FILE_PATH);"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"            Files.createDirectories(path);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to create storage directory. \" + e.getMessage());"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"     * Returns a FileWriter object to allow for writing to file. If clearFile is not selected, FileWriter object"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"     * will be in append mode so that file will not be overwritten."},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"     * @param clearFile determines whether to overwrite file."},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     * @return FileWriter object to write to file."},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to access the file."},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    private FileWriter getFileWriter(boolean clearFile) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"            File file \u003d new File(LIST_FILE);"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            FileWriter fw;"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"            if (file.exists() \u0026\u0026 !clearFile) {"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"                fw \u003d new FileWriter(LIST_FILE, true);"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"            } else {"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"                fw \u003d new FileWriter(LIST_FILE);"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"            return fw;"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to access file. \" + e.getMessage());"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"    private FileWriter getFileWriter() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        return getFileWriter(false);"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"     * Reads tasks line by line from the storage and stores and returns new Task object in an ArrayList"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"     * after parsing the lines."},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"     * @return an ArrayList of task objects of tasks that are read from the storage."},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if a task from storage is incorrectly formatted or failed to read storage file."},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"    public ArrayList\u003cTask\u003e readTasksFromFile() throws DukeException {"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        File tasks \u003d new File(LIST_FILE);"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"        Scanner s;"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"            s \u003d new Scanner(tasks);"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"            while (s.hasNext()) {"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"                newList.add(Parser.stringToTask(s.nextLine()));"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"            s.close();"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"            return newList;"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"        } catch (TaskException | FileNotFoundException e) {"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"     * Appends the task to the end of the storage file."},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"     * @param task task to be appended."},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to write task to storage."},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"    public void writeTaskToFile(Task task) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"        FileWriter fw \u003d getFileWriter();"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"            fw.write(task.toString());"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"            fw.append(System.getProperty(\"line.separator\"));"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"            fw.close();"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException | NullPointerException e) {"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Error writing task to storage/list.txt \" + e.getMessage());"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"     * Clears the storage file of its contents."},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to read or write to storage file.."},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"    public void clearFile() throws DukeException {"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"        FileWriter fw \u003d getFileWriter(true);"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"            fw.close();"},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to clear file of contents. \" + e.getMessage());"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":106}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import java.util.function.Consumer;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import java.util.function.Predicate;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    ArrayList\u003cTask\u003e list;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    Storage storage;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    public TaskList() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(\"Reading tasks from file...\");"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        this.list \u003d storage.readTasksFromFile();"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     * Adds a task to the list of tasks and prints to console the number of tasks in the list."},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * @param task task to be added to list"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public void add(Task task) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        this.list.add(task);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        storage.writeTaskToFile(task);"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(new String[] {"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"                \"Got it. I\u0027ve added this task:\","},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"                \"    \" + task.toString(),"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"                \"Now you have \" + this.list.size() + \" tasks in the list.\""},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        });"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     * Marks a task as done and also rewrite all tasks in the storage to reflect this change."},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"     * @param taskNumber task number of the task to be marked as done."},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to rewrite tasks to storage."},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    public void done(int taskNumber) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        this.list.get(taskNumber - 1).done();"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"        rewriteTasks();"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"     * Removes a task from the list and prints to console number of tasks left in the list."},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     * @param taskNumber task number of task to be removed."},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"    public void remove(int taskNumber) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(new String[] {"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"                \"Noted. I\u0027ve removed this task:\","},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"                this.list.get(taskNumber - 1).toString(),"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"                \"Now you have \" + (this.list.size() - 1) + \" tasks in the list.\""},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"        });"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        this.list.remove(taskNumber - 1);"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"        //Rewrite all tasks"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        rewriteTasks();"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"     * Prints to console all tasks that are present in the list."},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"    public void printList() {"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"        String[] printedArray \u003d new String[this.list.size() + 1];"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        printedArray[0] \u003d \"Here are the tasks in your list:\";"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c this.list.size(); i++) {"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"            String listEntry \u003d String.valueOf(i + 1) + \".\" +"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"                    this.list.get(i).toString();"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"            printedArray[i + 1] \u003d listEntry;"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(printedArray);"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"     * Clears storage file of its contents and rewrites all tasks to storage file."},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to clear storage file or failed to write a task to storage file."},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"    public void rewriteTasks() throws DukeException {"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        storage.clearFile();"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"        for (Task task : this.list) {"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"            storage.writeTaskToFile(task);"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"     * Applies a function to all tasks in the list."},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"     * @param funct function to be applied."},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"    public void forEach(Consumer\u003cTask\u003e funct) {"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"        for (Task task : list) {"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"            funct.accept(task);"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"     * Returns an ArrayList of tasks in which all tasks satisfy the predicate."},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"     * @param predicate the function used to filter tasks."},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"     * @return ArrayList of filtered tasks."},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"    public ArrayList\u003cTask\u003e filter(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"        for (Task task : list) {"},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"            if (predicate.test(task)) {"},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"                output.add(task);"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"        return output;"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":107}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"     * Prints each string in output array in a new line, using duke\u0027s style."},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"     * @param output array of strings to be printed out"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public static void printWithStyle(String[] output) {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        for (String str : output) {"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"            System.out.println(\"    \" + str);"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    public static void printWithStyle(List\u003cString\u003e output) {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        for (String str : output) {"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"            System.out.println(\"    \" + str);"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"     * Prints the output string using duke\u0027s style."},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"     * @param output string to be printed out"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    public static void printWithStyle(String output) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    \" + output);"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        System.out.println(\"    ________________________________________________________________\");"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":36}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.task.ToDo;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"public class AddCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    public AddCommand(String[] commandSplit) {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     * Checks what type of add command it is (event, to do, deadline) then call the respective functions"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"     * e.g. addDeadline to add a new task."},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if adding a task failed."},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d commandSplit[0];"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        if (keyword.equals(\"deadline\")) {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"            try {"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"                addDeadline(list);"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"            } catch (TaskException e) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"                throw new DukeException(\"Failed to add deadline to tasks. \" + e.getMessage());"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"todo\")) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            addToDo(list);"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"                addEvent(list);"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"            } catch (TaskException e) {"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"                throw new DukeException(\"Failed to add event to tasks. \" + e.getMessage());"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    private void addDeadline(TaskList list) throws DukeException, TaskException {"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"        //Index of /by keyword"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        int byIndex \u003d 0;"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c userInputSplit.length; i++) {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"            if (userInputSplit[i].equals(\"/by\")) {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"                byIndex \u003d i;"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        if (byIndex \u003d\u003d 0) {"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing /by keyword for new deadline.\");"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        } else if (byIndex \u003d\u003d 1) {"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        if (byIndex \u003d\u003d userInputSplit.length - 1) {"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing date of the deadline.\");"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, byIndex - 1);"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"        String date \u003d Helper.join(userInputSplit, byIndex + 1, userInputSplit.length - 1);"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        list.add(new Deadline(task, date));"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"    private void addToDo(TaskList list) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        if (userInputSplit.length \u003c\u003d 1) {"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, userInputSplit.length - 1);"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"        list.add(new ToDo(task));"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"    private void addEvent(TaskList list) throws DukeException, TaskException {"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"        //Index of /at keyword"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"        int atIndex \u003d 0;"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c userInputSplit.length; i++) {"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"            if (userInputSplit[i].equals(\"/at\")) {"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"                atIndex \u003d i;"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"        if (atIndex \u003d\u003d 0) {"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing /at keyword for new Event.\");"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"        } else if (atIndex \u003d\u003d 1) {"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of an Event cannot be empty.\");"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"        if (atIndex \u003d\u003d userInputSplit.length - 1) {"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing date of the Event.\");"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, atIndex - 1);"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"        String date \u003d Helper.join(userInputSplit, atIndex + 1, userInputSplit.length - 1);"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"        list.add(new Event(task, date));"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":94}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"public class ByeCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    public ByeCommand(String[] commandSplit) {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * Rewrites all Tasks in the list to the storage before saying bidding user goodbye."},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to rewrite tasks."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        list.rewriteTasks();"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(\"Bye. Hope to see you again soon!\");"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":21}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    /** User command that is split by spaces */"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    String[] commandSplit;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public Command(String[] commandSplit) {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        this.commandSplit \u003d commandSplit;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    public boolean isExit() {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        return this.commandSplit.length \u003d\u003d 1 \u0026\u0026 this.commandSplit[0].equals(\"bye\");"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    public abstract void execute(TaskList list) throws DukeException;"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":19}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    public DeleteCommand(String[] commandSplit) {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * Deletes the user specified task from the task list."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to remove task from task list."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"            int taskNumber \u003d Integer.parseInt(commandSplit[1]);"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            list.remove(taskNumber);"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        } catch (Exception e) {"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter a valid task number to delete a task.\");"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":25}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    public DoneCommand(String[] commandSplit) {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * Marks the user defined task as done."},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to mark task as done."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            int taskNumber \u003d Integer.parseInt(commandSplit[1]);"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"            list.done(taskNumber);"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"        } catch (Exception e) {"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter a valid task number to mark a task as done.\");"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":27}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.Collectors;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    public FindCommand(String[] commandSplit) {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"     * Filters the task list for tasks which descriptions contain the keyword provided by user."},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d Helper.join(this.commandSplit, 1);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d list.filter(task -\u003e task.isDescriptionContainsString(keyword));"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        List\u003cString\u003e tasksAsString \u003d filteredList.stream().map(Task::toString).collect(Collectors.toList());"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        tasksAsString.add(0, \"Found \" + tasksAsString.size() + \" matching task(s):\");"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(tasksAsString);"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":30}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.Collectors;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"public class ListCommand extends Command {"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public ListCommand(String[] commandSplit) {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * Lists out all tasks in the task list if user did not provide a date."},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * Else, lists out only tasks that are marked with the given date."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if an incorrect date format is provided."},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    public void execute(TaskList list) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        //Check if command includes an optional date argument"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        boolean hasDate \u003d commandSplit.length \u003e 1;"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        if (hasDate) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            String enteredDate \u003d Helper.join(this.commandSplit, 1, this.commandSplit.length - 1);"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            LocalDate queryDate;"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd][MMM dd yyyy]\");"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"                queryDate \u003d LocalDate.parse(enteredDate, formatter);"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"                throw new DukeException(\"Incorrect date format. \" + e.getMessage());"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            ArrayList\u003cTask\u003e matchedTasks \u003d list.filter(x -\u003e !x.getDate().equals(LocalDate.MIN)"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"                    \u0026\u0026 x.getDate().equals(queryDate));"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"            Ui.printWithStyle(matchedTasks.stream().map(Task::toString).collect(Collectors.toList()));"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"            list.printList();"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":47}},{"path":"src/main/java/duke/task/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"public abstract class DatedTask extends Task {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    LocalDate date;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Checks if the provided date is of correct format then creates a new DatedTask with the specified"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * task description and due date."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param task the task description"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param date due date"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @throws TaskException if user provides incorrect date format for date."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public DatedTask(String task, String date) throws TaskException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        super(task);"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd][MMM dd yyyy]\");"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"            this.date \u003d LocalDate.parse(date, formatter);"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"            throw new TaskException(\"Incorrect date format. \" + e.getMessage());"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    protected static String formatDate(LocalDate date) {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return date.format(formatter);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    public LocalDate getDate() {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        return date;"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        return super.toString();"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":41}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class Deadline extends DatedTask {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    public Deadline(String task, String date) throws TaskException {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"        super(task, date);"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + formatDate(this.date) + \")\";"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":13}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class Event extends DatedTask {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    public Event(String task, String date) throws TaskException {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"        super(task, date);"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + formatDate(this.date) + \")\";"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""}],"authorContributionMap":{"swayongshen":15}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":" * Skeleton class for all tasks."},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    String description;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    boolean isDone;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    * Marks the task as done and prints out to console that task is done."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    */"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public void done() {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        Ui.printWithStyle(new String[] {\"Nice! I\u0027ve marked this task as done:\", this.toString()});"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    public boolean isDescriptionContainsString(String input) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return this.description.contains(input);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    public LocalDate getDate() {"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        return LocalDate.MIN;"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        return isDone ? \"[X] \" + this.description : \"[ ] \" + this.description;"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":40}},{"path":"src/main/java/duke/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class TaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"    public TaskException(String error) {"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"        super(error);"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":7}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"public class ToDo extends Task {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    public ToDo(String task) {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"        super(task);"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":15}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"public class ParserTest {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    public void todo_correctInput_success() throws Exception {"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"        String input \u003d \"[T] [ ] deadline bro /by 20 Nov 2020\";"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[T] [ ] deadline bro /by 20 Nov 2020\", Parser.stringToTask(input).toString());"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":14}},{"path":"src/test/java/duke/task/DatedTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class DatedTaskTest {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public void deadlineDateInputOutput_correctInput_success() throws TaskException {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        DatedTask dl \u003d new Deadline(\"Test description\", \"Nov 20 2020\");"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[D] [ ] Test description (by: Nov 20 2020)\", dl.toString());"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public void eventDateInputOutput_correctInput_success() throws TaskException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        DatedTask dl \u003d new Event(\"Test description\", \"Nov 20 2020\");"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[E] [ ] Test description (at: Nov 20 2020)\", dl.toString());"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":23}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"swayongshen":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"if [ -e \"./ACTUAL\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    rm ACTUAL"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"# run the program, feed commands from input file and redirect the output to the ACTUAL"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"java -classpath ../bin duke.Duke \u003c input \u003e ACTUAL"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"cp EXPECTED EXPECTED-UNIX"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"dos2unix ACTUAL EXPECTED-UNIX"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"diff ACTUAL EXPECTED-UNIX"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"swayongshen":7,"-":31}}]
