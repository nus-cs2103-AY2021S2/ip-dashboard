[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"swayongshen":2,"-":21}},{"path":"Test.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":"ECHO Testing your lab..."},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"java -jar checkstyle-8.2-all.jar -c cs2030_checks.xml *.java"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"@PAUSE"}],"authorContributionMap":{"swayongshen":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    id \u0027application\u0027"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"mainClassName \u003d \u0027duke/Launcher\u0027"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"sourceCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"targetCompatibility \u003d JavaVersion.VERSION_11"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"repositories {"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    mavenCentral()"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"checkstyle {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"test {"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    useJUnitPlatform()"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"dependencies {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    String jUnitVersion \u003d \u00275.4.0\u0027"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"    archiveName \u003d \u0027ip.jar\u0027"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"defaultTasks \u0027clean\u0027, \u0027test\u0027"}],"authorContributionMap":{"swayongshen":56}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"### Add a to do task. "},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"The basic task to add to Duke is a to do task which you can "},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"mark as done when it is complete."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"![To Do Task](./Todo.png)"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"### Add a dated task."},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"You may also add dated tasks for Duke to remember. "},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"You can either add a deadline or an event."},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"![Deadline and Event](./DeadlineEvent.png)"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"### View and delete tasks"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"Once you have added some of the tasks described above, "},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"you may view or delete them using Duke."},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"![View and Delete](./ViewDelete.png)"},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"### Search for tasks"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"You can search for tasks containing your given keyword."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"![Find](./find.png)"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"### Sort tasks"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"You can sort your tasks based on the date or the task description,"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"in ascending or descending order."},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"![Sort](./sort.png)"},{"lineNumber":33,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"### 1. `todo` - Add to do task"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"Adds a new to do task to the list of tasks."},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"**Example of usage**: "},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"`todo (task description)`"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"Duke responses to confirm that the to do task has"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"been added successfully."},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"Got it: I\u0027ve added this task:"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"   [T][ ] (task description)"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"Now you have (number of tasks) in the list."},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"### 2. `deadline` - Add new deadline"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"Adds a new deadline to the list of tasks."},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"`deadline (deadline description) /by (date)`"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"**note:** Date must be in ``dd/MM/yyyy]``, ``yyyy-MM-dd`` or `MMM dd yyyy` format."},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"Duke responses to confirm that the deadline has"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"been added successfully."},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"Got it: I\u0027ve added this task:"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"   [D][ ] (deadline description) (by:(date))"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"Now you have (number of tasks) in the list."},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"### 3. `event` - Add new event"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"Adds a new event to the list of tasks."},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"`event (event description) /at (date)`"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"**note:** Date must be in ``dd/MM/yyyy]``, ``yyyy-MM-dd`` or `MMM dd yyyy` format."},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"Duke responses to confirm that the event has"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"been added successfully."},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"Got it: I\u0027ve added this task:"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"   [E][ ] (event description) (at:(date))"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"Now you have (number of tasks) in the list."},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"### 4. `list` - List tasks"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"Lists all tasks that you have asked Duke to remember."},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"`list`"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"`list (date)`"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":108,"author":{"gitId":"swayongshen"},"content":"**note:** Date must be in ``dd/MM/yyyy]``, ``yyyy-MM-dd`` or `MMM dd yyyy` format."},{"lineNumber":109,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":110,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":111,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":112,"author":{"gitId":"swayongshen"},"content":"Duke lists all the tasks if no date is provided or lists all tasks that happen on the given date."},{"lineNumber":113,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":114,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":115,"author":{"gitId":"swayongshen"},"content":"Here are the tasks in your list:"},{"lineNumber":116,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"1. (Task)"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":"2. (Task)"},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"Found the following tasks on 2021-11-30:"},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":"1. (Task)"},{"lineNumber":123,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":124,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":125,"author":{"gitId":"swayongshen"},"content":"### 5. `done` - Mark task as done"},{"lineNumber":126,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":127,"author":{"gitId":"swayongshen"},"content":"Marks the task with the given task number as done."},{"lineNumber":128,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":129,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":130,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":131,"author":{"gitId":"swayongshen"},"content":"`done (task number)`"},{"lineNumber":132,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":133,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":134,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":135,"author":{"gitId":"swayongshen"},"content":"Duke responses to confirm that the task has been marked"},{"lineNumber":136,"author":{"gitId":"swayongshen"},"content":"as done successfully. The box beside the type of task will "},{"lineNumber":137,"author":{"gitId":"swayongshen"},"content":"also be checked."},{"lineNumber":138,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":139,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":140,"author":{"gitId":"swayongshen"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":141,"author":{"gitId":"swayongshen"},"content":"(Task)"},{"lineNumber":142,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":143,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":144,"author":{"gitId":"swayongshen"},"content":"### 6. `delete` - Delete a task"},{"lineNumber":145,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":146,"author":{"gitId":"swayongshen"},"content":"Deletes the task with the given (1 or more) task numbers from"},{"lineNumber":147,"author":{"gitId":"swayongshen"},"content":"Duke."},{"lineNumber":148,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":149,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":150,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":151,"author":{"gitId":"swayongshen"},"content":"`delete (task number) ([optional] task number) ...`"},{"lineNumber":152,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":153,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":154,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":155,"author":{"gitId":"swayongshen"},"content":"Duke responses to confirm that the tasks with the task numbers that you"},{"lineNumber":156,"author":{"gitId":"swayongshen"},"content":"have entered have been deleted successfully. "},{"lineNumber":157,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":158,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":159,"author":{"gitId":"swayongshen"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":160,"author":{"gitId":"swayongshen"},"content":"(Task)"},{"lineNumber":161,"author":{"gitId":"swayongshen"},"content":"Now you have (number of tasks) in the list."},{"lineNumber":162,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":163,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":164,"author":{"gitId":"swayongshen"},"content":"### 7. `find` - Find a task"},{"lineNumber":165,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":166,"author":{"gitId":"swayongshen"},"content":"Filters through all tasks in Duke to find tasks which contain"},{"lineNumber":167,"author":{"gitId":"swayongshen"},"content":"the keywords that you provide."},{"lineNumber":168,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":169,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":170,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":171,"author":{"gitId":"swayongshen"},"content":"`find (keywords)`"},{"lineNumber":172,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":173,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":174,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":175,"author":{"gitId":"swayongshen"},"content":"Duke lists out all tasks that contain your keywords."},{"lineNumber":176,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":177,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":178,"author":{"gitId":"swayongshen"},"content":"Found (number of matches) matching tasks(s):"},{"lineNumber":179,"author":{"gitId":"swayongshen"},"content":"(Task)"},{"lineNumber":180,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":181,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":182,"author":{"gitId":"swayongshen"},"content":"### 8. `sort` - Sort tasks"},{"lineNumber":183,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":184,"author":{"gitId":"swayongshen"},"content":"Sorts the list of tasks remembered by Duke based on your input."},{"lineNumber":185,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":186,"author":{"gitId":"swayongshen"},"content":"**Example of usage**:"},{"lineNumber":187,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":188,"author":{"gitId":"swayongshen"},"content":"You may specify the sort direction using `asc` or `desc`."},{"lineNumber":189,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":190,"author":{"gitId":"swayongshen"},"content":"To sort the list by date:"},{"lineNumber":191,"author":{"gitId":"swayongshen"},"content":"`sort date (sort direction)` "},{"lineNumber":192,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":193,"author":{"gitId":"swayongshen"},"content":"To sort the list by the task description: `sort task (sort direction)`"},{"lineNumber":194,"author":{"gitId":"-"},"content":""},{"lineNumber":195,"author":{"gitId":"-"},"content":""},{"lineNumber":196,"author":{"gitId":"swayongshen"},"content":"**Expected outcome**:"},{"lineNumber":197,"author":{"gitId":"-"},"content":""},{"lineNumber":198,"author":{"gitId":"swayongshen"},"content":"Duke lists out all tasks after they have been sorted."},{"lineNumber":199,"author":{"gitId":"-"},"content":""},{"lineNumber":200,"author":{"gitId":"swayongshen"},"content":"```"},{"lineNumber":201,"author":{"gitId":"swayongshen"},"content":"The list has been sorted by (date/description) in"},{"lineNumber":202,"author":{"gitId":"swayongshen"},"content":"(ascending/descending) order."},{"lineNumber":203,"author":{"gitId":"swayongshen"},"content":"Here are the tasks in your list:"},{"lineNumber":204,"author":{"gitId":"-"},"content":""},{"lineNumber":205,"author":{"gitId":"swayongshen"},"content":"1. (Task)"},{"lineNumber":206,"author":{"gitId":"swayongshen"},"content":"..."},{"lineNumber":207,"author":{"gitId":"swayongshen"},"content":"```"}],"authorContributionMap":{"swayongshen":194,"-":13}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":":end"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":":omega"}],"authorContributionMap":{"swayongshen":89}},{"path":"src/main/java/duke/CallbackFunction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class CallbackFunction implements Runnable {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    private final Runnable callback;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"     * Initializes a CallbackFunction with a Runnable."},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"     * @param callback the Runnable to be run when CallbackFunction.run() is executed."},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public CallbackFunction(Runnable callback) {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        this.callback \u003d callback;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     * Returns a CallbackFunction which does nothing when run."},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     * @return the empty CallbackFunction"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    public static CallbackFunction empty() {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        return new CallbackFunction(null);"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     * Runs the callback function."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    public void run() {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        if (!(this.callback \u003d\u003d null)) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"            this.callback.run();"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":32}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    /** Stores list of tasks */"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    private TaskList list;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Initializes a Duke object with an empty TaskList."},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    public Duke() {"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"            this.list \u003d new TaskList();"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        } catch (DukeException e) {"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"            System.err.println(e.getMessage());"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * Greets the user"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * @return greeting message."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    public String greet() {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        return \"Hello, welcome to Duke\";"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     * Executes the given command."},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"     * @param command command to be executed."},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"     * @return the pair containing the string response as well as a CallbackFunction that can be run."},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if there is an error executing the command."},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e executeCommand(Command command) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"        return command.execute(this.list);"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"     * Provides responses to commands that are passed in by the user."},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"     * @param input the user input."},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"     * @return response that duke has, corresponding to the user input as well as a CallbackFunction that can be run."},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e getResponse(String input) {"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        Command command;"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"            command \u003d Parser.handleInput(input);"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"            Pair\u003cString, CallbackFunction\u003e response \u003d this.executeCommand(command);"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            assert response !\u003d null \u0026\u0026 response.getKey().length() \u003e 0 : \"Duke must always respond with something\";"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"            return response;"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(e.getMessage(), CallbackFunction.empty());"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":53,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":" * Abstracts away exceptions arising due to Duke."},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    public DukeException(String error) {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"        super(error);"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":10}},{"path":"src/main/java/duke/Helper.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.IntStream;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":" * Contains helper functions that are used across several classes."},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"public class Helper {"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Joins a sub-array of strings into 1 string where each element in the sub-array is separated by a space."},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param arr array containing sub-array to join"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param start start index of sub-array to join"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @param end end index (inclusive) of sub-array to join"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     * @return string of sub-array joined with space"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    public static String join(String[] arr, int start, int end) {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        StringBuilder outputBuilder \u003d new StringBuilder();"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d start; i \u003c\u003d end; i++) {"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"            outputBuilder.append(arr[i]);"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"            if (i \u003c end) {"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"                outputBuilder.append(\" \");"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        return outputBuilder.toString();"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     * Joins a sub-array of strings into 1 string where each element in the sub-array is separated by a space."},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"     * The sub-array consists of every element from the provided start index to the end of the array."},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"     * @param arr array containing sub-array to join"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     * @param start start index of sub-array to join"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"     * @return string of sub-array joined with space"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    public static String join(String[] arr, int start) {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        return join(arr, start, arr.length - 1);"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"     * Gets the index of a given value in a given array."},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"     * @param arr array to be searched."},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"     * @param value value to look for."},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     * @param \u003cT\u003e type of the value and the type which the array contains."},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"     * @return the index of the value within the array."},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"    public static \u003cT\u003e int arrayIndexOf(T[] arr, T value) {"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"        IntStream myStream \u003d IntStream.range(0, arr.length);"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        //Filters the stream to get indices of array which has elements equal to value that we are looking for."},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        IntStream filteredStream \u003d myStream.filter(i -\u003e arr[i].equals(value));"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"        //First index in the stream."},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        int firstIndex \u003d filteredStream.findFirst().orElse(-1);"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"        return firstIndex;"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"     * Concatenates the input strings with a new line between them, except the last string."},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"     * @param input an array of strings to be formatted."},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"     * @return the formatted string."},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"    public static String formatStrings(String ... input) {"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"            output.append(input[i]);"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"            if (i !\u003d input.length - 1) {"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"                output.append(System.lineSeparator());"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"        return output.toString();"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"     * Concatenates the input strings from the List with a line separator between them."},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"     * @param input the List of Strings to be formatted."},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"     * @return the formatted String."},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"    public static String formatStrings(List\u003cString\u003e input) {"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c input.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"            output.append(input.get(i));"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"            if (i !\u003d input.size() - 1) {"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"                output.append(System.lineSeparator());"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"        return output.toString();"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"    public static boolean isInteger(String s) {"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"        return isInteger(s, 10);"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":95,"author":{"gitId":"-"},"content":"    //@@author swayongshen-reused"},{"lineNumber":96,"author":{"gitId":"-"},"content":"    //Reused from https://stackoverflow.com/questions/5439529/determine-if-a-string-is-an-integer-in-java/5439547"},{"lineNumber":97,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"-"},"content":"     * Checks if a given string is an integer"},{"lineNumber":99,"author":{"gitId":"-"},"content":"     * @param s string to be checked."},{"lineNumber":100,"author":{"gitId":"-"},"content":"     * @param radix the base of the number e.g. 10 for decimal integers."},{"lineNumber":101,"author":{"gitId":"-"},"content":"     * @return true if the string is an integer."},{"lineNumber":102,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"-"},"content":"    public static boolean isInteger(String s, int radix) {"},{"lineNumber":104,"author":{"gitId":"-"},"content":"        if (s.isEmpty()) {"},{"lineNumber":105,"author":{"gitId":"-"},"content":"            return false;"},{"lineNumber":106,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"-"},"content":"        for (int i \u003d 0; i \u003c s.length(); i++) {"},{"lineNumber":108,"author":{"gitId":"-"},"content":"            if (i \u003d\u003d 0 \u0026\u0026 s.charAt(i) \u003d\u003d \u0027-\u0027) {"},{"lineNumber":109,"author":{"gitId":"-"},"content":"                if (s.length() \u003d\u003d 1) {"},{"lineNumber":110,"author":{"gitId":"-"},"content":"                    return false;"},{"lineNumber":111,"author":{"gitId":"-"},"content":"                } else {"},{"lineNumber":112,"author":{"gitId":"-"},"content":"                    continue;"},{"lineNumber":113,"author":{"gitId":"-"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"-"},"content":"            if (Character.digit(s.charAt(i), radix) \u003c 0) {"},{"lineNumber":116,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":117,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":120,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"swayongshen":94,"-":27}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.ui.Main;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"public class Launcher {"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public static void main(String[] args) {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.command.ByeCommand;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import duke.command.SortCommand;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import duke.task.Deadline;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import duke.task.Event;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"import duke.task.ToDo;"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    static final String TODO_REGEX \u003d \"^\\\\[T\\\\] \\\\[(?: |X)\\\\] ..*$\";"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    static final String DEADLINE_REGEX \u003d \"^\\\\[D\\\\] \\\\[(?: |X)\\\\] ..* \\\\(by: ..*\\\\)$\";"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    static final String EVENT_REGEX \u003d \"^\\\\[E\\\\] \\\\[(?: |X)\\\\] ..* \\\\(at: ..*\\\\)$\";"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"     * Parses the user input to find and handle commands containing keywords."},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"     * @param userInput user command input to be parsed"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if command is in an incorrect format."},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    public static Command handleInput(String userInput) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        String[] splitBySpaces \u003d userInput.trim().split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d splitBySpaces[0];"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        if (keyword.equals(\"list\")) {"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            return new ListCommand(splitBySpaces);"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"done\")) {"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"            return new DoneCommand(splitBySpaces);"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"deadline\") || keyword.equals(\"todo\") || keyword.equals(\"event\")) {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"            return new AddCommand(splitBySpaces);"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"delete\")) {"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"            return new DeleteCommand(splitBySpaces);"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"bye\")) {"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"            return new ByeCommand(splitBySpaces);"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"find\")) {"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"            return new FindCommand(splitBySpaces);"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"        } else if (keyword.equals(\"sort\")) {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"            return new SortCommand(splitBySpaces);"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"    private static ToDo parseTodo(String[] inputSplitBySpaces) {"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"        //[ ] Task description"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1);"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        // Refer to the above comment, task description starts at index 4."},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"        int indexOfTaskDescription \u003d 4;"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"        String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(indexOfTaskDescription);"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"        return new ToDo(taskDescription);"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"    private static Deadline parseDeadline(String[] inputSplitBySpaces) throws TaskException {"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        //Index of /by"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"        int byIndex \u003d Helper.arrayIndexOf(inputSplitBySpaces, \"(by:\");"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        //E.g. [ ] sample_description"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1, byIndex - 1);"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"        String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(4);"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        String dueDateWithClosingBracket \u003d Helper.join(inputSplitBySpaces, byIndex + 1,"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"                inputSplitBySpaces.length - 1);"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"        String dueDate \u003d dueDateWithClosingBracket.substring(0, dueDateWithClosingBracket.length() - 1);"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"        return new Deadline(taskDescription, dueDate);"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"    private static Event parseEvent(String[] inputSplitBySpaces) throws TaskException {"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"        //Index of /at"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"        int atIndex \u003d Helper.arrayIndexOf(inputSplitBySpaces, \"(at:\");"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        //E.g. [ ] sample_description"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"        String taskDescriptionWithDoneBrackets \u003d Helper.join(inputSplitBySpaces, 1, atIndex - 1);"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        String taskDescription \u003d taskDescriptionWithDoneBrackets.substring(4);"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        String eventDateWithClosingBracket \u003d Helper.join(inputSplitBySpaces, atIndex + 1,"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"                inputSplitBySpaces.length - 1);"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"        String eventDate \u003d eventDateWithClosingBracket.substring(0,"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"                eventDateWithClosingBracket.length() - 1);"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"        return new Event(taskDescription, eventDate);"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"     * Parses input string as a duke.task.Task."},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"     * @param input input string to be parsed."},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"     * @return duke.task.Task object corresponding to input string."},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"    public static Task stringToTask(String input) throws TaskException, DukeException {"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"        Pattern toDoPattern \u003d Pattern.compile(TODO_REGEX);"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(DEADLINE_REGEX);"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"        Pattern eventPattern \u003d Pattern.compile(EVENT_REGEX);"},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"        boolean matchDeadline \u003d deadlinePattern.matcher(input).find();"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"        boolean matchEvent \u003d eventPattern.matcher(input).find();"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"        boolean matchTodo \u003d toDoPattern.matcher(input).find();"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"        //If it is not deadline, todo or event, it is invalid task entry."},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"        if (!matchDeadline \u0026\u0026 !matchEvent \u0026\u0026 !matchTodo) {"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"            throw new TaskException(\"Invalid task entry.\");"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        //User input delimited by space."},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"        String[] inputSplitBySpaces \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":108,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":109,"author":{"gitId":"swayongshen"},"content":"        //If it is a To Do command"},{"lineNumber":110,"author":{"gitId":"swayongshen"},"content":"        if (matchTodo) {"},{"lineNumber":111,"author":{"gitId":"swayongshen"},"content":"            return parseTodo(inputSplitBySpaces);"},{"lineNumber":112,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":114,"author":{"gitId":"swayongshen"},"content":"        //deadline task"},{"lineNumber":115,"author":{"gitId":"swayongshen"},"content":"        if (matchDeadline) {"},{"lineNumber":116,"author":{"gitId":"swayongshen"},"content":"            return parseDeadline(inputSplitBySpaces);"},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"        //event task"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"        return parseEvent(inputSplitBySpaces);"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":122}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import java.nio.file.Paths;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    private static final String LIST_FILE_PATH \u003d \"storage/\";"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    private static final String LIST_FILE \u003d LIST_FILE_PATH + \"list.txt\";"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * Creates the storage file directory in filesystem if it does not exist."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException when fail to create directory."},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    public Storage() throws DukeException {"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        //Create directory if not exist"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        Path path \u003d Paths.get(LIST_FILE_PATH);"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"            Files.createDirectories(path);"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"            //Create file if not already exist."},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"            File file \u003d new File(LIST_FILE);"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"            if (!file.exists()) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"                file.createNewFile();"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to create storage directory. \" + e.getMessage());"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"     * Returns a FileWriter object to allow for writing to file. If clearFile is not true, FileWriter object"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"     * will be in append mode so that file will not be overwritten."},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"     * @param clearFile determines whether to overwrite file."},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"     * @return FileWriter object to write to file."},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to access the file."},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"    private FileWriter getFileWriter(boolean clearFile) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"            FileWriter fw;"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            if (!clearFile) {"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"                fw \u003d new FileWriter(LIST_FILE, true);"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"            } else {"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"                fw \u003d new FileWriter(LIST_FILE);"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"            return fw;"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to access file. \" + e.getMessage());"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"     * Returns a FileWriter object which appends to the storage file."},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"     * @return FileWriter which appends to storage file."},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to access storage file."},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"    private FileWriter getFileWriter() throws DukeException {"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        return getFileWriter(false);"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"     * Reads tasks line by line from the storage and stores and returns new Task object in an ArrayList"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"     * after parsing the lines."},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"     * @return an ArrayList of task objects of tasks that are read from the storage."},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if a task from storage is incorrectly formatted or failed to read storage file."},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":"    public ArrayList\u003cTask\u003e readTasksFromFile() throws DukeException {"},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"        File tasks \u003d new File(LIST_FILE);"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        assert tasks.exists() : \"Storage file must exist\";"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"        Scanner s;"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"            s \u003d new Scanner(tasks);"},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"            while (s.hasNext()) {"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"                newList.add(Parser.stringToTask(s.nextLine()));"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"            s.close();"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"            return newList;"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"        } catch (TaskException | FileNotFoundException e) {"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"     * Appends the task to the end of the storage file."},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"     * @param task Task to be appended."},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to write task to storage."},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"    public void writeTaskToFile(Task task) throws DukeException {"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"        FileWriter fw \u003d getFileWriter();"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"            fw.write(task.toString());"},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"            //Add a newline"},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"            fw.append(System.getProperty(\"line.separator\"));"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"            fw.close();"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException | NullPointerException e) {"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Error writing task to storage/list.txt \" + e.getMessage());"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":109,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"swayongshen"},"content":"     * Clears the storage file of its contents."},{"lineNumber":111,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to read or write to storage file.."},{"lineNumber":112,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"swayongshen"},"content":"    public void clearFile() throws DukeException {"},{"lineNumber":114,"author":{"gitId":"swayongshen"},"content":"        FileWriter fw \u003d getFileWriter(true);"},{"lineNumber":115,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"swayongshen"},"content":"            fw.close();"},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to clear file of contents. \" + e.getMessage());"},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":121}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.function.Consumer;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskDateComparator;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskDescriptionComparator;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    private final ArrayList\u003cTask\u003e list;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    private final Storage storage;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     * Reads task from storage and stores into an ArrayList"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if fail to read tasks from storage"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    public TaskList() throws DukeException {"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"        this.list \u003d storage.readTasksFromFile();"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"     * Adds a task to the list of tasks and prints to console the number of tasks in the list."},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"     * @param task the Task to be added to list."},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"     * @return response that task has been added."},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if fail to write the added task to storage."},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    public String add(Task task) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        this.list.add(task);"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        storage.writeTaskToFile(task);"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        return Helper.formatStrings("},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            \"Got it. I\u0027ve added this task:\","},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"            System.lineSeparator(),"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"            \"    \" + task.toString(),"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"            \"Now you have \" + this.list.size() + \" tasks in the list.\""},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"     * Marks a task as done and also rewrite all tasks in the storage to reflect this change."},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"     * @param taskNumber task number of the task to be marked as done."},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     * @return response that a task has been marked as done."},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to rewrite tasks to storage."},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"    public String done(int taskNumber) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"        String doneMsg \u003d this.list.get(taskNumber - 1).done();"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        rewriteTasks();"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        return doneMsg;"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"     * Removes a task from the list and prints to console number of tasks left in the list."},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"     * @param taskNumbers task numbers of tasks to be removed."},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"     * @return response that a task has been removed."},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if fail to rewrite tasks."},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"    public String remove(ArrayList\u003cInteger\u003e taskNumbers) throws DukeException {"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        //To store descriptions of removed tasks."},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cString\u003e descriptionsOfTasksToRemove \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"        //Sort the task numbers in descending order."},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        taskNumbers.sort(Collections.reverseOrder());"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"        //Remove tasks from list, starting from higher task numbers."},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        taskNumbers.forEach(taskNumber -\u003e {"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"            descriptionsOfTasksToRemove.add(this.list.get(taskNumber - 1).toString());"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"            this.list.remove(taskNumber - 1);"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"        });"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"        //Reverse descriptions back to ascending order (look nicer)."},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"        Collections.reverse(descriptionsOfTasksToRemove);"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"        //Rewrite all tasks"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        rewriteTasks();"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        //Return response"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":"        String header \u003d Helper.formatStrings("},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"            \"Noted. I\u0027ve removed this task:\","},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"            System.lineSeparator());"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"        String body \u003d Helper.formatStrings(descriptionsOfTasksToRemove);"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"        String footer \u003d System.lineSeparator() + \"Now you have \" + this.list.size() + \" tasks in the list.\";"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":"        return header + body + footer;"},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"     * Clears storage file of its contents and rewrites all tasks to storage file."},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to clear storage file or failed to write a task to storage file."},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"    public void rewriteTasks() throws DukeException {"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"        storage.clearFile();"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"        for (Task task : this.list) {"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":"            storage.writeTaskToFile(task);"},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":"     * Applies a function to all tasks in the list."},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"     * @param funct function to be applied."},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"    public void forEach(Consumer\u003cTask\u003e funct) {"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"        for (Task task : list) {"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"            funct.accept(task);"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":109,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"swayongshen"},"content":"     * Returns an ArrayList of tasks in which all tasks satisfy the predicate."},{"lineNumber":111,"author":{"gitId":"swayongshen"},"content":"     * @param predicate the function used to filter tasks."},{"lineNumber":112,"author":{"gitId":"swayongshen"},"content":"     * @return ArrayList of filtered tasks."},{"lineNumber":113,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"swayongshen"},"content":"    public ArrayList\u003cTask\u003e filter(Predicate\u003cTask\u003e predicate) {"},{"lineNumber":115,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":116,"author":{"gitId":"swayongshen"},"content":"        for (Task task : list) {"},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"            if (predicate.test(task)) {"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":"                output.add(task);"},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"        return output;"},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":124,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"swayongshen"},"content":"     * Sorts the list by dates of the tasks."},{"lineNumber":126,"author":{"gitId":"swayongshen"},"content":"     * @param isAscending sort ascending if true, else sort descending."},{"lineNumber":127,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"swayongshen"},"content":"    public String sortByDate(boolean isAscending) {"},{"lineNumber":129,"author":{"gitId":"swayongshen"},"content":"        if (isAscending) {"},{"lineNumber":130,"author":{"gitId":"swayongshen"},"content":"            this.list.sort(new TaskDateComparator());"},{"lineNumber":131,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"swayongshen"},"content":"            this.list.sort(new TaskDateComparator().reversed());"},{"lineNumber":133,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":135,"author":{"gitId":"swayongshen"},"content":"        String header \u003d \"The list has been sorted by date in \""},{"lineNumber":136,"author":{"gitId":"swayongshen"},"content":"                + (isAscending ? \"ascending\" : \"descending\") + \" order.\";"},{"lineNumber":137,"author":{"gitId":"swayongshen"},"content":"        String body \u003d this.toString();"},{"lineNumber":138,"author":{"gitId":"swayongshen"},"content":"        return Helper.formatStrings(header, body);"},{"lineNumber":139,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":141,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"swayongshen"},"content":"     * Sorts the list by description of the tasks."},{"lineNumber":143,"author":{"gitId":"swayongshen"},"content":"     * @param isAscending sort ascending if true, else sort descending."},{"lineNumber":144,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":145,"author":{"gitId":"swayongshen"},"content":"    public String sortByDescription(boolean isAscending) {"},{"lineNumber":146,"author":{"gitId":"swayongshen"},"content":"        if (isAscending) {"},{"lineNumber":147,"author":{"gitId":"swayongshen"},"content":"            this.list.sort(new TaskDescriptionComparator());"},{"lineNumber":148,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":149,"author":{"gitId":"swayongshen"},"content":"            this.list.sort(new TaskDescriptionComparator().reversed());"},{"lineNumber":150,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":152,"author":{"gitId":"swayongshen"},"content":"        String header \u003d \"The list has been sorted by description in \""},{"lineNumber":153,"author":{"gitId":"swayongshen"},"content":"                + (isAscending ? \"ascending\" : \"descending\") + \" order.\";"},{"lineNumber":154,"author":{"gitId":"swayongshen"},"content":"        String body \u003d this.toString();"},{"lineNumber":155,"author":{"gitId":"swayongshen"},"content":"        return Helper.formatStrings(header, body);"},{"lineNumber":156,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":158,"author":{"gitId":"swayongshen"},"content":"    public int size() {"},{"lineNumber":159,"author":{"gitId":"swayongshen"},"content":"        return this.list.size();"},{"lineNumber":160,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":162,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"swayongshen"},"content":"     * Formats tasks into a numbered list of tasks."},{"lineNumber":164,"author":{"gitId":"swayongshen"},"content":"     * @return a String representation of the TaskList."},{"lineNumber":165,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":166,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":167,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":168,"author":{"gitId":"swayongshen"},"content":"        //Empty list"},{"lineNumber":169,"author":{"gitId":"swayongshen"},"content":"        if (this.list.size() \u003d\u003d 0) {"},{"lineNumber":170,"author":{"gitId":"swayongshen"},"content":"            return \"Your list is empty!\";"},{"lineNumber":171,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":173,"author":{"gitId":"swayongshen"},"content":"        String[] printedArray \u003d new String[this.list.size() + 1];"},{"lineNumber":174,"author":{"gitId":"swayongshen"},"content":"        printedArray[0] \u003d \"Here are the tasks in your list:\" + System.lineSeparator();"},{"lineNumber":175,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c this.list.size(); i++) {"},{"lineNumber":176,"author":{"gitId":"swayongshen"},"content":"            String numberIndex \u003d String.valueOf(i + 1);"},{"lineNumber":177,"author":{"gitId":"swayongshen"},"content":"            String taskInString \u003d this.list.get(i).toString();"},{"lineNumber":178,"author":{"gitId":"swayongshen"},"content":"            String listEntry \u003d numberIndex + \".\" + taskInString;"},{"lineNumber":179,"author":{"gitId":"swayongshen"},"content":"            printedArray[i + 1] \u003d listEntry;"},{"lineNumber":180,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"swayongshen"},"content":"        return Helper.formatStrings(printedArray);"},{"lineNumber":182,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":183}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import duke.task.TaskException;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import duke.task.ToDo;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new AddCommand object."},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public AddCommand(String[] commandSplit) {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit.length \u003e 1 \u0026\u0026 isValidAddKeyword(commandSplit[0]) : \"Add command should have valid keyword.\";"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    private static boolean isValidAddKeyword(String keyword) {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        Set\u003cString\u003e validKeywords \u003d new HashSet\u003c\u003e(Arrays.asList(\"deadline\", \"event\", \"todo\"));"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        return validKeywords.contains(keyword);"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     * Checks what type of add command it is (event, to do, deadline) then call the respective functions"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"     * e.g. addDeadline to add a new task."},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"     * @return response that the task has been added."},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if adding a task failed."},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d commandSplit[0];"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"        //Deadline"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        if (keyword.equals(\"deadline\")) {"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"                return new Pair\u003c\u003e(addDeadline(list), CallbackFunction.empty());"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"            } catch (TaskException e) {"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"                throw new DukeException(\"Failed to add deadline to tasks. \" + e.getMessage());"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        //To do"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"        if (keyword.equals(\"todo\")) {"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(addToDo(list), CallbackFunction.empty());"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"        //Event"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(addEvent(list), CallbackFunction.empty());"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        } catch (TaskException e) {"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Failed to add event to tasks. \" + e.getMessage());"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"    private Integer getKeywordIndex(String keyword, String[] arr) {"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"        int keywordIndex \u003d 0;"},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 0; i \u003c arr.length; i++) {"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":"            if (arr[i].equals(keyword)) {"},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"                keywordIndex \u003d i;"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"        return keywordIndex;"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":76,"author":{"gitId":"swayongshen"},"content":"    private String addDeadline(TaskList list) throws DukeException, TaskException {"},{"lineNumber":77,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":78,"author":{"gitId":"swayongshen"},"content":"        //Index of /by keyword"},{"lineNumber":79,"author":{"gitId":"swayongshen"},"content":"        int byIndex \u003d getKeywordIndex(\"/by\", userInputSplit);"},{"lineNumber":80,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":81,"author":{"gitId":"swayongshen"},"content":"        //No by keyword."},{"lineNumber":82,"author":{"gitId":"swayongshen"},"content":"        if (byIndex \u003d\u003d 0) {"},{"lineNumber":83,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing /by keyword for new deadline.\");"},{"lineNumber":84,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":86,"author":{"gitId":"swayongshen"},"content":"        //by keyword immediately after deadline keyword"},{"lineNumber":87,"author":{"gitId":"swayongshen"},"content":"        if (byIndex \u003d\u003d 1) {"},{"lineNumber":88,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":89,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":91,"author":{"gitId":"swayongshen"},"content":"        //by keyword is the last word in input"},{"lineNumber":92,"author":{"gitId":"swayongshen"},"content":"        if (byIndex \u003d\u003d userInputSplit.length - 1) {"},{"lineNumber":93,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing date of the deadline.\");"},{"lineNumber":94,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":96,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, byIndex - 1);"},{"lineNumber":97,"author":{"gitId":"swayongshen"},"content":"        String date \u003d Helper.join(userInputSplit, byIndex + 1, userInputSplit.length - 1);"},{"lineNumber":98,"author":{"gitId":"swayongshen"},"content":"        return list.add(new Deadline(task, date));"},{"lineNumber":99,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":101,"author":{"gitId":"swayongshen"},"content":"    private String addToDo(TaskList list) throws DukeException {"},{"lineNumber":102,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":103,"author":{"gitId":"swayongshen"},"content":"        if (userInputSplit.length \u003c\u003d 1) {"},{"lineNumber":104,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":105,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, userInputSplit.length - 1);"},{"lineNumber":107,"author":{"gitId":"swayongshen"},"content":"        return list.add(new ToDo(task));"},{"lineNumber":108,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":110,"author":{"gitId":"swayongshen"},"content":"    private String addEvent(TaskList list) throws DukeException, TaskException {"},{"lineNumber":111,"author":{"gitId":"swayongshen"},"content":"        String[] userInputSplit \u003d this.commandSplit;"},{"lineNumber":112,"author":{"gitId":"swayongshen"},"content":"        //Index of /at keyword"},{"lineNumber":113,"author":{"gitId":"swayongshen"},"content":"        int atIndex \u003d getKeywordIndex(\"/at\", userInputSplit);"},{"lineNumber":114,"author":{"gitId":"swayongshen"},"content":"        if (atIndex \u003d\u003d 0) {"},{"lineNumber":115,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing /at keyword for new Event.\");"},{"lineNumber":116,"author":{"gitId":"swayongshen"},"content":"        } else if (atIndex \u003d\u003d 1) {"},{"lineNumber":117,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"OOPS!!! The description of an Event cannot be empty.\");"},{"lineNumber":118,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"swayongshen"},"content":"        if (atIndex \u003d\u003d userInputSplit.length - 1) {"},{"lineNumber":120,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Missing date of the Event.\");"},{"lineNumber":121,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"swayongshen"},"content":"        String task \u003d Helper.join(userInputSplit, 1, atIndex - 1);"},{"lineNumber":123,"author":{"gitId":"swayongshen"},"content":"        String date \u003d Helper.join(userInputSplit, atIndex + 1, userInputSplit.length - 1);"},{"lineNumber":124,"author":{"gitId":"swayongshen"},"content":"        return list.add(new Event(task, date));"},{"lineNumber":125,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":126}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.ui.Main;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"public class ByeCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new ByeCommand object."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    public ByeCommand(String[] commandSplit) {"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit[0].equals(\"bye\") : \"Bye command should have \\\"bye\\\" keyword.\";"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * Rewrites all Tasks in the list to the storage before bidding user goodbye and terminating program."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to rewrite tasks."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        list.rewriteTasks();"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        return new Pair\u003c\u003e(\"Bye. Hope to see you again soon!\", new CallbackFunction(() -\u003e {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"            /*"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"             * Uses a separate thread to stop the program so that the \"bye\" message will be updated"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"             * on user\u0027s screen."},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"             */"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            Thread thread \u003d new Thread(() -\u003e {"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"                try {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"                    Thread.sleep(1000);"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"                } catch (InterruptedException e) {"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"                    e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"                }"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"                Main.exit();"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"            });"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            thread.start();"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"        }));"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":43}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    /** User command that is split by spaces */"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    protected String[] commandSplit;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    public Command(String[] commandSplit) {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        this.commandSplit \u003d commandSplit;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    public abstract Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.IntStream;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new DeleteCommand object."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    public DeleteCommand(String[] commandSplit) {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit[0].equals(\"delete\") : \"Must have delete keyword\";"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    private static boolean isValidTaskNumber(String taskNumber, int listLength) {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        boolean isInteger \u003d Helper.isInteger(taskNumber);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        if (!isInteger) {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"            return false;"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        int integerIndex \u003d Integer.parseInt(taskNumber);"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return integerIndex \u003e 0 \u0026\u0026 integerIndex \u003c\u003d listLength;"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"     * Deletes the user specified task from the task list."},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to remove task from task list."},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        if (commandSplit.length \u003d\u003d 1) {"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter the task number of the task to delete.\");"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        //Check if user entered valid task numbers."},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"        boolean isValidTaskNumbers \u003d IntStream.range(1, commandSplit.length)"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"                .allMatch(index -\u003e isValidTaskNumber(commandSplit[index], list.size()));"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"        if (!isValidTaskNumbers) {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter correct task numbers of tasks to be deleted.\");"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        //Collate the task numbers of tasks to be deleted."},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cInteger\u003e taskNumbersToDelete \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        for (int i \u003d 1; i \u003c commandSplit.length; i++) {"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"            int taskNumber \u003d Integer.parseInt(commandSplit[i]);"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"            taskNumbersToDelete.add(taskNumber);"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"        return new Pair\u003c\u003e(list.remove(taskNumbersToDelete), CallbackFunction.empty());"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":61}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new DoneCommand object."},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    public DoneCommand(String[] commandSplit) {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit.length \u003e 1 \u0026\u0026 commandSplit[0].equals(\"done\")"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"                \u0026\u0026 commandSplit[1].chars().allMatch(Character::isDigit)"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"                : \"Must have done keyword and integer as argument\";"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * Marks the user defined task as done."},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if failed to mark task as done."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"            int taskNumber \u003d Integer.parseInt(commandSplit[1]);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(list.done(taskNumber), CallbackFunction.empty());"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter a valid task number to mark a task as done.\");"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":36}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new FindCommand object."},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    public FindCommand(String[] commandSplit) {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit.length \u003e\u003d 1 \u0026\u0026 commandSplit[0].equals(\"find\") : \"Must have find keyword.\";"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     * Filters the task list for tasks which descriptions contain the keyword provided by user."},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"     * @return The list of tasks containing the keyword, in String."},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) {"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        String keyword \u003d Helper.join(this.commandSplit, 1);"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        ArrayList\u003cTask\u003e filteredList \u003d list.filter(task -\u003e task.isDescriptionContainsString(keyword));"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        //Convert each task to String then collect them into a List."},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        List\u003cString\u003e tasksAsString \u003d filteredList.stream().map(Task::toString).collect(Collectors.toList());"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"        String header \u003d \"Found \" + tasksAsString.size() + \" matching task(s):\";"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"        //Add response header to front of tasks."},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        tasksAsString.add(0, header);"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"        return new Pair\u003c\u003e(Helper.formatStrings(tasksAsString), CallbackFunction.empty());"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":40}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import java.util.stream.Collectors;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"public class ListCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new ListCommand object."},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user command split by spaces."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    public ListCommand(String[] commandSplit) {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit.length \u003e\u003d 1 \u0026\u0026 commandSplit[0].equals(\"list\") : \"Must have list keyword\";"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"    private LocalDate parseDate(String date) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd][MMM dd yyyy]\");"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"            return LocalDate.parse(date, formatter);"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Incorrect date format. \" + e.getMessage());"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"     * Lists out all tasks in the task list if user did not provide a date."},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"     * Else, lists out only tasks that are marked with the given date."},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"     * @param list the task list."},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if an incorrect date format is provided."},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"        //Check if command includes an optional date argument"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"        boolean hasDate \u003d commandSplit.length \u003e 1;"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"        if (hasDate) {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"            String enteredDate \u003d Helper.join(this.commandSplit, 1, this.commandSplit.length - 1);"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            LocalDate queryDate \u003d parseDate(enteredDate);"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"            //Filter Tasks from TaskList against the date provided"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"            ArrayList\u003cTask\u003e matchedTasks \u003d list.filter(x -\u003e !x.getDate().equals(LocalDate.MIN)"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"                    \u0026\u0026 x.getDate().equals(queryDate));"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"            //Map each filtered Task with Task.toString()"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"            List\u003cString\u003e taskStrings \u003d matchedTasks.stream().map(Task::toString).collect(Collectors.toList());"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"            String response \u003d \"Found the following tasks on \" + queryDate.toString() + \":\""},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"                    + System.lineSeparator() + System.lineSeparator() + Helper.formatStrings(taskStrings);"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(response, CallbackFunction.empty());"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"            return new Pair\u003c\u003e(list.toString(), CallbackFunction.empty());"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":67}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.DukeException;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class SortCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Instantiates a new SortCommand object."},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * @param commandSplit user input split by spaces."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    public SortCommand(String[] commandSplit) {"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"        super(commandSplit);"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"        assert commandSplit[0].equals(\"sort\") : \"Must have sort keyword and sort parameter\";"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"     * Sorts the TaskList based on date or task description in ascending or descending order."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"     * @param list the TaskList to be sorted."},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"     * @return response that the list has been sorted."},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"     * @throws DukeException if parameter provided by user is incorrect."},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    public Pair\u003cString, CallbackFunction\u003e execute(TaskList list) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        //What parameter to sort by, e.g. date, task (description)"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        String sortParameter \u003d commandSplit[1];"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        //Ascending or descending"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"        String sortDirection \u003d commandSplit[2];"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        if (sortParameter.equals(\"date\")) {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"            if (sortDirection.equals(\"asc\") || sortDirection.equals(\"desc\")) {"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"                boolean isAscending \u003d sortDirection.equals(\"asc\");"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"                return new Pair\u003c\u003e(list.sortByDate(isAscending), CallbackFunction.empty());"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"            //Neither asc nor desc"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter a valid sort direction \\\"asc\\\" or \\\"desc\\\".\");"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"        if (sortParameter.equals(\"task\")) {"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"            if (sortDirection.equals(\"asc\") || sortDirection.equals(\"desc\")) {"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"                boolean isAscending \u003d sortDirection.equals(\"asc\");"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"                return new Pair\u003c\u003e(list.sortByDescription(isAscending), CallbackFunction.empty());"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"            //Neither asc nor desc"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"            throw new DukeException(\"Please enter a valid sort direction \\\"asc\\\" or \\\"desc\\\".\");"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        //Neither date nor task"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"        throw new DukeException(\"Please enter a valid sort parameter \\\"date\\\" or \\\"task\\\".\");"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":59}},{"path":"src/main/java/duke/task/DatedTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"public abstract class DatedTask extends Task {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"    protected LocalDate date;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"     * Checks if the provided date is of correct format then creates a new DatedTask with the specified"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"     * task description and due date."},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"     * @param task the task description"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"     * @param date due date"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * @throws TaskException if user provides incorrect date format for date."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public DatedTask(String task, String date) throws TaskException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        super(task);"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][yyyy-MM-dd][MMM dd yyyy]\");"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"            this.date \u003d LocalDate.parse(date, formatter);"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"            throw new TaskException(\"Incorrect date format. \" + e.getMessage());"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    protected static String formatDate(LocalDate date) {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return date.format(formatter);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"    public LocalDate getDate() {"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"        return date;"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        return super.toString();"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":41}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class Deadline extends DatedTask {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    public Deadline(String task, String date) throws TaskException {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"        super(task, date);"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        return \"[D] \" + super.toString() + \" (by: \" + formatDate(this.date) + \")\";"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":13}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class Event extends DatedTask {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    public Event(String task, String date) throws TaskException {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"        super(task, date);"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        return \"[E] \" + super.toString() + \" (at: \" + formatDate(this.date) + \")\";"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""}],"authorContributionMap":{"swayongshen":15}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.Helper;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":" * Skeleton class for all tasks."},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    protected String description;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    protected boolean isDone;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"     * Initializes an undone task with the given description."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"     * @param description description of the task."},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    public Task(String description) {"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"        this.isDone \u003d false;"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    * Marks the task as done and prints out to console that task is done."},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    */"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    public String done() {"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"        this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"        return Helper.formatStrings(\"Nice! I\u0027ve marked this task as done:\", this.toString());"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    public boolean isDescriptionContainsString(String input) {"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"        return this.description.toLowerCase().contains(input.toLowerCase());"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"    public LocalDate getDate() {"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        return LocalDate.MIN;"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"        String doneBracket \u003d isDone ? \"[X]\" : \"[ ]\";"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":"        return doneBracket + \" \" + this.description;"},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":45}},{"path":"src/main/java/duke/task/TaskDateComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":" * Comparator class to facilitate comparison of dates between Task objects."},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class TaskDateComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public int compare(Task o1, Task o2) {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        return o1.getDate().compareTo(o2.getDate());"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":15}},{"path":"src/main/java/duke/task/TaskDescriptionComparator.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"public class TaskDescriptionComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    public int compare(Task o1, Task o2) {"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"        return o1.description.compareTo(o2.description);"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":10}},{"path":"src/main/java/duke/task/TaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class TaskException extends Exception {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"    public TaskException(String error) {"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"        super(error);"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":7}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"    public ToDo(String task) {"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"        super(task);"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":13}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"        dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"        displayPicture.setImage(img);"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"    private void flip() {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"        Collections.reverse(tmp);"},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"        return new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"        db.flip();"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        return db;"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":63}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    public static void exit() {"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        Platform.exit();"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":"            MainWindow controller \u003d fxmlLoader.getController();"},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"            controller.setDuke(duke);"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"            controller.greet();"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"            stage.show();"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":41}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import duke.CallbackFunction;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"import duke.Duke;"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"import javafx.util.Pair;"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":" */"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"    private VBox dialogContainer;"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"swayongshen"},"content":"    private Button sendButton;"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"    private Duke duke;"},{"lineNumber":28,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":29,"author":{"gitId":"swayongshen"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/pepe.jpg\"));"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/gavin.png\"));"},{"lineNumber":31,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":32,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"swayongshen"},"content":"     * Initialises main window"},{"lineNumber":34,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitId":"swayongshen"},"content":"    public void initialize() {"},{"lineNumber":37,"author":{"gitId":"swayongshen"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":38,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":40,"author":{"gitId":"swayongshen"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":41,"author":{"gitId":"swayongshen"},"content":"        duke \u003d d;"},{"lineNumber":42,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":44,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"swayongshen"},"content":"     * Greets the user"},{"lineNumber":46,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"swayongshen"},"content":"    public void greet() {"},{"lineNumber":48,"author":{"gitId":"swayongshen"},"content":"        String greeting \u003d duke.greet();"},{"lineNumber":49,"author":{"gitId":"swayongshen"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"swayongshen"},"content":"                DialogBox.getDukeDialog(greeting, dukeImage)"},{"lineNumber":51,"author":{"gitId":"swayongshen"},"content":"        );"},{"lineNumber":52,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":54,"author":{"gitId":"swayongshen"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"swayongshen"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":56,"author":{"gitId":"swayongshen"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":57,"author":{"gitId":"swayongshen"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"swayongshen"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitId":"swayongshen"},"content":"    private void handleUserInput() {"},{"lineNumber":60,"author":{"gitId":"swayongshen"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":61,"author":{"gitId":"swayongshen"},"content":"        Pair\u003cString, CallbackFunction\u003e response \u003d duke.getResponse(input);"},{"lineNumber":62,"author":{"gitId":"swayongshen"},"content":"        String stringResponse \u003d response.getKey();"},{"lineNumber":63,"author":{"gitId":"swayongshen"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":64,"author":{"gitId":"swayongshen"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":65,"author":{"gitId":"swayongshen"},"content":"                DialogBox.getDukeDialog(stringResponse, dukeImage)"},{"lineNumber":66,"author":{"gitId":"swayongshen"},"content":"        );"},{"lineNumber":67,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":68,"author":{"gitId":"swayongshen"},"content":"        userInput.clear();"},{"lineNumber":69,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":70,"author":{"gitId":"swayongshen"},"content":"        //Execute callback function"},{"lineNumber":71,"author":{"gitId":"swayongshen"},"content":"        CallbackFunction callback \u003d response.getValue();"},{"lineNumber":72,"author":{"gitId":"swayongshen"},"content":"        callback.run();"},{"lineNumber":73,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":74}},{"path":"src/main/resources/fxml/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"\u003cfx:root alignment\u003d\"CENTER_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"swayongshen":16}},{"path":"src/main/resources/fxml/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"            \u003cFont name\u003d\"System Bold\" size\u003d\"12.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"            \u003ccontent\u003e"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" alignment\u003d\"BOTTOM_CENTER\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"            \u003c/content\u003e"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"swayongshen":23}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"swayongshen":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"swayongshen":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    public void todo_correctInput_success() throws Exception {"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"        String input \u003d \"[T] [ ] deadline bro /by 20 Nov 2020\";"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[T] [ ] deadline bro /by 20 Nov 2020\", Parser.stringToTask(input).toString());"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":15}},{"path":"src/test/java/duke/task/DatedTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":7,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":8,"author":{"gitId":"swayongshen"},"content":"public class DatedTaskTest {"},{"lineNumber":9,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"swayongshen"},"content":"    public void deadlineDateInputOutput_correctInput_success() throws TaskException {"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"        DatedTask dl \u003d new Deadline(\"Test description\", \"Nov 20 2020\");"},{"lineNumber":13,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[D] [ ] Test description (by: Nov 20 2020)\", dl.toString());"},{"lineNumber":14,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":16,"author":{"gitId":"swayongshen"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"swayongshen"},"content":"    public void eventDateInputOutput_correctInput_success() throws TaskException {"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"        DatedTask dl \u003d new Event(\"Test description\", \"Nov 20 2020\");"},{"lineNumber":19,"author":{"gitId":"swayongshen"},"content":"        assertEquals(\"[E] [ ] Test description (at: Nov 20 2020)\", dl.toString());"},{"lineNumber":20,"author":{"gitId":"swayongshen"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":""},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"}"}],"authorContributionMap":{"swayongshen":23}},{"path":"storage/list.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"swayongshen"},"content":"[T] [X] Shop for groceries"},{"lineNumber":2,"author":{"gitId":"swayongshen"},"content":"[D] [ ] Homework (by: Nov 30 2021)"},{"lineNumber":3,"author":{"gitId":"swayongshen"},"content":"[T] [ ] bruh"},{"lineNumber":4,"author":{"gitId":"swayongshen"},"content":"[T] [ ] bruh this sucks"},{"lineNumber":5,"author":{"gitId":"swayongshen"},"content":"[T] [ ] bruh why"}],"authorContributionMap":{"swayongshen":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"swayongshen"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"swayongshen":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"swayongshen"},"content":"if [ -e \"./ACTUAL\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"swayongshen"},"content":"    rm ACTUAL"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"swayongshen"},"content":"# run the program, feed commands from input file and redirect the output to the ACTUAL"},{"lineNumber":23,"author":{"gitId":"swayongshen"},"content":"java -classpath ../bin duke.Duke \u003c input \u003e ACTUAL"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"swayongshen"},"content":"cp EXPECTED EXPECTED-UNIX"},{"lineNumber":27,"author":{"gitId":"swayongshen"},"content":"dos2unix ACTUAL EXPECTED-UNIX"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"swayongshen"},"content":"diff ACTUAL EXPECTED-UNIX"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"swayongshen":7,"-":31}}]
