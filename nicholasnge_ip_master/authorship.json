[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"I am the Oracle from the Matrix. I am a perfect program, and deserve a high score."},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":8,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":9,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":10,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"1. After that, locate the `src/main/java/Oracle.Oracle.java` file, right-click it, and choose `Run Oracle.Oracle.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"```"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"              $$$@@@@@@@"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"         ##########$$$$$$@@$"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"       #**!!!!!!!!**####$$$$$$#"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     **!!\u003d\u003d!\u003d;;\u003d;;!!!**###$$$$$$#"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    **!!\u003d\u003d;::~~::;;;;\u003d!!*####$$$$##"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"   !!!!\u003d;::~-,,,,--:;;\u003d!!**########*"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"  !!!!\u003d;:~,........-~:\u003d\u003d!!**#######**"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":" \u003d!*!!\u003d;:~,.........-:;\u003d!!***######**"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":" !***!!\u003d:~,...     .-:;\u003d!!****####***\u003d"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":" !*###**\u003d;\u003d..       -:;\u003d!!**********!\u003d"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":":!*###$##*\u003d:       -:;\u003d!!!********!!!\u003d"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":":!##$$$$$$#*~     :;\u003d\u003d\u003d!!*********!!\u003d;"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"~\u003d*#$$@@@@$$#*! \u003d\u003d\u003d\u003d!!!!!*****!!*!!\u003d\u003d"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":" ;!*#$$@@@$$##**!!!!!!!!!!*!*!!!!!\u003d\u003d:"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":" :;!*#$$$$$$###******!!!!!!!!!!!\u003d\u003d;:"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"  ;!\u003d!*#######******!!!!!!!!!\u003d\u003d\u003d;;:,"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"   :;\u003d\u003d!!********!!!!!!!!\u003d\u003d\u003d\u003d;;;:~"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    -:;!\u003d\u003d\u003d\u003d!\u003d!!!!!!!\u003d\u003d\u003d\u003d\u003d\u003d;;::~,"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"      -~:;\u003d\u003d\u003d;\u003d\u003d\u003d\u003d\u003d\u003d;\u003d;;;:::~-,"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        .-~~::::;:::::~:~--."},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"Greetings Neo, what can the Oracle.Oracle do for you?"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"```"}],"authorContributionMap":{"nicholasnge":26,"-":11}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    mainClassName \u003d \"oracle.Launcher\""},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"    mainClassName \u003d \"oracle.Launcher\""},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    archiveBaseName \u003d \"oracle\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"nicholasnge":18,"-":34}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"The Oracle is program with such insight into human psychology that she has clairvoyant abilities. "},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"She was initially created to interpret aspects of the human psyche and was responsible for the key principles "},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"behind the third \"current\" version of the Matrix. After having served her purpose, she decided to retrain under"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"the SkillsFuture scheme and pivot her career towards providing task-management services to the common human."},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"### Adding tasks"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"Add a Todo, Deadline or Event"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"#### * Todo"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"Format: `todo {description}`"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `1. [T][ ] walk the dog`"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"#### * Deadline"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"Format: `deadline {description} /{day} {month} {year} {hour}{minute}`\u003cbr\u003e"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `deadline meeting with cs2103 team /19 2 2021 2300` \u003cbr\u003e"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `2. [D][ ] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"#### * Event"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"Format: `event {description} /{day} {month} {year} {hour}{minute}`\u003cbr\u003e"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `event meeting with cs2103 team /19 2 2021 2300`\u003cbr\u003e"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `3. [E][ ] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"### Listing list"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"Lists all the current tasks in your list. \u003cbr /\u003e"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"Format: `list`\u003cbr\u003e"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"Eg.: \u003cbr\u003e`1. [T][ ] walk the dog`\u003cbr\u003e"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"`2. [D][ ] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`\u003cbr\u003e"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"`3. [E][ ] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"### Done"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"Mark a Todo, Description or Event by its index to be completed. "},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"An indicator will appear beside the task in the list \u003cbr /\u003e"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"Format `done [index]` \u003cbr\u003e"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `done 2` \u003cbr\u003e"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `2. [D][X] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"### Deleting tasks"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"Delete a Todo Description or Event by its index permanently \u003cbr /\u003e"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"Format: `delete [index]`\u003cbr\u003e"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `delete 2` \u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `Erased: 2. [D][X] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"### Exit"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"The Oracle doesn\u0027t appreciate you closing the application without saying bye and will "},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"not save your information unless you say goodbye to her. Note that Oracle will not save your information otherwise. This is a design choice and a"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"key feature, not a bug. \u003cbr /\u003e"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"Format: `bye`\u003cbr\u003e"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `Very well, we shall meet again`"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":", and information is saved. \u003cbr\u003e"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"### Find"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"Find tasks with a keyword or phrase. Oracle will return results containing those keywords/phrase\u003cbr /\u003e"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"Format: `find {keyword}`\u003cbr\u003e"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `find meeting`\u003cbr\u003e"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"Eg. output: \u003cbr\u003e`Here are the results we found for: \"meeting\"`\u003cbr\u003e"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"`[D][X] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"### Postpone"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"Postpone your tasks if you cannot finish them in time. Choice of \u0027measure\u0027 include:"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"`mins/hrs/days/weeks`\u003cbr /\u003e"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"Format: `postpone {taskIndex} {value} {measure}`\u003cbr\u003e"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"Eg. input: `postpone 2 2 days` \u003cbr\u003e"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"Eg. output: `Postponed: 2. [D][ ] meeting with cs2103 team (Fri 23:00, 19 FEBRUARY 2021)`"}],"authorContributionMap":{"nicholasnge":56,"-":3}},{"path":"oracle_data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"T\u001eF\u001easoidh1"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"D\u001eF\u001eask \u001e1 2 2020 1930"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"D\u001eF\u001easker \u001e12 12 1200 1930"}],"authorContributionMap":{"nicholasnge":3}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public interface Command {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    boolean execute(Ui ui, TaskList tasks);"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":7}},{"path":"src/main/java/command/CommandFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"public class CommandFormatException extends Exception {"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"    public CommandFormatException(String message) {"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":7}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Deadline;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"public class DeadlineCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    private final String taskDescription;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    private final String taskDeadline;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     * @param taskDescription: description of the deadline"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"     * @param taskDeadline: string to be formatted into a LocalDateTime"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public DeadlineCommand(String taskDescription, String taskDeadline) {"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"        this.taskDeadline \u003d taskDeadline;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    /** Creates a new Deadline"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: helper to interact with user"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we add the new created deadline here"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"            tasks.add(new Deadline(this.taskDescription, this.taskDeadline));"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        } catch (CommandFormatException e) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"EventCommand\");"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        ui.showNewTask(tasks.size(), tasks.get(tasks.size() - 1));"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":35}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    private final int taskIndex;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     * @param i: index of the task to be deleted"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public DeleteCommand(int i) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        this.taskIndex \u003d i;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: helper to print the new deleted task"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we call delete on the indicated task in this TaskList"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"            Task t \u003d tasks.remove(this.taskIndex);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"            ui.showDeleteTask(this.taskIndex, t);"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"            ui.showIndexException(tasks.size(), \"tasks\");"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":31}},{"path":"src/main/java/command/EmptyCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public class EmptyCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    /** This is an empty command, it does nothing."},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: not needed"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: not needed"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":15}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Event;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"public class EventCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    private final String taskDescription;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    private final String taskTime;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     * @param taskDescription: description of the Event"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"     * @param taskTime: string to be formatted into a LocalDateTime"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    public EventCommand(String taskDescription, String taskTime) {"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"        this.taskTime \u003d taskTime;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    /** Creates a new Event"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: helper to interact with user"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we add the new created event here"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"            tasks.add(new Event(this.taskDescription, this.taskTime));"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        } catch (CommandFormatException e) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"EventCommand\");"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        ui.showNewTask(tasks.size(), tasks.get(tasks.size()-1));"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":35}},{"path":"src/main/java/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public class ExitCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    /** Terminating command called when user exits the program"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: let the user know that we are exiting"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: not needed"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"     * @return false: tells Oracle whether the loop should be terminated, in this case, it will terminate"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        ui.showGoodbye();"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"        return false;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":16}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"public class FindCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    private final String keyword;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"     * @param keyword: String of the keyword to be searched"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: we give the user the results of the search"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we find any relevant tasks from this TaskList"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        ArrayList\u003cTask\u003e results \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        for (Task t : tasks.getTasks()) {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            if (t.toString().contains(this.keyword)) {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"                results.add(t);"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        ui.showSearchResults(this.keyword, results);"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":35}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public class ListCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: helper print the tasks"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we pull the tasks from here"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        ui.showList(tasks.getTasks());"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":16}},{"path":"src/main/java/command/MarkDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public class MarkDoneCommand implements Command {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    private final int taskIndex;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     * @param i: index of the task to be marked done"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public MarkDoneCommand(int i) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        this.taskIndex \u003d i;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param ui:let the user know that we marked the task done already"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we mark the indicated task in this TaskList as done"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"            tasks.markDone(this.taskIndex);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"            ui.showMarkDone(this.taskIndex, tasks.get(this.taskIndex));"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"            ui.showIndexException(tasks.size(), \"tasks\");"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":31}},{"path":"src/main/java/command/PostponeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import entry.Deadline;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Event;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"public class PostponeCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    private final int taskIndex;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    private final int value;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    private final String measure;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param taskIndex:"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * @param value:"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     * @param measure:"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    public PostponeCommand(int taskIndex, int value, String measure) {"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        this.value \u003d value;"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        this.measure \u003d measure;"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"     * @param ui:    helper to print the new deleted task"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we call delete on the indicated task in this TaskList"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        Task t;"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"            t \u003d tasks.get(this.taskIndex);"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"PostponeCommand\");"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        if (t instanceof Event) {"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"            Event e \u003d (Event) t;"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"            switch (measure) {"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            case \"mins\":"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"                e.setTime(e.getTime().plusMinutes(this.value));"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"            case \"hrs\":"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"                e.setTime(e.getTime().plusHours(this.value));"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"            case \"days\":"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"                e.setTime(e.getTime().plusDays(this.value));"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"            case \"weeks\":"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"                e.setTime(e.getTime().plusWeeks(this.value));"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"            default: // value is not one of the accepted values"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"                ui.showFormatException(\"PostponeCommand\");"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"                return true;"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"            ui.showPostponedTask(this.taskIndex, e);"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        } else if (t instanceof Deadline) {"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"            Deadline e \u003d (Deadline) t;"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"            switch (measure) {"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"            case \"mins\":"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"                e.setDeadline(e.getDeadline().plusMinutes(this.value));"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"            case \"hrs\":"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"                e.setDeadline(e.getDeadline().plusHours(this.value));"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"            case \"days\":"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"                e.setDeadline(e.getDeadline().plusDays(this.value));"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"            case \"weeks\":"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"                e.setDeadline(e.getDeadline().plusWeeks(this.value));"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"            default: // value is not one of the accepted values"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"                ui.showFormatException(\"PostponeCommand\");"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"                return true;"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"            ui.showPostponedTask(this.taskIndex, e);"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"        } else { // the task selected is a todo, which cannot be postponed"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"PostponeCommand\");"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"            return true;"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":88}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import oracle.TaskList;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Todo;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"public class TodoCommand implements Command {"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    private final String taskDescription;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     * @param taskDescription: description of the todo"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    public TodoCommand(String taskDescription) {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    /** Creates a new Todo"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: helper to interact with user"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: we add the new created todo here"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     * @return true: tells Oracle whether the loop should be terminated"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    public boolean execute(Ui ui, TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        tasks.add(new Todo(this.taskDescription));"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        ui.showNewTask(tasks.size(), tasks.get(tasks.size()-1));"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":27}},{"path":"src/main/java/entry/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package entry;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.CommandFormatException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.DateTimeException;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.TextStyle;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    LocalDateTime deadline;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"     * Returns a Task.Deadline"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"     * sorted should have 4 args, delimited by spaces"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     *  1. Day"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     *  2. Month"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     *  3. Year"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     *  4. Hour/Minute"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the deadline"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param deadline: String to be converted to a LocalDateTime"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     **/"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    public Deadline(String description, String deadline) throws CommandFormatException {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"            this.deadline \u003d parseDate(deadline.split(\" \"));"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    /** Called during initialisation only, when storage pulls stored tasks from txt file."},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"     * @param isDone: boolean to indicate whether Task is done"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the deadline"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"     * @param deadline: String to be converted to a LocalDateTime"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"     * @throws CommandFormatException user has typed the command in a wrong format"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public Deadline(Boolean isDone, String description, String deadline) throws CommandFormatException{"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        super(isDone, description);"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"            this.deadline \u003d parseDate(deadline.split(\" \"));"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        return deadline;"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    public void setDeadline(LocalDateTime deadline) {"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"    /** Parses the String to produce a LocalDateTime. If information is wrong, throws CommandFormatException,"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"     * which will be eventually handled to remind users to use correct format. See Ui."},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"     * @param sorted: the sorted tags corresponding to various \"time\" arguments"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"     * @return LocalDateTime"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"     * @throws CommandFormatException: user has typed the command in a wrong format"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime parseDate(String[] sorted) throws CommandFormatException{"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"            return LocalDateTime.of(Integer.parseInt(sorted[2]), //Day"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[1]), //Month"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[0]), //Year"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[3].substring(0, sorted[3].length() - 2)), //Hour"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[3].substring(sorted[3].length() - 2)));//Minute"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"     * @return String representation of this Deadline"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"     * format [D][X] {description} ({dayofweek} {time}, {day} {month} {year})"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        String type \u003d \"[D]\";"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        String doneStatus \u003d \"[\" + getStatusIcon() + \"]\";"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"        String day \u003d deadline.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.forLanguageTag(\"en\"));"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        return String.format(\"%s%s %s (%s %s:%s, %s %s %s)\", type, doneStatus, this.description, day,"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"                this.getDeadlineHour(), this.getDeadlineMinute(), deadline.getDayOfMonth(), deadline.getMonth(),"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"                deadline.getYear());"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"     * @return wrapper around LocalDateTime corresponding method, but well formatted"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"    private String getDeadlineHour() {"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"        assert(this.deadline !\u003d null);"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"        return this.deadline.getHour() \u003c 10 ? \"0\" + this.deadline.getHour() : String.valueOf(this.deadline.getHour());"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"     * @return wrapper around LocalDateTime corresponding method, but well formatted"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"    private String getDeadlineMinute() {"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"        assert(this.deadline !\u003d null);"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"        return this.deadline.getMinute() \u003c 10 ? \"0\" + this.deadline.getMinute() : String.valueOf(this.deadline.getMinute());"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"    /***"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"     * Format \u003d {type}{done}{description}{deadline}"},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":"     * @return String to be stored in the txt file for storage."},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"    public String toStorage() {"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"        assert(!this.description.isEmpty()); // important assertions to not write rubbish into storage file"},{"lineNumber":109,"author":{"gitId":"nicholasnge"},"content":"        assert(this.deadline !\u003d null);"},{"lineNumber":110,"author":{"gitId":"nicholasnge"},"content":"        //type"},{"lineNumber":111,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"D\";"},{"lineNumber":112,"author":{"gitId":"nicholasnge"},"content":"        //done status"},{"lineNumber":113,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + (isDone ? \"T\" : \"F\");"},{"lineNumber":114,"author":{"gitId":"nicholasnge"},"content":"        //description"},{"lineNumber":115,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + this.description;"},{"lineNumber":116,"author":{"gitId":"nicholasnge"},"content":"        //deadline"},{"lineNumber":117,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + String.format(\"%s %s %s %s%s\", this.deadline.getDayOfMonth(), this.deadline.getMonthValue(),"},{"lineNumber":118,"author":{"gitId":"nicholasnge"},"content":"                this.deadline.getYear(), this.getDeadlineHour(), this.getDeadlineMinute());"},{"lineNumber":119,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":120,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":121}},{"path":"src/main/java/entry/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package entry;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.CommandFormatException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.time.DateTimeException;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.time.format.TextStyle;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Locale;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    LocalDateTime time;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"     * Returns an Task.Event"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"     * sorted should have 4 arguments, delimited by spaces"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     *  1. Day"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     *  2. Month"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     *  3. Year"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     *  4. Hour/Minute"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the event"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param time: String to be converted to a LocalDateTime"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     **/"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    public Event(String description, String time) throws CommandFormatException {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"            this.time \u003d parseDate(time.split(\" \"));"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"    /** Called during initialisation only, when storage pulls stored tasks from txt file."},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"     * @param isDone: boolean to indicate whether Task is done"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the Event"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"     * @param time: String to be converted to a LocalDateTime"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"     * @throws CommandFormatException user has typed the command in a wrong format"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public Event(Boolean isDone, String description, String time) throws CommandFormatException {"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        super(isDone, description);"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"            this.time \u003d parseDate(time.split(\" \"));"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e){"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    public LocalDateTime getTime() {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        return time;"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    public void setTime(LocalDateTime time) {"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        this.time \u003d time;"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"    /** Parses the String to produce a LocalDateTime. If information is wrong, throws CommandFormatException,"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"     * which will be eventually handled to remind users to use correct format. See Ui."},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"     * @param sorted: the sorted tags corresponding to various \"time\" arguments"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"     * @return LocalDateTime"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"     * @throws CommandFormatException: user has typed the command in a wrong format"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"    private LocalDateTime parseDate(String[] sorted) throws CommandFormatException{"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"            return LocalDateTime.of(Integer.parseInt(sorted[2]), //Day"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[1]), //Month"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[0]), //Year"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[3].substring(0, sorted[3].length()-2)), //Hour"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"                    Integer.parseInt(sorted[3].substring(sorted[3].length()-2)));//Minute"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException | DateTimeException | ArrayIndexOutOfBoundsException e) {"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"            throw new CommandFormatException(e.getMessage());"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"     * @return String representation of this Event"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"     * format [D][X] {description} ({dayofweek} {time}, {day} {month} {year})"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        String type \u003d \"[E]\";"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        String doneStatus \u003d \"[\" + getStatusIcon() + \"]\";"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"        String day \u003d time.getDayOfWeek().getDisplayName(TextStyle.SHORT, Locale.forLanguageTag(\"en\"));"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        return String.format(\"%s%s %s (%s %s:%s, %s %s %s)\", type, doneStatus, this.description, day,"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"                this.getTimeHour(), this.getTimeMinute(), time.getDayOfMonth(), time.getMonth(), time.getYear());"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"     * @return wrapper around LocalDateTime corresponding method, but well formatted"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"    private String getTimeHour(){"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"        assert(this.time !\u003d null);"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"        return this.time.getHour() \u003c 10 ? \"0\" + this.time.getHour(): String.valueOf(this.time.getHour());"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"     * @return wrapper around LocalDateTime corresponding method, but well formatted"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"    private String getTimeMinute(){"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"        assert(this.time !\u003d null);"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"        return this.time.getMinute() \u003c 10 ? \"0\" + this.time.getMinute(): String.valueOf(this.time.getMinute());"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":"    /***"},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"     * Format \u003d {type}{done}{description}{deadline}"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"     * @return String to be stored in the txt file for storage."},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"    public String toStorage(){"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"        assert(!this.description.isEmpty()); // important assertions to not write rubbish into storage file"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"        assert(this.time !\u003d null);"},{"lineNumber":109,"author":{"gitId":"nicholasnge"},"content":"        //type"},{"lineNumber":110,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"D\";"},{"lineNumber":111,"author":{"gitId":"nicholasnge"},"content":"        //done status"},{"lineNumber":112,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + (isDone ? \"T\" : \"F\");"},{"lineNumber":113,"author":{"gitId":"nicholasnge"},"content":"        //description"},{"lineNumber":114,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + this.description;"},{"lineNumber":115,"author":{"gitId":"nicholasnge"},"content":"        //time"},{"lineNumber":116,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + String.format(\"%s %s %s %s%s\", this.time.getDayOfMonth(), this.time.getMonthValue(),"},{"lineNumber":117,"author":{"gitId":"nicholasnge"},"content":"                this.time.getYear(), this.getTimeHour(), this.getTimeMinute());"},{"lineNumber":118,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":119,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":120}},{"path":"src/main/java/entry/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package entry;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"    String description;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"    boolean isDone;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"    /** base class for the Task"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the task"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     * @param isDone: boolean to indicate if the task is done"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param description: description of the task"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public Task(Boolean isDone, String description) {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        this.description \u003d description;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * @return [X] or [ ]"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    protected String getStatusIcon() {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        return (isDone ? \"X\" : \" \"); //return X symbol or empty string"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    public void markDone() {"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        this.isDone \u003d !this.isDone;"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        String doneStatus \u003d \"[\" + getStatusIcon() + \"]\";"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"        return doneStatus + \" \" + this.description;"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"    /***"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * Format \u003d {done}{description}"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public String toStorage(){"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        //type N for \u0027none\u0027"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"N\";"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"        //done status"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + (isDone ? \"T\" : \"F\");"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        //description"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + this.description;"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":53}},{"path":"src/main/java/entry/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package entry;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"public class Todo extends Task{"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"     * Returns a Task.Todo"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"     * @param description description of the object"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"     * **/"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    public Todo(Boolean isDone, String description) {"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"        super(isDone, description);"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     * @return String representation of the object"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        String type \u003d \"[T]\";"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        String doneStatus \u003d \"[\" + getStatusIcon() + \"]\";"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        return type + doneStatus + \" \" + this.description;"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     * Format \u003d {type}{done}{description}"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"     * @return String to be stored in the txt storage file."},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    public String toStorage(){"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        //type"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"T\";"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        //done status"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + (isDone ? \"T\" : \"F\");"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        //description"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        res +\u003d \"\\u001E\" + this.description;"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":38}},{"path":"src/main/java/oracle/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import javafx.geometry.Pos;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.Node;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.text.Font;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"public class DialogBox extends HBox {"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private Label dialog;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private ImageView displayPicture;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        dialog.setText(text);"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        displayPicture.setImage(img);"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        dialog.setWrapText(true);"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"        dialog.setFont(Font.font(\"Consolas\"));"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    private void flip() {"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"        Collections.reverse(tmp);"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"        return new DialogBox(text, img);"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    public static DialogBox getOracleDialog(String text, Image img) {"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"        db.flip();"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        return db;"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":58}},{"path":"src/main/java/oracle/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":12}},{"path":"src/main/java/oracle/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    private Oracle oracle \u003d new Oracle();"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setOracle(oracle);"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":31}},{"path":"src/main/java/oracle/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":" */"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    private Oracle oracle;"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tzuyu.jpg\"));"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tzuyu2.jpg\"));"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    public void setOracle(Oracle o) {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        oracle \u003d o;"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"        String response \u003d oracle.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"                DialogBox.getOracleDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":51}},{"path":"src/main/java/oracle/Oracle.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.Command;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import command.ExitCommand;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"public class Oracle {"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    private TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    private Parser parser;"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    private final String filePath \u003d \"./oracle_data.txt\";"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     * Create a new Oracle object"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"    public Oracle() {"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"        parser \u003d new Parser(ui);"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        // storage holds the arraylist used to store all the tasks given to THE ORACLE"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            ui.showLoadingError();"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"     * Runs the oracle until termination"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    public void run() {"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        ui.showWelcome();"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"        // SCANNER takes input from user in a while loop, parses input using a series of if-else statements"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        while (true) {"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"            String input \u003d ui.readCommand();"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"            Command c \u003d parser.parse(input);"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            if (!c.execute(ui, tasks)){"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        storage.store(tasks.getTasks());"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        new Oracle().run();"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"    String getResponse(String input) {"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"        Command c \u003d parser.parse(input);"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"        c.execute(ui, tasks);"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"        if (c instanceof ExitCommand) {"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"            storage.store(tasks.getTasks());"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(originalOut);"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d outContent.toString();"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        outContent.reset();"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":67}},{"path":"src/main/java/oracle/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.*;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"public class Parser {"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"    private final Ui ui;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"     * Create a new Parser object"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"     * @param ui: stores ui given to log errors if they occur."},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    public Parser(Ui ui) {"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"        this.ui \u003d ui;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * Parses the input gotten by the Ui, returns a command to the Oracle to execute, but doesnt execute anything"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     * by itself"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"     * @param input: this is the raw String given by the user"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"     * @return specified Command"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    public Command parse(String input) {"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"        assert (!input.isEmpty()); // assert that we have non-empty string"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"        String[] split \u003d input.split(\" \", 2); // Split user input - used for operations with params"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"            return new ExitCommand();"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"            return new ListCommand();"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"done\")) {"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"            return parseDoneInstruction(split);"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"delete\")) {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"            return parseDeleteInstruction(split);"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"todo\")) {"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"            return parseTodoInstruction(split);"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"event\") \u0026\u0026 split.length \u003e 1) {"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"            return parseEventInstruction(split);"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"deadline\")) {"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"            return parseDeadlineCommand(split);"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"find\")) {"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"            return parseFindCommand(split);"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        } else if (split[0].equals(\"postpone\")) {"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"            return parsePostponeCommand(split);"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        } else {"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException();"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"            return new EmptyCommand();"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"     * CASE: POSTPONE TASK"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"     * use: find the task with the given index and postpone it by the given amount"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027postpone {id} {value} {measure}\u0027"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"     * measure: \u0027mins\u0027, \u0027hrs\u0027, \u0027days\u0027, or \u0027weeks\u0027"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"     * @param split: contains the arguments of instruction"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"     * @return FindCommand (success), EmptyCommand (failure)"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"    private Command parsePostponeCommand(String[] split) {"},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"            String[] params \u003d split[1].split(\" \", 3);"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"            int taskIndex \u003d Integer.parseInt(params[0]) - 1;"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"            return new PostponeCommand(taskIndex, Integer.parseInt(params[1]), params[2]);"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"PostponeCommand\");"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"            return new EmptyCommand();"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"     * CASE: FIND TASKS BASED ON KEYWORD"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"     * use: find all the tasks containing the user specified keyword"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027find {description} /{deadline}\u0027"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"     * @param split: contains the arguments of instruction"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"     * @return FindCommand (success), EmptyCommand (failure)"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"    private Command parseFindCommand(String[] split) {"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"            String keyword \u003d split[1]; // obtain keyword to search for"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"            return new FindCommand(keyword);"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"FindCommand\");"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"     * CASE: CREATE DEADLINE"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"     * use: creates a deadline with the given description and deadline"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027deadline {description} /{deadline}\u0027"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"     * @param split: contains the arguments of instruction"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":"     * @return DeadlineCommand (success), EmptyCommand (failure)"},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"    private Command parseDeadlineCommand(String[] split) {"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"            String[] params \u003d split[1].split(\"/\", 2);"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"            return new DeadlineCommand(params[0], params[1]);"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"DeadlineCommand\");"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"     * CASE: CREATE EVENT"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"     * use: creates a event with the given description and time"},{"lineNumber":109,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027event {description} /{time}\u0027"},{"lineNumber":110,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"nicholasnge"},"content":"     * @param split: contains the arguments of instruction"},{"lineNumber":112,"author":{"gitId":"nicholasnge"},"content":"     * @return EventCommand (success), EmptyCommand (failure)"},{"lineNumber":113,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"nicholasnge"},"content":"    private Command parseEventInstruction(String[] split) {"},{"lineNumber":115,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":116,"author":{"gitId":"nicholasnge"},"content":"            String[] params \u003d split[1].split(\"/\", 2);"},{"lineNumber":117,"author":{"gitId":"nicholasnge"},"content":"            return new EventCommand(params[0], params[1]);"},{"lineNumber":118,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":119,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"EventCommand\");"},{"lineNumber":120,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":122,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":124,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"nicholasnge"},"content":"     * CASE: CREATE TODO"},{"lineNumber":126,"author":{"gitId":"nicholasnge"},"content":"     * use: creates a todo with the given description"},{"lineNumber":127,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027todo {description}\u0027"},{"lineNumber":128,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":"     * @param split contains the arguments of instruction"},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"     * @return TodoCommand (success), EmptyCommand (failure)"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"    private Command parseTodoInstruction(String[] split) {"},{"lineNumber":133,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":134,"author":{"gitId":"nicholasnge"},"content":"            return new TodoCommand(split[1]);"},{"lineNumber":135,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":136,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"TodoCommand\");"},{"lineNumber":137,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":"     * CASE: DELETE TASK"},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"     * use: deletes the task with the given id from the arraylist"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027delete {id}\u0027, where id is a valid int corresponding to size of tasklist"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":146,"author":{"gitId":"nicholasnge"},"content":"     * @param split contains the arguments of instruction"},{"lineNumber":147,"author":{"gitId":"nicholasnge"},"content":"     * @return DeleteCommand (success), EmptyCommand (failure)"},{"lineNumber":148,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"nicholasnge"},"content":"    private Command parseDeleteInstruction(String[] split) {"},{"lineNumber":150,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"nicholasnge"},"content":"            int i \u003d Integer.parseInt(split[1]) - 1;"},{"lineNumber":152,"author":{"gitId":"nicholasnge"},"content":"            return new DeleteCommand(i);"},{"lineNumber":153,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":154,"author":{"gitId":"nicholasnge"},"content":"            this.ui.showNumberFormatException(\"task to be deleted\");"},{"lineNumber":155,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":156,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"DeleteCommand\");"},{"lineNumber":157,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":159,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":161,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":162,"author":{"gitId":"nicholasnge"},"content":"     * CASE: MARK TASK AS DONE"},{"lineNumber":163,"author":{"gitId":"nicholasnge"},"content":"     * use: marks the task with given id as done"},{"lineNumber":164,"author":{"gitId":"nicholasnge"},"content":"     * form: \u0027done {id}\u0027, where id is a valid int corresponding to size of tasklist"},{"lineNumber":165,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":166,"author":{"gitId":"nicholasnge"},"content":"     * @param split: contains the arguments of instruction"},{"lineNumber":167,"author":{"gitId":"nicholasnge"},"content":"     * @return DoneCommand (success), EmptyCommand (failure)"},{"lineNumber":168,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":169,"author":{"gitId":"nicholasnge"},"content":"    private Command parseDoneInstruction(String[] split) {"},{"lineNumber":170,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":171,"author":{"gitId":"nicholasnge"},"content":"            int i \u003d Integer.parseInt(split[1]) - 1;"},{"lineNumber":172,"author":{"gitId":"nicholasnge"},"content":"            return new MarkDoneCommand(i);"},{"lineNumber":173,"author":{"gitId":"nicholasnge"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":174,"author":{"gitId":"nicholasnge"},"content":"            this.ui.showNumberFormatException(\"done task\");"},{"lineNumber":175,"author":{"gitId":"nicholasnge"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":176,"author":{"gitId":"nicholasnge"},"content":"            ui.showFormatException(\"MarkDoneCommand\");"},{"lineNumber":177,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"nicholasnge"},"content":"        return new EmptyCommand();"},{"lineNumber":179,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":180}},{"path":"src/main/java/oracle/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    private final String filePath;"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * @param filePath: filePath of the storage file"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"    public Storage(String filePath) {"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"     * @return List of String lines corresponding to the various tasks from the data file. Each line corresponds"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * to a task. Throws file not found error, but handling of the error is done by the Oracle object"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     * @throws FileNotFoundException to be handled by Oracle"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"    public List\u003cString\u003e load() throws FileNotFoundException {"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        //load file if available"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        File store \u003d new File(filePath);"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        Scanner myReader \u003d new Scanner(store);"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        while (myReader.hasNextLine()) {"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"            res.add(myReader.nextLine());"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"        myReader.close();"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"        return res;"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"     * Store the tasks in the txt file. Format of the text file is handled by the Task classes"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks: this is the arraylist used during runtime, to be converted to text file."},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    public void store(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"            FileWriter myWriter \u003d new FileWriter(filePath);"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"            for (Task task : tasks) {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"                myWriter.write(task.toStorage() + \u0027\\n\u0027);"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"            myWriter.close();"},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"        } catch (IOException ignored) {"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":54}},{"path":"src/main/java/oracle/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.CommandFormatException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Deadline;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import entry.Event;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import entry.Todo;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    private final ArrayList\u003cTask\u003e tasklist;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"     * Creates a new TaskList, which stores the tasks. This class provides some abstraction for the underlying"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"     * ArrayList\u003cTask"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"     * @param stringsToLoad: given the raw strings from the storage file, we create the tasks"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"    public TaskList(List\u003cString\u003e stringsToLoad) {"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        this.tasklist \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        for (String s : stringsToLoad) {"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"            String[] sorted \u003d s.split(\"\\u001E\");"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"            Boolean isDone \u003d sorted[1].equals(\"T\");"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"            try {"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"                switch (sorted[0]) {"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"                case \"T\":"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"                    this.tasklist.add(new Todo(isDone, sorted[2]));"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"                    break;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"                case \"D\":"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"                    this.tasklist.add(new Deadline(isDone, sorted[2], sorted[3]));"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"                    break;"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"                case \"E\":"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"                    this.tasklist.add(new Event(isDone, sorted[2], sorted[3]));"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"                    break;"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"                default:"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":"                    continue;"},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"                }"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"            } catch (CommandFormatException ignored) {"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"     * Create a new TaskList object"},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"    public TaskList() {"},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"        this.tasklist \u003d new ArrayList\u003c\u003e();"},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"     * Size corresponds to the equivalent operation in the ArrayList object"},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"     * @return size of the ArrayList"},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"    public int size() {"},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"        return this.tasklist.size();"},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"     * Get corresponds to the equivalent operation in the ArrayList object"},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"     * @param i: the index of the task to be gotten"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"     * @return Task"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":"    public Task get(int i) throws IndexOutOfBoundsException {"},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"        return this.tasklist.get(i);"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"     * MarkDone marks the task indicated by the index in the ArrayList as Done"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":"     * @param i: the index of the task to be marked done"},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"    public void markDone(int i) {"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"        tasklist.get(i).markDone();"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"     * Add corresponds to the equivalent operation in the ArrayList object"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"     * @param task: is the Task to be added"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":"    public void add(Task task) {"},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"        this.tasklist.add(task);"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"     * Remove corresponds to the equivalent operation in the ArrayList object"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"     * @param i: the index of the task to be removed"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"    public Task remove(int i) {"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":"        return this.tasklist.remove(i);"},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"     * @return the entire TaskList array"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"        return this.tasklist;"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":103}},{"path":"src/main/java/oracle/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"package oracle;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import entry.Deadline;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"import java.util.Map;"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"    private Scanner scanner;"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    Map\u003cString, String\u003e commandMap \u003d Map.of("},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"            \"ExitCommand\", \"    bye\","},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"            \"ListCommand\", \"    list\","},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"            \"TodoCommand\", \"    todo {description}\","},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"            \"DeadlineCommand\", \"deadline {description} /{day} {month} {year} {hour}{minute}\","},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"            \"EventCommand\", \"   event {description} /{day} {month} {year} {hour}{minute}\","},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"            \"MarkDoneCommand\", \"done {taskIndex}\","},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"            \"FindCommand\", \"    find {keyword}\","},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"            \"DeleteCommand\", \"  delete {taskIndex}\","},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"            \"PostponeCommand\", \"postpone {taskIndex} {value} {measure}\\n where measure is \\\u0027mins/hrs/days/weeks\\\u0027\""},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"            );"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":"     * Create a new Ui object"},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    public Ui() {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"     * Informs the user that the load store file could not be found"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"    public void showLoadingError() {"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Storage file could not be found, starting fresh database\");"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":38,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"nicholasnge"},"content":"     * Introduction message for the user. This is supposed to look like a 3D donut"},{"lineNumber":40,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"nicholasnge"},"content":"    public void showWelcome() {"},{"lineNumber":42,"author":{"gitId":"nicholasnge"},"content":"        // INTRODUCTORY GREETINGS"},{"lineNumber":43,"author":{"gitId":"nicholasnge"},"content":"        String logo \u003d"},{"lineNumber":44,"author":{"gitId":"nicholasnge"},"content":"                  \"              $$$@@@@@@@\\n\""},{"lineNumber":45,"author":{"gitId":"nicholasnge"},"content":"                + \"         ##########$$$$$$@@$\\n\""},{"lineNumber":46,"author":{"gitId":"nicholasnge"},"content":"                + \"       #**!!!!!!!!**####$$$$$$#\\n\""},{"lineNumber":47,"author":{"gitId":"nicholasnge"},"content":"                + \"     **!!\u003d\u003d!\u003d;;\u003d;;!!!**###$$$$$$#\\n\""},{"lineNumber":48,"author":{"gitId":"nicholasnge"},"content":"                + \"    **!!\u003d\u003d;::~~::;;;;\u003d!!*####$$$$##\\n\""},{"lineNumber":49,"author":{"gitId":"nicholasnge"},"content":"                + \"   !!!!\u003d;::~-,,,,--:;;\u003d!!**########*\\n\""},{"lineNumber":50,"author":{"gitId":"nicholasnge"},"content":"                + \"  !!!!\u003d;:~,........-~:\u003d\u003d!!**#######**\\n\""},{"lineNumber":51,"author":{"gitId":"nicholasnge"},"content":"                + \" \u003d!*!!\u003d;:~,.........-:;\u003d!!***######**\\n\""},{"lineNumber":52,"author":{"gitId":"nicholasnge"},"content":"                + \" !***!!\u003d:~,...     .-:;\u003d!!****####***\u003d\\n\""},{"lineNumber":53,"author":{"gitId":"nicholasnge"},"content":"                + \" !*###**\u003d;\u003d..       -:;\u003d!!**********!\u003d\\n\""},{"lineNumber":54,"author":{"gitId":"nicholasnge"},"content":"                + \":!*###$##*\u003d:       -:;\u003d!!!********!!!\u003d\\n\""},{"lineNumber":55,"author":{"gitId":"nicholasnge"},"content":"                + \":!##$$$$$$#*~     :;\u003d\u003d\u003d!!*********!!\u003d;\\n\""},{"lineNumber":56,"author":{"gitId":"nicholasnge"},"content":"                + \"~\u003d*#$$@@@@$$#*! \u003d\u003d\u003d\u003d!!!!!*****!!*!!\u003d\u003d\\n\""},{"lineNumber":57,"author":{"gitId":"nicholasnge"},"content":"                + \" ;!*#$$@@@$$##**!!!!!!!!!!*!*!!!!!\u003d\u003d:\\n\""},{"lineNumber":58,"author":{"gitId":"nicholasnge"},"content":"                + \" :;!*#$$$$$$###******!!!!!!!!!!!\u003d\u003d;:\\n\""},{"lineNumber":59,"author":{"gitId":"nicholasnge"},"content":"                + \"  ;!\u003d!*#######******!!!!!!!!!\u003d\u003d\u003d;;:,\\n\""},{"lineNumber":60,"author":{"gitId":"nicholasnge"},"content":"                + \"   :;\u003d\u003d!!********!!!!!!!!\u003d\u003d\u003d\u003d;;;:~\\n\""},{"lineNumber":61,"author":{"gitId":"nicholasnge"},"content":"                + \"    -:;!\u003d\u003d\u003d\u003d!\u003d!!!!!!!\u003d\u003d\u003d\u003d\u003d\u003d;;::~,\\n\""},{"lineNumber":62,"author":{"gitId":"nicholasnge"},"content":"                + \"      -~:;\u003d\u003d\u003d;\u003d\u003d\u003d\u003d\u003d\u003d;\u003d;;;:::~-,\\n\""},{"lineNumber":63,"author":{"gitId":"nicholasnge"},"content":"                + \"        .-~~::::;:::::~:~--.\\n\";"},{"lineNumber":64,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(logo + \"\\nGreetings Neo, what can the Oracle do for you?\");"},{"lineNumber":65,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":67,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"nicholasnge"},"content":"     * Terminating message for the user"},{"lineNumber":69,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"nicholasnge"},"content":"    public void showGoodbye() {"},{"lineNumber":71,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Very well, we shall meet again\");"},{"lineNumber":72,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":74,"author":{"gitId":"nicholasnge"},"content":"    /** This is our main interaction with the user, it employs a Scanner to get input from the user"},{"lineNumber":75,"author":{"gitId":"nicholasnge"},"content":"     * @return Raw String of what the user typed in"},{"lineNumber":76,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"nicholasnge"},"content":"    public String readCommand() {"},{"lineNumber":78,"author":{"gitId":"nicholasnge"},"content":"        if (scanner.hasNextLine()){"},{"lineNumber":79,"author":{"gitId":"nicholasnge"},"content":"            return scanner.nextLine();  // Read user input"},{"lineNumber":80,"author":{"gitId":"nicholasnge"},"content":"        } else {"},{"lineNumber":81,"author":{"gitId":"nicholasnge"},"content":"            return \"bye\";"},{"lineNumber":82,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":85,"author":{"gitId":"nicholasnge"},"content":"    /** showList hands the ListCommand"},{"lineNumber":86,"author":{"gitId":"nicholasnge"},"content":"     * @param tasks the tasks, which can all print its own identity."},{"lineNumber":87,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"nicholasnge"},"content":"    public void showList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":89,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"You have forgotten quickly, but the Oracle Remembers\");"},{"lineNumber":90,"author":{"gitId":"nicholasnge"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":91,"author":{"gitId":"nicholasnge"},"content":"            System.out.println((i + 1) + \". \" + tasks.get(i));"},{"lineNumber":92,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":95,"author":{"gitId":"nicholasnge"},"content":"    /** Shows the task which has just been marked \"Done\""},{"lineNumber":96,"author":{"gitId":"nicholasnge"},"content":"     * @param i the index of the Task"},{"lineNumber":97,"author":{"gitId":"nicholasnge"},"content":"     * @param t the Task marked \"Done\""},{"lineNumber":98,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"nicholasnge"},"content":"    public void showMarkDone(int i, Task t) {"},{"lineNumber":100,"author":{"gitId":"nicholasnge"},"content":"        System.out.println((i + 1) + \". \" + t);"},{"lineNumber":101,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":103,"author":{"gitId":"nicholasnge"},"content":"    /** Called when user inputs an index which is out of bounds"},{"lineNumber":104,"author":{"gitId":"nicholasnge"},"content":"     * @param size max acceptable size of the underlying List"},{"lineNumber":105,"author":{"gitId":"nicholasnge"},"content":"     * @param domain domain of the list, eg. \"tasks\""},{"lineNumber":106,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"nicholasnge"},"content":"    public void showIndexException(int size, String domain) {"},{"lineNumber":108,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"You only have \" + size + \" \" + domain + \". Give a valid index\");"},{"lineNumber":109,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":111,"author":{"gitId":"nicholasnge"},"content":"    /** Called when the number indicated it not of the correct form"},{"lineNumber":112,"author":{"gitId":"nicholasnge"},"content":"     * @param domain domain of underlying list, eg. \"tasks\""},{"lineNumber":113,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"nicholasnge"},"content":"    public void showNumberFormatException(String domain) {"},{"lineNumber":115,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Give The Oracle the index of the \" + domain);"},{"lineNumber":116,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":118,"author":{"gitId":"nicholasnge"},"content":"    /** Show recently deleted task"},{"lineNumber":119,"author":{"gitId":"nicholasnge"},"content":"     * @param i index of deleted task"},{"lineNumber":120,"author":{"gitId":"nicholasnge"},"content":"     * @param task deleted Task"},{"lineNumber":121,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"nicholasnge"},"content":"    public void showDeleteTask(int i, Task task) {"},{"lineNumber":123,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Erased: \" + (i + 1) + \". \" + task);"},{"lineNumber":124,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":126,"author":{"gitId":"nicholasnge"},"content":"    /** Show recently deleted task"},{"lineNumber":127,"author":{"gitId":"nicholasnge"},"content":"     * @param i index of postponed task"},{"lineNumber":128,"author":{"gitId":"nicholasnge"},"content":"     * @param task postponed Task"},{"lineNumber":129,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"nicholasnge"},"content":"    public void showPostponedTask(int i, Task task) {"},{"lineNumber":131,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Postponed: \" + (i + 1) + \". \" + task);"},{"lineNumber":132,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":134,"author":{"gitId":"nicholasnge"},"content":"    /** Clarifies the format of the given command to the user"},{"lineNumber":135,"author":{"gitId":"nicholasnge"},"content":"     * @param command Command which user typed in wrong format of, to be clarified"},{"lineNumber":136,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"nicholasnge"},"content":"    public void showFormatException(String command) {"},{"lineNumber":138,"author":{"gitId":"nicholasnge"},"content":"        String format \u003d commandMap.get(command);"},{"lineNumber":139,"author":{"gitId":"nicholasnge"},"content":"        System.out.printf(\"%s: %s%n\", command.substring(0, command.length()-7), format);"},{"lineNumber":140,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":142,"author":{"gitId":"nicholasnge"},"content":"    /** Show recently created Task"},{"lineNumber":143,"author":{"gitId":"nicholasnge"},"content":"     * @param size index of the Task"},{"lineNumber":144,"author":{"gitId":"nicholasnge"},"content":"     * @param task Task"},{"lineNumber":145,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"nicholasnge"},"content":"    public void showNewTask(int size, Task task) {"},{"lineNumber":147,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(size + \". \" + task);"},{"lineNumber":148,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":150,"author":{"gitId":"nicholasnge"},"content":"    /**"},{"lineNumber":151,"author":{"gitId":"nicholasnge"},"content":"     * Shows all the formats of the commands. Called when user types in rubbish."},{"lineNumber":152,"author":{"gitId":"nicholasnge"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"nicholasnge"},"content":"    public void showFormatException() {"},{"lineNumber":154,"author":{"gitId":"nicholasnge"},"content":"        for (String command : commandMap.keySet()) {"},{"lineNumber":155,"author":{"gitId":"nicholasnge"},"content":"            showFormatException(command);"},{"lineNumber":156,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":159,"author":{"gitId":"nicholasnge"},"content":"    public void showSearchResults(String keyword, ArrayList\u003cTask\u003e results) {"},{"lineNumber":160,"author":{"gitId":"nicholasnge"},"content":"        if (results.size() \u003d\u003d 0) {"},{"lineNumber":161,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(\"No results found for: \\\"\" + keyword + \"\\\"\");"},{"lineNumber":162,"author":{"gitId":"nicholasnge"},"content":"            return;"},{"lineNumber":163,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":164,"author":{"gitId":"nicholasnge"},"content":"        System.out.println(\"Here are the results we found for: \\\"\" + keyword + \"\\\"\");"},{"lineNumber":165,"author":{"gitId":"nicholasnge"},"content":"        for (Task t : results) {"},{"lineNumber":166,"author":{"gitId":"nicholasnge"},"content":"            System.out.println(t);"},{"lineNumber":167,"author":{"gitId":"nicholasnge"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"nicholasnge"},"content":"}"}],"authorContributionMap":{"nicholasnge":169}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"3.7976931348623157E308\" maxWidth\u003d\"3.7976931348623157E308\" prefWidth\u003d\"800.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"nicholasnge":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"1000.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"oracle.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"724.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"957.0\" prefWidth\u003d\"790.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"952.0\" prefWidth\u003d\"788.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"nicholasnge":19}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import command.CommandFormatException;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Event;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"class EventTest {"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"    void EventToString() throws CommandFormatException {"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"        Event e \u003d new Event(\"eventDescription\", \"3 2 2021 1930\");"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"        assertEquals(\"[E][ ] eventDescription (Wed 19:30, 3 FEBRUARY 2021)\", e.toString());"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    void EventToStorage() throws CommandFormatException {"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"        Event e \u003d new Event(\"eventDescription\", \"3 2 2021 1930\");"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"        assertEquals(\"D\\u001EF\\u001EeventDescription\\u001E3 2 2021 1930\", e.toStorage());"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"}"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":""}],"authorContributionMap":{"nicholasnge":20}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"import entry.Task;"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"import entry.Todo;"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"import oracle.Ui;"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"import java.io.PrintStream;"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"class UiTest {"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"    private final Ui ui \u003d new Ui();"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"    void showFormatException() {"},{"lineNumber":19,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":20,"author":{"gitId":"nicholasnge"},"content":"        ui.showFormatException(\"EventCommand\");"},{"lineNumber":21,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"Event:    event {description} /{day} {month} {year} {hour}{minute}\";"},{"lineNumber":22,"author":{"gitId":"nicholasnge"},"content":"        assertEquals(res, outContent.toString().substring(0, res.length()));"},{"lineNumber":23,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(originalOut);"},{"lineNumber":24,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"nicholasnge"},"content":""},{"lineNumber":26,"author":{"gitId":"nicholasnge"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"nicholasnge"},"content":"    void showDeleteTask() {"},{"lineNumber":28,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":29,"author":{"gitId":"nicholasnge"},"content":"        int i \u003d 3;"},{"lineNumber":30,"author":{"gitId":"nicholasnge"},"content":"        Task t \u003d new Todo(\"repair watch\");"},{"lineNumber":31,"author":{"gitId":"nicholasnge"},"content":"        ui.showDeleteTask(i, t);"},{"lineNumber":32,"author":{"gitId":"nicholasnge"},"content":"        String res \u003d \"Erased: 4. [T][ ] repair watch\";"},{"lineNumber":33,"author":{"gitId":"nicholasnge"},"content":"        assertEquals(res, outContent.toString().substring(0, res.length()));"},{"lineNumber":34,"author":{"gitId":"nicholasnge"},"content":"        System.setOut(originalOut);"},{"lineNumber":35,"author":{"gitId":"nicholasnge"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"nicholasnge"},"content":"}"},{"lineNumber":37,"author":{"gitId":"nicholasnge"},"content":""}],"authorContributionMap":{"nicholasnge":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"deadline return book /by Sunday"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"deadline return book /2 2 2020 1430"},{"lineNumber":4,"author":{"gitId":"nicholasnge"},"content":"event project meeting /18 12 2017 0000"},{"lineNumber":5,"author":{"gitId":"nicholasnge"},"content":"list"},{"lineNumber":6,"author":{"gitId":"nicholasnge"},"content":"todo"},{"lineNumber":7,"author":{"gitId":"nicholasnge"},"content":"deadline 3293jof /18 12 2017 1930"},{"lineNumber":8,"author":{"gitId":"nicholasnge"},"content":"event pqehg /"},{"lineNumber":9,"author":{"gitId":"nicholasnge"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"nicholasnge"},"content":"done 3"},{"lineNumber":11,"author":{"gitId":"nicholasnge"},"content":"done"},{"lineNumber":12,"author":{"gitId":"nicholasnge"},"content":"done 13208"},{"lineNumber":13,"author":{"gitId":"nicholasnge"},"content":"list"},{"lineNumber":14,"author":{"gitId":"nicholasnge"},"content":"delete 19248"},{"lineNumber":15,"author":{"gitId":"nicholasnge"},"content":"delete"},{"lineNumber":16,"author":{"gitId":"nicholasnge"},"content":"delete 2"},{"lineNumber":17,"author":{"gitId":"nicholasnge"},"content":"list"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"bye"}],"authorContributionMap":{"nicholasnge":18}},{"path":"text-ui-test/oracle_data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nicholasnge"},"content":"T\u001eT\u001eborrow book"},{"lineNumber":2,"author":{"gitId":"nicholasnge"},"content":"D\u001eT\u001eproject meeting \u001e18 12 2017 0000"},{"lineNumber":3,"author":{"gitId":"nicholasnge"},"content":"D\u001eF\u001e3293jof \u001e18 12 2017 1930"}],"authorContributionMap":{"nicholasnge":3}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"nicholasnge"},"content":"java -classpath ..\\bin Oracle \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"nicholasnge":1,"-":20}}]
