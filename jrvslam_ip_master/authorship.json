[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"# duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"1. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"jrvslam":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jrvslam":16,"-":45}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"public class DialogBox extends HBox {"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"    private Label dialog;"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    private ImageView displayPicture;"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"            fxmlLoader.load();"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        dialog.setText(text);"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        displayPicture.setImage(img);"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"    private void flip() {"},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"        Collections.reverse(tmp);"},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"        return new DialogBox(text, img);"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"        db.flip();"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"        return db;"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":54}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"import java.awt.event.ActionEvent;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import duke.Duke;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import javafx.application.Platform;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"import javafx.collections.ListChangeListener;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.Scene;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":32}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"        duke \u003d d;"},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(d.startIntro(), dukeImage));"},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":55}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import duke.command.CommandParser;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":" * This is the main Duke class that runs the chatbot."},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke{"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"    private final Ui ui;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"    private final Storage fio;"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"     * This is the constructor for Duke, storing a new Ui and new Storage."},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    public Duke() {"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"        this.fio \u003d new Storage();"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    public String startIntro() {"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"        return this.ui.getIntroResponse();"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"    public String getResponse(String input) {"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"        String output;"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"            CommandParser parsedCommands \u003d CommandParser.parseLine(input, this.fio.getArrSize());"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"            output \u003d parsedCommands.executeCommand(ui, this.fio);"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"        } catch (DukeException e) {"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getErrorResponse(e.toString());"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"        return output;"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"jrvslam":33,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":" * DukeException extends Exception and is thrown when handling errors"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"    private final String exception;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"     * This is the constructor for a DukeException that takes in a String message."},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"     * @param exception This is the String error message."},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"    public DukeException(String exception) {"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"        super(exception);"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"        this.exception \u003d exception;"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"        return \"Omo... I\u0027m sorry...\" + exception;"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":22}},{"path":"src/main/java/duke/command/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"public enum CommandList {"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"    LIST, TODO, DEADLINE, EVENT, DONE, REMOVE, BYE, FIND;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":5}},{"path":"src/main/java/duke/command/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"import duke.task.ToDo;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":" * ParseCommands handles the parsing and execution of the inputs given to the system."},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":" * ParseCommands needs to validate the input before execution of the command."},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"public class CommandParser {"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    private final CommandList command;"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    private final String data;"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    private boolean isExit;"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"     * This is the constructor for ParseCommands which takes in a command from CommandList, and String of data about"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"     * that follows the command."},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"     * @param command This is the command that needs to be executed."},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"     * @param data This is the data for the corresponding command."},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"    public CommandParser(CommandList command, String data) {"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"        this.command \u003d command;"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        this.data \u003d data;"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        this.isExit \u003d false;"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"     * This method parses the input given. First by checking if the input is valid, otherwise throws a DukeException."},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"     * This returns a valid ParseCommand for execution."},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"     * @param input Input given that needs to be parsed"},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":"     * @param counter Number of items in the current task list"},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"     * @return Returns a valid ParseCommand that can be executed."},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"     * @throws DukeException Throws a DukeException if the input given is not valid and cannot be executed."},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":"    public static CommandParser parseLine(String input, int counter) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":"        int first \u003d input.indexOf(\" \");"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"        CommandParser commandParser;"},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"        CommandList commandList;"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"        String line \u003d \"\";"},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":"        String command;"},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"        if (first \u003d\u003d -1) {"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"            command \u003d input.toUpperCase();"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":"            command \u003d input.substring(0, first).toUpperCase();"},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"            line \u003d input.substring(first).strip();"},{"lineNumber":55,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":57,"author":{"gitId":"jrvslam"},"content":"        commandList \u003d createCommandFromString(command);"},{"lineNumber":58,"author":{"gitId":"jrvslam"},"content":"        checkCommand(input, commandList, first, counter);"},{"lineNumber":59,"author":{"gitId":"jrvslam"},"content":"        commandParser \u003d new CommandParser(commandList, line);"},{"lineNumber":60,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":61,"author":{"gitId":"jrvslam"},"content":"        return commandParser;"},{"lineNumber":62,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":64,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"jrvslam"},"content":"     * This method takes a valid ParseCommand and executes the command."},{"lineNumber":66,"author":{"gitId":"jrvslam"},"content":"     * @param ui ui to show output of the command execution"},{"lineNumber":67,"author":{"gitId":"jrvslam"},"content":"     * @param storage storage for accessing the tasks stored."},{"lineNumber":68,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"jrvslam"},"content":"    public String executeCommand(Ui ui, Storage storage) {"},{"lineNumber":70,"author":{"gitId":"jrvslam"},"content":"        String output \u003d \"\";"},{"lineNumber":71,"author":{"gitId":"jrvslam"},"content":"        String date;"},{"lineNumber":72,"author":{"gitId":"jrvslam"},"content":"        switch (this.command) {"},{"lineNumber":73,"author":{"gitId":"jrvslam"},"content":"        case TODO:"},{"lineNumber":74,"author":{"gitId":"jrvslam"},"content":"            ToDo todo \u003d new ToDo(this.data.strip());"},{"lineNumber":75,"author":{"gitId":"jrvslam"},"content":"            storage.add(todo);"},{"lineNumber":76,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getAddResponse(todo, storage.getArrSize());"},{"lineNumber":77,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"jrvslam"},"content":"        case DEADLINE:"},{"lineNumber":79,"author":{"gitId":"jrvslam"},"content":"            int byDate \u003d this.data.lastIndexOf(\"/by \");"},{"lineNumber":80,"author":{"gitId":"jrvslam"},"content":"            date \u003d this.data.substring(byDate + 4);"},{"lineNumber":81,"author":{"gitId":"jrvslam"},"content":"            Deadline deadline \u003d new Deadline(this.data.substring(0, byDate).strip(), date);"},{"lineNumber":82,"author":{"gitId":"jrvslam"},"content":"            storage.add(deadline);"},{"lineNumber":83,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getAddResponse(deadline, storage.getArrSize());"},{"lineNumber":84,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":85,"author":{"gitId":"jrvslam"},"content":"        case EVENT:"},{"lineNumber":86,"author":{"gitId":"jrvslam"},"content":"            int atDate \u003d this.data.lastIndexOf(\"/at \");"},{"lineNumber":87,"author":{"gitId":"jrvslam"},"content":"            date \u003d this.data.substring(atDate + 4);"},{"lineNumber":88,"author":{"gitId":"jrvslam"},"content":"            Event event \u003d new Event(this.data.substring(0, atDate).strip(), date);"},{"lineNumber":89,"author":{"gitId":"jrvslam"},"content":"            storage.add(event);"},{"lineNumber":90,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getAddResponse(event, storage.getArrSize());"},{"lineNumber":91,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":92,"author":{"gitId":"jrvslam"},"content":"        case DONE:"},{"lineNumber":93,"author":{"gitId":"jrvslam"},"content":"            int task_No \u003d Integer.parseInt(this.data);"},{"lineNumber":94,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getDoneResponse(storage.get(task_No - 1).doTask());"},{"lineNumber":95,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":96,"author":{"gitId":"jrvslam"},"content":"        case LIST:"},{"lineNumber":97,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getListResponse(storage.getArr());"},{"lineNumber":98,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":99,"author":{"gitId":"jrvslam"},"content":"        case REMOVE:"},{"lineNumber":100,"author":{"gitId":"jrvslam"},"content":"            int remove_No \u003d Integer.parseInt(this.data);"},{"lineNumber":101,"author":{"gitId":"jrvslam"},"content":"            Task task \u003d storage.remove(remove_No - 1);"},{"lineNumber":102,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getRemoveResponse(task, storage.getArrSize());"},{"lineNumber":103,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"jrvslam"},"content":"        case FIND:"},{"lineNumber":105,"author":{"gitId":"jrvslam"},"content":"            ArrayList\u003cTask\u003e results \u003d storage.find(this.data);"},{"lineNumber":106,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getListResponse(results);"},{"lineNumber":107,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"jrvslam"},"content":"        case BYE:"},{"lineNumber":109,"author":{"gitId":"jrvslam"},"content":"            this.isExit \u003d true;"},{"lineNumber":110,"author":{"gitId":"jrvslam"},"content":"            storage.beginClose();"},{"lineNumber":111,"author":{"gitId":"jrvslam"},"content":"            storage.closeFile();"},{"lineNumber":112,"author":{"gitId":"jrvslam"},"content":"            output \u003d ui.getGoodbyeResponse();"},{"lineNumber":113,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":116,"author":{"gitId":"jrvslam"},"content":"        return output;"},{"lineNumber":117,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":119,"author":{"gitId":"jrvslam"},"content":"    private static CommandList createCommandFromString(String command) throws DukeException {"},{"lineNumber":120,"author":{"gitId":"jrvslam"},"content":"        CommandList commandList;"},{"lineNumber":121,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":122,"author":{"gitId":"jrvslam"},"content":"            commandList \u003d CommandList.valueOf(command);"},{"lineNumber":123,"author":{"gitId":"jrvslam"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":124,"author":{"gitId":"jrvslam"},"content":"            throw new DukeException(\" I don\u0027t understand! :(\");"},{"lineNumber":125,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"jrvslam"},"content":"        return commandList;"},{"lineNumber":127,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":129,"author":{"gitId":"jrvslam"},"content":"    private static void checkCommand(String input, CommandList commandList, int index, int counter) throws DukeException {"},{"lineNumber":130,"author":{"gitId":"jrvslam"},"content":"        boolean test \u003d index \u003d\u003d -1 || input.substring(index).isBlank();"},{"lineNumber":131,"author":{"gitId":"jrvslam"},"content":"        switch (commandList) {"},{"lineNumber":132,"author":{"gitId":"jrvslam"},"content":"        case TODO:"},{"lineNumber":133,"author":{"gitId":"jrvslam"},"content":"        case FIND:"},{"lineNumber":134,"author":{"gitId":"jrvslam"},"content":"            if (test) {"},{"lineNumber":135,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Cannot be empty! :(\");"},{"lineNumber":136,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":138,"author":{"gitId":"jrvslam"},"content":"        case DEADLINE:"},{"lineNumber":139,"author":{"gitId":"jrvslam"},"content":"            if (test) {"},{"lineNumber":140,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Deadline cannot be empty! :(\");"},{"lineNumber":141,"author":{"gitId":"jrvslam"},"content":"            } else if (!input.contains(\"/by\")) {"},{"lineNumber":142,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Deadline must have a date! :(\");"},{"lineNumber":143,"author":{"gitId":"jrvslam"},"content":"            } else {"},{"lineNumber":144,"author":{"gitId":"jrvslam"},"content":"                int by \u003d input.indexOf(\"/by\");"},{"lineNumber":145,"author":{"gitId":"jrvslam"},"content":"                if (input.substring(index, by).isBlank()) {"},{"lineNumber":146,"author":{"gitId":"jrvslam"},"content":"                    throw new DukeException(\" Deadline must have a task! :(\");"},{"lineNumber":147,"author":{"gitId":"jrvslam"},"content":"                } else if (input.substring(by + 3).isBlank()) {"},{"lineNumber":148,"author":{"gitId":"jrvslam"},"content":"                    throw new DukeException(\" Deadline date cannot be empty! :(\");"},{"lineNumber":149,"author":{"gitId":"jrvslam"},"content":"                }"},{"lineNumber":150,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":151,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":152,"author":{"gitId":"jrvslam"},"content":"        case EVENT:"},{"lineNumber":153,"author":{"gitId":"jrvslam"},"content":"            if (test) {"},{"lineNumber":154,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Event cannot be empty! :(\");"},{"lineNumber":155,"author":{"gitId":"jrvslam"},"content":"            } else if (!input.contains(\"/at\")) {"},{"lineNumber":156,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Event must have a date! :(\");"},{"lineNumber":157,"author":{"gitId":"jrvslam"},"content":"            } else {"},{"lineNumber":158,"author":{"gitId":"jrvslam"},"content":"                int at \u003d input.indexOf(\"/at\");"},{"lineNumber":159,"author":{"gitId":"jrvslam"},"content":"                if (input.substring(index, at).isBlank()) {"},{"lineNumber":160,"author":{"gitId":"jrvslam"},"content":"                    throw new DukeException(\" Event must have a task! :(\");"},{"lineNumber":161,"author":{"gitId":"jrvslam"},"content":"                } else if (input.substring(at + 3).isBlank()) {"},{"lineNumber":162,"author":{"gitId":"jrvslam"},"content":"                    throw new DukeException(\" Event date cannot be empty! :(\");"},{"lineNumber":163,"author":{"gitId":"jrvslam"},"content":"                }"},{"lineNumber":164,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":165,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":166,"author":{"gitId":"jrvslam"},"content":"        case DONE:"},{"lineNumber":167,"author":{"gitId":"jrvslam"},"content":"        case REMOVE:"},{"lineNumber":168,"author":{"gitId":"jrvslam"},"content":"            if (test) {"},{"lineNumber":169,"author":{"gitId":"jrvslam"},"content":"                throw new DukeException(\" Which task? :(\");"},{"lineNumber":170,"author":{"gitId":"jrvslam"},"content":"            } else {"},{"lineNumber":171,"author":{"gitId":"jrvslam"},"content":"                int no \u003d Integer.parseInt(input.substring(index + 1));"},{"lineNumber":172,"author":{"gitId":"jrvslam"},"content":"                if (no \u003e counter || no \u003c 1) {"},{"lineNumber":173,"author":{"gitId":"jrvslam"},"content":"                    throw new DukeException(\" No such task! :(\");"},{"lineNumber":174,"author":{"gitId":"jrvslam"},"content":"                }"},{"lineNumber":175,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":176,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":177,"author":{"gitId":"jrvslam"},"content":"        case LIST:"},{"lineNumber":178,"author":{"gitId":"jrvslam"},"content":"            //Fallthrough"},{"lineNumber":179,"author":{"gitId":"jrvslam"},"content":"        case BYE:"},{"lineNumber":180,"author":{"gitId":"jrvslam"},"content":"            //Fallthrough"},{"lineNumber":181,"author":{"gitId":"jrvslam"},"content":"        default:"},{"lineNumber":182,"author":{"gitId":"jrvslam"},"content":"            break;"},{"lineNumber":183,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":185,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":186,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":187,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":188,"author":{"gitId":"jrvslam"},"content":"     * This method is used to get if the command is an exit command."},{"lineNumber":189,"author":{"gitId":"jrvslam"},"content":"     * @return This returns a boolean that shows if the command given is to exit the system"},{"lineNumber":190,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":191,"author":{"gitId":"jrvslam"},"content":"    public boolean canExit() {"},{"lineNumber":192,"author":{"gitId":"jrvslam"},"content":"        return this.isExit;"},{"lineNumber":193,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":195,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"jrvslam"},"content":"     * This method is used to get the command stored in the ParseCommand"},{"lineNumber":197,"author":{"gitId":"jrvslam"},"content":"     * @return This returns the CommandList command."},{"lineNumber":198,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"jrvslam"},"content":"    public CommandList getCommand() {"},{"lineNumber":200,"author":{"gitId":"jrvslam"},"content":"        return command;"},{"lineNumber":201,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":202,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":203,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":204,"author":{"gitId":"jrvslam"},"content":"     * This method is used to get the String data of the task."},{"lineNumber":205,"author":{"gitId":"jrvslam"},"content":"     * @return This returns the String of data for the corresponding task"},{"lineNumber":206,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":207,"author":{"gitId":"jrvslam"},"content":"    public String getData() {"},{"lineNumber":208,"author":{"gitId":"jrvslam"},"content":"        return data;"},{"lineNumber":209,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":210,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":210}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import duke.task.Event;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import duke.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"import java.io.File;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"import java.io.FileWriter;"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"import java.nio.file.Path;"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"import java.util.Scanner;"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":" * This is the Storage class that handles saving tasks to file, reading save file and updating Tasks list."},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    private FileWriter fio;"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    private final File file;"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"     * This is the Constructor for Storage. Creates a new ArrayList to store Tasks, initiates File and populates list."},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"    public Storage() {"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"        this.file \u003d initiateFile();"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"        populateList(arr);"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        this.tasks \u003d arr;"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"            this.fio \u003d new FileWriter(file);"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":"            System.out.println(\"Unable to create FileWriter\");"},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"    private File initiateFile() {"},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"        String home \u003d System.getProperty(\"user.home\");"},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":"        // inserts correct file path separator on *nix and Windows"},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":"        // works on *nix"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"        // works on Windows"},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"        Path path \u003d java.nio.file.Paths.get(home, \"iP\", \"data\");"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"        boolean directoryExists \u003d java.nio.file.Files.exists(path);"},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":"        File file \u003d null;"},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"            if (!directoryExists) {"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"                java.nio.file.Files.createDirectories(path);"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"                System.out.println(\"   Path Created: \" + path);"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":"            } else {"},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"                System.out.println(\"   Path exits\");"},{"lineNumber":55,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"jrvslam"},"content":"            String filePath \u003d path + File.separator + \"Duke.txt\";"},{"lineNumber":57,"author":{"gitId":"jrvslam"},"content":"            file \u003d new File(filePath);"},{"lineNumber":58,"author":{"gitId":"jrvslam"},"content":"            if (file.createNewFile()) {"},{"lineNumber":59,"author":{"gitId":"jrvslam"},"content":"                System.out.println(\"   File created: \" + file.getName());"},{"lineNumber":60,"author":{"gitId":"jrvslam"},"content":"            } else {"},{"lineNumber":61,"author":{"gitId":"jrvslam"},"content":"                System.out.println(\"   File exits\");"},{"lineNumber":62,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":64,"author":{"gitId":"jrvslam"},"content":"            System.out.println(\"Failed to create File\");"},{"lineNumber":65,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":66,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"jrvslam"},"content":"        return file;"},{"lineNumber":68,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":70,"author":{"gitId":"jrvslam"},"content":"    private void populateList(ArrayList\u003cTask\u003e arr) {"},{"lineNumber":71,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"jrvslam"},"content":"            Scanner reader \u003d new Scanner(this.file);"},{"lineNumber":73,"author":{"gitId":"jrvslam"},"content":"            while (reader.hasNextLine()) {"},{"lineNumber":74,"author":{"gitId":"jrvslam"},"content":"                String data \u003d reader.nextLine();"},{"lineNumber":75,"author":{"gitId":"jrvslam"},"content":"                int commandEnd \u003d data.indexOf(\" | \");"},{"lineNumber":76,"author":{"gitId":"jrvslam"},"content":"                String task \u003d data.substring(0, commandEnd);"},{"lineNumber":77,"author":{"gitId":"jrvslam"},"content":"                data \u003d data.substring(commandEnd + 3);"},{"lineNumber":78,"author":{"gitId":"jrvslam"},"content":"                int stateEnd \u003d data.indexOf(\" | \");"},{"lineNumber":79,"author":{"gitId":"jrvslam"},"content":"                String state \u003d data.substring(0, stateEnd);"},{"lineNumber":80,"author":{"gitId":"jrvslam"},"content":"                data \u003d data.substring(stateEnd + 3);"},{"lineNumber":81,"author":{"gitId":"jrvslam"},"content":"                int inputEnd \u003d data.indexOf(\" | \");"},{"lineNumber":82,"author":{"gitId":"jrvslam"},"content":"                switch (task) {"},{"lineNumber":83,"author":{"gitId":"jrvslam"},"content":"                case \"T\":"},{"lineNumber":84,"author":{"gitId":"jrvslam"},"content":"                    arr.add(new ToDo(data, Integer.parseInt(state)));"},{"lineNumber":85,"author":{"gitId":"jrvslam"},"content":"                    break;"},{"lineNumber":86,"author":{"gitId":"jrvslam"},"content":"                case \"D\":"},{"lineNumber":87,"author":{"gitId":"jrvslam"},"content":"                    arr.add(new Deadline(data.substring(0, inputEnd), data.substring(inputEnd + 3),"},{"lineNumber":88,"author":{"gitId":"jrvslam"},"content":"                            Integer.parseInt(state)));"},{"lineNumber":89,"author":{"gitId":"jrvslam"},"content":"                    break;"},{"lineNumber":90,"author":{"gitId":"jrvslam"},"content":"                case \"E\":"},{"lineNumber":91,"author":{"gitId":"jrvslam"},"content":"                    arr.add(new Event(data.substring(0, inputEnd), data.substring(inputEnd + 3),"},{"lineNumber":92,"author":{"gitId":"jrvslam"},"content":"                            Integer.parseInt(state)));"},{"lineNumber":93,"author":{"gitId":"jrvslam"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"jrvslam"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":96,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":97,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":100,"author":{"gitId":"jrvslam"},"content":"    private void initialiseFW() {"},{"lineNumber":101,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"jrvslam"},"content":"            this.fio \u003d new FileWriter(file);"},{"lineNumber":103,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":104,"author":{"gitId":"jrvslam"},"content":"            System.out.println(\"Unable to create FileWriter\");"},{"lineNumber":105,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":106,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"jrvslam"},"content":"    public ArrayList\u003cTask\u003e find(String input) {"},{"lineNumber":109,"author":{"gitId":"jrvslam"},"content":"        ArrayList\u003cTask\u003e temp \u003d new ArrayList\u003c\u003e();"},{"lineNumber":110,"author":{"gitId":"jrvslam"},"content":"        this.tasks.forEach((x) -\u003e {"},{"lineNumber":111,"author":{"gitId":"jrvslam"},"content":"            if (x.getInput().toUpperCase().strip().contains(input.toUpperCase().strip())) {"},{"lineNumber":112,"author":{"gitId":"jrvslam"},"content":"                temp.add(x);"},{"lineNumber":113,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"jrvslam"},"content":"        } );"},{"lineNumber":115,"author":{"gitId":"jrvslam"},"content":"        return temp;"},{"lineNumber":116,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":118,"author":{"gitId":"jrvslam"},"content":"    public void writeToFile(Task task) {"},{"lineNumber":119,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":120,"author":{"gitId":"jrvslam"},"content":"            this.fio.write(task.saveTask() + \"\\n\");"},{"lineNumber":121,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":122,"author":{"gitId":"jrvslam"},"content":"            System.out.println(\"Unable to write to file\");"},{"lineNumber":123,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":124,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":127,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":128,"author":{"gitId":"jrvslam"},"content":"     * This begins the close procedure by running through all tasks stored and writing to the file."},{"lineNumber":129,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"jrvslam"},"content":"    public void beginClose() {"},{"lineNumber":131,"author":{"gitId":"jrvslam"},"content":"        this.initialiseFW();"},{"lineNumber":132,"author":{"gitId":"jrvslam"},"content":"        for (Task task: this.tasks) {"},{"lineNumber":133,"author":{"gitId":"jrvslam"},"content":"            writeToFile(task);"},{"lineNumber":134,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":137,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"jrvslam"},"content":"     * This closes the FileWriter used by the chatbot in Storage."},{"lineNumber":139,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"jrvslam"},"content":"    public void closeFile() {"},{"lineNumber":141,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":142,"author":{"gitId":"jrvslam"},"content":"            this.fio.close();"},{"lineNumber":143,"author":{"gitId":"jrvslam"},"content":"        } catch (IOException e) {"},{"lineNumber":144,"author":{"gitId":"jrvslam"},"content":"            System.out.println(\"Unable to close file\");"},{"lineNumber":145,"author":{"gitId":"jrvslam"},"content":"            e.printStackTrace();"},{"lineNumber":146,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":148,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":150,"author":{"gitId":"jrvslam"},"content":"    public void add(Task task) {"},{"lineNumber":151,"author":{"gitId":"jrvslam"},"content":"        this.tasks.add(task);"},{"lineNumber":152,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":153,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":154,"author":{"gitId":"jrvslam"},"content":"    public Task remove(int index) {"},{"lineNumber":155,"author":{"gitId":"jrvslam"},"content":"        return this.tasks.remove(index);"},{"lineNumber":156,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":158,"author":{"gitId":"jrvslam"},"content":"    public ArrayList\u003cTask\u003e getArr() {"},{"lineNumber":159,"author":{"gitId":"jrvslam"},"content":"        return this.tasks;"},{"lineNumber":160,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":162,"author":{"gitId":"jrvslam"},"content":"    public int getArrSize() {"},{"lineNumber":163,"author":{"gitId":"jrvslam"},"content":"        return tasks.size();"},{"lineNumber":164,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":166,"author":{"gitId":"jrvslam"},"content":"    public Task get(int index) {"},{"lineNumber":167,"author":{"gitId":"jrvslam"},"content":"        return this.tasks.get(index);"},{"lineNumber":168,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":169}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"    private final LocalDateTime localDate;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"    public Deadline(String input, String date) {"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"        this.localDate \u003d new ParseDates().parseString(date);"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    public Deadline(String input, String date, int done) {"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"        this.localDate \u003d new ParseDates().parseString(date);"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"        if (done \u003d\u003d 1) {"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"            this.doTask();"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    public String saveTask() {"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"        return \"D\" + super.saveTask() + \" | \" + localDate.format(dateTimeFormatter);"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"    public String toString(){"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + localDate.format(dateTimeFormatter) + \")\";"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":34}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"public class Event extends Task{"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"    private final LocalDateTime localDate;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"    public Event(String input, String date) {"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"        this.localDate \u003d new ParseDates().parseString(date);"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    public Event(String input, String date, int done) {"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"        this.localDate \u003d new ParseDates().parseString(date);"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"        if (done \u003d\u003d 1) {"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"            this.doTask();"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    public String saveTask() {"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"        return \"E\" + super.saveTask() + \" | \" + localDate.format(dateTimeFormatter);"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + localDate.format(dateTimeFormatter) + \")\";"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":33}},{"path":"src/main/java/duke/task/ParseDates.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"public class ParseDates {"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"    public LocalDateTime parseString(String string) {"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"        DateTimeFormatter dateTimeFormatter1 \u003d new DateTimeFormatterBuilder()"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"                .appendPattern(\"[dd/MM/yyyy][yyyy-MM-dd][MMM dd yyyy][dd MMM yyyy][dd MM yyyy][ddMMyyyy]\")"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"                .optionalStart().appendPattern(\" HHmm\").optionalEnd()"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"                .toFormatter();"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"        return LocalDateTime.parse(string, dateTimeFormatter1);"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":19}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":" * This is the Task class that a user can input to the chatbot"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"    private final String input;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"    private taskState state;"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"     * This is the Task constructor."},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"     * @param input This stores the String input for the Task."},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    public Task(String input) {"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"        this.input \u003d input;"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"        this.state \u003d taskState.NOTDONE;"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"     * This modifies the task to be in the Task_State.DONE."},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"     * @return This returns the modified done Task."},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    public Task doTask() {"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"        this.state \u003d taskState.DONE;"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"        return this;"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"     * This gets the input stored in the Task."},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"     * @return This returns the input String stored."},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"    public String getInput() {"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"        return input;"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"     * This returns the current state of the Task."},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"     * @return This returns Task_State of the task."},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"    public taskState getState() {"},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"        return state;"},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"     * This passes the tasks to be saved to Storage in a readable manner for Storage."},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"     * @return This returns the modified save message that\u0027s stored on a file for saving."},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":"    public String saveTask() {"},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":"        String stateB;"},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"        if (state \u003d\u003d taskState.DONE) {"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"            stateB \u003d \"1\";"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"        } else {"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":"            stateB \u003d \"0\";"},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"jrvslam"},"content":"        return \" | \" + stateB + \" | \" + input;"},{"lineNumber":56,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":58,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"jrvslam"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"jrvslam"},"content":"        return \"[\" + state + \"] \" + input;"},{"lineNumber":61,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":62}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"    public ToDo(String input) {"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"    public ToDo(String input, int done) {"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"        super(input);"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"        if (done \u003d\u003d 1) {"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"            this.doTask();"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    public String saveTask() {"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"        return \"T\" + super.saveTask();"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":24}},{"path":"src/main/java/duke/task/taskState.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"public enum taskState {"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"    NOTDONE {"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"        @Override"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"        public String toString() {"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"            return \" \";"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"    }, DONE {"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"        @Override"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"        public String toString() {"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"            return \"x\";"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":15}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":" * Ui Class that handles passing output"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":" */"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"public class Ui {"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"    private final static String CHATBOT_NAME \u003d \"Rawrz\";"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"    private final static String BORDER \u003d \"___\";"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"     * Constructor for Ui. Creates a Scanner with System.in"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"    public Ui() {"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"     * Shows the introduction message to the user."},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    public String getIntroResponse() {"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":"        return \"   Hello there! I\u0027m \" + CHATBOT_NAME + \", always here for you!\\n   How can I help you today?\";"},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"     * Shows the goodbye message to the user."},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"    public String getGoodbyeResponse() {"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"        return \"\\n   Bye! Hope to see you again! \" + CHATBOT_NAME + \"! :)\";"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":"     * Shows the error message to the user."},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"     * @param error This is the String error message."},{"lineNumber":37,"author":{"gitId":"jrvslam"},"content":"     * @return This is Duke\u0027s response"},{"lineNumber":38,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"jrvslam"},"content":"    public String getErrorResponse(String error) {"},{"lineNumber":40,"author":{"gitId":"jrvslam"},"content":"        return error;"},{"lineNumber":41,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":43,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":44,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"jrvslam"},"content":"     * Shows the remove message to the user."},{"lineNumber":46,"author":{"gitId":"jrvslam"},"content":"     * @param task This is the task that is removed"},{"lineNumber":47,"author":{"gitId":"jrvslam"},"content":"     * @param noTasks This is the number of tasks left after removal."},{"lineNumber":48,"author":{"gitId":"jrvslam"},"content":"     * @return This is Duke\u0027s response"},{"lineNumber":49,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"jrvslam"},"content":"    public String getRemoveResponse(Task task, int noTasks) {"},{"lineNumber":51,"author":{"gitId":"jrvslam"},"content":"        return \"Okay! I\u0027ve removed this task:\\n\" + task +\"\\nNow you have \" + noTasks + \" tasks in the list\";"},{"lineNumber":52,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":54,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"jrvslam"},"content":"     * Shows the list of tasks stored in the chatbot to the user"},{"lineNumber":56,"author":{"gitId":"jrvslam"},"content":"     * @param arrL This is the Storage that contains the list of Tasks stored."},{"lineNumber":57,"author":{"gitId":"jrvslam"},"content":"     * @return This is Duke\u0027s response"},{"lineNumber":58,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"jrvslam"},"content":"    public String getListResponse(ArrayList\u003cTask\u003e arrL) {"},{"lineNumber":60,"author":{"gitId":"jrvslam"},"content":"        String output;"},{"lineNumber":61,"author":{"gitId":"jrvslam"},"content":"        if (arrL.isEmpty()) {"},{"lineNumber":62,"author":{"gitId":"jrvslam"},"content":"            output \u003d \"No Tasks found!\";"},{"lineNumber":63,"author":{"gitId":"jrvslam"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"jrvslam"},"content":"            output \u003d \"Here are the results!\\n\";"},{"lineNumber":65,"author":{"gitId":"jrvslam"},"content":"            for (int i \u003d 0; i \u003c arrL.size(); i++) {"},{"lineNumber":66,"author":{"gitId":"jrvslam"},"content":"                output \u003d output.concat(\"   \" + (i + 1) + \". \" + arrL.get(i) + \"\\n\");"},{"lineNumber":67,"author":{"gitId":"jrvslam"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"jrvslam"},"content":"        return output;"},{"lineNumber":70,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":72,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"jrvslam"},"content":"     * Shows the done message to the user."},{"lineNumber":74,"author":{"gitId":"jrvslam"},"content":"     * @param task This is the task that has been completed."},{"lineNumber":75,"author":{"gitId":"jrvslam"},"content":"     * @return This is Duke\u0027s response"},{"lineNumber":76,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"jrvslam"},"content":"    public String getDoneResponse(Task task) {"},{"lineNumber":78,"author":{"gitId":"jrvslam"},"content":"        return \"   Nice! I\u0027ve marked this task as done:\\n   \" + task;"},{"lineNumber":79,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":81,"author":{"gitId":"jrvslam"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"jrvslam"},"content":"     * Shows the add task message to the user."},{"lineNumber":83,"author":{"gitId":"jrvslam"},"content":"     * @param task This is the task that is added."},{"lineNumber":84,"author":{"gitId":"jrvslam"},"content":"     * @param noTasks This is the number of tasks that are now in the system."},{"lineNumber":85,"author":{"gitId":"jrvslam"},"content":"     * @return This is Duke\u0027s response"},{"lineNumber":86,"author":{"gitId":"jrvslam"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"jrvslam"},"content":"    public String getAddResponse(Task task, int noTasks) {"},{"lineNumber":88,"author":{"gitId":"jrvslam"},"content":"        return \"Got it! I\u0027ve added this task:\\n   \" + task + \"\\nNow you have \" + noTasks + \" tasks in the list\";"},{"lineNumber":89,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":90}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\"\u003e"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"    \u003cpadding\u003e"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"    \u003c/padding\u003e"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"75.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"      \u003cHBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"         \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"      \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"jrvslam":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"\u003e"},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"      \u003copaqueInsets\u003e"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"         \u003cInsets /\u003e"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"      \u003c/opaqueInsets\u003e"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"      \u003cpadding\u003e"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"         \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":"      \u003c/padding\u003e\u003c/TextField\u003e"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"jrvslam":22}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"import duke.command.CommandList;"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"import duke.command.CommandParser;"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"import duke.task.taskState;"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":12,"author":{"gitId":"jrvslam"},"content":"public class DukeTest {"},{"lineNumber":13,"author":{"gitId":"jrvslam"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"jrvslam"},"content":"    public void dummyTest(){"},{"lineNumber":15,"author":{"gitId":"jrvslam"},"content":"        assertEquals(2, 2);"},{"lineNumber":16,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"jrvslam"},"content":"    public void taskTest() {"},{"lineNumber":20,"author":{"gitId":"jrvslam"},"content":"        Deadline deadline \u003d new Deadline(\"Bake Cake\", \"Mar 20 2021\");"},{"lineNumber":21,"author":{"gitId":"jrvslam"},"content":"        deadline.doTask();"},{"lineNumber":22,"author":{"gitId":"jrvslam"},"content":"        assertEquals(taskState.DONE, deadline.getState());"},{"lineNumber":23,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"jrvslam"},"content":""},{"lineNumber":25,"author":{"gitId":"jrvslam"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"jrvslam"},"content":"    public void parseCommandTest_givenEventWithDate_commandIsEqual() {"},{"lineNumber":27,"author":{"gitId":"jrvslam"},"content":"        CommandParser commandParserA \u003d new CommandParser(CommandList.EVENT, \"Eat Cake /at Mar 20 2021\");"},{"lineNumber":28,"author":{"gitId":"jrvslam"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"jrvslam"},"content":"            CommandParser commandParserB \u003d CommandParser.parseLine(\"eVenT Eat Cake /at Mar 20 2021\", 0);"},{"lineNumber":30,"author":{"gitId":"jrvslam"},"content":"            assertEquals(commandParserA.getData(), commandParserB.getData());"},{"lineNumber":31,"author":{"gitId":"jrvslam"},"content":"            assertEquals(commandParserA.getCommand(), commandParserB.getCommand());"},{"lineNumber":32,"author":{"gitId":"jrvslam"},"content":"        } catch (DukeException e) {"},{"lineNumber":33,"author":{"gitId":"jrvslam"},"content":"            fail();"},{"lineNumber":34,"author":{"gitId":"jrvslam"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"jrvslam"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"jrvslam"},"content":"}"}],"authorContributionMap":{"jrvslam":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jrvslam"},"content":"todo buy eggs"},{"lineNumber":2,"author":{"gitId":"jrvslam"},"content":"todo buy milk"},{"lineNumber":3,"author":{"gitId":"jrvslam"},"content":"deadline bake cake /by 23rd Jan"},{"lineNumber":4,"author":{"gitId":"jrvslam"},"content":"deadline deliver cake /by 24th Jan 2359"},{"lineNumber":5,"author":{"gitId":"jrvslam"},"content":"event birthday party! /at 24th Jan"},{"lineNumber":6,"author":{"gitId":"jrvslam"},"content":"event celebrate /at always!"},{"lineNumber":7,"author":{"gitId":"jrvslam"},"content":"list"},{"lineNumber":8,"author":{"gitId":"jrvslam"},"content":"done 1"},{"lineNumber":9,"author":{"gitId":"jrvslam"},"content":"done 2"},{"lineNumber":10,"author":{"gitId":"jrvslam"},"content":"list"},{"lineNumber":11,"author":{"gitId":"jrvslam"},"content":"bye"}],"authorContributionMap":{"jrvslam":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"jrvslam"},"content":"java -classpath ..\\bin duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"jrvslam":1,"-":20}}]
