[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":" * Main implementation for the Duke chat-bot."},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP v0.1"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    /** Allows for easy change of the bot name in future. **/"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"    final protected static String BOT_NAME \u003d \"DukeNukem\";"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    private static TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    private static Storage storage;"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"     * Creates a new Duke object with the given file-path for {@Storage}."},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param filePath file path for initialization of Storage"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    public Duke(String filePath) {"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        storage \u003d new Storage(filePath).load();"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"            tasks \u003d new TaskList(storage);"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (DukeException e) {"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(e.getMessage());"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"     * Calls the subroutines that the bot is meant to run."},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    public void run() {"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        listenInput();"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        quit();"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"        new Duke(\"data/data.txt\").run();"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"     * Listens to the user\u0027s input, and passes it to the input handler."},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void listenInput() {"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        Scanner scannerObject \u003d new Scanner(System.in);"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"        boolean stillListening \u003d true;"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"        while (stillListening) {"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printSeparators();"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"            String inputString \u003d scannerObject.nextLine().trim();;"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printSeparators();"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"                Parser.parse(inputString, tasks, storage);"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (InvalidCommandException | InvalidInputException | InvalidTaskException e) {"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"                Ui.printMessage(e.getMessage());"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"     * Quits the program and provides provisions for clean-up."},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void quit() {"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"Hope you had an enjoyable experience! Good-bye~\");"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"        System.exit(0);"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":68,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"    public DukeException() {"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"        super(\"    Something went wrong!\");"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":7}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class InvalidCommandException extends IllegalArgumentException {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"    public InvalidCommandException() {"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"        super(\"    This isn\u0027t a valid command!\");"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":7}},{"path":"src/main/java/duke/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class InvalidInputException extends IllegalArgumentException {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"    public InvalidInputException(String msg) {"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"        super(\"    \" + msg);"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":7}},{"path":"src/main/java/duke/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"public class InvalidTaskException extends IllegalArgumentException {"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"    public InvalidTaskException() {"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"        super(\"    Hmm... Looks like the task number isn\u0027t correct. Check it and try again!\");"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":7}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for parsing of input to be routed to specific handlers."},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":" *  @author Soon Keat Neo"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":" *  @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"     * Handle the input and passes to the relevant methods."},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param inputString User input string to be handled"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param tasks Task List to be manipulated"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param storage {@Storage} object to be used"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void parse(String inputString, TaskList tasks, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        if (inputString.equals(\"list\")) {"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"            tasks.print();"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.equals(\"bye\")) {"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"            Duke.quit();"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"done\")) {"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"            tasks.completeTask(inputString, storage);"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"delete\")) {"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"            tasks.deleteTask(inputString, storage);"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"todo\")) {"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"                String taskString \u003d inputString.substring(5);"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"                Todo newTodo \u003d new Todo(taskString);"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"                tasks.addTask(newTodo);"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"                String saveToDisk \u003d \"T | 0 | \" + taskString;"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"                storage.saveTaskToDisk(saveToDisk);"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"Your input format doesn\u0027t seem right! For todos, it needs to be: todo \u003ctitle\u003e\");"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"event\")) {"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"                String[] eventString \u003d inputString.split(\"/at\");"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"                String taskString \u003d eventString[0].substring(6).trim();"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"                String dateTime \u003d eventString[1].trim();"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"                Event newEvent \u003d new Event(taskString, dateTime);"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"                tasks.addTask(newEvent);"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"                String saveToDisk \u003d \"E | 0 | \" + taskString + \" | \" + dateTime;"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"                storage.saveTaskToDisk(saveToDisk);"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"Your input format doesn\u0027t seem right! For events, it needs to be: event \u003ctitle\u003e /at [YYYY-MM-DD]\");"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"The format of your date and time seem to be wrong! Ensure it adheres to YYYY-MM-DD format.\");"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"deadline\")) {"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"                String[] eventString \u003d inputString.split(\"/by\");"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"                String taskString \u003d eventString[0].substring(9).trim();"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"                String deadlineTime \u003d eventString[1].trim();"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"                Deadline newDeadline \u003d new Deadline(taskString, deadlineTime);"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"                tasks.addTask(newDeadline);"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"                String saveToDisk \u003d \"D | 0 | \" + taskString + \" | \" + deadlineTime;"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"                storage.saveTaskToDisk(saveToDisk);"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (ArrayIndexOutOfBoundsException | StringIndexOutOfBoundsException e) {"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"Your input format doesn\u0027t seem right! For deadlines, it needs to be: deadline \u003ctitle\u003e /at [YYYY-MM-DD]\");"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"The format of your date and time seem to be wrong! Ensure it adheres to YYYY-MM-DD format.\");"},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"        } else if (inputString.startsWith(\"find\")) {"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"                tasks.find(inputString.substring(5).trim());"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new InvalidInputException(\"Your input format doesn\u0027t seem right! For find, it needs to be: find \u003cstring\u003e\");"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new InvalidCommandException();"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":81}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":" * Handles the opening, writing and opening of files."},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP v0.1"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    private String filePath;"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    private File dataFile;"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     * Constructs the Storage object with the given file-path."},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param filePath File path to be used for the Storage object"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public Storage(String filePath) {"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"     * Loads the Storage object and creates paths if non-existent."},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return A copy of the Storage object"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    public Storage load() {"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        this.dataFile \u003d new File(this.filePath);"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        this.dataFile.getParentFile().mkdirs();"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!dataFile.exists()) {"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"            try {"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"                this.dataFile.createNewFile();"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"            } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"                throw new DukeException();"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"        /*"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"        this.dataDirectory \u003d new File(\"data\");"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!this.dataDirectory.exists()) {"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"            // mkdirs does not throw any exception even when failing"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"            this.dataDirectory.mkdirs();"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"        this.dataFile \u003d new File(this.dataDirectory.getPath() + File.separator + \"data.txt\");"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"        */"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"        return this;"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"     * Reads the contents of the opened file."},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return A String list of contents of the given file."},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"    public List\u003cString\u003e read() {"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"        List\u003cString\u003e fileContents;"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"            fileContents \u003d Files.readAllLines(dataFile.toPath());"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IOException e) {"},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new DukeException();"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"        return fileContents;"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"     * Replaces a line in the file to facilitate deletion and replacement."},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param oldString String of the old task."},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param newString String of the new task."},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"    public void deleteReplaceTaskFromDisk(String oldString, String newString) {"},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"            List\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e(Files.readAllLines(this.dataFile.toPath()));"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"            for (int i \u003d 0; i \u003c fileContents.size(); i++) {"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"                if (fileContents.get(i).equals(oldString)) {"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"                    fileContents.set(i, newString);"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"                    break;"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"                }"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"            Files.write(this.dataFile.toPath(), fileContents);"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IOException e) {"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(e.getMessage());"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":86,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"SoonKeatNeo"},"content":"     * Appends a given String to the file."},{"lineNumber":88,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param string String to be appended to the file"},{"lineNumber":89,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"SoonKeatNeo"},"content":"    public void saveTaskToDisk(String string) {"},{"lineNumber":91,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"SoonKeatNeo"},"content":"            FileWriter writer \u003d new FileWriter(this.dataFile, true);"},{"lineNumber":93,"author":{"gitId":"SoonKeatNeo"},"content":"            writer.write(string + System.lineSeparator());"},{"lineNumber":94,"author":{"gitId":"SoonKeatNeo"},"content":"            writer.close();"},{"lineNumber":95,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(e.getMessage());"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":99}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Event;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":" * Stores and manages the list of {@Task} created."},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP v0.1"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"public class TaskList {"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    private static List\u003cTask\u003e taskList;"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"     * Creates a new task list without reading from existing storage."},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    public TaskList() {"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"     * Overloaded constructor creating a new task list reading from existing {@Storage}."},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param storage Storage object to be read from"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    public TaskList(Storage storage) {"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"        initializeTasks(storage.read());"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"     * Prints a list of {@Task} matching the given string."},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param inputString the String to search for"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    public void find(String inputString) {"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"        boolean hasPrintedTasks \u003d false;"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"        int counter \u003d 0;"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"        for (int i \u003d 0; i \u003c this.taskList.size(); i++) {"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"            Task task \u003d this.taskList.get(i);"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"            if (task.getDescription().toLowerCase().contains(inputString.toLowerCase())) {"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"                if (!hasPrintedTasks) {"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"                    Ui.printMessage(\"Here are the list of matching tasks: \");"},{"lineNumber":48,"author":{"gitId":"SoonKeatNeo"},"content":"                    hasPrintedTasks \u003d true;"},{"lineNumber":49,"author":{"gitId":"SoonKeatNeo"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"SoonKeatNeo"},"content":"                Ui.printMessage((counter + 1) + \". \" + task.toString());"},{"lineNumber":51,"author":{"gitId":"SoonKeatNeo"},"content":"                counter +\u003d 1;"},{"lineNumber":52,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"SoonKeatNeo"},"content":"        if (!hasPrintedTasks) {"},{"lineNumber":55,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(\"There are no matching tasks!\");"},{"lineNumber":56,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":59,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"SoonKeatNeo"},"content":"     * Adds a new {@Task} to the task list."},{"lineNumber":61,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param task Given task to be added to the task list"},{"lineNumber":62,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"SoonKeatNeo"},"content":"    public void addTask(Task task) {"},{"lineNumber":64,"author":{"gitId":"SoonKeatNeo"},"content":"        taskList.add(task);"},{"lineNumber":65,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"Wakarimashita! Task added to list:\");"},{"lineNumber":66,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(task.toString());"},{"lineNumber":67,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"The size of your task list is now: \" + this.getSize());"},{"lineNumber":68,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":70,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"SoonKeatNeo"},"content":"     * Mark the specified task as complete."},{"lineNumber":72,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param inputString User input string"},{"lineNumber":73,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"SoonKeatNeo"},"content":"    public void completeTask(String inputString, Storage storage) {"},{"lineNumber":75,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"SoonKeatNeo"},"content":"            int taskId \u003d Integer.parseInt(String.valueOf(inputString.split(\" \")[1])) - 1;"},{"lineNumber":77,"author":{"gitId":"SoonKeatNeo"},"content":"            Task doneTask \u003d taskList.get(taskId).setDone();"},{"lineNumber":78,"author":{"gitId":"SoonKeatNeo"},"content":"            String typeOfTask \u003d doneTask.getType();"},{"lineNumber":79,"author":{"gitId":"SoonKeatNeo"},"content":"            String completionOfTask \u003d (doneTask.getDone() ? \"1\" : \"0\");"},{"lineNumber":80,"author":{"gitId":"SoonKeatNeo"},"content":"            String descriptionOfTask \u003d doneTask.getDescription().strip();"},{"lineNumber":81,"author":{"gitId":"SoonKeatNeo"},"content":"            LocalDate date \u003d LocalDate.now();"},{"lineNumber":82,"author":{"gitId":"SoonKeatNeo"},"content":"            if (doneTask instanceof Event) {"},{"lineNumber":83,"author":{"gitId":"SoonKeatNeo"},"content":"                date \u003d ((Event) doneTask).getDate();"},{"lineNumber":84,"author":{"gitId":"SoonKeatNeo"},"content":"            } else if (doneTask instanceof Deadline) {"},{"lineNumber":85,"author":{"gitId":"SoonKeatNeo"},"content":"                date \u003d ((Deadline) doneTask).getDate();"},{"lineNumber":86,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"SoonKeatNeo"},"content":"            String oldString \u003d typeOfTask + \" | \" + \"0\" + \" | \" + descriptionOfTask;"},{"lineNumber":88,"author":{"gitId":"SoonKeatNeo"},"content":"            String newString \u003d typeOfTask + \" | \" + completionOfTask + \" | \" + descriptionOfTask;"},{"lineNumber":89,"author":{"gitId":"SoonKeatNeo"},"content":"            if (doneTask instanceof Event || doneTask instanceof Deadline) {"},{"lineNumber":90,"author":{"gitId":"SoonKeatNeo"},"content":"                oldString +\u003d \" | \" + date.toString();"},{"lineNumber":91,"author":{"gitId":"SoonKeatNeo"},"content":"                newString +\u003d \" | \" + date.toString();"},{"lineNumber":92,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"SoonKeatNeo"},"content":"            storage.deleteReplaceTaskFromDisk(oldString, newString);"},{"lineNumber":94,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(\"Great~! Task completed:\");"},{"lineNumber":95,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(doneTask.toString());"},{"lineNumber":96,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":97,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new InvalidTaskException();"},{"lineNumber":98,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":101,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"SoonKeatNeo"},"content":"     * Delete the specified task from the list."},{"lineNumber":103,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param inputString User input string"},{"lineNumber":104,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param storage Storage object to remove from disk"},{"lineNumber":105,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"SoonKeatNeo"},"content":"    public void deleteTask(String inputString, Storage storage) {"},{"lineNumber":107,"author":{"gitId":"SoonKeatNeo"},"content":"        try {"},{"lineNumber":108,"author":{"gitId":"SoonKeatNeo"},"content":"            int taskId \u003d Integer.parseInt(String.valueOf(inputString.split(\" \")[1])) - 1;"},{"lineNumber":109,"author":{"gitId":"SoonKeatNeo"},"content":"            Task deletedTask \u003d taskList.remove(taskId);"},{"lineNumber":110,"author":{"gitId":"SoonKeatNeo"},"content":"            String typeOfTask \u003d deletedTask.getType();"},{"lineNumber":111,"author":{"gitId":"SoonKeatNeo"},"content":"            String completionOfTask \u003d (deletedTask.getDone() ? \"1\" : \"0\");"},{"lineNumber":112,"author":{"gitId":"SoonKeatNeo"},"content":"            String descriptionOfTask \u003d deletedTask.getDescription().strip();"},{"lineNumber":113,"author":{"gitId":"SoonKeatNeo"},"content":"            String oldString \u003d typeOfTask + \" | \" + completionOfTask + \" | \" + descriptionOfTask;"},{"lineNumber":114,"author":{"gitId":"SoonKeatNeo"},"content":"            storage.deleteReplaceTaskFromDisk(oldString, \"\");"},{"lineNumber":115,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(\"Okie! I\u0027ve deleted the task from your list:\");"},{"lineNumber":116,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(deletedTask.toString());"},{"lineNumber":117,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(\"The size of your task list is now: \" + taskList.size());"},{"lineNumber":118,"author":{"gitId":"SoonKeatNeo"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":119,"author":{"gitId":"SoonKeatNeo"},"content":"            throw new InvalidTaskException();"},{"lineNumber":120,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":123,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"SoonKeatNeo"},"content":"     * Prints the list of tasks in the list, including the status."},{"lineNumber":125,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"SoonKeatNeo"},"content":"    public void print() {"},{"lineNumber":127,"author":{"gitId":"SoonKeatNeo"},"content":"        if (taskList.size() \u003c 1) {"},{"lineNumber":128,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage(\"There are no tasks in your list! :c\");"},{"lineNumber":129,"author":{"gitId":"SoonKeatNeo"},"content":"            return;"},{"lineNumber":130,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"Tasks in your list are~: \");"},{"lineNumber":132,"author":{"gitId":"SoonKeatNeo"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":133,"author":{"gitId":"SoonKeatNeo"},"content":"            Task task \u003d taskList.get(i);"},{"lineNumber":134,"author":{"gitId":"SoonKeatNeo"},"content":"            Ui.printMessage((i + 1) + \".\" + task);"},{"lineNumber":135,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":138,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"SoonKeatNeo"},"content":"     * Gets the current size of the task list."},{"lineNumber":140,"author":{"gitId":"SoonKeatNeo"},"content":"     * @return An integer representing the number of items in the list"},{"lineNumber":141,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"SoonKeatNeo"},"content":"    public int getSize() {"},{"lineNumber":143,"author":{"gitId":"SoonKeatNeo"},"content":"        return taskList.size();"},{"lineNumber":144,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":146,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"SoonKeatNeo"},"content":"     * Initializes the task list from the data file."},{"lineNumber":148,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param fileContents The contents of the file in a given List"},{"lineNumber":149,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":150,"author":{"gitId":"SoonKeatNeo"},"content":"    public void initializeTasks(List\u003cString\u003e fileContents) {"},{"lineNumber":151,"author":{"gitId":"SoonKeatNeo"},"content":"        for (int i \u003d 0; i \u003c fileContents.size(); i++) {"},{"lineNumber":152,"author":{"gitId":"SoonKeatNeo"},"content":"            String line \u003d fileContents.get(i);"},{"lineNumber":153,"author":{"gitId":"SoonKeatNeo"},"content":"            if (line.length() \u003c 1) {"},{"lineNumber":154,"author":{"gitId":"SoonKeatNeo"},"content":"                continue;"},{"lineNumber":155,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":156,"author":{"gitId":"SoonKeatNeo"},"content":"            String[] lineArray \u003d line.split(\"\\\\|\");"},{"lineNumber":157,"author":{"gitId":"SoonKeatNeo"},"content":"            boolean isDone \u003d false;"},{"lineNumber":158,"author":{"gitId":"SoonKeatNeo"},"content":"            if (lineArray[1].strip().charAt(0) \u003d\u003d \u00271\u0027) {"},{"lineNumber":159,"author":{"gitId":"SoonKeatNeo"},"content":"                isDone \u003d true;"},{"lineNumber":160,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":161,"author":{"gitId":"SoonKeatNeo"},"content":"            if (lineArray[0].strip().charAt(0) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":162,"author":{"gitId":"SoonKeatNeo"},"content":"                // todo"},{"lineNumber":163,"author":{"gitId":"SoonKeatNeo"},"content":"                Todo newTodo \u003d new Todo(lineArray[2].strip());"},{"lineNumber":164,"author":{"gitId":"SoonKeatNeo"},"content":"                if (isDone) {"},{"lineNumber":165,"author":{"gitId":"SoonKeatNeo"},"content":"                    newTodo.setDone();"},{"lineNumber":166,"author":{"gitId":"SoonKeatNeo"},"content":"                }"},{"lineNumber":167,"author":{"gitId":"SoonKeatNeo"},"content":"                taskList.add(newTodo);"},{"lineNumber":168,"author":{"gitId":"SoonKeatNeo"},"content":"            } else if (lineArray[0].strip().charAt(0) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":169,"author":{"gitId":"SoonKeatNeo"},"content":"                // deadline"},{"lineNumber":170,"author":{"gitId":"SoonKeatNeo"},"content":"                Deadline newDeadline \u003d new Deadline(lineArray[2].strip(), lineArray[3].strip());"},{"lineNumber":171,"author":{"gitId":"SoonKeatNeo"},"content":"                if (isDone) {"},{"lineNumber":172,"author":{"gitId":"SoonKeatNeo"},"content":"                    newDeadline.setDone();"},{"lineNumber":173,"author":{"gitId":"SoonKeatNeo"},"content":"                }"},{"lineNumber":174,"author":{"gitId":"SoonKeatNeo"},"content":"                taskList.add(newDeadline);"},{"lineNumber":175,"author":{"gitId":"SoonKeatNeo"},"content":"            } else if (lineArray[0].strip().charAt(0) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":176,"author":{"gitId":"SoonKeatNeo"},"content":"                // event"},{"lineNumber":177,"author":{"gitId":"SoonKeatNeo"},"content":"                Event newEvent \u003d new Event(lineArray[2].strip(), lineArray[3].strip());"},{"lineNumber":178,"author":{"gitId":"SoonKeatNeo"},"content":"                if (isDone) {"},{"lineNumber":179,"author":{"gitId":"SoonKeatNeo"},"content":"                    newEvent.setDone();"},{"lineNumber":180,"author":{"gitId":"SoonKeatNeo"},"content":"                }"},{"lineNumber":181,"author":{"gitId":"SoonKeatNeo"},"content":"                taskList.add(newEvent);"},{"lineNumber":182,"author":{"gitId":"SoonKeatNeo"},"content":"            }"},{"lineNumber":183,"author":{"gitId":"SoonKeatNeo"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":185,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":186,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":186}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for the chat-bot UI."},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"public class Ui {"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    final private static String SEPARATORS \u003d \"~~~~~~~~~~~~~~~~~~~~~~\";"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public Ui() {"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"        greetUser();"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"     * Prints separators providing for clarity of on-screen text."},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void printSeparators() {"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"        System.out.println(SEPARATORS);"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"     * Print the requested message in the bot\u0027s formatting."},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"     * @param message The message to be printed"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void printMessage(String message) {"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        System.out.println(\"    \" + message);"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"     * Greets user with a message on the screen when the function is called."},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    public static void greetUser() {"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"Henlooooo~! My name is \" + Duke.BOT_NAME);"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"What can I do for you today? :)\");"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":38}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for tasks with a specified end-date."},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":" *  @author Soon Keat Neo"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":" *  @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    private final LocalDate lastDate;"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    public Deadline(String taskName, String lastDate) {"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        super(taskName, \"D\");"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"        this.lastDate \u003d LocalDate.parse(lastDate);"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    public LocalDate getDate() {"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.lastDate;"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"        String dayOfWeek \u003d this.lastDate.getDayOfWeek().toString().toLowerCase();"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        dayOfWeek \u003d dayOfWeek.substring(0, 1).toUpperCase() + dayOfWeek.substring(1);"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        String date \u003d this.lastDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dayOfWeek + \", \" + date + \")\";"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":31}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for tasks with a given start-time and end-time."},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":" *  @author Soon Keat Neo"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":" *  @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"public class Event extends Task {"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"    private final LocalDate startAndEnd;"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    public Event(String taskName, String startAndEnd) {"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"        super(taskName, \"E\");"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        this.startAndEnd \u003d LocalDate.parse(startAndEnd);"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    public LocalDate getDate() {"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.startAndEnd;"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        String dayOfWeek \u003d this.startAndEnd.getDayOfWeek().toString().toLowerCase();"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"        dayOfWeek \u003d dayOfWeek.substring(0, 1).toUpperCase() + dayOfWeek.substring(1);"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        String date \u003d this.startAndEnd.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dayOfWeek + \", \" + date + \")\";"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":30}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for the Tasks that the chat-bot stores."},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    protected String type;"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"    public Task(String description, String type) {"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        this.type \u003d type;"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"    public String getDescription() {"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.description;"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    public Task setDone() {"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        return this;"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"    public String getType() {"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.type;"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    public boolean getDone() {"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":"        return this.isDone;"},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"    public String getStatusIcon() {"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        return (isDone ? \"\\u2718\" : \" \"); //return X for completed tasks, else whitespace"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.getDescription();"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":44}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":" * Implementation for {@Task} with no schedules assigned."},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":" * @author Soon Keat Neo"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":" * @version CS2103T AY20/21 Sem 1 iP"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"public class Todo extends Task {"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"    public Todo(String taskName) {"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"        super(taskName, \"T\");"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":18}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Deadline;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public void createDeadline_validDate_success() {"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"        assertDoesNotThrow(() -\u003e new Deadline(\"test\", \"1999-12-25\"));"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    public void createDeadline_invalidDateFormat_throwsException() {"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(java.time.format.DateTimeParseException.class, () -\u003e {"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"            new Deadline(\"test\", \"abcd\");"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"        });"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    public void toString_validInputs_outputsCorrectly() {"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        String expected \u003d new Deadline(\"some item\", \"2021-01-01\").toString();"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"        assertEquals(\"[D][ ] some item (by: Friday, Jan 1 2021)\", expected);"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":29}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.LocalDate;"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"public class EventTest {"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    public void createEvent_validDate_success() {"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"        assertDoesNotThrow(() -\u003e new Event(\"test\", \"1999-12-25\"));"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"    public void createDeadline_invalidDateFormat_throwsException() {"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"        assertThrows(java.time.format.DateTimeParseException.class, () -\u003e {"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"            new Event(\"test\", \"abcd\");"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"        });"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"    public void toString_validInputs_outputsCorrectly() {"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"        String expected \u003d new Event(\"some item\", \"2021-01-01\").toString();"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"        assertEquals(\"[E][ ] some item (at: Friday, Jan 1 2021)\", expected);"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":29}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"import java.io.PrintStream;"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"public class UiTest {"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"    private final PrintStream standardOut \u003d System.out;"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"    private final ByteArrayOutputStream outputStreamCaptor \u003d new ByteArrayOutputStream();"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"    @BeforeEach"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"    public void setUp() {"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"        System.setOut(new PrintStream(outputStreamCaptor));"},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"    @AfterEach"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"    public void tearDown() {"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"        System.setOut(standardOut);"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"    void greetUser_thenOutputCaptorSuccess() {"},{"lineNumber":27,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.greetUser();"},{"lineNumber":28,"author":{"gitId":"SoonKeatNeo"},"content":"        String expected \u003d \"Henlooooo~! My name is \" + Duke.BOT_NAME + \"\\n\" +"},{"lineNumber":29,"author":{"gitId":"SoonKeatNeo"},"content":"                \"    What can I do for you today? :)\";"},{"lineNumber":30,"author":{"gitId":"SoonKeatNeo"},"content":"        assertEquals(expected, outputStreamCaptor.toString()"},{"lineNumber":31,"author":{"gitId":"SoonKeatNeo"},"content":"                .trim());"},{"lineNumber":32,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":34,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":35,"author":{"gitId":"SoonKeatNeo"},"content":"    void showTestMessage_onPrintMessage_thenOutputCaptorSuccess() {"},{"lineNumber":36,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printMessage(\"Test\");"},{"lineNumber":37,"author":{"gitId":"SoonKeatNeo"},"content":"        String expected \u003d \"    Test\\n\";"},{"lineNumber":38,"author":{"gitId":"SoonKeatNeo"},"content":"        assertEquals(expected, outputStreamCaptor.toString());"},{"lineNumber":39,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoonKeatNeo"},"content":""},{"lineNumber":41,"author":{"gitId":"SoonKeatNeo"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"SoonKeatNeo"},"content":"    void showSeparators_onFunctionCall_thenOutputCaptorSuccess() {"},{"lineNumber":43,"author":{"gitId":"SoonKeatNeo"},"content":"        Ui.printSeparators();"},{"lineNumber":44,"author":{"gitId":"SoonKeatNeo"},"content":"        String expected \u003d \"~~~~~~~~~~~~~~~~~~~~~~\\n\";"},{"lineNumber":45,"author":{"gitId":"SoonKeatNeo"},"content":"        assertEquals(expected, outputStreamCaptor.toString());"},{"lineNumber":46,"author":{"gitId":"SoonKeatNeo"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"SoonKeatNeo"},"content":"}"}],"authorContributionMap":{"SoonKeatNeo":47}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SoonKeatNeo"},"content":"todo eat cake"},{"lineNumber":2,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":3,"author":{"gitId":"SoonKeatNeo"},"content":"todo"},{"lineNumber":4,"author":{"gitId":"SoonKeatNeo"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"SoonKeatNeo"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"SoonKeatNeo"},"content":"deadline shoot pancakes /by 2021-01-24"},{"lineNumber":7,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":8,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":9,"author":{"gitId":"SoonKeatNeo"},"content":"todo go to school"},{"lineNumber":10,"author":{"gitId":"SoonKeatNeo"},"content":"deadline return book /by 2021-01-27"},{"lineNumber":11,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":12,"author":{"gitId":"SoonKeatNeo"},"content":"deadline"},{"lineNumber":13,"author":{"gitId":"SoonKeatNeo"},"content":"event project meeting /at 2021-01-15"},{"lineNumber":14,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":15,"author":{"gitId":"SoonKeatNeo"},"content":"done 4"},{"lineNumber":16,"author":{"gitId":"SoonKeatNeo"},"content":"event"},{"lineNumber":17,"author":{"gitId":"SoonKeatNeo"},"content":"todo "},{"lineNumber":18,"author":{"gitId":"SoonKeatNeo"},"content":"todo play cards against humanity"},{"lineNumber":19,"author":{"gitId":"SoonKeatNeo"},"content":"deadline submit cs2103 assignment /by 2021-02-01"},{"lineNumber":20,"author":{"gitId":"SoonKeatNeo"},"content":"event nomination of hawker culture /at 2021-03-01"},{"lineNumber":21,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":22,"author":{"gitId":"SoonKeatNeo"},"content":"delete 5"},{"lineNumber":23,"author":{"gitId":"SoonKeatNeo"},"content":"delete 2"},{"lineNumber":24,"author":{"gitId":"SoonKeatNeo"},"content":"done 7"},{"lineNumber":25,"author":{"gitId":"SoonKeatNeo"},"content":"list"},{"lineNumber":26,"author":{"gitId":"SoonKeatNeo"},"content":"bye"}],"authorContributionMap":{"SoonKeatNeo":26}}]
