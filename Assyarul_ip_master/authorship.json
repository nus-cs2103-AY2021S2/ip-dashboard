[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Assyarul":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    mainClassName \u003d \"duke.Duke\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":1,"-":45}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"done"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"exit $ret"}],"authorContributionMap":{"Assyarul":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"\u0027"}],"authorContributionMap":{"Assyarul":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"\u0027"}],"authorContributionMap":{"Assyarul":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"done"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"exit $ret"}],"authorContributionMap":{"Assyarul":11}},{"path":"src/main/java/duke/CommandMap.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.command.ICommand;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * Class that maps keywords to appropriate commands."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class CommandMap {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Map\u003cString, ICommand\u003e commands;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private ICommand defaultCommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Create and initialise duke.CommandMap. Will execute defaultCommand if keyword"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * given does not match with any keywords that exist in the Map."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @param defaultCommand Command that will be executed if keyword given does not match any existing keywords."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public CommandMap(ICommand defaultCommand) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        this.commands \u003d new HashMap\u003cString, ICommand\u003e();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        this.defaultCommand \u003d defaultCommand;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Maps the given string to the given command"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @param string Keyword to be mapped."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * @param command Command to be executed."},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void add(String string, ICommand command) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        commands.put(string, command);"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     * Returns the command that is mapped to keyword. Will return defaultCommand if string does not"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"     * exist in the Map."},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * @param string Keyword"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     * @return Command that corresponded with keyword."},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    public ICommand get(String string) {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        ICommand command \u003d commands.getOrDefault(string, defaultCommand);"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        return command;"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":47}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.command.AddCommand;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.command.CommandBorder;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import duke.command.CommandWrite;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.command.DefaultCommand;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import duke.command.ICommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import duke.command.PrintCommand;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import duke.command.PrintListCommand;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import duke.task.DeadlineFactory;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import duke.task.EventFactory;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import duke.task.ToDoFactory;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":" * Main class for Duke app."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":23,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    private Storage storage;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    private CommandMap commands;"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    private TaskList taskList;"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Duke app. Initialises app to run."},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public Duke() {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        this.storage \u003d new Storage(taskList);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        this.commands \u003d new CommandMap(new CommandBorder(new DefaultCommand()));"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * Main method. Args fed in will not accept the behaviour of the application."},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     * @param args Arguments"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        Duke currentSession \u003d new Duke();"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        currentSession.initialiseCommandMap();"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        currentSession.run();"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"     * Run application and continue to accept inputs."},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"    public void run() {"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        ICommand printCommand \u003d new CommandBorder(new PrintCommand());"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        printCommand.execute(ui.getIntro());"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"            this.storage.read();"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"            while (!taskList.hasExited()) {"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"                String input \u003d ui.getLine();"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"                String[] inputArray \u003d Parser.parse(input);"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"                if (inputArray.length \u003d\u003d 2) {"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"                    commands.get(inputArray[0]).execute(inputArray[1]);"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"                } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"                    //for commands with only one word, will give error msg if command requires more than 1."},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"                    commands.get(inputArray[0]).execute(\" \");"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"            printCommand.execute(ui.showNoMoreLinesError());"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"    private void initialiseCommandMap() {"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"        ICommand doneCommand \u003d new CommandBorder(new DoneCommand(taskList));"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"        doneCommand \u003d new CommandWrite(doneCommand, storage);"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"        ICommand listCommand \u003d new CommandBorder(new PrintListCommand(taskList));"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"        ICommand exitCommand \u003d new CommandBorder(new ExitCommand(taskList));"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"        ICommand eventCommand \u003d new CommandBorder(new AddCommand(taskList, new EventFactory()));"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"        eventCommand \u003d new CommandWrite(eventCommand, storage);"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        ICommand deadlineCommand \u003d new CommandBorder(new AddCommand(taskList, new DeadlineFactory()));"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"        deadlineCommand \u003d new CommandWrite(deadlineCommand, storage);"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"        ICommand toDoCommand \u003d new CommandBorder(new AddCommand(taskList, new ToDoFactory()));"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"        toDoCommand \u003d new CommandWrite(toDoCommand, storage);"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"        ICommand deleteCommand \u003d new CommandBorder(new DeleteCommand(taskList));"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"        deleteCommand \u003d new CommandWrite(deleteCommand, storage);"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"        ICommand findCommand \u003d new CommandBorder(new FindCommand(taskList));"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"done\", doneCommand);"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"list\", listCommand);"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"bye\", exitCommand);"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"event\", eventCommand);"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"todo\", toDoCommand);"},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"deadline\", deadlineCommand);"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"delete\", deleteCommand);"},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"find\", findCommand);"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":105,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":102,"-":3}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * duke.Parser class used to parse input into appropriate formats."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     * Parse given line into an array where the first element is a keyword."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param string Input Line."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public static String[] parse(String string) {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d string.split(\" \", 2);"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        return inputArray;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":16}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":" * Storage class which reads/writes to files after any changes to the TaskList."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private static final String FILE_NAME \u003d \"duke.txt\";"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    private final TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Storage class."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object which contains the current tasks"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    Storage(TaskList tasks) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * Attempts to read the file named \"duke.txt\". Will print out"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * error messages if caught."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    public void read() {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            FileReader reader \u003d new FileReader(FILE_NAME);"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(reader);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            String taskString;"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            taskString \u003d bufferedReader.readLine();"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            while (taskString !\u003d null) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"                String[] taskArray \u003d taskString.split(\"\\\\|\");"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"                this.tasks.addTask(taskArray);"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"                taskString \u003d bufferedReader.readLine();"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"            reader.close();"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"No existing file found.\");"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"            e.printStackTrace();"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"     * Attempts to write to the file named \"duke.txt\". Will throw"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"     * IOException if file could not be written."},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"     * @throws IOException"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"    public void write() throws IOException {"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        for (Task task: tasks.getTasks()) {"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"            sb.append(task.toFileString());"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"            sb.append(\u0027\\n\u0027);"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"        if (sb.length() \u003e 0) {"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"            sb.deleteCharAt(sb.length() - 1);"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        FileWriter writer \u003d new FileWriter(FILE_NAME);"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"        writer.write(sb.toString());"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        writer.close();"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":69}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import duke.task.ToDo;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":" * Class handling List of Tasks."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private final ArrayList\u003cTask\u003e list;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    private boolean isDone;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for TaskList."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        isDone \u003d false;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Gets the ArrayList of Tasks."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * @return ArrayList of Tasks"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        return this.list;"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     * Adds task into the ArrayList of Tasks"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     * @param content task to be added"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    public void addTask(Task content) {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        list.add(content);"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"     * Adds task with the relevant information in the input."},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"     * To be deprecated when Parser can handle file input."},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"     * @param task relevant string info for the new Task."},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    public void addTask(String[] task) {"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        String type \u003d task[0].strip();"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        String done \u003d task[1].strip();"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        String desc \u003d task[2].strip();"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        Task newTask;"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        newTask \u003d new ToDo(desc);"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new ToDo(desc);"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"            this.addTask(task);"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        } else if (type.equals(\"D\")) {"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"            String byDate \u003d task[3];"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new Deadline(desc, byDate);"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"            this.addTask(task);"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        } else if (type.equals(\"E\")) {"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"            String atDate \u003d task[3];"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new Event(desc, atDate);"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"            this.addTask(task);"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"File has invalid entries\");"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"        if (done.equals(\"1\")) {"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"            newTask.setDone();"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"     * Sets the task at index to be done."},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"     * @param count the index of Task to be set as Done"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException count is out of range"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"    public void setTaskDone(int count) throws IllegalArgumentException {"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"        if (count \u003e list.size() || count \u003c\u003d 0) {"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Task number out of range.\");"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"            list.get(count - 1).setDone();"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"     * Deletes the task at index."},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"     * @param count the index of task to be deleted."},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"     * @return the task that was deleted."},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException count is out of range"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"    public Task deleteTask(int count) throws IllegalArgumentException {"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"        if (count \u003e list.size() || count \u003c\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Task number out of range.\");"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"            return list.remove(count - 1);"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"     * Finds a list of Tasks with the relevant keyword in their description."},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"     * @param keyword relevant keyword to be searched."},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"     * @return List of Tasks with the relevant keyword."},{"lineNumber":105,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":"    public List\u003cTask\u003e findTasksWithString(String keyword) {"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"        List\u003cTask\u003e tasksWithString \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":"        for (Task t: list) {"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"            String taskDesc \u003d t.getDesc();"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"            if (taskDesc.contains(keyword)) {"},{"lineNumber":111,"author":{"gitId":"Assyarul"},"content":"                tasksWithString.add(t);"},{"lineNumber":112,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":"        return tasksWithString;"},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":117,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Assyarul"},"content":"     * To be deprecated, i.e move to another class of more relevance."},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"    public void setExited() {"},{"lineNumber":121,"author":{"gitId":"Assyarul"},"content":"        this.isDone \u003d true;"},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"     * To be deprecated, i.e move to another class of more relevance."},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"     * @return boolean whether app has exited."},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"    public boolean hasExited() {"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"        return this.isDone;"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":132,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":132}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" * Handles the interaction the user and the program."},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"class Ui {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    private Scanner scanner;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    Ui() {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        scanner \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    protected String getLine() throws NoSuchElementException {"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        return scanner.nextLine();"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * Generates the string representation of the introduction."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * @return String representing the introduction to duke.Duke."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    protected String getIntro() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        String intro \u003d \"Hello I\u0027m\\n\" + logo + \"\\nWhat can I do for you?\\n\";"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        return intro;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     * Command that prints the list existing in duke.TaskList."},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     * (Only applicable if inputs are fed via file direction)"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"     * @return String representing the error when no lines are inputted."},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    public String showNoMoreLinesError() {"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        return \"Error. No more lines detected. Exiting...\";"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":44}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.task.AbstractTaskFactory;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Command to add tasks into the taskList when executed."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"public class AddCommand implements ICommand {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private AbstractTaskFactory taskFactory;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for the add command."},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * @param tasks the taskList the task is being added into."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param taskFactory Factory object responsible for creating the task"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public AddCommand(TaskList tasks, AbstractTaskFactory taskFactory) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        this.taskFactory \u003d taskFactory;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * When called, it will use the given input as information to create the task"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * using the factory given and add it into the TaskList object."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @param parameters input required by the Command."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            Task newTask \u003d taskFactory.getTask(parameters);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            this.tasks.addTask(newTask);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            System.out.println(newTask.toString());"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":41}},{"path":"src/main/java/duke/command/CommandBorder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Place borders for each command given."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class CommandBorder implements ICommand {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    private ICommand decoratedCommand;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * Generate Tasks depending on the type needed."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @param decoratedCommand Command to be wrapped."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public CommandBorder(ICommand decoratedCommand) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        this.decoratedCommand \u003d decoratedCommand;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * Print out borders as well as executing the wrapped Command."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @param parameters input needed to be passed to decoratedCommand."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        System.out.println(\"-\".repeat(40));"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        decoratedCommand.execute(parameters);"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        System.out.println(\"-\".repeat(40));"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":28}},{"path":"src/main/java/duke/command/CommandWrite.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Wrapper Command that writes all tasks from taskList to file"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * after executing the given command."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class CommandWrite implements ICommand {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private ICommand decoratedCommand;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Creates the command that will write to file when decoratedCommand"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * is executed."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @param decoratedCommand Command to executed before writing to file."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * @param storage Object responsible for writing the contents in taskList to file."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    public CommandWrite(ICommand decoratedCommand, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        this.storage \u003d storage;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        this.decoratedCommand \u003d decoratedCommand;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * Carry out writing to file after executing the command given."},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * @param parameters necessary input needed for decoratedCommand to execute."},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            decoratedCommand.execute(parameters);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            storage.write();"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"Error: Unable to write to file\");"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":40}},{"path":"src/main/java/duke/command/DefaultCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Default Command which will get executed when keyword supplied does not match with keywords in CommandMap."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class DefaultCommand implements ICommand {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     * When executed, will print a default statement. Input given will not change"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * how function gets executed."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param parameters"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        System.out.println(\"Error: Unknown command word. Please try again.\");"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":17}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" * Command to delete tasks from the taskList when executed."},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"public class DeleteCommand implements ICommand {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for DeleteCommand."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object that the command will delete from when executed"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    public DeleteCommand(TaskList tasks) {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * Will attempt to delete task at given parameters. Will print out an error if an invalid"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     * input was given."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     * @param parameters index of task to be deleted"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"            int count \u003d Integer.parseInt(parameters.strip());"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"            Task removedTask \u003d tasks.deleteTask(count);"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            System.out.println(removedTask.toString());"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            System.out.println(String.format(\"Now you have %d tasks in the list\", tasks.getTasks().size()));"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"Error: Invalid argument for delete\");"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":43}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"public class DoneCommand implements ICommand {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    public DoneCommand(TaskList tasks) {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"            Integer count \u003d Integer.parseInt(parameters);"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"            tasks.setTaskDone(count);"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"            System.out.println(tasks.getTasks().get(count - 1));"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"            System.out.println(\"Error: Invalid argument for done\");"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":25}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"public class ExitCommand implements ICommand {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    public ExitCommand(TaskList tasks) {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        tasks.setExited();"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":17}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class FindCommand implements ICommand {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    public FindCommand(TaskList tasks) {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        System.out.println(listToString(parameters.strip()));"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    private String listToString(String keyword) {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        String content \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        Integer count \u003d 1;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        for (Task t: tasks.findTasksWithString(keyword)) {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"            content +\u003d count.toString() + \".\";"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"            content +\u003d t.toString();"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"            content +\u003d \"\\n\";"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"            count++;"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        return content.trim();"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":30}},{"path":"src/main/java/duke/command/ICommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Interface for Command."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public interface ICommand {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * Execute given action based on the command."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param parameters input required by the Command. See implementations of Command"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     *                   for more information."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters);"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":15}},{"path":"src/main/java/duke/command/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Command to print given string."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class PrintCommand implements ICommand {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     * Execute the printing of given input."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Given input to be printed"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        System.out.println(parameters);"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":16}},{"path":"src/main/java/duke/command/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" * Command that prints the list existing in duke.TaskList."},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"public class PrintListCommand implements ICommand {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public PrintListCommand(TaskList tasks) {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        System.out.println(listToString());"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    private String listToString() {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        String content \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        Integer count \u003d 1;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        for (Task t: tasks.getTasks()) {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"            content +\u003d count.toString() + \".\";"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"            content +\u003d t.toString();"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"            content +\u003d \"\\n\";"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"            count++;"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        return content.trim();"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":32}},{"path":"src/main/java/duke/task/AbstractTaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Abstract class for the generation of Tasks."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public abstract class AbstractTaskFactory {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Information needed to create task."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @return New generated task."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public abstract Task createTask(String parameters) throws IllegalArgumentException;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Generate Tasks depending on the type needed."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param parameters string representation of the task information."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @return duke.task.Task duke.task.Task generated."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public Task getTask(String parameters) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        return this.createTask(parameters);"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":24}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"    private final String deadline;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"     * duke.task.Deadline constructor."},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * @param content duke.task.Task description"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param deadline The deadline task has to be completed by."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public Deadline(String content, String deadline) {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        return \"[D]\" + super.toString() + String.format(\" (by:%s)\", this.parseDate(this.deadline.strip()));"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        String done;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        if (this.getDone()) {"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"1\";"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"0\";"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        return \"D|\" + done + \"|\" + this.getDesc() + \"|\" + this.deadline;"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":32}},{"path":"src/main/java/duke/task/DeadlineFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public class DeadlineFactory extends AbstractTaskFactory {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d parameters.split(\"/by\", 2);"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"        if (inputArray[0].isBlank()) {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of deadline cannot be empty\");"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Please add a time limit to your deadline\");"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        String content \u003d inputArray[0];"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        String timeRange \u003d inputArray[1];"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        return new Deadline(content, timeRange);"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":16}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Class containing the relevant information about an Event."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    private String timeRange;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Event."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param content description of event"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @param timeRange the time when the event starts"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public Event(String content, String timeRange) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * String representation of the event."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @return string representation of the event."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        return \"[E]\" + super.toString() + String.format(\" (at:%s)\", this.parseDate(this.timeRange.strip()));"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * String representation of the event when it is stored"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * in a file."},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     * @return file string representation of the event"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        String done;"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        if (this.getDone()) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"1\";"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"0\";"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"E|\" + done + \"|\" + this.getDesc() + \"|\" + this.timeRange;"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":44}},{"path":"src/main/java/duke/task/EventFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public class EventFactory extends AbstractTaskFactory {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d parameters.split(\"/at\", 2);"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        if (inputArray[0].isBlank()) {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of event cannot be empty\");"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Please add a start time to your event\");"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        String content \u003d inputArray[0];"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        String timeRange \u003d inputArray[1];"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        return new Event(content, timeRange);"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":19}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Abstract class for tasks. Contains information about the task description and"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * whether is has been carried out."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public abstract class Task {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private String content;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private boolean isDone;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Abstract Class constructor."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param content description of the task."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public Task(String content) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        this.content \u003d content;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * Information needed to be write/read in/to file."},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * In the format of Type|"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @return String representation in file"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    public abstract String toFileString();"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     * String representation of whether the task is done."},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     * To be used by the concrete implementation of Tasks only."},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     * @return [X] if done [ ] otherwise."},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"\";"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        //Printing isDone"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        string +\u003d String.format(\"[%s] \", isDone ? \"X\" : \" \");"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        string +\u003d this.content;"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"     * Attempts to parse the given string into a defined date format"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"     * if the appropriate format is found."},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"     * @param string string representing the time of task"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"     * @return properly formatted string."},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"    public String parseDate(String string) {"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"            LocalDate date \u003d LocalDate.parse(string);"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"            return string;"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"     * Set Task to be done."},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"    public void setDone() {"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        this.isDone \u003d true;"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"     * Gets the task description."},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"     * @return Description of duke.task.Task"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"    public String getDesc() {"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"        return this.content;"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"     * Gets the status of whether the task is done or not."},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"     * @return Boolean representation of whether task is done or not."},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"    public boolean getDone() {"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        return this.isDone;"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":87}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public class ToDo extends Task {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"    public ToDo(String content) {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        String done;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        if (this.getDone()) {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"1\";"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"0\";"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"T|\" + done + \"|\" + this.getDesc();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":25}},{"path":"src/main/java/duke/task/ToDoFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public class ToDoFactory extends AbstractTaskFactory {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"        if (parameters.isBlank()) {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of todo cannot be empty\");"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        return new ToDo(parameters);"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":11}},{"path":"src/test/java/duke/task/EventFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class EventFactoryTest {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    void read_emptyInput_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new EventFactory().createTask(\"\").toString());"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Description of event cannot be empty\", e.getMessage());"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    void read_wrongInput_exceptionThrown() {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new EventFactory().createTask(\"test\").toString());"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Please add a start time to your event\", e.getMessage());"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":27}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"event"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"deadline fail"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"event fail"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"delete ab"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"delete 2"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"blah"}],"authorContributionMap":{"Assyarul":19}}]
