[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"Assyarul":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":15,"-":45}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"done"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"exit $ret"}],"authorContributionMap":{"Assyarul":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"\u0027"}],"authorContributionMap":{"Assyarul":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"\u0027"}],"authorContributionMap":{"Assyarul":26}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"done"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"exit $ret"}],"authorContributionMap":{"Assyarul":11}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"Duke is a **desktop application for task management through a   "},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"Command Line Interface** with minor graphic user interface for better"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"readability."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"- [Quick start](#quick-start)"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"- [Task Types](#task-types)"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"- [Features](#features)"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    - [Adding a task](#adding-tasks-eventdeadlinetodo)"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    - [Listing all tasks](#listing-all-tasks-list)"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    - [Deleting a task](#deleting-a-task-delete)"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    - [Completing a task](#completing-a-task-done)"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    - [Setting a task priority](#setting-a-task-priority-priority)"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    - [Exiting the application](#exiting-the-application-bye)"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"  "},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"## Quick start"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"1. Ensure you have Java `11` installed."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"2. Download the latest `duke.jar`."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"3. Place the file to the folder you want to use the as the _home folder_ "},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"4. Double click the `duke.jar` file."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    - If you had not associated jar files with java, ensure you open the file using your java executable."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"5. The GUI will now be shown below."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"   "},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"   ![First Launch](start.png)"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"## Task Types"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"The app supports the following task types, which will be printed as,"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"1. Events: `[E][DONE][PRIORITY] EVENT_DESC (at: DATE)`"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"2. Deadlines: `[D][DONE][PRIORITY] DEADLINE_DESC (by: DATE)`"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"3. To Dos: `[T][DONE][PRIORITY] TODO_DESC`"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"`[DONE]` will either be displayed as `[ ]` if it is not done or `[X]`if it is.  "},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"`[PRIORITY]` will be displayed as `[!]`,`[!!]` or `[!!!]`."},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"### Adding tasks: `event/deadline/todo`"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"Adds a task i.e event/deadline/todo to the task list."},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"Format:"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"1. Event: `event NAME /at DATE`"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"2. Deadline: `deadline NAME /by DATE`"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"3. To Do: `todo NAME`"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"**Tip**: You can type in the format `YYYY-MM-DD` for the `DATE` field, and the application will parse it"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"into its proper date. Otherwise, it will just show what you just typed in the `DATE` field."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"![Date Format](dateformat.png)"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"### Listing all tasks: `list`"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"Shows a list of all the tasks.  "},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"Format: `list`"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"### Deleting a task: `delete`"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"Deletes a task by its given index number."},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"Format: `delete INDEX_NUMBER`"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"### Completing a task: `done`"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"Setting a task as completed given its index number."},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"Format: `done INDEX_NUMBER`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"### Setting a task priority: `priority`"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"Setting a task priority given its index number."},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"Format: `priority INDEX_NUMBER NEW_PRIORITY`  "},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"where `NEW_PRIORITY` is `0-2` where `0` is the lowest priority and `2` is highest.  "},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"`0` will be displayed as `!`, `1` as `!!` and `2` as `!!!`."},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"![Setting Priority](priority.png)"},{"lineNumber":74,"author":{"gitId":"-"},"content":""},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"### Exiting the application: `bye`"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"Exit application."},{"lineNumber":77,"author":{"gitId":"-"},"content":""},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"Format: `bye`"}],"authorContributionMap":{"Assyarul":60,"-":18}},{"path":"src/main/java/duke/CommandMap.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.command.ICommand;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * Class that maps keywords to appropriate commands."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class CommandMap {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Map\u003cString, ICommand\u003e commands;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private ICommand defaultCommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Create and initialise duke.CommandMap. Will execute defaultCommand if keyword"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * given does not match with any keywords that exist in the Map."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @param defaultCommand Command that will be executed if keyword given does not match any existing keywords."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public CommandMap(ICommand defaultCommand) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        this.commands \u003d new HashMap\u003cString, ICommand\u003e();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        this.defaultCommand \u003d defaultCommand;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Maps the given string to the given command"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @param string Keyword to be mapped."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * @param command Command to be executed."},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void add(String string, ICommand command) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        commands.put(string, command);"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     * Returns the command that is mapped to keyword. Will return defaultCommand if string does not"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"     * exist in the Map."},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * @param string Keyword"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     * @return Command that corresponded with keyword."},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    public ICommand get(String string) {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        ICommand command \u003d commands.getOrDefault(string, defaultCommand);"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        return command;"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":47}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.command.AddCommand;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import duke.command.CommandWrite;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.command.DefaultCommand;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import duke.command.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import duke.command.FindCommand;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import duke.command.ICommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import duke.command.PrintListCommand;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import duke.command.SetPriorityCommand;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import duke.task.DeadlineFactory;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import duke.task.EventFactory;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"import duke.task.ToDoFactory;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"import javafx.application.Application;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.Scene;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"import javafx.stage.Stage;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":" * Main class for Duke app."},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"public class Duke extends Application {"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    private Storage storage;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    private CommandMap commands;"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    private TaskList taskList;"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Duke app. Initialises main components."},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    public Duke() {"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        this.storage \u003d new Storage(taskList);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d new Ui(this);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        this.commands \u003d new CommandMap(new DefaultCommand(this.ui));"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"     * Starts the application. Not to be called explicitly."},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"     * @param stage Stage to be displayed"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    public void start(Stage stage) {"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        Scene scene \u003d new Scene(ui);"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        stage.setScene(scene);"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        initialiseCommandMap();"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        this.run();"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        stage.show();"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"    private void run() {"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"            this.storage.read();"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(\"duke.txt not found.\\nFile will be created when a task is added.\");"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"        ui.handleIntro();"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"     * Passes the input to parser to be parsed."},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"     * @param input input to be parsed."},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"    public void handleInput(String input) {"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d Parser.parseInitial(input);"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"        if (inputArray.length \u003d\u003d 2) {"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"            commands.get(inputArray[0]).execute(inputArray[1]);"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"            //for commands with only one word, will give error msg if command requires more than 1."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"            commands.get(inputArray[0]).execute(\" \");"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"    private void initialiseCommandMap() {"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"        ICommand doneCommand \u003d new DoneCommand(ui, taskList);"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        doneCommand \u003d new CommandWrite(ui, storage, doneCommand);"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"        ICommand listCommand \u003d new PrintListCommand(ui, taskList);"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"        ICommand exitCommand \u003d new ExitCommand(ui);"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"        ICommand eventCommand \u003d new AddCommand(ui, taskList, new EventFactory());"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"        eventCommand \u003d new CommandWrite(ui, storage, eventCommand);"},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"        ICommand deadlineCommand \u003d new AddCommand(ui, taskList, new DeadlineFactory());"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"        deadlineCommand \u003d new CommandWrite(ui, storage, deadlineCommand);"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"        ICommand toDoCommand \u003d new AddCommand(ui, taskList, new ToDoFactory());"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        toDoCommand \u003d new CommandWrite(ui, storage, toDoCommand);"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"        ICommand deleteCommand \u003d new DeleteCommand(ui, taskList);"},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"        deleteCommand \u003d new CommandWrite(ui, storage, deleteCommand);"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"        ICommand findCommand \u003d new FindCommand(ui, taskList);"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":105,"author":{"gitId":"Assyarul"},"content":"        ICommand setPriorityCommand \u003d new SetPriorityCommand(ui, taskList);"},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"done\", doneCommand);"},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"list\", listCommand);"},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"bye\", exitCommand);"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"event\", eventCommand);"},{"lineNumber":111,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"todo\", toDoCommand);"},{"lineNumber":112,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"deadline\", deadlineCommand);"},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"delete\", deleteCommand);"},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"find\", findCommand);"},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"        commands.add(\"priority\", setPriorityCommand);"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Assyarul":116,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"        Application.launch(Duke.class, args);"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":9}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":" * Parser class used to parse input into appropriate formats."},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":" * Contains static methods."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Parse given line into an array where the first element is a keyword."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * Will be the first to be called to parse user input to get the keyword used."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param string Input Line."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public static String[] parseInitial(String string) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d string.split(\" \", 2);"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        return inputArray;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * Parses given string according to the deadline specifications."},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * @param string String representation of deadline description and by date."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * @return A String array length 2, inputArray[0] is description, inputArray[1] is deadline date"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    public static String[] parseDeadline(String string) throws IllegalArgumentException {"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d string.split(\"/by\", 2);"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        if (inputArray[0].isBlank()) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of deadline cannot be empty\");"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Please add a time limit to your deadline\");"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            assert inputArray.length \u003d\u003d 2 : \"Length of inputArray for parsing Deadline should be 2.\";"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            return inputArray;"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"     * Parses given string according to the event specifications."},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"     * @param string string representation of event description and at date."},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     * @return A String array length 2, inputArray[0] is description, inputArray[1] is event date"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    public static String[] parseEvent(String string) throws IllegalArgumentException {"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d string.split(\"/at\", 2);"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        if (inputArray[0].isBlank()) {"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of event cannot be empty\");"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Please add a start time to your event\");"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"            assert inputArray.length \u003d\u003d 2 : \"Length of inputArray for parsing Deadline should be 2.\";"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"            return inputArray;"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     * Parses given string according to the the priority setting specifications."},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"     * @param string string representation of task index and priority it is changing into."},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"     * @return A String array length 2, inputArray[0] is the task index, inputArray[1] is the new priority."},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    public static String[] parseSetPriority(String string) throws IllegalArgumentException {"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d string.trim().split(\" \", 2);"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        if (inputArray[0].isBlank()) {"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Arguments should not be empty.\");"},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        } else if (inputArray.length \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Missing arguments found. priority [taskNumber] [0-2]\");"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"            assert inputArray.length \u003d\u003d 2 : \"Length of inputArray for parsing SetPriority should be 2.\";"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"            return inputArray;"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"     * Parses the given list of tasks into a string representation."},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"     * @param taskList The list of Tasks needed to turn to string."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"     * @return String representation of the entire list of tasks."},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    public static String listTaskToString(List\u003cTask\u003e taskList) {"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"        String content \u003d \"\";"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"        Integer count \u003d 1;"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"        for (Task t: taskList) {"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"            content +\u003d count.toString() + \".\";"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"            content +\u003d t.toString();"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"            content +\u003d \"\\n\";"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"            count++;"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"        return content.trim();"},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"     * Attempts to parse the given string into a defined date format if the appropriate format is found."},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"     * Currently only supports the format date, \"yyyy-mm-dd\"."},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"     * @param string string representing the time of task"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"     * @return properly formatted string."},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"    public static String parseDate(String string) {"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"            LocalDate date \u003d LocalDate.parse(string);"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"            return string;"},{"lineNumber":105,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":107}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":" * Storage class which reads/writes to files after any changes to the TaskList."},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    private static final String FILE_NAME \u003d \"duke.txt\";"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private final TaskList tasks;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Storage class."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object which contains the current tasks"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    Storage(TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * Attempts to read the file named \"duke.txt\"."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * @throws IOException"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    public void read() throws IOException, IllegalArgumentException {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        FileReader reader \u003d new FileReader(FILE_NAME);"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        BufferedReader bufferedReader \u003d new BufferedReader(reader);"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        String taskString;"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        taskString \u003d bufferedReader.readLine();"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        while (taskString !\u003d null) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            String[] taskArray \u003d taskString.split(\"\\\\|\");"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            this.tasks.addTask(taskArray);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            taskString \u003d bufferedReader.readLine();"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        reader.close();"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     * Attempts to write to the file named \"duke.txt\". Will throw"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"     * IOException if file could not be written."},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"     * @throws IOException"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"    public void write() throws IOException {"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        for (Task task: tasks.getTasks()) {"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"            sb.append(task.toFileString());"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"            sb.append(\u0027\\n\u0027);"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        if (sb.length() \u003e 0) {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"            sb.deleteCharAt(sb.length() - 1);"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        FileWriter writer \u003d new FileWriter(FILE_NAME);"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        writer.write(sb.toString());"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"        writer.close();"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":62}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import java.util.function.Predicate;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import duke.task.Deadline;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import duke.task.Event;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import duke.task.Priority;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import duke.task.ToDo;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":" * Class handling List of Tasks."},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"public class TaskList {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    private final ArrayList\u003cTask\u003e list;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for TaskList."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public TaskList() {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * Gets the ArrayList of Tasks."},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @return ArrayList of Tasks"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        return this.list;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"     * Gets the task given the provided index number."},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"     * @param count the index of the task"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"     * @return Task at the given index"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    public Task getTask(int count) {"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        if (count \u003e list.size() || count \u003c\u003d 0) {"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Task number out of range.\");"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"            return list.get(count - 1);"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"     * Adds task into the ArrayList of Tasks"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"     * @param content task to be added"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"    public void addTask(Task content) {"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        assert content !\u003d null : \"Task should not be null\";"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        list.add(content);"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"     * Adds task with the relevant information in the input."},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"     * To be deprecated when Parser can handle file input."},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"     * @param task relevant string info for the new Task."},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"    public void addTask(String[] task) throws IllegalArgumentException {"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        String type \u003d task[0].strip();"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"        String done \u003d task[1].strip();"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"        String priority \u003d task[2].strip();"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        String desc \u003d task[3].strip();"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        Task newTask;"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"        if (type.equals(\"T\")) {"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new ToDo(desc);"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        } else if (type.equals(\"D\")) {"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"            String byDate \u003d task[4];"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new Deadline(desc, byDate);"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"        } else if (type.equals(\"E\")) {"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"            String atDate \u003d task[4];"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"            newTask \u003d new Event(desc, atDate);"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Invalid type. Duke.txt may have been tampered.\");"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"        if (done.equals(\"1\")) {"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"            newTask.setDone();"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"        newTask.setPriority(Priority.valueOf(Integer.parseInt(priority)));"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"        this.addTask(newTask);"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"     * Sets the task at index to be done."},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"     * @param count the index of Task to be set as Done"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException count is out of range or task is already done."},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"    public void setTaskDone(int count) throws IllegalArgumentException {"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"        if (count \u003e list.size() || count \u003c\u003d 0) {"},{"lineNumber":99,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Task number out of range.\");"},{"lineNumber":100,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":101,"author":{"gitId":"Assyarul"},"content":"            if (!list.get(count - 1).getDone()) {"},{"lineNumber":102,"author":{"gitId":"Assyarul"},"content":"                list.get(count - 1).setDone();"},{"lineNumber":103,"author":{"gitId":"Assyarul"},"content":"            } else {"},{"lineNumber":104,"author":{"gitId":"Assyarul"},"content":"                throw new IllegalArgumentException(\"Error: Task is already done\");"},{"lineNumber":105,"author":{"gitId":"Assyarul"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":109,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":110,"author":{"gitId":"Assyarul"},"content":"     * Deletes the task at index."},{"lineNumber":111,"author":{"gitId":"Assyarul"},"content":"     * @param count the index of task to be deleted."},{"lineNumber":112,"author":{"gitId":"Assyarul"},"content":"     * @return the task that was deleted."},{"lineNumber":113,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException count is out of range"},{"lineNumber":114,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"Assyarul"},"content":"    public Task deleteTask(int count) throws IllegalArgumentException {"},{"lineNumber":116,"author":{"gitId":"Assyarul"},"content":"        if (count \u003e list.size() || count \u003c\u003d 0) {"},{"lineNumber":117,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Task number out of range.\");"},{"lineNumber":118,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":119,"author":{"gitId":"Assyarul"},"content":"            return list.remove(count - 1);"},{"lineNumber":120,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":123,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"Assyarul"},"content":"     * Finds a list of Tasks with the relevant keyword in their description."},{"lineNumber":125,"author":{"gitId":"Assyarul"},"content":"     * @param keyword relevant keyword to be searched."},{"lineNumber":126,"author":{"gitId":"Assyarul"},"content":"     * @return List of Tasks with the relevant keyword."},{"lineNumber":127,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"Assyarul"},"content":"    public List\u003cTask\u003e findTasksWithString(String keyword) {"},{"lineNumber":129,"author":{"gitId":"Assyarul"},"content":"        Predicate\u003cTask\u003e byKeyword \u003d task-\u003e task.getDesc().contains(keyword);"},{"lineNumber":130,"author":{"gitId":"Assyarul"},"content":"        return list.stream()"},{"lineNumber":131,"author":{"gitId":"Assyarul"},"content":"                .filter(byKeyword)"},{"lineNumber":132,"author":{"gitId":"Assyarul"},"content":"                .collect(Collectors.toList());"},{"lineNumber":133,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":134}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.uielement.DialogBox;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":" * Handles the interaction the user and the program."},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"public class Ui extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    private Duke app;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Ui object."},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * @param app The Duke object the UI is bound to."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    public Ui(Duke app) {"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        this.app \u003d app;"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(getClass().getResource(\"MainWindow.fxml\"));"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            assert fxmlLoader !\u003d null : \"FXML file not loaded. Location specified might be wrong\";"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.load();"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            handleError(e);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        this.layout();"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     * Handles the user input, showing in the Ui."},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    public void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(input));"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        userInput.clear();"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        app.handleInput(input);"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    /**Creates the Duke dialogue box along with the information to be printed to the window."},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"     * @param output the string that is to be printed onto the Ui."},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"    public void createDukeDialog(String output) {"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(output));"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"     * Generates the string representation of the introduction."},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":"    public void handleIntro() {"},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"        String intro \u003d \"Hello I\u0027m Duke. What can I do for you?\\n\";"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(intro));"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"     * Creates the Duke dialogue box with the error information displayed."},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"     * @param e exception that was thrown"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"    public void handleError(Exception e) {"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"        DialogBox db \u003d DialogBox.getErrorDialog(e.getMessage());"},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.getChildren().add(db);"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"     * Overloaded method for {@link Ui#handleError(Exception)}."},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"     * Passes the string representation of the error message."},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"     * @param e string representation of the error message."},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"    public void handleError(String e) {"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"        DialogBox db \u003d DialogBox.getErrorDialog(e);"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"        dialogContainer.getChildren().add(db);"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Assyarul"},"content":"     * Closes the Duke app when called."},{"lineNumber":93,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Assyarul"},"content":"    public void handleExit() {"},{"lineNumber":95,"author":{"gitId":"Assyarul"},"content":"        Stage stage \u003d (Stage) userInput.getScene().getWindow();"},{"lineNumber":96,"author":{"gitId":"Assyarul"},"content":"        stage.close();"},{"lineNumber":97,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":98}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.task.AbstractTaskFactory;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * Command to add tasks into the taskList when executed."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"public class AddCommand implements ICommand {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    private AbstractTaskFactory taskFactory;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for the add command."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @param ui ui to display task added."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * @param tasks the taskList the task is being added into."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @param taskFactory Factory object responsible for creating the task."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    public AddCommand(Ui ui, TaskList tasks, AbstractTaskFactory taskFactory) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        this.taskFactory \u003d taskFactory;"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * When called, it will use the given input as information to create the task"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     * using the factory given and add it into the TaskList object."},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     * @param parameters input required by the Command."},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            Task newTask \u003d taskFactory.getTask(parameters);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            this.tasks.addTask(newTask);"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(newTask.toString());"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":45}},{"path":"src/main/java/duke/command/CommandWrite.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" * Wrapper Command that writes all tasks from taskList to file"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" * after executing the given command."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"public class CommandWrite implements ICommand {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private ICommand decoratedCommand;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    private Storage storage;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * Creates the command that will write to file when decoratedCommand"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * is executed."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @param decoratedCommand Command to executed before writing to file."},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * @param ui Ui object responsible for displaying the output."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     * @param storage Object responsible for writing the contents in taskList to file."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    public CommandWrite(Ui ui, Storage storage, ICommand decoratedCommand) {"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        this.storage \u003d storage;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        this.decoratedCommand \u003d decoratedCommand;"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     * Carry out writing to file after executing the command given."},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     * @param parameters necessary input needed for decoratedCommand to execute."},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            decoratedCommand.execute(parameters);"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            storage.write();"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":44}},{"path":"src/main/java/duke/command/DefaultCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" * Default Command which will get executed when keyword supplied does not match with keywords in CommandMap."},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public class DefaultCommand implements ICommand {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    public DefaultCommand(Ui ui) {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     * When executed, will print a default statement. Input given will not change"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * how function gets executed."},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * @param parameters"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        ui.handleError(\"Error: Unknown command word. Please try again.\");"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":23}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Command to delete tasks from the taskList when executed."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"public class DeleteCommand implements ICommand {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for DeleteCommand."},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * @param ui Ui to display"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object that the command will delete from when executed"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    public DeleteCommand(Ui ui, TaskList tasks) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * Will attempt to delete task at given parameters. Will print out an error if an invalid"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * input was given."},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * @param parameters index of task to be deleted"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            int count \u003d Integer.parseInt(parameters.strip());"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            Task removedTask \u003d tasks.deleteTask(count);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            String string \u003d getDeletedString(removedTask);"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(string);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(\"Error: Invalid argument for delete\");"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    private String getDeletedString(Task removedTask) {"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"\";"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"        string +\u003d \"Noted. I\u0027ve removed this task:\\n\";"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        string +\u003d removedTask.toString() + \"\\n\";"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"        string +\u003d String.format(\"Now you have %d task(s) in the list\", tasks.getTasks().size()) + \"\\n\";"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":53}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" * Command to mark a given task as done."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class DoneCommand implements ICommand {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * Constructor for DoneCommand"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * @param ui Ui to display after execution"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object responsible for task management"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    public DoneCommand(Ui ui, TaskList tasks) {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * Marks the given task in parameters as done."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     * Prints out the error to ui if caught."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"            Integer count \u003d Integer.parseInt(parameters);"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"            tasks.setTaskDone(count);"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"            String string \u003d getDoneString(count);"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(string);"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    private String getDoneString(Integer count) {"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"\";"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"        string +\u003d \"Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        string +\u003d tasks.getTask(count);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":45}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"public class ExitCommand implements ICommand {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for ExitCommand"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param ui Object responsible for managing the ui."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public ExitCommand(Ui ui) {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        ui.createDukeDialog(\"Bye. Hope to see you again soon!\");"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        ui.handleExit();"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":21}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Command to find indicated keyword in all the tasks\u0027 descriptions."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"public class FindCommand implements ICommand {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for FindCommand"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * @param ui"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * @param tasks"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    public FindCommand(Ui ui, TaskList tasks) {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     * Lists out all the tasks with the given keyword."},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    public void execute(String keyword) {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        string +\u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        string +\u003d listToString(keyword.strip());"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        ui.createDukeDialog(string);"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    private String listToString(String keyword) {"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        return Parser.listTaskToString(this.tasks.findTasksWithString(keyword));"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":38}},{"path":"src/main/java/duke/command/ICommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Interface for Command."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" *"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public interface ICommand {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * Execute given action based on the command."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param parameters input required by the Command. See implementations of Command"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     *                   for more information."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters);"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":15}},{"path":"src/main/java/duke/command/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":" * Command that prints the list existing in duke.TaskList."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"public class PrintListCommand implements ICommand {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * Constructor Method for PrintListCommand"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * @param tasks TaskList object that contains the information of all tasks"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    public PrintListCommand(Ui ui, TaskList tasks) {"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     * Prints out the entire list of all the tasks that exists"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     * in the application."},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        ui.createDukeDialog(listToString());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    private String listToString() {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"        return Parser.listTaskToString(this.tasks.getTasks());"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":35}},{"path":"src/main/java/duke/command/SetPriorityCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import duke.TaskList;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.task.Priority;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":" * Command to set indicated task\u0027s priority."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"public class SetPriorityCommand implements ICommand {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for SetPriorityCommand"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @param ui"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * @param tasks"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    public SetPriorityCommand(Ui ui, TaskList tasks) {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        this.ui \u003d ui;"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * Will attempt to delete task at given parameters. Will print out an error if an invalid"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * input was given."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     * @param parameters index of task to be deleted"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    public void execute(String parameters) {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            //Parse all inputs into its proper types"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            String[] inputArray \u003d Parser.parseSetPriority(parameters);"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"            int count \u003d Integer.parseInt(inputArray[0].trim());"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            int priorityInt \u003d Integer.parseInt(inputArray[1].trim());"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"            //Get task from TaskList and set its priority"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"            Priority priority \u003d Priority.valueOf(priorityInt);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"            Task selectedTask \u003d tasks.getTask(count);"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"            selectedTask.setPriority(priority);"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"            String string \u003d getPriorityString(selectedTask);"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(string);"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"            ui.createDukeDialog(\"Error: Invalid first argument for setting Priority\");"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"            ui.handleError(e);"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    private String getPriorityString(Task task) {"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"\";"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"        string +\u003d \"Noted. I\u0027ve changed this task priority:\\n\";"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"        string +\u003d task.toString() + \"\\n\";"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":61}},{"path":"src/main/java/duke/task/AbstractTaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Abstract class for the generation of Tasks."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public abstract class AbstractTaskFactory {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Information needed to create task."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @return New generated task."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    public abstract Task createTask(String parameters) throws IllegalArgumentException;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * Generate Tasks depending on the type needed."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @param parameters string representation of the task information."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     * @return duke.task.Task duke.task.Task generated."},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public Task getTask(String parameters) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        return this.createTask(parameters);"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":24}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    private final String deadline;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * Deadline constructor."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param content Task description"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @param deadline String representation of the datetime the task has to be completed by."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    public Deadline(String content, String deadline) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"     * Returns the deadline string representation."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"     * @return String representation of the deadline"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        return \"[D]\" + super.toString() + String.format(\" (by:%s)\", Parser.parseDate(this.deadline.strip()));"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     * String representation of the deadline when it is stored in a file."},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"     * @return file string representation of the deadline"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        return \"D|\" + super.toFileString() + \"|\" + this.deadline;"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":36}},{"path":"src/main/java/duke/task/DeadlineFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" * Factory Class responsible for creating Deadline objects."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class DeadlineFactory extends AbstractTaskFactory {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * Creates a Deadline object using the parameters given."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Information needed to create Deadline."},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @return Deadline object"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException thrown when invalid arguments are given."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d Parser.parseDeadline(parameters);"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        String content \u003d inputArray[0].trim();"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        String timeRange \u003d inputArray[1].trim();"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        return new Deadline(content, timeRange);"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":22}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" * Class containing the relevant information about an Event."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    private String timeRange;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * Constructor method for Event."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * @param content description of event"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     * @param timeRange the time when the event starts"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    public Event(String content, String timeRange) {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"     * String representation of the event."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"     * @return string representation of the event."},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"        return \"[E]\" + super.toString() + String.format(\" (at:%s)\", Parser.parseDate(this.timeRange.strip()));"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"     * String representation of the event when it is stored in a file."},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     * @return file string representation of the event"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"E|\" + super.toFileString() + \"|\" + this.timeRange;"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":39}},{"path":"src/main/java/duke/task/EventFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" * Factory Class responsible for creating Event objects."},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class EventFactory extends AbstractTaskFactory {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * Creates a Event object using the parameters given."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Information needed to create event."},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @return Event object"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException thrown when invalid arguments are given."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        String[] inputArray \u003d Parser.parseEvent(parameters);"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        String content \u003d inputArray[0].trim();"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        String timeRange \u003d inputArray[1].trim();"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        return new Event(content, timeRange);"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":23}},{"path":"src/main/java/duke/task/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"public enum Priority {"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"    LOW(\"!\", 0), MEDIUM(\"!!\", 1), HIGH(\"!!!\", 2);"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"    private String priorityString;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"    private int value;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    Priority(String string, int value) {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"        this.priorityString \u003d string;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        this.value \u003d value;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     * Returns priority which corresponds to the given priorityInt"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     * @param priorityInt"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * @return Priority corresponding to the priorityInt."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException raised when priorityInt given is out of range."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    public static Priority valueOf(int priorityInt) throws IllegalArgumentException {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        if (priorityInt \u003d\u003d 0) {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"            return Priority.LOW;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        } else if (priorityInt \u003d\u003d 1) {"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"            return Priority.MEDIUM;"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"        } else if (priorityInt \u003d\u003d 2) {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"            return Priority.HIGH;"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Second argument out of range. Accepts only 0-2.\");"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"     * Returns the integer representation of Priority"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"     * @return integer representation"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    public int getValue() {"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        return this.value;"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"     * Returns the string representation of priority."},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     * @return String representation of priority !,!! or !!!."},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"        return this.priorityString;"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":47}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Abstract class for tasks. Contains information about the task description and"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" * whether is has been carried out."},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    private String content;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    private boolean isDone;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    private Priority priority;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     * Abstract Class constructor."},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"     * Default priority is set to Medium."},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"     * @param content description of the task."},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    public Task(String content) {"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        this.content \u003d content;"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        this.priority \u003d Priority.MEDIUM;"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"     * Information needed to be write/read in/to file."},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * In the format of Type|"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     * @return String representation in file"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        String done;"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        if (this.getDone()) {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"1\";"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        } else {"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            done \u003d \"0\";"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        return done + \"|\" + priority.getValue() + \"|\" + this.getDesc();"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"     * String representation of whether the task is done."},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"     * To be used by the concrete implementation of Tasks only."},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"     * @return [X] content if done [ ] content otherwise."},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"        return String.format(\"[%s][%s]%s\", isDone ? \"X\" : \" \", this.getPriority(), this.getDesc());"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"     * Set Task to be done."},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"    public void setDone() {"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"        this.isDone \u003d true;"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"     * Gets the task description."},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"     * @return Description of duke.task.Task"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"    public String getDesc() {"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        return this.content;"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"     * Gets the status of whether the task is done or not."},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"     * @return Boolean representation of whether task is done or not."},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"    public boolean getDone() {"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        return this.isDone;"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":"     * Sets the current task priority to the one stated."},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"     * @param priority Priority to be set."},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"    public void setPriority(Priority priority) {"},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"        this.priority \u003d priority;"},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"     * Gets the priority the task has."},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"     * @return priority of the task."},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":"    public Priority getPriority() {"},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"        return priority;"},{"lineNumber":90,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":91}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Class containing the relevant information about an Event."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"     * ToDo constructor."},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param content ToDo description"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"    public ToDo(String content) {"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        super(content);"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"     * String representation of the ToDo."},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"     * @return string representation of the ToDo."},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"     * String representation of the ToDo when it is stored in a file."},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"     * @return file string representation of the ToDo"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"    public String toFileString() {"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        String string \u003d \"T|\" + super.toFileString();"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        return string;"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":34}},{"path":"src/main/java/duke/task/ToDoFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":" * Factory Class responsible for creating Factory objects."},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"public class ToDoFactory extends AbstractTaskFactory {"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"     * Creates a ToDo object using the parameters given."},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"     * @param parameters Information needed to create ToDo."},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"     * @return ToDo object"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"     * @throws IllegalArgumentException thrown when invalid arguments are given."},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"    public Task createTask(String parameters) throws IllegalArgumentException {"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        if (parameters.isBlank()) {"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"            throw new IllegalArgumentException(\"Error: Description of todo cannot be empty\");"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        return new ToDo(parameters);"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":21}},{"path":"src/main/java/duke/uielement/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.uielement;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"import javafx.fxml.FXML;"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.control.ColorPicker;"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.control.Label;"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"import javafx.scene.text.Text;"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":" * An example of a custom control using FXML."},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":" */"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    private static final ColorPicker ERROR_COLOR_PICKER \u003d new ColorPicker(Color.RED);"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    private Label dialog;"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"    private Text name;"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    private DialogBox(String text, String nameInput) {"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Ui.class.getResource(\"DialogBox.fxml\"));"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"            assert fxmlLoader !\u003d null : \"FXML file not loaded. Location specified might be wrong\";"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"            fxmlLoader.load();"},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"        } catch (IOException e) {"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"            e.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"        dialog.setText(text);"},{"lineNumber":43,"author":{"gitId":"Assyarul"},"content":"        dialog.autosize();"},{"lineNumber":44,"author":{"gitId":"Assyarul"},"content":"        name.setText(nameInput);"},{"lineNumber":45,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":47,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Assyarul"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":49,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Assyarul"},"content":"    private void flip() {"},{"lineNumber":51,"author":{"gitId":"Assyarul"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":52,"author":{"gitId":"Assyarul"},"content":"        Collections.reverse(tmp);"},{"lineNumber":53,"author":{"gitId":"Assyarul"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":54,"author":{"gitId":"Assyarul"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":55,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":57,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Assyarul"},"content":"     * Creates the dialogue box object for the user input."},{"lineNumber":59,"author":{"gitId":"Assyarul"},"content":"     * @param text text the User has inputted"},{"lineNumber":60,"author":{"gitId":"Assyarul"},"content":"     * @return the DialogBox representation of the User input."},{"lineNumber":61,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"Assyarul"},"content":"    public static DialogBox getUserDialog(String text) {"},{"lineNumber":63,"author":{"gitId":"Assyarul"},"content":"        DialogBox db \u003d new DialogBox(text, \"User\");"},{"lineNumber":64,"author":{"gitId":"Assyarul"},"content":"        return db;"},{"lineNumber":65,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":67,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Assyarul"},"content":"     * Creates the dialogue box object for Duke output."},{"lineNumber":69,"author":{"gitId":"Assyarul"},"content":"     * @param text String representation of Duke output."},{"lineNumber":70,"author":{"gitId":"Assyarul"},"content":"     * @return the DialogBox representation of Duke output."},{"lineNumber":71,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"Assyarul"},"content":"    public static DialogBox getDukeDialog(String text) {"},{"lineNumber":73,"author":{"gitId":"Assyarul"},"content":"        DialogBox db \u003d new DialogBox(text, \"Duke\");"},{"lineNumber":74,"author":{"gitId":"Assyarul"},"content":"        db.flip();"},{"lineNumber":75,"author":{"gitId":"Assyarul"},"content":"        return db;"},{"lineNumber":76,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":78,"author":{"gitId":"Assyarul"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"Assyarul"},"content":"     * Creates the dialogue box object for Error output."},{"lineNumber":80,"author":{"gitId":"Assyarul"},"content":"     * @param text String representation of Error output."},{"lineNumber":81,"author":{"gitId":"Assyarul"},"content":"     * @return the DialogBox representation of Error output."},{"lineNumber":82,"author":{"gitId":"Assyarul"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"Assyarul"},"content":"    public static DialogBox getErrorDialog(String text) {"},{"lineNumber":84,"author":{"gitId":"Assyarul"},"content":"        DialogBox db \u003d DialogBox.getDukeDialog(text);"},{"lineNumber":85,"author":{"gitId":"Assyarul"},"content":"        db.dialog.textFillProperty().bind(ERROR_COLOR_PICKER.valueProperty());"},{"lineNumber":86,"author":{"gitId":"Assyarul"},"content":"        return db;"},{"lineNumber":87,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":89,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":89}},{"path":"src/main/resources/duke/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-border-color: #7d7d7d; -fx-text-fill: black; -fx-background-radius: 5 0 5 5; -fx-padding: 3; -fx-label-padding: 3; -fx-border-width: 1.5; -fx-border-radius: 5 0 5 5; -fx-background-color: White;\" text\u003d\"Label\" textOverrun\u003d\"CLIP\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"      \u003cText fx:id\u003d\"name\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Text\"\u003e"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"      \u003c/Text\u003e"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Assyarul":20}},{"path":"src/main/resources/duke/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"\u003cfx:root maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" type\u003d\"AnchorPane\" xmlns\u003d\"http://javafx.com/javafx/\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"400.0\" promptText\u003d\"Enter Command...\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"            \u003ccontent\u003e"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"            \u003c/content\u003e"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Assyarul":17}},{"path":"src/test/java/duke/task/DeadlineFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class DeadlineFactoryTest {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    void createDeadline_emptyInput_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new DeadlineFactory().createTask(\"\").toString());"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Description of deadline cannot be empty\", e.getMessage());"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    void createDeadline_wrongInput_exceptionThrown() {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new DeadlineFactory().createTask(\"test\").toString());"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Please add a time limit to your deadline\", e.getMessage());"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    void createDeadline_correctInputs_success() {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]testDeadline (by:whenever)\","},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"                new DeadlineFactory().createTask(\"testDeadline /by whenever\").toString());"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]testDeadline (by:1000hrs)\","},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"                new DeadlineFactory().createTask(\"testDeadline /by 1000hrs\").toString());"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    void createDeadline_correctInputsWithProperDates_success() {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]testEvent (by:01 Jan 1998)\","},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"                new DeadlineFactory().createTask(\"testEvent /by 1998-01-01\").toString());"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]testEvent (by:11 Dec 2019)\","},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"                new DeadlineFactory().createTask(\"testEvent /by 2019-12-11\").toString());"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":42}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    void testFileStringConversion() {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        Deadline testDeadline1 \u003d new Deadline(\"deadlineTest1\", \"testDate\");"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        Deadline testDeadline2 \u003d new Deadline(\"deadlineTest2\", \"testDate\");"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"D|0|1|deadlineTest1|testDate\", testDeadline1.toFileString());"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"D|0|1|deadlineTest2|testDate\", testDeadline2.toFileString());"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        testDeadline1.setDone();"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"D|1|1|deadlineTest1|testDate\", testDeadline1.toFileString());"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        testDeadline2.setPriority(Priority.valueOf(0));"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"D|0|0|deadlineTest2|testDate\", testDeadline2.toFileString());"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    void testStringConversion() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        Deadline testDeadline1 \u003d new Deadline(\"deadlineTest1\", \"testDate\");"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        Deadline testDeadline2 \u003d new Deadline(\"deadlineTest2\", \"testDate\");"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]deadlineTest1 (by:testDate)\", testDeadline1.toString());"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!!]deadlineTest2 (by:testDate)\", testDeadline2.toString());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        testDeadline1.setDone();"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][X][!!]deadlineTest1 (by:testDate)\", testDeadline1.toString());"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        testDeadline2.setPriority(Priority.valueOf(0));"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[D][ ][!]deadlineTest2 (by:testDate)\", testDeadline2.toString());"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":37}},{"path":"src/test/java/duke/task/EventFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class EventFactoryTest {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    void createEvent_emptyInput_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new EventFactory().createTask(\"\").toString());"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Description of event cannot be empty\", e.getMessage());"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    void createEvent_wrongInput_exceptionThrown() {"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new EventFactory().createTask(\"test\").toString());"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Please add a start time to your event\", e.getMessage());"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"    void createEvent_correctInputs_success() {"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]testEvent (at:whenever)\","},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"                new EventFactory().createTask(\"testEvent /at whenever\").toString());"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]testEvent (at:1000hrs)\","},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"                new EventFactory().createTask(\"testEvent /at 1000hrs\").toString());"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    void createEvent_correctInputsWithProperDates_success() {"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]testEvent (at:01 Jan 1998)\","},{"lineNumber":38,"author":{"gitId":"Assyarul"},"content":"                new EventFactory().createTask(\"testEvent /at 1998-01-01\").toString());"},{"lineNumber":39,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]testEvent (at:11 Dec 2019)\","},{"lineNumber":40,"author":{"gitId":"Assyarul"},"content":"                new EventFactory().createTask(\"testEvent /at 2019-12-11\").toString());"},{"lineNumber":41,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":42}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    void testFileStringConversion() {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        Event testEvent1 \u003d new Event(\"eventTest1\", \"testDate\");"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        Event testEvent2 \u003d new Event(\"eventTest2\", \"testDate\");"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"E|0|1|eventTest1|testDate\", testEvent1.toFileString());"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"E|0|1|eventTest2|testDate\", testEvent2.toFileString());"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        testEvent1.setDone();"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"E|1|1|eventTest1|testDate\", testEvent1.toFileString());"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        testEvent2.setPriority(Priority.valueOf(0));"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"E|0|0|eventTest2|testDate\", testEvent2.toFileString());"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    void testStringConversion() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        Event testEvent1 \u003d new Event(\"eventTest1\", \"testDate\");"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        Event testEvent2 \u003d new Event(\"eventTest2\", \"testDate\");"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]eventTest1 (at:testDate)\", testEvent1.toString());"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!!]eventTest2 (at:testDate)\", testEvent2.toString());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        testEvent1.setDone();"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][X][!!]eventTest1 (at:testDate)\", testEvent1.toString());"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        testEvent2.setPriority(Priority.valueOf(0));"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[E][ ][!]eventTest2 (at:testDate)\", testEvent2.toString());"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":37}},{"path":"src/test/java/duke/task/PriorityTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class PriorityTest {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    void getValuePriority_correctInputs_success() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        assertEquals(0, Priority.valueOf(0).getValue());"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"        assertEquals(1, Priority.valueOf(1).getValue());"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        assertEquals(2, Priority.valueOf(2).getValue());"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    void getValuePriority_outOfRangeInput_exceptionThrown() {"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", Priority.valueOf(3).getValue());"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Second argument out of range. Accepts only 0-2.\", e.getMessage());"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":"    void toStringPriority_correctInputs_success() {"},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"!\", Priority.valueOf(0).toString());"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"!!\", Priority.valueOf(1).toString());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"!!!\", Priority.valueOf(2).toString());"},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":32}},{"path":"src/test/java/duke/task/ToDoFactoryTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"public class ToDoFactoryTest {"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"    void createToDo_emptyInput_exceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        try {"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"\", new ToDoFactory().createTask(\"\").toString());"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"            fail();"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"            assertEquals(\"Error: Description of todo cannot be empty\", e.getMessage());"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"    void createToDo_correctInputs_success() {"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][ ][!!]testToDo\","},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":"                new ToDoFactory().createTask(\"testToDo\").toString());"},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][ ][!!]testToDo2\","},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"                new ToDoFactory().createTask(\"testToDo2\").toString());"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":26}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"public class ToDoTest {"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"    void testFileStringConversion() {"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"        ToDo testToDo1 \u003d new ToDo(\"todoTest1\");"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"        ToDo testToDo2 \u003d new ToDo(\"todoTest2\");"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"T|0|1|todoTest1\", testToDo1.toFileString());"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"T|0|1|todoTest2\", testToDo2.toFileString());"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"        testToDo1.setDone();"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"T|1|1|todoTest1\", testToDo1.toFileString());"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"        testToDo2.setPriority(Priority.valueOf(0));"},{"lineNumber":20,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"T|0|0|todoTest2\", testToDo2.toFileString());"},{"lineNumber":21,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":23,"author":{"gitId":"Assyarul"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"Assyarul"},"content":"    void testStringConversion() {"},{"lineNumber":25,"author":{"gitId":"Assyarul"},"content":"        ToDo testToDo1 \u003d new ToDo(\"todoTest1\");"},{"lineNumber":26,"author":{"gitId":"Assyarul"},"content":"        ToDo testToDo2 \u003d new ToDo(\"todoTest2\");"},{"lineNumber":27,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":28,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][ ][!!]todoTest1\", testToDo1.toString());"},{"lineNumber":29,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][ ][!!]todoTest2\", testToDo2.toString());"},{"lineNumber":30,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":31,"author":{"gitId":"Assyarul"},"content":"        testToDo1.setDone();"},{"lineNumber":32,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][X][!!]todoTest1\", testToDo1.toString());"},{"lineNumber":33,"author":{"gitId":"Assyarul"},"content":""},{"lineNumber":34,"author":{"gitId":"Assyarul"},"content":"        testToDo2.setPriority(Priority.valueOf(0));"},{"lineNumber":35,"author":{"gitId":"Assyarul"},"content":"        assertEquals(\"[T][ ][!]todoTest2\", testToDo2.toString());"},{"lineNumber":36,"author":{"gitId":"Assyarul"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"Assyarul"},"content":"}"}],"authorContributionMap":{"Assyarul":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Assyarul"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Assyarul"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"Assyarul"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":6,"author":{"gitId":"Assyarul"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":8,"author":{"gitId":"Assyarul"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":10,"author":{"gitId":"Assyarul"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"Assyarul"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"Assyarul"},"content":"event"},{"lineNumber":13,"author":{"gitId":"Assyarul"},"content":"deadline fail"},{"lineNumber":14,"author":{"gitId":"Assyarul"},"content":"event fail"},{"lineNumber":15,"author":{"gitId":"Assyarul"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Assyarul"},"content":"delete ab"},{"lineNumber":17,"author":{"gitId":"Assyarul"},"content":"delete 2"},{"lineNumber":18,"author":{"gitId":"Assyarul"},"content":"list"},{"lineNumber":19,"author":{"gitId":"Assyarul"},"content":"blah"}],"authorContributionMap":{"Assyarul":19}}]
