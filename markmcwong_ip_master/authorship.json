[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"T|false|1"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y Sunday"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"D|false|return book|y 2/12/2019 1800"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"D|false|return book |y 2/12/2019 1800"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"D|false|return book| 2/12/2019 1800"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"D|false|return book|2/12/2019 1800"}],"authorContributionMap":{"markmcwong":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"import duke.system.Parser;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"import duke.system.Storage;"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"import duke.system.Ui;"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"import duke.system.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    private Storage storage;"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"     * initiate UI and try to load in the data if exist, else initiate a new list and show error"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"     * @param filePath the path where the stored txt is saved"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"            tasks \u003d new TaskList(storage.loadData());"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"            ui.showLoadingError();"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"     * The method to be called in \u003ccode\u003evoid main()\u003c/code\u003e that"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"     * keep taking in commands until \"bye\" is entered"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"        Parser in \u003d new Parser();"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"        ui.showLine();"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"        ui.showText(\"Hello! I\u0027m Duke \\nWhat can I do for you? \\n\");"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"        ui.showLine();"},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":"        while (!in.getCommand().equals(\"bye\")) {"},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":"            in \u003d new Parser(sc.nextLine());"},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":"            ui.showText(in.print(tasks));"},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":"                storage.writeData(tasks.toString());"},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"            } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"        sc.close();"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":53,"author":{"gitId":"markmcwong"},"content":"    public static void main(String[] args) {"},{"lineNumber":54,"author":{"gitId":"markmcwong"},"content":"        new Duke(\"data/duke.txt\").run();"},{"lineNumber":55,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"markmcwong":53,"-":3}},{"path":"src/main/java/duke/system/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.system;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import duke.system.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"import duke.task.ListItem;"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":" * Represents a parser that takes in the entered \u003ccode\u003ecommand\u003c/code\u003e by the user and filtered by the enum,"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":" * then return the parsed \u003ccode\u003ecommand\u003c/code\u003e, \u003ccode\u003eargument\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":" * \u003ccode\u003eprint\u003c/code\u003e the output and add the parsed item to the list if needed"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"public class Parser {"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"    private static final String LINE \u003d \"\\n____________________________________________________________\";"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"    private final String command;"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"    private final String argument;"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"    private final String date;"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"    enum PredefinedCommand {"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"        LIST,"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"        BYE,"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"        DONE,"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"        TODO,"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"        DEADLINE,"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"        EVENT,"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"        ERROR,"},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"        DELETE,"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":"        FIND"},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"     * Constructor method that initiates with empty/ null values"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":"    public Parser() {"},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"        this.command \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d null;"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"        this.argument \u003d \"\";"},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":"     * @param in - a string that will be parsed and stored as"},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"     *           \u003ccode\u003ecommand\u003c/code\u003e, \u003ccode\u003eargument\u003c/code\u003e and \u003ccode\u003edate\u003c/code\u003e accordingly"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":"     * @throws DukeException.UnknownCommandException if unknown command entered"},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"     * @throws DukeException.NoDescriptionException if required no. of arg is not met"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"    public Parser(String in) {"},{"lineNumber":51,"author":{"gitId":"markmcwong"},"content":"        String tempDate \u003d null;"},{"lineNumber":52,"author":{"gitId":"markmcwong"},"content":"        String tempCommand \u003d \"\";"},{"lineNumber":53,"author":{"gitId":"markmcwong"},"content":"        String[] result \u003d in.split(\"\\\\s\");"},{"lineNumber":54,"author":{"gitId":"markmcwong"},"content":"        String tempArg \u003d \"\";"},{"lineNumber":55,"author":{"gitId":"markmcwong"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"markmcwong"},"content":"            if (result[0].equals(\"done\") || result[0].equals(\"find\")) {"},{"lineNumber":57,"author":{"gitId":"markmcwong"},"content":"                tempCommand \u003d result[0];"},{"lineNumber":58,"author":{"gitId":"markmcwong"},"content":"                if (result.length \u003c\u003d 1) {"},{"lineNumber":59,"author":{"gitId":"markmcwong"},"content":"                    throw new DukeException.NoDescriptionException(result[0]);"},{"lineNumber":60,"author":{"gitId":"markmcwong"},"content":"                } else {"},{"lineNumber":61,"author":{"gitId":"markmcwong"},"content":"                    tempArg \u003d result[1];"},{"lineNumber":62,"author":{"gitId":"markmcwong"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"markmcwong"},"content":"            } else if (result[0].equals(\"todo\") || result[0].equals(\"delete\")) {"},{"lineNumber":64,"author":{"gitId":"markmcwong"},"content":"                String temp \u003d in.substring(in.indexOf(\" \") + 1);"},{"lineNumber":65,"author":{"gitId":"markmcwong"},"content":"                tempArg \u003d temp;"},{"lineNumber":66,"author":{"gitId":"markmcwong"},"content":"                if (temp.equals(\"todo\") || temp.equals(\"delete\")) {"},{"lineNumber":67,"author":{"gitId":"markmcwong"},"content":"                    throw new DukeException.NoDescriptionException(result[0]);"},{"lineNumber":68,"author":{"gitId":"markmcwong"},"content":"                } else {"},{"lineNumber":69,"author":{"gitId":"markmcwong"},"content":"                    tempCommand \u003d result[0];"},{"lineNumber":70,"author":{"gitId":"markmcwong"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"markmcwong"},"content":"            } else if (result[0].equals(\"deadline\") || result[0].equals(\"event\")) {"},{"lineNumber":72,"author":{"gitId":"markmcwong"},"content":"                String firstParam \u003d in.substring(in.indexOf(\"/\") + 1);"},{"lineNumber":73,"author":{"gitId":"markmcwong"},"content":"                if (firstParam.equals(\"deadline\") || firstParam.equals(\"event\")) {"},{"lineNumber":74,"author":{"gitId":"markmcwong"},"content":"                    throw new DukeException.NoDescriptionException(result[0]);"},{"lineNumber":75,"author":{"gitId":"markmcwong"},"content":"                } else {"},{"lineNumber":76,"author":{"gitId":"markmcwong"},"content":"                    int dateIndex \u003d Math.max(firstParam.indexOf(\"by \"), firstParam.indexOf(\"at \"));"},{"lineNumber":77,"author":{"gitId":"markmcwong"},"content":"                    if (dateIndex \u003d\u003d -1) {"},{"lineNumber":78,"author":{"gitId":"markmcwong"},"content":"                        throw new DukeException.NoDescriptionException(result[0]);"},{"lineNumber":79,"author":{"gitId":"markmcwong"},"content":"                    } else {"},{"lineNumber":80,"author":{"gitId":"markmcwong"},"content":"                        tempCommand \u003d result[0];"},{"lineNumber":81,"author":{"gitId":"markmcwong"},"content":"                        tempDate \u003d firstParam.substring(dateIndex + 3);"},{"lineNumber":82,"author":{"gitId":"markmcwong"},"content":"                        firstParam \u003d in.substring(in.indexOf(\" \") + 1);"},{"lineNumber":83,"author":{"gitId":"markmcwong"},"content":"                        tempArg \u003d firstParam.substring(0, firstParam.indexOf(\"/\") - 1);"},{"lineNumber":84,"author":{"gitId":"markmcwong"},"content":"                    }"},{"lineNumber":85,"author":{"gitId":"markmcwong"},"content":"                }"},{"lineNumber":86,"author":{"gitId":"markmcwong"},"content":"            } else {"},{"lineNumber":87,"author":{"gitId":"markmcwong"},"content":"                try {"},{"lineNumber":88,"author":{"gitId":"markmcwong"},"content":"                    tempCommand \u003d String.valueOf(PredefinedCommand.valueOf(result[0]));"},{"lineNumber":89,"author":{"gitId":"markmcwong"},"content":"                } catch (IllegalArgumentException ex) {"},{"lineNumber":90,"author":{"gitId":"markmcwong"},"content":"                    throw new DukeException.UnknownCommandException();"},{"lineNumber":91,"author":{"gitId":"markmcwong"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"markmcwong"},"content":"        } catch (DukeException ex) {"},{"lineNumber":94,"author":{"gitId":"markmcwong"},"content":"            tempCommand \u003d \"error\";"},{"lineNumber":95,"author":{"gitId":"markmcwong"},"content":"            tempArg \u003d ex.getMessage();"},{"lineNumber":96,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"markmcwong"},"content":"        this.command \u003d tempCommand;"},{"lineNumber":98,"author":{"gitId":"markmcwong"},"content":"        this.argument \u003d tempArg;"},{"lineNumber":99,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d tempDate;"},{"lineNumber":100,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":102,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"markmcwong"},"content":"     * Getter method"},{"lineNumber":104,"author":{"gitId":"markmcwong"},"content":"     * @return the private variable command"},{"lineNumber":105,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"markmcwong"},"content":"    public String getCommand() {"},{"lineNumber":107,"author":{"gitId":"markmcwong"},"content":"        return this.command;"},{"lineNumber":108,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":110,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"markmcwong"},"content":"     * Getter method"},{"lineNumber":112,"author":{"gitId":"markmcwong"},"content":"     * @return the private variable argument"},{"lineNumber":113,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":114,"author":{"gitId":"markmcwong"},"content":"    public String getDate() {"},{"lineNumber":115,"author":{"gitId":"markmcwong"},"content":"        return this.argument;"},{"lineNumber":116,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":118,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"markmcwong"},"content":"     * @param inputList - take in the list and do corresponding action according to the command"},{"lineNumber":121,"author":{"gitId":"markmcwong"},"content":"     * @return a string to be printed to the console by UI"},{"lineNumber":122,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"markmcwong"},"content":"    public String print(TaskList inputList) {"},{"lineNumber":124,"author":{"gitId":"markmcwong"},"content":"        PredefinedCommand switchVal \u003d PredefinedCommand.valueOf(this.command);"},{"lineNumber":125,"author":{"gitId":"markmcwong"},"content":"        switch (switchVal) {"},{"lineNumber":126,"author":{"gitId":"markmcwong"},"content":"        case BYE:"},{"lineNumber":127,"author":{"gitId":"markmcwong"},"content":"            return \"Bye. Hope to see you again soon!\";"},{"lineNumber":128,"author":{"gitId":"markmcwong"},"content":"        case LIST:"},{"lineNumber":129,"author":{"gitId":"markmcwong"},"content":"            String initStr \u003d \"Here are the tasks in your list:\";"},{"lineNumber":130,"author":{"gitId":"markmcwong"},"content":"            for (int i \u003d 0; i \u003c inputList.getListItems().size(); i++) {"},{"lineNumber":131,"author":{"gitId":"markmcwong"},"content":"                initStr +\u003d \"\\n\" + ((i + 1) + \".\" + inputList.getListItems().get(i));"},{"lineNumber":132,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"markmcwong"},"content":"            return initStr + LINE;"},{"lineNumber":134,"author":{"gitId":"markmcwong"},"content":"        case DONE:"},{"lineNumber":135,"author":{"gitId":"markmcwong"},"content":"            inputList.updateItemMutable(Integer.parseInt(this.argument));"},{"lineNumber":136,"author":{"gitId":"markmcwong"},"content":"            return \"Nice! I\u0027ve marked this task as done: \\n\""},{"lineNumber":137,"author":{"gitId":"markmcwong"},"content":"                    + inputList.getListItems().get(Integer.parseInt(this.argument) - 1) + LINE;"},{"lineNumber":138,"author":{"gitId":"markmcwong"},"content":"        case EVENT:"},{"lineNumber":139,"author":{"gitId":"markmcwong"},"content":"            Event newEvent \u003d new Event(this.argument, this.date);"},{"lineNumber":140,"author":{"gitId":"markmcwong"},"content":"            inputList.addCommandMutable(newEvent);"},{"lineNumber":141,"author":{"gitId":"markmcwong"},"content":"            return printPredefinedMessage(newEvent.toString(), inputList);"},{"lineNumber":142,"author":{"gitId":"markmcwong"},"content":"        case DEADLINE:"},{"lineNumber":143,"author":{"gitId":"markmcwong"},"content":"            Deadline newDeadline \u003d new Deadline(this.argument, this.date);"},{"lineNumber":144,"author":{"gitId":"markmcwong"},"content":"            inputList.addCommandMutable(newDeadline);"},{"lineNumber":145,"author":{"gitId":"markmcwong"},"content":"            return printPredefinedMessage(newDeadline.toString(), inputList);"},{"lineNumber":146,"author":{"gitId":"markmcwong"},"content":"        case TODO:"},{"lineNumber":147,"author":{"gitId":"markmcwong"},"content":"            Todo newTodo \u003d new Todo(this.argument);"},{"lineNumber":148,"author":{"gitId":"markmcwong"},"content":"            inputList.addCommandMutable(newTodo);"},{"lineNumber":149,"author":{"gitId":"markmcwong"},"content":"            return printPredefinedMessage(newTodo.toString(), inputList);"},{"lineNumber":150,"author":{"gitId":"markmcwong"},"content":"        case ERROR:"},{"lineNumber":151,"author":{"gitId":"markmcwong"},"content":"            return this.argument;"},{"lineNumber":152,"author":{"gitId":"markmcwong"},"content":"        case DELETE:"},{"lineNumber":153,"author":{"gitId":"markmcwong"},"content":"            int index \u003d Integer.parseInt(this.argument);"},{"lineNumber":154,"author":{"gitId":"markmcwong"},"content":"            ListItem tempItem \u003d inputList.getListItems().get(index - 1);"},{"lineNumber":155,"author":{"gitId":"markmcwong"},"content":"            inputList.deleteCommandMutable(index);"},{"lineNumber":156,"author":{"gitId":"markmcwong"},"content":"            return \"Noted. I\u0027ve removed this task: \" + tempItem"},{"lineNumber":157,"author":{"gitId":"markmcwong"},"content":"                    + \"\\nNow you have \" + inputList.getListItems().size() + \" tasks in the list\" + LINE;"},{"lineNumber":158,"author":{"gitId":"markmcwong"},"content":"        case FIND:"},{"lineNumber":159,"author":{"gitId":"markmcwong"},"content":"            String matchedStr \u003d \"Here are the tasks in your list:\";"},{"lineNumber":160,"author":{"gitId":"markmcwong"},"content":"            TaskList tempList \u003d inputList.findItem(this.argument);"},{"lineNumber":161,"author":{"gitId":"markmcwong"},"content":"            for (int i \u003d 0; i \u003c tempList.getListItems().size(); i++) {"},{"lineNumber":162,"author":{"gitId":"markmcwong"},"content":"                matchedStr +\u003d \"\\n\" + ((i + 1) + \".\" + tempList.getListItems().get(i));"},{"lineNumber":163,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":164,"author":{"gitId":"markmcwong"},"content":"            return matchedStr + LINE;"},{"lineNumber":165,"author":{"gitId":"markmcwong"},"content":"        default:"},{"lineNumber":166,"author":{"gitId":"markmcwong"},"content":"            break;"},{"lineNumber":167,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"markmcwong"},"content":"        // every case must return some form of string, therefore break is not required"},{"lineNumber":169,"author":{"gitId":"markmcwong"},"content":"        return \"\";"},{"lineNumber":170,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":172,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"markmcwong"},"content":"     * creates a standardised string that is common for all the tasks type to be printed"},{"lineNumber":174,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"markmcwong"},"content":"     * @param typeOfTask"},{"lineNumber":176,"author":{"gitId":"markmcwong"},"content":"     * @param inputList - to get the size of the list"},{"lineNumber":177,"author":{"gitId":"markmcwong"},"content":"     * @return a string to be printed by UI"},{"lineNumber":178,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":179,"author":{"gitId":"markmcwong"},"content":"    public String printPredefinedMessage(String typeOfTask, TaskList inputList) {"},{"lineNumber":180,"author":{"gitId":"markmcwong"},"content":"        return \"Got it. I\u0027ve added this task: \\n\" + typeOfTask + \"\\nNow you have \""},{"lineNumber":181,"author":{"gitId":"markmcwong"},"content":"                + inputList.getListItems().size() + \" tasks in the list\" + LINE;"},{"lineNumber":182,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":183}},{"path":"src/main/java/duke/system/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.system;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"import duke.system.exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"import duke.task.Deadline;"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"import duke.task.Event;"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"import duke.task.ListItem;"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"import duke.task.Todo;"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":" * Represents an object that interacts with I/O according the file path provided,"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":" * imports list from local file with \u003ccode\u003eloadData\u003c/code\u003e and export using \u003ccode\u003ewriteData\u003c/code\u003e accordingly"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"    private final String filePath;"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"    public Storage(String path) {"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"        this.filePath \u003d path;"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"     * Reads the list and loop till the end of the file and add corresponding tasks."},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"     * @return a list of tasks that can be manipulated later"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":"     * @throws DukeException.InputOutputErrorException"},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"    public List\u003cListItem\u003e loadData() throws DukeException.InputOutputErrorException {"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"        List\u003cListItem\u003e importedList;"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"        importedList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":"            File f \u003d new File(this.filePath);"},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"            while (s.hasNext()) {"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"                String[] result \u003d s.nextLine().split(\"\\\\|\");"},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":"                switch (result[0]) {"},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":"                case \"T\":"},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":"                    importedList.add(new Todo(result[2], result[1] \u003d\u003d \"1\"));"},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":"                    break;"},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":"                case \"D\":"},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"                    importedList.add(new Deadline(result[2], result[3], result[1] \u003d\u003d \"1\"));"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":"                    break;"},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"                case \"E\":"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"                    importedList.add(new Event(result[2], result[3], result[1] \u003d\u003d \"1\"));"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"markmcwong"},"content":"                default:"},{"lineNumber":52,"author":{"gitId":"markmcwong"},"content":"                    break;"},{"lineNumber":53,"author":{"gitId":"markmcwong"},"content":"                }"},{"lineNumber":54,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"markmcwong"},"content":"            s.close();"},{"lineNumber":56,"author":{"gitId":"markmcwong"},"content":"            return importedList;"},{"lineNumber":57,"author":{"gitId":"markmcwong"},"content":"        } catch (FileNotFoundException ex) {"},{"lineNumber":58,"author":{"gitId":"markmcwong"},"content":"            throw new DukeException.InputOutputErrorException();"},{"lineNumber":59,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":62,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"markmcwong"},"content":"     * write data to local file"},{"lineNumber":64,"author":{"gitId":"markmcwong"},"content":"     * @param input current task list in string form"},{"lineNumber":65,"author":{"gitId":"markmcwong"},"content":"     * @throws DukeException.InputOutputErrorException"},{"lineNumber":66,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"markmcwong"},"content":"    public void writeData(String input) throws DukeException.InputOutputErrorException {"},{"lineNumber":68,"author":{"gitId":"markmcwong"},"content":"        String statusCode \u003d \"\";"},{"lineNumber":69,"author":{"gitId":"markmcwong"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"markmcwong"},"content":"            FileWriter fw \u003d new FileWriter(\"data/duke.txt\");"},{"lineNumber":71,"author":{"gitId":"markmcwong"},"content":"            fw.write(input);"},{"lineNumber":72,"author":{"gitId":"markmcwong"},"content":"            fw.close();"},{"lineNumber":73,"author":{"gitId":"markmcwong"},"content":"        } catch (IOException ex) {"},{"lineNumber":74,"author":{"gitId":"markmcwong"},"content":"            throw new DukeException.InputOutputErrorException();"},{"lineNumber":75,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":77}},{"path":"src/main/java/duke/system/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.system;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":" * Represents the object that is responsible for displaying context to the user"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":" * such as separating line or error"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"    public void showLoadingError() {"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"        System.out.println(\"Error in loading the list\");"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"     * Print the input in the console"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    public void showText(String input) {"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"        System.out.println(input);"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"    public void showError(String input) {"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"        System.out.println(\"Error: \" + input);"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"    public void showLine() {"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"        System.out.println(\"____________________________________________________________\\n\");"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":26}},{"path":"src/main/java/duke/system/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.system.exception;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"    private static final long serialVersionUID \u003d 1L;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    public static class NoDescriptionException extends DukeException {"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"        public NoDescriptionException(String itemClass) {"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"            super(\"OOPS!!! The description of a \" + itemClass + \" cannot be empty.\");"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"    public static class UnknownCommandException extends DukeException {"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"        public UnknownCommandException() {"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"            super(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"    public static class InputOutputErrorException extends DukeException {"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"        public InputOutputErrorException() {"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"            super(\"IO Error!\");"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":28}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":" * Represents the deadline type task that has a deadline date and an optional parsedDate"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":" * if provided date string is parsable"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"public class Deadline extends ListItem {"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    private final String date;"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"    private LocalDate parsedDate;"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"     * Constructor for Deadline that was not provided the task done status"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in a string and pass to parent\u0027s constructor as task name"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"     * @param inputDate the deadline input by user"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"    public Deadline(String task, String inputDate) {"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"        super(task);"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d inputDate;"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"        this.parsedDate \u003d parseDate(inputDate);"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"     * the overloaded constructor that allows taking the status of the task"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in string and pass to parent\u0027s constructor as the task name"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"     * @param inputDate date entered as the deadline"},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"     * @param isDone the status of the task"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"    public Deadline(String task, String inputDate, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"        super(task, isDone);"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d inputDate;"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"        this.parsedDate \u003d parseDate(inputDate);"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"     * Changes the task\u0027s status to be done"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"     * @return the task to replace the old one in the list or to be used later"},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":"    public ListItem markAsDone() {"},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":"        return new Deadline(super.getTask(), (parsedDate \u003d\u003d null"},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":"                ? this.date : parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))), true);"},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"        return \"[D]\" + (super.getDone() \u003d\u003d true ? \"[X] \" : \"[ ] \") + super.getTask()"},{"lineNumber":51,"author":{"gitId":"markmcwong"},"content":"                + \" (by: \""},{"lineNumber":52,"author":{"gitId":"markmcwong"},"content":"                + (parsedDate \u003d\u003d null"},{"lineNumber":53,"author":{"gitId":"markmcwong"},"content":"                ? this.date : parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))) + \")\";"},{"lineNumber":54,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":56,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"markmcwong"},"content":"     * @return either the provided date or a parsed date to be printed"},{"lineNumber":58,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"markmcwong"},"content":"    public String getDate() {"},{"lineNumber":60,"author":{"gitId":"markmcwong"},"content":"        return \"|\" + (parsedDate \u003d\u003d null ? this.date : parsedDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":61,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":63,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"markmcwong"},"content":"     * Check whether the date provide by the user is parsable and store it accordingly"},{"lineNumber":65,"author":{"gitId":"markmcwong"},"content":"     * @param input the date given by the user"},{"lineNumber":66,"author":{"gitId":"markmcwong"},"content":"     * @return eithe a null or LocalDate that has a parsed date"},{"lineNumber":67,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"markmcwong"},"content":"    public LocalDate parseDate(String input) {"},{"lineNumber":69,"author":{"gitId":"markmcwong"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"markmcwong"},"content":"            return LocalDate.parse(input);"},{"lineNumber":71,"author":{"gitId":"markmcwong"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":72,"author":{"gitId":"markmcwong"},"content":"            return null;"},{"lineNumber":73,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":75}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"public class Event extends ListItem {"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"    private final String date;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"     * Constructor for Event without task done status"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in string and pass to parent\u0027s constructor"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"     * @param inputDate takes in user\u0027s input date"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    public Event(String task, String inputDate) {"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"        super(task);"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d inputDate;"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"     * overloaded version of constructor for Event"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in string and pass to parent\u0027s constructor"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"     * @param inputDate takes in user\u0027s input date"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"     * @param isDone the status of the task"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"    public Event(String task, String inputDate, boolean isDone) {"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"        super(task, isDone);"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"        this.date \u003d inputDate;"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"    public ListItem markAsDone() {"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"        return new Event(super.getTask(), this.date, true);"},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"        return \"[E]\" + (super.getDone() \u003d\u003d true ? \"[X] \" : \"[ ] \") + super.getTask() + \" (at: \" + date + \")\";"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":"    public String getDate() {"},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"        return \"|\" + date;"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":40}},{"path":"src/main/java/duke/task/ListItem.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":" * the abstract task class as a base for the tasks \"deadline\", \"event\" annd \"todo\""},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":" * that requires the subclass to define \u003ccode\u003emarkAsDone()\u003c/code\u003e and \u003ccode\u003egetDate()\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"public abstract class ListItem {"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"    private final boolean isDone;"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"    private final String task;"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"     * Constructor for ListItem"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in string and pass to parent\u0027s constructor as the task name"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    public ListItem(String task) {"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"        this.task \u003d task;"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"     * Overloaded version of Constructor for ListItem"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"     * @param task takes in string and pass to parent\u0027s constructor as the task name"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"     * @param isDone takes in the task\u0027s status"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"    public ListItem(String task, boolean isDone) {"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"        this.task \u003d task;"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":"     * @return a boolean of the task\u0027s status,"},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"     * useful for subclasses that passed the status to parent (this class)"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"    public boolean getDone() {"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"        return this.isDone;"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"    public String getTask() {"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"        return this.task;"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":"    public abstract ListItem markAsDone();"},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":"    public abstract String getDate();"},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":"    public String toString() {"},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"        return (isDone \u003d\u003d true ? \"[X] \" : \"[ ] \") + this.task;"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":50}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":" * The list that contains and holds all the tasks imported/added by the user"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":" * handles operation to the list including add, update and delete"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":" */"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"public class TaskList {"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    private List\u003cListItem\u003e listItems;"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"    public TaskList() {"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"        this.listItems \u003d new ArrayList\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"    public TaskList(List\u003cListItem\u003e inputList) {"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"        this.listItems \u003d new ArrayList\u003cListItem\u003e(inputList);"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"     * Immutable way to add the new task by returning a new list"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"     * @param task the task to be added to the list"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"markmcwong"},"content":"    public TaskList addCommand(ListItem task) {"},{"lineNumber":27,"author":{"gitId":"markmcwong"},"content":"        List\u003cListItem\u003e tempList \u003d new ArrayList\u003c\u003e(this.listItems);"},{"lineNumber":28,"author":{"gitId":"markmcwong"},"content":"        tempList.add(task);"},{"lineNumber":29,"author":{"gitId":"markmcwong"},"content":"        return new TaskList(tempList);"},{"lineNumber":30,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":32,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"markmcwong"},"content":"     * Mutable way to add the new task by modifying the list"},{"lineNumber":34,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"markmcwong"},"content":"     * @param task the task to be added to the list"},{"lineNumber":36,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"markmcwong"},"content":"    public void addCommandMutable(ListItem task) {"},{"lineNumber":38,"author":{"gitId":"markmcwong"},"content":"        this.listItems.add(task);"},{"lineNumber":39,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":41,"author":{"gitId":"markmcwong"},"content":"    public List\u003cListItem\u003e getListItems() {"},{"lineNumber":42,"author":{"gitId":"markmcwong"},"content":"        return this.listItems;"},{"lineNumber":43,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":45,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"markmcwong"},"content":"     * Mutable way to mark the task as done by directly changing item in the list"},{"lineNumber":47,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"markmcwong"},"content":"     * @param index the index of the item to be changed"},{"lineNumber":49,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"markmcwong"},"content":"    public void updateItemMutable(int index) {"},{"lineNumber":51,"author":{"gitId":"markmcwong"},"content":"        int correctIndex \u003d index - 1;"},{"lineNumber":52,"author":{"gitId":"markmcwong"},"content":"        ListItem tempItem \u003d this.listItems.get(correctIndex).markAsDone();"},{"lineNumber":53,"author":{"gitId":"markmcwong"},"content":"        this.listItems.set(correctIndex, tempItem);"},{"lineNumber":54,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":56,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"markmcwong"},"content":"     * Mutable way to delete the task by directly removing item in the list"},{"lineNumber":58,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"markmcwong"},"content":"     * @param index the index of the item to be changed"},{"lineNumber":60,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"markmcwong"},"content":"    public void deleteCommandMutable(int index) {"},{"lineNumber":62,"author":{"gitId":"markmcwong"},"content":"        int correctIndex \u003d index - 1;"},{"lineNumber":63,"author":{"gitId":"markmcwong"},"content":"        this.listItems.remove(correctIndex);"},{"lineNumber":64,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":66,"author":{"gitId":"markmcwong"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"markmcwong"},"content":"     * Look for all items that contains the \u003ccode\u003ekeyword\u003c/code\u003e and return the list"},{"lineNumber":68,"author":{"gitId":"markmcwong"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"markmcwong"},"content":"     * @param keyword the keyword to be searched through the TaskList, in SQL LIKE syntax"},{"lineNumber":70,"author":{"gitId":"markmcwong"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"markmcwong"},"content":"    public TaskList findItem(String keyword) {"},{"lineNumber":72,"author":{"gitId":"markmcwong"},"content":"        List\u003cListItem\u003e tempList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":73,"author":{"gitId":"markmcwong"},"content":"        for (ListItem item : listItems) {"},{"lineNumber":74,"author":{"gitId":"markmcwong"},"content":"            if (item.getTask().contains(keyword)) {"},{"lineNumber":75,"author":{"gitId":"markmcwong"},"content":"                tempList.add(item);"},{"lineNumber":76,"author":{"gitId":"markmcwong"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"markmcwong"},"content":"        return new TaskList(tempList);"},{"lineNumber":79,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":81,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":82,"author":{"gitId":"markmcwong"},"content":"    public String toString() {"},{"lineNumber":83,"author":{"gitId":"markmcwong"},"content":"        String initStr \u003d \"\";"},{"lineNumber":84,"author":{"gitId":"markmcwong"},"content":"        for (int i \u003d 0; i \u003c this.listItems.size(); i++) {"},{"lineNumber":85,"author":{"gitId":"markmcwong"},"content":"            ListItem tempItem \u003d this.listItems.get(i);"},{"lineNumber":86,"author":{"gitId":"markmcwong"},"content":"            initStr \u003d initStr + (tempItem.getClass().getName().charAt(0)"},{"lineNumber":87,"author":{"gitId":"markmcwong"},"content":"                    + \"|\" + tempItem.getDone() + \"|\" + tempItem.getTask() + tempItem.getDate() + \"\\n\");"},{"lineNumber":88,"author":{"gitId":"markmcwong"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"markmcwong"},"content":"        return initStr;"},{"lineNumber":90,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":91}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"public class Todo extends ListItem {"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"    public Todo(String task) {"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"        super(task);"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"    public Todo(String task, boolean isDone) {"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"        super(task, isDone);"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"    public ListItem markAsDone() {"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"        return new Todo(super.getTask(), true);"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"        return \"[T]\" + (super.getDone() \u003d\u003d true ? \"[X] \" : \"[ ] \") + super.getTask();"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":22,"author":{"gitId":"markmcwong"},"content":"    public String getDate() {"},{"lineNumber":23,"author":{"gitId":"markmcwong"},"content":"        return \"\";"},{"lineNumber":24,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":25}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import duke.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"public class DeadlineTest {"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    public void getDate_checkDateFormat() {"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"        assertEquals(\"|Sunday\", new Deadline(\"return book\", \"Sunday\").getDate());"},{"lineNumber":14,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":16,"author":{"gitId":"markmcwong"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"markmcwong"},"content":"    public void parseDate_unparsableDate_nullReturned() {"},{"lineNumber":18,"author":{"gitId":"markmcwong"},"content":"        assertEquals(null, new Deadline(\"return book\", \"Sunday\").parseDate(\"Sunday\"));"},{"lineNumber":19,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":20}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"    public void dummyTest(){"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":12}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"import duke.system.Parser;"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":""},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"public class StorageTest {"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"    public void commandExtractionTest() {"},{"lineNumber":11,"author":{"gitId":"markmcwong"},"content":"        assertEquals(\"deadline\", new Parser(\"deadline return book /by Sunday\").getCommand());"},{"lineNumber":12,"author":{"gitId":"markmcwong"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"markmcwong"},"content":"}"}],"authorContributionMap":{"markmcwong":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"markmcwong"},"content":"Todo borrow book"},{"lineNumber":2,"author":{"gitId":"markmcwong"},"content":"list"},{"lineNumber":3,"author":{"gitId":"markmcwong"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"markmcwong"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"markmcwong"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":6,"author":{"gitId":"markmcwong"},"content":"list"},{"lineNumber":7,"author":{"gitId":"markmcwong"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"markmcwong"},"content":"list"},{"lineNumber":9,"author":{"gitId":"markmcwong"},"content":"Blah"},{"lineNumber":10,"author":{"gitId":"markmcwong"},"content":"bye"}],"authorContributionMap":{"markmcwong":10}}]
