[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-core:2.12.1\u0027"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-annotations:2.12.1\u0027"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    implementation \u0027com.fasterxml.jackson.core:jackson-databind:2.12.1\u0027"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    implementation \u0027com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.12.1\u0027"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    mainClassName \u003d \"main/Launcher\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"}"},{"lineNumber":52,"author":{"gitId":"-"},"content":""},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    archiveBaseName \u003d \"ip\""},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"},{"lineNumber":61,"author":{"gitId":"-"},"content":""},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"DrWala":20}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"![Duke Screenshot](./Ui.png)"},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"Duke is a personal task manager in the form of a chatbot. He can help you track your To-dos, events, and deadlines. He has a GUI and a CLI interface."},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"## Quick Start"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"1. Ensure you have Java 11 or above installed on your Computer."},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"2. Download the latest `ip.jar` [here](https://github.com/DrWala/ip/releases)."},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"3. Double-click the file to start the app. If you do not see anything after a few seconds, navigate to the folder with the `.jar` file in your CLI and type `java -jar ip.jar`.  "},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"4. Type a command into the text box and press \u003ckbd\u003eEnter\u003c/kbd\u003e to execute it."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"## Guide format and input restrictions"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"- User input for commands are surrounded with angular brackets as such `\u003cdeadline_name\u003e`. The brackets themselves are not part of the command."},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"- All time input should be formatted as `d/M/yyyy HHm`. For example, you would insert 21st March 2103 9:03pm as `21/03/2103 2103`."},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"- Anything not surrounded by angular brackets is necessary for that command to work"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"Duke supports 3 main types of tasks: Todos, Deadlines and Events. You can perform Create, Read and Delete operations on these tasks, or mark them as done. Duke also helps you search for tasks if the list gets too long."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"## Usages"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"#### `list` \u0026mdash; List Tasks"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"Lists all the tasks you have inserted into Duke."},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"#### `sort` \u0026mdash; Sort Tasks"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"Lists all the tasks you have inserted into Duke in alphabetical order."},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"sort"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"#### `find` \u0026mdash; Find Tasks"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"Search for tasks that match a given search string"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"find \u003csearch_string\u003e"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"#### `done` \u0026mdash; Mark a Task as done"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"Marks a task as done. The task index is its position as shown in `list`."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"done \u003ctask_index\u003e"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"#### `delete` \u0026mdash; Remove a Task"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"Remove a task from Duke. The task index is its position as shown in `list`."},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"delete \u003ctask_index\u003e"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"#### `todo` \u0026mdash; Add a Todo"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"Add a todo. Todos do not have any time specified."},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"todo \u003ctodo_name\u003e"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"#### `deadline` \u0026mdash; Add a Deadline"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"Add a deadline. The `time` parameter should follow the format specified at `Guide format and input restrictions`."},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"deadline \u003cdeadline_name\u003e /by \u003ctime\u003e"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"#### `event` \u0026mdash; Add an Event"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"Add an event. The `time` parameter should follow the format specified at `Guide format and input restrictions`."},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"event \u003cevent_name\u003e /at \u003ctime\u003e"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":68,"author":{"gitId":"-"},"content":""},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"#### `bye` \u0026mdash; Exit app"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"Exits the app. Duke will save your tasks so you do not need to re-enter them when you next launch Duke"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"bye"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"```"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"## Acknowledgements"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"- JSON formatting library from [Jackson](https://github.com/FasterXML/jackson)"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"- GUI from [JavaFX](https://openjfx.io)"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"- Unit Testing from [JUnit5](https://github.com/junit-team/junit5)"}],"authorContributionMap":{"-":15,"DrWala":63}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import parser.Parser;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import storage.DataStorage;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import task.TaskList;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import ui.FurtherAction;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import ui.Ui;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    private DataStorage storage;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    private boolean shouldRun \u003d true;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     * Runs the Duke chatbot loop"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public void getResponse(String input, Ui ui) {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        assert tasks !\u003d null;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            HashMap\u003cString, String\u003e parsedCommands \u003d Parser.parseCommand(input);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            switch (parsedCommands.get(\"command\")) {"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            case \"todo\": {"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"                tasks.addTodo(parsedCommands, ui);"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            case \"event\": {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"                tasks.addEvent(parsedCommands, ui);"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"            case \"deadline\": {"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"                tasks.addDeadline(parsedCommands, ui);"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"            case \"list\": {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"                tasks.listTasks(ui);"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"            case \"sort\": {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"                tasks.listTasksSorted(ui);"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"            case \"done\": {"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"                tasks.markTaskAsDone(parsedCommands, ui);"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"            case \"delete\": {"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"                tasks.deleteTask(parsedCommands, ui);"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"            case \"find\": {"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"                tasks.findTasks(parsedCommands, ui);"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"            case \"bye\": {"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"                ui.setResponse(\"Bye. Hope to see you again soon!\");"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"                ui.setNextAction(FurtherAction.EXIT);"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"                shouldRun \u003d false;"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"            default: {"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"                ui.setResponse(String.format(\"I\u0027m sorry, I don\u0027t know what %s means.\", input));"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"                break;"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"            ui.setResponse((String.format(\"Francis encountered an error while processing your request. \""},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"                    + \"Here are the details:\\n%s\", dukeException.getMessage())));"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"        } catch (Exception e) {"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"            ui.setResponse(String.format(\"Francis encountered an unexpected while processing your request. \""},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"                    + \"Here are the details:\\n%s\", e.getMessage()));"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"     * Initialises the Duke program\u0027s backing store and reads any tasks that might be in the file."},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"    public void startup() {"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"            storage \u003d new DataStorage();"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"            storage.createBackingStoreIfNotExists();"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"            tasks \u003d new TaskList(storage.readTasks());"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"            Ui.echo(dukeException.getMessage());"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"            System.exit(0);"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"     * Shuts down the Duke program gracefully after writing any tasks in memory to the backing store."},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"    public void shutdown() {"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":"        assert tasks !\u003d null;"},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        tasks.persist(storage);"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"DrWala":98}},{"path":"src/main/java/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package exception;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"    public DukeException(String message) {"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"        super(message);"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":7}},{"path":"src/main/java/main/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package main;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":12}},{"path":"src/main/java/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package main;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import ui.MainWindow;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"            stage.setTitle(\"Duke - The best chatbot ever\");"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"    public void stop() throws Exception {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        super.stop();"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        duke.shutdown();"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":40}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package parser;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"     * Parses a string input from the user and returns a hashmap of command-value pairs."},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"     * @param input User entered string."},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"     * @return Hashmap containing command-value pairs"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    public static HashMap\u003cString, String\u003e parseCommand(String input) {"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e commandList \u003d new HashMap\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"        String[] tokens \u003d input.split(\" /\");"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        String[] firstHalf \u003d tokens[0].split(\" \");"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"        String command \u003d firstHalf[0];"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"        commandList.put(\"command\", command);"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"        if (firstHalf.length \u003e 1) {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"            commandList.put(\"info\", String.join(\" \","},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"                    Arrays.copyOfRange(firstHalf, 1, firstHalf.length)).trim());"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        // We don\u0027t have a second part to the command, break out"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        if (tokens.length \u003c 2) {"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"            return commandList;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        String[] secondHalf \u003d tokens[1].split(\" \");"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        if (secondHalf.length \u003e 0) {"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"            String firstWord \u003d secondHalf[0];"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            commandList.put(firstWord, String.join(\" \","},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"                    Arrays.copyOfRange(secondHalf, 1, secondHalf.length)).trim());"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        return commandList;"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":40}},{"path":"src/main/java/storage/DataStorage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package storage;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.io.BufferedInputStream;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.io.BufferedOutputStream;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.io.FileInputStream;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.io.FileOutputStream;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.core.type.TypeReference;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.databind.ObjectMapper;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.databind.SerializationFeature;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.databind.exc.MismatchedInputException;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"import exception.DukeException;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"import task.Task;"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"public class DataStorage {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    private static final String DATA_FILE_PATH \u003d String.format(\".%sdata%stasks.json\", File.separator, File.separator);"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    private File dataFile;"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    private ObjectMapper mapper;"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"     * Constructs a DataStorage object."},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    public DataStorage() {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        dataFile \u003d new File(DATA_FILE_PATH);"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        mapper \u003d new ObjectMapper();"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        mapper.registerModule(new JavaTimeModule());"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"     * Initialises the backing store for future data storage."},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If unable to write to the filesystem."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void createBackingStoreIfNotExists() throws DukeException {"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"            dataFile.getParentFile().mkdirs();"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            if (dataFile.createNewFile()) {"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"                saveTasks(new ArrayList\u003c\u003e());"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"            throw new DukeException("},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"                    String.format(\"An error occurred while setting up the backing store for Duke. \""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"                            + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"     * Returns tasks on the backing store."},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     * @return Tasks read from the backing store."},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If error occurs when reading from the backing store."},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    public List\u003cTask\u003e readTasks() throws DukeException {"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        try (BufferedInputStream biStream \u003d new BufferedInputStream(new FileInputStream(dataFile))) {"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"            return mapper.readerFor(new TypeReference\u003cArrayList\u003cTask\u003e\u003e() {"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"            }).readValue(biStream);"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        } catch (MismatchedInputException mie) {"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"            return new ArrayList\u003cTask\u003e();"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(String.format(\"An error occurred while reading the backing store for Duke. \""},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"                    + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"     * Saves tasks to the backing store."},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"     * @param tasks List of tasks to save."},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If error occurs when writing to the backing store."},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"    public void saveTasks(List\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        try (BufferedOutputStream boStream \u003d new BufferedOutputStream(new FileOutputStream(dataFile, false))) {"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"            mapper.writerFor(new TypeReference\u003cList\u003cTask\u003e\u003e() {"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"            }).writeValue(boStream, tasks);"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"        } catch (IOException ioException) {"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(String.format(\"An error occurred while saving tasks to the backing store for Duke. \""},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"                    + \"Perhaps this might help:\\n%s\", ioException.getMessage()));"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":89}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    @JsonProperty"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    private LocalDateTime deadline;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    protected Deadline() {"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"        super();"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     * Constructs a Deadline object."},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     * @param taskName Name of deadline task."},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     * @param deadline Time at which deadline task needs to be completed by."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public Deadline(String taskName, LocalDateTime deadline) {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", done ? \"X\" : \" \", taskName, this.deadline.format(formatter));"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":31}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonProperty;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"public class Event extends Task {"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    @JsonProperty"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    private LocalDateTime timeOfEvent;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    protected Event() {"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"        super();"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"     * Constructs an Event object."},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"     * @param taskName Name of deadline task."},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     * @param timeOfEvent Time at which event will take place."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public Event(String taskName, LocalDateTime timeOfEvent) {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        this.timeOfEvent \u003d timeOfEvent;"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", done ? \"X\" : \" \", taskName, this.timeOfEvent.format(formatter));"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":31}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonSubTypes;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import com.fasterxml.jackson.annotation.JsonTypeInfo;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"@JsonTypeInfo("},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"        use \u003d JsonTypeInfo.Id.NAME,"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"        include \u003d JsonTypeInfo.As.PROPERTY,"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"        property \u003d \"d\")"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"@JsonSubTypes({"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"        @JsonSubTypes.Type(value \u003d Todo.class, name \u003d \"Todo\"),"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        @JsonSubTypes.Type(value \u003d Deadline.class, name \u003d \"Deadline\"),"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"        @JsonSubTypes.Type(value \u003d Event.class, name \u003d \"Event\")"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"})"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"public class Task implements Comparable\u003cTask\u003e {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"    protected String taskName;"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    protected boolean done;"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"    protected Task() {"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"     * Constructs a Task object."},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"     * @param taskName Name of the task."},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    public Task(String taskName) {"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"        this.done \u003d false;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    public String getTaskName() {"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        return taskName;"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    public void setTaskName(String taskName) {"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    public boolean isDone() {"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"        return done;"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    public void setDone() {"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        this.done \u003d true;"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"    public int compareTo(Task task) {"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"        return String.CASE_INSENSITIVE_ORDER.compare(this.taskName, task.getTaskName());"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"}"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":""}],"authorContributionMap":{"DrWala":54}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import java.util.HashMap;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import exception.DukeException;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import storage.DataStorage;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import ui.Ui;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"     * Constructs a TaskList wrapper object."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"     * @param tasks Array of tasks to wrap around."},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"     * Lists tasks to the standard output."},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"     * @param ui Ui object to write a response to"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    public void listTasks(Ui ui) {"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        listTasks(tasks, ui);"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"     * Lists tasks to the standard input with a custom list."},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"     * @param customTaskList custom list of tasks to print."},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"     * @param ui             Ui object to write a response to"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"    public static void listTasks(List\u003cTask\u003e customTaskList, Ui ui) {"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        if (customTaskList.size() \u003c 1) {"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"            ui.setResponse(\"You have no tasks in your list. Try adding one!\");"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"            return;"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"        for (int i \u003d 0; i \u003c customTaskList.size(); i++) {"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"            builder.append(String.format(\"%d. %s\\n\", i + 1, customTaskList.get(i).toString()));"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        ui.setResponse(builder.toString().trim());"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"     * Lists sorted tasks to the Ui object provided"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"     * @param ui Ui object to write a response to"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    public void listTasksSorted(Ui ui) {"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        List\u003cTask\u003e sortedList \u003d new ArrayList\u003cTask\u003e(tasks);"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        Collections.sort(sortedList);"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        listTasks(sortedList, ui);"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":"     * Adds a Todo."},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"     * @param ui       Ui object to write a response to"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If todo is not formatted properly."},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"    public void addTodo(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"        String taskName \u003d commands.get(\"info\");"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(taskName)) {"},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Todo tasks should be formatted as such: todo [task name].\");"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        Task todoTask \u003d new Todo(taskName);"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":"        tasks.add(todoTask);"},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        ui.setResponse(String.format(\"Added a deadline for you:\\n%s\\n%s\","},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"                todoTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"     * Adds an Event."},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"     * @param ui       Ui object to write a response to"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If Event is not formatted properly."},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":"    public void addEvent(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":"        String eventName \u003d commands.get(\"info\");"},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"        String timeStr \u003d commands.get(\"at\");"},{"lineNumber":97,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":98,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(eventName) || stringIsNullOrEmpty(timeStr)) {"},{"lineNumber":99,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Event tasks should be formatted as such: event [event name] /by [event time].\");"},{"lineNumber":100,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":102,"author":{"gitId":"DrWala"},"content":"        LocalDateTime timeOfEvent \u003d parseDateStr(timeStr);"},{"lineNumber":103,"author":{"gitId":"DrWala"},"content":"        Event eventTask \u003d new Event(eventName, timeOfEvent);"},{"lineNumber":104,"author":{"gitId":"DrWala"},"content":"        tasks.add(eventTask);"},{"lineNumber":105,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":106,"author":{"gitId":"DrWala"},"content":"        ui.setResponse(String.format(\"Added a deadline for you:\\n%s\\n%s\","},{"lineNumber":107,"author":{"gitId":"DrWala"},"content":"                eventTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":108,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":110,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"DrWala"},"content":"     * Adds an Deadline."},{"lineNumber":112,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":114,"author":{"gitId":"DrWala"},"content":"     * @param ui       Ui object to write a response to"},{"lineNumber":115,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If Deadline is not formatted properly."},{"lineNumber":116,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"DrWala"},"content":"    public void addDeadline(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"DrWala"},"content":"        String deadlineName \u003d commands.get(\"info\");"},{"lineNumber":119,"author":{"gitId":"DrWala"},"content":"        String deadlineTimeStr \u003d commands.get(\"by\");"},{"lineNumber":120,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":121,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(deadlineName) || stringIsNullOrEmpty(deadlineTimeStr)) {"},{"lineNumber":122,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Deadline tasks should be formatted as such: deadline [task name] /by [deadline].\");"},{"lineNumber":123,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":125,"author":{"gitId":"DrWala"},"content":"        LocalDateTime deadlineOfTask \u003d parseDateStr(deadlineTimeStr);"},{"lineNumber":126,"author":{"gitId":"DrWala"},"content":"        Deadline deadlineTask \u003d new Deadline(deadlineName, deadlineOfTask);"},{"lineNumber":127,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":128,"author":{"gitId":"DrWala"},"content":"        tasks.add(deadlineTask);"},{"lineNumber":129,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":130,"author":{"gitId":"DrWala"},"content":"        ui.setResponse(String.format(\"Added a deadline for you:\\n%s\\n%s\","},{"lineNumber":131,"author":{"gitId":"DrWala"},"content":"                deadlineTask.toString(), getNumberOfTasksString(tasks)));"},{"lineNumber":132,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":134,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"DrWala"},"content":"     * Deletes a task"},{"lineNumber":136,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":138,"author":{"gitId":"DrWala"},"content":"     * @param ui       Ui object to write a response to"},{"lineNumber":139,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If Delete command is not formatted properly."},{"lineNumber":140,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":141,"author":{"gitId":"DrWala"},"content":"    public void deleteTask(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":142,"author":{"gitId":"DrWala"},"content":"        String taskToDeleteStr \u003d commands.get(\"info\");"},{"lineNumber":143,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":144,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(taskToDeleteStr)) {"},{"lineNumber":145,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Deleting a task as done needs to be done like this: \""},{"lineNumber":146,"author":{"gitId":"DrWala"},"content":"                    + \"done [task number from list]. Task numbers need to be written as digits and not text.\");"},{"lineNumber":147,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":149,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":150,"author":{"gitId":"DrWala"},"content":"            int taskIdx \u003d Integer.parseInt(taskToDeleteStr) - 1;"},{"lineNumber":151,"author":{"gitId":"DrWala"},"content":"            Task taskToDelete \u003d tasks.get(taskIdx);"},{"lineNumber":152,"author":{"gitId":"DrWala"},"content":"            tasks.remove(taskToDelete);"},{"lineNumber":153,"author":{"gitId":"DrWala"},"content":"            ui.setResponse(String.format(\"I\u0027ve removed this task from your list\\n%s\", taskToDelete.toString()));"},{"lineNumber":154,"author":{"gitId":"DrWala"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":155,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Please delete a task that exists in the list. \""},{"lineNumber":156,"author":{"gitId":"DrWala"},"content":"                    + \"Task numbers that are 0 or lesser, \""},{"lineNumber":157,"author":{"gitId":"DrWala"},"content":"                    + \"or greater than the number of items in the list cannot be deleted.\");"},{"lineNumber":158,"author":{"gitId":"DrWala"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":159,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Deleting a task as done needs to be done like this: done [task number from list]. \""},{"lineNumber":160,"author":{"gitId":"DrWala"},"content":"                    + \"Task numbers need to be written as digits and not text.\");"},{"lineNumber":161,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":164,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":165,"author":{"gitId":"DrWala"},"content":"     * Marks a task as done."},{"lineNumber":166,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":167,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":168,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If \"mark as done\" command is not formatted properly."},{"lineNumber":169,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"DrWala"},"content":"    public void markTaskAsDone(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"DrWala"},"content":"        String taskToMarkAsDoneStr \u003d commands.get(\"info\");"},{"lineNumber":172,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":173,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(taskToMarkAsDoneStr)) {"},{"lineNumber":174,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Marking a task as done needs to be done like this: done [task number from list].\");"},{"lineNumber":175,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":176,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":177,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":178,"author":{"gitId":"DrWala"},"content":"            int taskIdx \u003d Integer.parseInt(taskToMarkAsDoneStr) - 1;"},{"lineNumber":179,"author":{"gitId":"DrWala"},"content":"            tasks.get(taskIdx).setDone();"},{"lineNumber":180,"author":{"gitId":"DrWala"},"content":"            ui.setResponse(String.format(\"Nice! This task is done :)\\n%s\", tasks.get(taskIdx).toString()));"},{"lineNumber":181,"author":{"gitId":"DrWala"},"content":"        } catch (IndexOutOfBoundsException indexOutOfBoundsException) {"},{"lineNumber":182,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Please mark a task that exists in the list as done. \""},{"lineNumber":183,"author":{"gitId":"DrWala"},"content":"                    + \"Task numbers that are 0 or lesser, \""},{"lineNumber":184,"author":{"gitId":"DrWala"},"content":"                    + \"or greater than the number of items in the list cannot be marked as done.\");"},{"lineNumber":185,"author":{"gitId":"DrWala"},"content":"        } catch (NumberFormatException numberFormatException) {"},{"lineNumber":186,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Marking a task as done needs to be done like this: done [task number from list]. \""},{"lineNumber":187,"author":{"gitId":"DrWala"},"content":"                    + \"Task numbers need to be written as digits and not text.\");"},{"lineNumber":188,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":189,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":190,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":191,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":192,"author":{"gitId":"DrWala"},"content":"     * Finds tasks that match a given string"},{"lineNumber":193,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":194,"author":{"gitId":"DrWala"},"content":"     * @param commands Commands parsed by the parser."},{"lineNumber":195,"author":{"gitId":"DrWala"},"content":"     * @throws DukeException If find command is not formatted properly."},{"lineNumber":196,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":197,"author":{"gitId":"DrWala"},"content":"    public void findTasks(HashMap\u003cString, String\u003e commands, Ui ui) throws DukeException {"},{"lineNumber":198,"author":{"gitId":"DrWala"},"content":"        String searchTerm \u003d commands.get(\"info\");"},{"lineNumber":199,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":200,"author":{"gitId":"DrWala"},"content":"        if (stringIsNullOrEmpty(searchTerm)) {"},{"lineNumber":201,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"To find a task, please use enter the following: find [search term]\");"},{"lineNumber":202,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":204,"author":{"gitId":"DrWala"},"content":"        List\u003cTask\u003e foundList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":205,"author":{"gitId":"DrWala"},"content":"        for (Task task : tasks) {"},{"lineNumber":206,"author":{"gitId":"DrWala"},"content":"            if (task.getTaskName().contains(searchTerm)) {"},{"lineNumber":207,"author":{"gitId":"DrWala"},"content":"                foundList.add(task);"},{"lineNumber":208,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"DrWala"},"content":"        ui.setResponse(\"Here are the tasks we found:\");"},{"lineNumber":211,"author":{"gitId":"DrWala"},"content":"        listTasks(foundList, ui);"},{"lineNumber":212,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":213,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":214,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":215,"author":{"gitId":"DrWala"},"content":"     * Returns a formatted string indicating how many tasks are in the list."},{"lineNumber":216,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":217,"author":{"gitId":"DrWala"},"content":"     * @param tasks List of tasks to count."},{"lineNumber":218,"author":{"gitId":"DrWala"},"content":"     * @return A string formatted to indicated how many tasks are in the list."},{"lineNumber":219,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":220,"author":{"gitId":"DrWala"},"content":"    public String getNumberOfTasksString(List\u003cTask\u003e tasks) {"},{"lineNumber":221,"author":{"gitId":"DrWala"},"content":"        return String.format(\"Now you have %d items in your list\", tasks.size());"},{"lineNumber":222,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":223,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":224,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":225,"author":{"gitId":"DrWala"},"content":"     * Writes tasks to the given datastorage object."},{"lineNumber":226,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":227,"author":{"gitId":"DrWala"},"content":"     * @param storage DataStorage object to persist the tasks to."},{"lineNumber":228,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":229,"author":{"gitId":"DrWala"},"content":"    public void persist(DataStorage storage) {"},{"lineNumber":230,"author":{"gitId":"DrWala"},"content":"        assert storage !\u003d null;"},{"lineNumber":231,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":232,"author":{"gitId":"DrWala"},"content":"            storage.saveTasks(tasks);"},{"lineNumber":233,"author":{"gitId":"DrWala"},"content":"        } catch (DukeException dukeException) {"},{"lineNumber":234,"author":{"gitId":"DrWala"},"content":"            Ui.echo(dukeException.getMessage());"},{"lineNumber":235,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":236,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":237,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":238,"author":{"gitId":"DrWala"},"content":"    private static LocalDateTime parseDateStr(String dateStr) throws DukeException {"},{"lineNumber":239,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":240,"author":{"gitId":"DrWala"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");"},{"lineNumber":241,"author":{"gitId":"DrWala"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(dateStr, formatter);"},{"lineNumber":242,"author":{"gitId":"DrWala"},"content":"            if (dateTime.isBefore(LocalDateTime.now())) {"},{"lineNumber":243,"author":{"gitId":"DrWala"},"content":"                throw new DukeException(\"Please enter a date/time in the future.\");"},{"lineNumber":244,"author":{"gitId":"DrWala"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"DrWala"},"content":"            return dateTime;"},{"lineNumber":246,"author":{"gitId":"DrWala"},"content":"        } catch (DateTimeParseException dateTimeParseException) {"},{"lineNumber":247,"author":{"gitId":"DrWala"},"content":"            throw new DukeException(\"Please format your date as such: \""},{"lineNumber":248,"author":{"gitId":"DrWala"},"content":"                    + \"15/01/2021 1845 (day/month/year time in 24H format)\");"},{"lineNumber":249,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":250,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"DrWala"},"content":"    private static boolean stringIsNullOrEmpty(String strToTest) {"},{"lineNumber":252,"author":{"gitId":"DrWala"},"content":"        return strToTest \u003d\u003d null || strToTest.isEmpty() || strToTest.isBlank();"},{"lineNumber":253,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":254,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":254}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"public class Todo extends Task {"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"    private Todo() {"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"        super();"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"     * Constructs a Todo object."},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"     * @param taskName Name of the todo."},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    public Todo(String taskName) {"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        super(taskName);"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        return String.format(\"[%s][%s] %s\", \"T\", done ? \"X\" : \" \", taskName);"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":19}},{"path":"src/main/java/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private Circle circleMask;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // @@author benedictkhoomw-reused"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // Display mask idea taken from Benedict Khoo from my tutorial group."},{"lineNumber":42,"author":{"gitId":"-"},"content":"        setupDisplayMask();"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"        dialog.setText(text);"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        displayPicture.setImage(img);"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        displayPicture.setClip(circleMask);"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void setupDisplayMask() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        double centerX \u003d displayPicture.getFitWidth() / 2;"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        double centerY \u003d displayPicture.getFitHeight() / 2;"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        double radius \u003d Math.min(displayPicture.getFitWidth(), displayPicture.getFitHeight()) / 2.0;"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        circleMask \u003d new Circle(centerX, centerY, radius);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":58,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    private void flip() {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":63,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img);"},{"lineNumber":68,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"-"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":71,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":72,"author":{"gitId":"-"},"content":"        db.flip();"},{"lineNumber":73,"author":{"gitId":"-"},"content":"        return db;"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":36,"DrWala":39}},{"path":"src/main/java/ui/FurtherAction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"public enum FurtherAction {"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"    EXIT"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":5}},{"path":"src/main/java/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.concurrent.CompletableFuture;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"import duke.Duke;"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.Button;"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":" * Controller for ui.MainWindow. Provides the layout for the other controls."},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":" */"},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    private static final long EXIT_DELAY \u003d 1000;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"    private VBox dialogContainer;"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"    private TextField userInput;"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"    private Button sendButton;"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    private Duke duke;"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"    public void initialize() {"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        duke \u003d d;"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        d.startup();"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    private void handleUserInput() throws InterruptedException {"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        String input \u003d userInput.getText().trim();"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":"        duke.getResponse(input, ui);"},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"                DialogBox.getDukeDialog(ui.getResponse(), dukeImage)"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":"        );"},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"        userInput.clear();"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        if (ui.getNextAction() \u003d\u003d FurtherAction.EXIT) {"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"            CompletableFuture.delayedExecutor(EXIT_DELAY, TimeUnit.MILLISECONDS).execute(() -\u003e Platform.exit());"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":66}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"package ui;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"    private static Scanner in \u003d new Scanner(System.in);"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"    private String response;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"    private FurtherAction nextAction;"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"     * Prints a string to the standard output."},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"     * @param str String to print."},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    public static void echo(String str) {"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        System.out.println(\"------------------------------\");"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        System.out.println(str);"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        System.out.println(\"------------------------------\");"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    public String getResponse() {"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"        return response;"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":"    public void setResponse(String response) {"},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        // This is to allow appending onto the response for"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        // the same Ui object instance"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        if (this.response \u003d\u003d null) {"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"            this.response \u003d response;"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"            this.response +\u003d \"\\n\" + response;"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":"    public FurtherAction getNextAction() {"},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        return nextAction;"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    public void setNextAction(FurtherAction nextAction) {"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":"        this.nextAction \u003d nextAction;"},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":42}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"DrWala":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"DrWala":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"import parser.Parser;"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"public class ParserTest {"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddEventWithManyWords() {"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"event go for dance /at 01/02/2111 1200\";"},{"lineNumber":14,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":15,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":16,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"event\", parsed.get(\"command\"));"},{"lineNumber":17,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"go for dance\", parsed.get(\"info\"));"},{"lineNumber":18,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"at\"));"},{"lineNumber":19,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":21,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddEventWithOneWord() {"},{"lineNumber":23,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"event dance /at 01/02/2111 1200\";"},{"lineNumber":24,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":25,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":26,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"event\", parsed.get(\"command\"));"},{"lineNumber":27,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"dance\", parsed.get(\"info\"));"},{"lineNumber":28,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"at\"));"},{"lineNumber":29,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":31,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddDeadlineWithManyWords() {"},{"lineNumber":33,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"deadline submit 2103 /by 01/02/2111 1200\";"},{"lineNumber":34,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":35,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":36,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"deadline\", parsed.get(\"command\"));"},{"lineNumber":37,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"submit 2103\", parsed.get(\"info\"));"},{"lineNumber":38,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"by\"));"},{"lineNumber":39,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":41,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":42,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddDeadlineWithOneWord() {"},{"lineNumber":43,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"deadline sleep /by 01/02/2111 1200\";"},{"lineNumber":44,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":45,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":46,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"deadline\", parsed.get(\"command\"));"},{"lineNumber":47,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"sleep\", parsed.get(\"info\"));"},{"lineNumber":48,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"01/02/2111 1200\", parsed.get(\"by\"));"},{"lineNumber":49,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":51,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddTodoWithManyWords() {"},{"lineNumber":53,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"todo submit 2103\";"},{"lineNumber":54,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":55,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":56,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"todo\", parsed.get(\"command\"));"},{"lineNumber":57,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"submit 2103\", parsed.get(\"info\"));"},{"lineNumber":58,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":60,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseAddTodoWithOneWord() {"},{"lineNumber":62,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"todo sleep\";"},{"lineNumber":63,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":64,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":65,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"todo\", parsed.get(\"command\"));"},{"lineNumber":66,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"sleep\", parsed.get(\"info\"));"},{"lineNumber":67,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":69,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":70,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseList() {"},{"lineNumber":71,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"list\";"},{"lineNumber":72,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":73,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":74,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"list\", parsed.get(\"command\"));"},{"lineNumber":75,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":77,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":78,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseDone() {"},{"lineNumber":79,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"done 1\";"},{"lineNumber":80,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":81,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":82,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"done\", parsed.get(\"command\"));"},{"lineNumber":83,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"1\", parsed.get(\"info\"));"},{"lineNumber":84,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":86,"author":{"gitId":"DrWala"},"content":"    @Test"},{"lineNumber":87,"author":{"gitId":"DrWala"},"content":"    public void parserCanParseDelete() {"},{"lineNumber":88,"author":{"gitId":"DrWala"},"content":"        String input \u003d \"delete 1\";"},{"lineNumber":89,"author":{"gitId":"DrWala"},"content":"        HashMap\u003cString, String\u003e parsed \u003d Parser.parseCommand(input);"},{"lineNumber":90,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":91,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"delete\", parsed.get(\"command\"));"},{"lineNumber":92,"author":{"gitId":"DrWala"},"content":"        assertEquals(\"1\", parsed.get(\"info\"));"},{"lineNumber":93,"author":{"gitId":"DrWala"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":95,"author":{"gitId":"DrWala"},"content":""},{"lineNumber":96,"author":{"gitId":"DrWala"},"content":"}"}],"authorContributionMap":{"DrWala":96}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"DrWala"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"DrWala"},"content":"deadline return book /by friday"},{"lineNumber":3,"author":{"gitId":"DrWala"},"content":"event project meeting /at 7pm"},{"lineNumber":4,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":5,"author":{"gitId":"DrWala"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":7,"author":{"gitId":"DrWala"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":9,"author":{"gitId":"DrWala"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":11,"author":{"gitId":"DrWala"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"DrWala"},"content":"list"},{"lineNumber":13,"author":{"gitId":"DrWala"},"content":"bye"}],"authorContributionMap":{"DrWala":13}}]
