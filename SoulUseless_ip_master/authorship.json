[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":21,"SoulUseless":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"test {"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    useJUnitPlatform()"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"checkstyle {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"dependencies {"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"shadowJar {"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":42}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":":end"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":":omega"}],"authorContributionMap":{"SoulUseless":89}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    private TaskManager tm;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    private Storage st;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"     *  Duke constructor."},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *  @param filePath Relative filepath to persistent storage."},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    public Duke(String filePath) {"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"        assert filePath.length() \u003e 0 : \"Empty Filepath\";"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        tm \u003d new TaskManager();"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        st \u003d new Storage(filePath);"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"            tm.loadArray(st.load());"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        } catch (DukeException e) {"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"            tm.clear(); //clear tm if error loading file;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public String getResponse(String command) {"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        String res;"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"            Command c \u003d Parser.parse(command);"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"            if (c.isExit()) {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"                return \"\";"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"            res \u003d c.execute(tm, st);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"            res \u003d \"Error: \" + e.getMessage();"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    public static Duke init() {"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"        return new Duke(\"./data/tasks.txt\");"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public static String getWelcomeMessage() {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        return \"Hello! This is Duke\\n\""},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"                + \"What can I do for you?\";"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":50}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DoneCommand;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import duke.command.EventCommand;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ExitCommand;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import duke.command.FindCommand;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ListCommand;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInsufficientParametersException;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInvalidDateException;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInvalidParametersException;"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeMissingFlagException;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeUnknownCommandException;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"public class Parser {"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    private static String[] acceptedCommands \u003d {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"        \"todo\", \"deadline\", \"event\", \"bye\", \"list\", \"done\", \"delete\", \"find\""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    };"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    private static boolean verifyCommand(String c) {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        boolean found \u003d false;"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        for (String cmd : acceptedCommands) {"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"            if (c.equals(cmd)) {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"                found \u003d true;"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        return found;"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    private static LocalDate processDate(String dateString) throws DukeInvalidDateException {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        assert dateString.length() \u003e 0 : \"Empty Date String\";"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"ddMMyyyy\");"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"            return LocalDate.parse(dateString, formatter);"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeInvalidDateException();"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    private static String[] extractFlag(String c, String s, String flag) throws DukeMissingFlagException {"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        String[] output \u003d s.split(\" \" + flag + \" \");"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"        if (output.length \u003c 2) {"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeMissingFlagException(c, flag);"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        return output;"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"     *  Command parser."},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"     *  @param c Command to be parsed."},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command object."},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException Exception depending on error."},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"    public static Command parse(String c) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        String[] params \u003d c.strip().split(\" \", 2);"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        //command integrity verification"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        if (!verifyCommand(params[0])) {"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeUnknownCommandException();"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"        //zero-param commands"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"        if (params[0].equals(\"bye\")) {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"            return new ExitCommand();"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        } else if (params[0].equals(\"list\")) {"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"            return new ListCommand();"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        //command integrity verification - parameter check"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"        if (params.length \u003c 2) {"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeInsufficientParametersException(params[0]);"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        //non-zero-param commands"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"            String[] args;"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"            LocalDate date;"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"            switch (params[0]) {"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"            case \"done\":"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"                return new DoneCommand(Integer.parseInt(params[1]));"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"            case \"delete\":"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"                return new DeleteCommand(Integer.parseInt(params[1]));"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"            case \"todo\":"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"                return new ToDoCommand(params[1]);"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"            case \"deadline\":"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"                args \u003d extractFlag(params[0], params[1], \"/by\");"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"                assert args.length \u003e 1 : \"Broken splitting\";"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"                date \u003d processDate(args[1]);"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"                return new DeadlineCommand(args[0], date);"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"            case \"event\":"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"                args \u003d extractFlag(params[0], params[1], \"/at\");"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"                assert args.length \u003e 1 : \"Broken splitting\";"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"                date \u003d processDate(args[1]);"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"                return new EventCommand(args[0], date);"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"            case \"find\":"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"                return new FindCommand(params[1]);"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"            default:"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"                throw new DukeUnknownCommandException();"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        } catch (DukeException e) {"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"            throw e;"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"        } catch (Exception e) {"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeInvalidParametersException();"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":118}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeIoException;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"public class Storage {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    private String filePath;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public Storage(String fp) {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        assert fp.length() \u003e 0 : \"Empty Filepath\";"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        this.filePath \u003d fp;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *  Task Loader."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeIoException If information given is corrupt in any way."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public ArrayList\u003cString\u003e load() throws DukeIoException {"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"            File file \u003d new File(this.filePath);"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"            if (!file.exists()) {"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"                file.getParentFile().mkdir();"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"                file.createNewFile();"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"            ArrayList\u003cString\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"            FileReader fr \u003d new FileReader(file);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"            BufferedReader br \u003d new BufferedReader(fr);"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"            String line \u003d br.readLine();"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"            while (line !\u003d null) {"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"                output.add(line);"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                line \u003d br.readLine();"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"            fr.close();"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"            return output;"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        } catch (IOException e) {"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeIoException();"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"     *  Task Saver."},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object containing Task information"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeIoException If there is issue in file writing."},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    public void save(TaskManager tm) throws DukeIoException {"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"            ArrayList\u003cTask\u003e tasks \u003d tm.getTasks();"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"            for (Task task : tasks) {"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"                fw.write(task.toFileFormat() + \"\\n\");"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"            fw.close();"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        } catch (IOException e) {"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeIoException();"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":71}},{"path":"src/main/java/duke/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeCorruptFileException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeIndexRangeException;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeTaskAlreadyDoneException;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import duke.task.EventTask;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import duke.task.ToDoTask;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":" * duke.TaskManager manages all duke.tasks given to duke.Duke."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":" * @author Yap Jing Kang"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"public class TaskManager {"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    private ArrayList\u003cTask\u003e tasks;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     * Constructor initialises task list."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public TaskManager() {"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *  Loads pre-existing tasks, from String ArrayList directly from file."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"     *  @param arr ArrayList of Task information"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeCorruptFileException If information given is corrupt in any way."},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    public void loadArray(ArrayList\u003cString\u003e arr) throws DukeCorruptFileException {"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"            for (String line : arr) {"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"                String[] params \u003d line.split(\"\\\\|\");"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"                String type \u003d params[0];"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                boolean isCompleted \u003d params[1].equals(\"1\");"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"                String name \u003d params[2];"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"                Task t;"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"                LocalDate d;"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"                switch (type) {"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"                case \"T\":"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"                    t \u003d new ToDoTask(name, isCompleted);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"                case \"D\":"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"                    d \u003d LocalDate.parse(params[3], formatter);"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"                    t \u003d new DeadlineTask(name, d, isCompleted);"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"                    break;"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"                case \"E\":"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"                    d \u003d LocalDate.parse(params[3], formatter);"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"                    t \u003d new EventTask(name, d, isCompleted);"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"                default:"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"                    throw new DukeCorruptFileException();"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"                this.tasks.add(t);"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        } catch (Exception e) {"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeCorruptFileException();"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"    public void clear() {"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    public ArrayList\u003cTask\u003e getTasks() {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        return tasks;"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"     *  Given text, finds tasks with name containing text."},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"     *  @param s Search term"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    public ArrayList\u003cTask\u003e findTasks(String s) {"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cTask\u003e output \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        for (Task task : tasks) {"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"            if (task.getName().contains(s)) {"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"                output.add(task);"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"        return output;"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"    public int getSize() {"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"        return tasks.size();"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"    public void addToDoTask(String name) {"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"        tasks.add(new ToDoTask(name));"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"    public void addDeadlineTask(String name, LocalDate date) {"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"        tasks.add(new DeadlineTask(name, date));"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":"    public void addEventTask(String name, LocalDate date) {"},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"        tasks.add(new EventTask(name, date));"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"     * Method to mark specified task done."},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"     * @param x Task index."},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":"    public Task markTaskAsDone(int x) throws DukeIndexRangeException, DukeTaskAlreadyDoneException {"},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"            Task t \u003d tasks.get(x - 1);"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"            if (t.markAsDone()) {"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"                return t;"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"            } else {"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"                throw new DukeTaskAlreadyDoneException();"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeIndexRangeException();"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"     * Method to remove specified."},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"     * @param x Task index."},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"    public Task deleteTask(int x) throws DukeIndexRangeException {"},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":"        try {"},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"            Task t \u003d tasks.get(x - 1);"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"            tasks.remove(x - 1);"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"            return t;"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":137,"author":{"gitId":"SoulUseless"},"content":"            throw new DukeIndexRangeException();"},{"lineNumber":138,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":140}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"public abstract class Command {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    public boolean isExit() {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"        return false;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    public abstract String execute(TaskManager tm, Storage st) throws DukeException;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":14}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    private String name;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    private LocalDate date;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  DeadlineCommand constructor."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of Deadline Task."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *  @param date Date of Deadline Task."},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public DeadlineCommand(String name, LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"        assert name.length() \u003e 0 : \"Empty Name\";"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     *  Executes DeadlineCommand."},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command response."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException If any error arises from execution."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        tm.addDeadlineTask(name, date);"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        st.save(tm);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        String res \u003d String.format(\"added: %s\\n Now you have %d task(s)\","},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"                tm.getSize());"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":41}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    private int taskIndex;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *  DeleteCommand constructor."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  @param index Index of task to be deleted."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        this.taskIndex \u003d index;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  Executes DeleteCommand."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command response."},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException If any error arises from execution."},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        Task t \u003d tm.deleteTask(taskIndex);"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        st.save(tm);"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        String res \u003d \"The following task has been removed: \\n\";"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        res +\u003d t.toString() + \"\\n\";"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        res +\u003d String.format(\"Now you have %d task(s)\","},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"                tm.getSize());"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":38}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    private int taskIndex;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *  DoneCommand constructor."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  @param index Index of task to be marked as completed."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public DoneCommand(int index) {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        this.taskIndex \u003d index;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  Executes DoneCommand."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command response."},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException If any error arises from execution."},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        Task t \u003d tm.markTaskAsDone(taskIndex);"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        st.save(tm);"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        String res \u003d \"Marked as Done: \\n\";"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        res +\u003d t.toString();"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":35}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class EventCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    private String name;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    private LocalDate date;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  EventCommand constructor."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of Event Task."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *  @param date Date of Event Task."},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public EventCommand(String name, LocalDate date) {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"        assert name.length() \u003e 0 : \"Empty Name\";"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"        this.date \u003d date;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     *  Executes EventCommand."},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command response."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException If any error arises from execution."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        tm.addEventTask(name, date);"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        st.save(tm);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        String res \u003d String.format(\"added: %s\\n Now you have %d task(s)\","},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"                tm.getSize());"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":41}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"     *  ExitCommand constructor."},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public ExitCommand() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        //do nothing"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     *  Executes ExitCommand."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) {"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"        return \"Thanks for using me!\";"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public boolean isExit() {"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        return true;"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":30}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    private String searchTerm;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    public FindCommand(String searchTerm) {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"        this.searchTerm \u003d searchTerm;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tm.findTasks(this.searchTerm);"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"        StringBuilder res \u003d new StringBuilder(\"Listing all matching tasks: \\n\");"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"            int num \u003d i + 1;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"            res.append(num)"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"                    .append(\": \")"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"                    .append(tasks.get(i))"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"                    .append(\"\\n\");"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"            res.append(\"--- No Tasks Found ---\");"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        return res.toString();"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":34}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class ListCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *  ListCommand constructor."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    public ListCommand() {"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"        //do nothing"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *  Executes ListCommand."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tm.getTasks();"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        StringBuilder res \u003d new StringBuilder(\"Listing all matching tasks: \\n\");"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"            int num \u003d i + 1;"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"            res.append(num)"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"                    .append(\": \")"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"                    .append(tasks.get(i))"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"                    .append(\"\\n\");"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"            res.append(\"--- No Tasks Found ---\");"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        return res.toString();"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":40}},{"path":"src/main/java/duke/command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import duke.TaskManager;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    private String name;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"     *  ToDoCommand constructor."},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of ToDo Task."},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    public ToDoCommand(String name) {"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"        assert name.length() \u003e 0 : \"Empty Name\";"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  Executes ToDoCommand."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *  @param tm TaskManager Object from Duke."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     *  @param st Storage Object from Duke."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     *  @return Command response."},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"     *  @throws DukeException If any error arises from execution."},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    public String execute(TaskManager tm, Storage st) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"        tm.addToDoTask(name);"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        st.save(tm);"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        String res \u003d String.format(\"added: %s\\n Now you have %d task(s)\","},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"                tm.getSize());"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        return res;"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":36}},{"path":"src/main/java/duke/exception/DukeCorruptFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeCorruptFileException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"     *  DukeCorruptFileException constructor."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    public DukeCorruptFileException() {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        return \"Corrupt File\";"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        return \"    Corrupt File\";"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":19}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" *  Generic DukeException."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" *  Occurs when Duke-related exceptions occur."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"public abstract class DukeException extends Exception {"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public abstract String getMessage();"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":12}},{"path":"src/main/java/duke/exception/DukeIndexRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeIndexRangeException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     *  DukeIndexRangeException constructor."},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    public DukeIndexRangeException() {"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"        return \"Index provided out of range\";"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        return \"    Index provided out of range\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":20}},{"path":"src/main/java/duke/exception/DukeInsufficientParametersException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" *  InsufficientParametersException."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" *  Occurs when insufficient parameters provided given valid command."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class DukeInsufficientParametersException extends DukeException {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    protected String command;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *  DukeInsufficientParametersException constructor."},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     *  @param cmd Name of command in question."},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public DukeInsufficientParametersException(String cmd) {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        this.command \u003d cmd;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"Description of %s cannot be empty\", command);"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"    Description of %s cannot be empty\", command);"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":30}},{"path":"src/main/java/duke/exception/DukeInvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeInvalidDateException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"     * DukeInvalidDateException constructor."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    public DukeInvalidDateException() {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        return \"Invalid date format provided. \""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"                + \"Accepted format: ddmmyyyy.\";"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        return \"    Invalid date format provided.\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":20}},{"path":"src/main/java/duke/exception/DukeInvalidParametersException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeInvalidParametersException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"     * InvalidParametersException."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     * Occurs when invalid parameters provided given valid command."},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"     * @author Yap Jing Kang"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    public DukeInvalidParametersException() {"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"        return \"Invalid Parameters given\";"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"        return \"    Invalid Parameters given\";"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":23}},{"path":"src/main/java/duke/exception/DukeIoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeIoException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"     *  DukeIoException constructor."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    public DukeIoException() {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        return \"File IO Error\";"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        return \"    File IO Error\";"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":19}},{"path":"src/main/java/duke/exception/DukeMissingFlagException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" *  MissingFlagException."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" *  Occurs when mandatory flags are not given."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class DukeMissingFlagException extends DukeException {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    protected String command;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    protected String flag;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  MissingFlagException constructor."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     *  @param cmd Name of command in question."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *  @param flag Missing flag."},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    public DukeMissingFlagException(String cmd, String flag) {"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"        this.command \u003d cmd;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"        this.flag \u003d flag;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"%s expects \u0027%s\u0027 flag; None found\", command, flag);"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"    %s expects \u0027%s\u0027 flag; None found\", command, flag);"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":32}},{"path":"src/main/java/duke/exception/DukeTaskAlreadyDoneException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"public class DukeTaskAlreadyDoneException extends DukeException {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"     *  DukeIndexOutOfRangeException constructor."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"    public DukeTaskAlreadyDoneException() {"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        return \"Task is already done.\";"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        return \"    Task is already done.\";"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":19}},{"path":"src/main/java/duke/exception/DukeUnknownCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" *  UnknownCommandException."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" *  Occurs when unrecognised command is provided."},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class DukeUnknownCommandException extends DukeException {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *  DukeUnknownCommandException constructor."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    public DukeUnknownCommandException() {}"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"    public String getMessage() {"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"        return \"I do not know what you are trying to do here..\";"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        return \"    I do not know what you are trying to do here..\";"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":25}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  DeadlineTask."},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    protected LocalDate deadline;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"     *  DeadlineTask constructor."},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of duke.tasks.DeadlineTask."},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *  @param deadline Specified deadline of task."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"    public DeadlineTask(String name, LocalDate deadline) {"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     *  DeadlineTask constructor. For use with persistent storage."},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of DeadlineTask."},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     *  @param deadline Specified deadline of task."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *  @param isCompleted Whether DeadlineTask is completed, or not."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    public DeadlineTask(String name, LocalDate deadline, boolean isCompleted) {"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        if (isCompleted) {"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"            this.markAsDone();"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"     *  Converts DeadlineTask object to String suitable for storage."},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"     *  @return String DeadlineTask information in a file-friendly format"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public String toFileFormat() {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"%s|%s|%s|%s\","},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"                \"D\","},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"                done \u003d\u003d Status.DONE ? \"1\" : \"0\","},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"                deadline.format(formatter));"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"[D][%s] %s (by: %s)\","},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"                done \u003d\u003d Status.DONE ? \"X\" : \" \","},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"                deadline.format(formatter));"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":63}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" *  Event duke.tasks.Task."},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"public class EventTask extends Task {"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"    protected LocalDate duration;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"     *  EventsTask constructor."},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of EventsTask."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     *  @param duration Specified duration of task."},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"    public EventTask(String name, LocalDate duration) {"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"        this.duration \u003d duration;"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     *  EventTask constructor. For use with persistent storage."},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of EventTask."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *  @param duration Specified duration of task."},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     *  @param isCompleted Whether EventTask is completed, or not."},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    public EventTask(String name, LocalDate duration, boolean isCompleted) {"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"        this.duration \u003d duration;"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"        if (isCompleted) {"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"            this.markAsDone();"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"     *  Converts EventTask object to String suitable for storage."},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"     *  @return String EventTask information in a file-friendly format"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"    public String toFileFormat() {"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"%s|%s|%s|%s\","},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"                \"E\","},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"                done \u003d\u003d Status.DONE ? \"1\" : \"0\","},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"                duration.format(formatter));"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"[E][%s] %s (at: %s)\","},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"                done \u003d\u003d Status.DONE ? \"X\" : \" \","},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"                name,"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"                duration.format(formatter));"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":64}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"enum Status {"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"    DONE,"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"    NOT_DONE"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"}"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":" *  Generic duke.tasks.Task for inheritance."},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"public abstract class Task {"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    protected String name;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    protected Status done;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"     *  Generic Task constructor."},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of Task."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"    public Task(String name) {"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"        assert name.length() \u003e 0 : \"Empty Name\";"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"        this.done \u003d Status.NOT_DONE;"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"     *  duke.tasks.Task name getter."},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"     *  @return Name of Task."},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    public String getName() {"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"        return this.name;"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"     *  Marks Task to be completed."},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"     *  Returns true if successful, false if unsuccessful."},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"     *  @return Name of Task."},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"    public boolean markAsDone() {"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        if (this.done \u003d\u003d Status.DONE) {"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"            return false;"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        this.done \u003d Status.DONE;"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        return true;"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"    public abstract String toFileFormat();"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":53}},{"path":"src/main/java/duke/task/ToDoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":" *  ToDo Task."},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":" *"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":" *  @author Yap Jing Kang"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":" */"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"public class ToDoTask extends Task {"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"     *  ToDoTask constructor."},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of duke.tasks.ToDoTask."},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"    public ToDoTask(String name) {"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"     *  ToDoTask constructor. For use with persistent storage."},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"     *  @param name Name of ToDoTask."},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"     *  @param isCompleted Whether ToDoTask is completed, or not."},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    public ToDoTask (String name, boolean isCompleted) {"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"        super(name);"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"        if (isCompleted) {"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"            this.markAsDone();"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"     *  Converts ToDoTask object to String suitable for storage."},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"     *  @return String ToDoTask information in a file-friendly format"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    public String toFileFormat() {"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        return String.format(\"%s|%s|%s\","},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"                \"T\","},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"                done \u003d\u003d Status.DONE ? \"1\" : \"0\","},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"                name);"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"    public String toString() {"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        if (done \u003d\u003d Status.DONE) {"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"            return \"[T][X] \" + name;"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        return \"[T][ ] \" + name;"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":52}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"SoulUseless":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"SoulUseless":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import duke.command.Command;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"import duke.command.DoneCommand;"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import duke.command.EventCommand;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ExitCommand;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ListCommand;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import duke.command.ToDoCommand;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInsufficientParametersException;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInvalidDateException;"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeInvalidParametersException;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeMissingFlagException;"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeUnknownCommandException;"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"public class ParserTest {"},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     * Valid Commands"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"    public void testExitCommand() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"bye\");"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof ExitCommand);"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c.isExit());"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"    public void testListCommand() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"list\");"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof ListCommand);"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"    public void testDoneCommand() throws DukeException {"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"done 1\");"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof DoneCommand);"},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":"    public void testDeleteCommand() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"delete 1\");"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof DeleteCommand);"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    public void testToDoCommand() throws DukeException {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"todo this\");"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof ToDoCommand);"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":"    public void testEventCommand() throws DukeException {"},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"event this /at 12121999\");"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof EventCommand);"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    public void testDeadlineCommand() throws DukeException {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        Command c \u003d Parser.parse(\"deadline this /by 12121999\");"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(c instanceof DeadlineCommand);"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        assertFalse(c.isExit());"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":"     * Command Verification Check"},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"    public void testVerifyCommand() {"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"hello\";"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeUnknownCommandException.class, () -\u003e Parser.parse(c));"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":"    // Zero-param commands have no special exceptions to be tested"},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"     * Command Specific Checks: DeleteCommand"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"    public void deleteInvalidParamCheck() {"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"delete abc\";"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInvalidParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"    public void deleteInsufficientParamCheck() {"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"delete\";"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInsufficientParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"     * Command Specific Checks: DoneCommand"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"    public void doneInvalidParamCheck() {"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"done abc\";"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInvalidParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":"    public void doneInsufficientParamCheck() {"},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"done\";"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInsufficientParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"     * Command Specific Checks: ToDoCommand"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"    public void toDoParamCheck() {"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"todo\";"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInsufficientParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"     * Command Specific Checks: DeadlineCommand"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"    public void deadlineParamCheck() {"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"deadline\";"},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInsufficientParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":138,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":139,"author":{"gitId":"SoulUseless"},"content":"    public void deadlineMissingFlagCheck() {"},{"lineNumber":140,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"deadline testing\";"},{"lineNumber":141,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeMissingFlagException.class, () -\u003e Parser.parse(c));"},{"lineNumber":142,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":144,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":145,"author":{"gitId":"SoulUseless"},"content":"    public void deadlineWrongDateCheck() {"},{"lineNumber":146,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"deadline testing /by 123\";"},{"lineNumber":147,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInvalidDateException.class, () -\u003e Parser.parse(c));"},{"lineNumber":148,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":150,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":151,"author":{"gitId":"SoulUseless"},"content":"     * Command Specific Checks: EventCommand"},{"lineNumber":152,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":154,"author":{"gitId":"SoulUseless"},"content":"    public void eventParamCheck() {"},{"lineNumber":155,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"event\";"},{"lineNumber":156,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInsufficientParametersException.class, () -\u003e Parser.parse(c));"},{"lineNumber":157,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":159,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":160,"author":{"gitId":"SoulUseless"},"content":"    public void eventMissingFlagCheck() {"},{"lineNumber":161,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"event testing\";"},{"lineNumber":162,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeMissingFlagException.class, () -\u003e Parser.parse(c));"},{"lineNumber":163,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":165,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"SoulUseless"},"content":"    public void eventWrongDateCheck() {"},{"lineNumber":167,"author":{"gitId":"SoulUseless"},"content":"        String c \u003d \"event testing /at 123\";"},{"lineNumber":168,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeInvalidDateException.class, () -\u003e Parser.parse(c));"},{"lineNumber":169,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":170}},{"path":"src/test/java/duke/TaskManagerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeCorruptFileException;"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeIndexRangeException;"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"import duke.exception.DukeTaskAlreadyDoneException;"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"import duke.task.EventTask;"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"import duke.task.Task;"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"import duke.task.ToDoTask;"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"public class TaskManagerTest {"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":26,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":27,"author":{"gitId":"SoulUseless"},"content":"     * Task Manager Operators"},{"lineNumber":28,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"SoulUseless"},"content":"    public void testInitialisation() {"},{"lineNumber":31,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":32,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":33,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getTasks().size(), 0);"},{"lineNumber":34,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":36,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"SoulUseless"},"content":"    public void testReadFile() throws DukeException {"},{"lineNumber":38,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":39,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":40,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":41,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"T|0|test1\");"},{"lineNumber":42,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"E|0|test2|12.Dec.9090\");"},{"lineNumber":43,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test3|12.Dec.1999\");"},{"lineNumber":44,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":45,"author":{"gitId":"SoulUseless"},"content":"        tm.loadArray(input);"},{"lineNumber":46,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 3);"},{"lineNumber":47,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":48,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tm.getTasks();"},{"lineNumber":49,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(tasks.get(0) instanceof ToDoTask);"},{"lineNumber":50,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(tasks.get(1) instanceof EventTask);"},{"lineNumber":51,"author":{"gitId":"SoulUseless"},"content":"        assertTrue(tasks.get(2) instanceof DeadlineTask);"},{"lineNumber":52,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":53,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tasks.get(0).getName(), \"test1\");"},{"lineNumber":54,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tasks.get(1).getName(), \"test2\");"},{"lineNumber":55,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tasks.get(2).getName(), \"test3\");"},{"lineNumber":56,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":58,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":59,"author":{"gitId":"SoulUseless"},"content":"    public void testGetSize() throws DukeException {"},{"lineNumber":60,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":61,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":62,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"T|0|test1\");"},{"lineNumber":64,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"E|0|test2|12.Dec.9090\");"},{"lineNumber":65,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test3|12.Dec.1999\");"},{"lineNumber":66,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":67,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":68,"author":{"gitId":"SoulUseless"},"content":"        tm.loadArray(input);"},{"lineNumber":69,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 3);"},{"lineNumber":70,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":72,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":73,"author":{"gitId":"SoulUseless"},"content":"    public void testDelete() throws DukeException {"},{"lineNumber":74,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":75,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":76,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":77,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"T|0|test1\");"},{"lineNumber":78,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"E|0|test2|12.Dec.9090\");"},{"lineNumber":79,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test3|12.Dec.1999\");"},{"lineNumber":80,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":81,"author":{"gitId":"SoulUseless"},"content":"        tm.loadArray(input);"},{"lineNumber":82,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 3);"},{"lineNumber":83,"author":{"gitId":"SoulUseless"},"content":"        tm.deleteTask(2);"},{"lineNumber":84,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 2);"},{"lineNumber":85,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getTasks().get(1).getClass(),"},{"lineNumber":86,"author":{"gitId":"SoulUseless"},"content":"                DeadlineTask.class);"},{"lineNumber":87,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":89,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"SoulUseless"},"content":"    public void testClear() throws DukeException {"},{"lineNumber":91,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":92,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":93,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":94,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"T|0|test1\");"},{"lineNumber":95,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"E|0|test2|12.Dec.9090\");"},{"lineNumber":96,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test3|12.Dec.1999\");"},{"lineNumber":97,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":98,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":99,"author":{"gitId":"SoulUseless"},"content":"        tm.loadArray(input);"},{"lineNumber":100,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 3);"},{"lineNumber":101,"author":{"gitId":"SoulUseless"},"content":"        tm.clear();"},{"lineNumber":102,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":103,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":105,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"SoulUseless"},"content":"    public void testAddToDoTask() {"},{"lineNumber":107,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":108,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":109,"author":{"gitId":"SoulUseless"},"content":"        tm.addToDoTask(\"test\");"},{"lineNumber":110,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 1);"},{"lineNumber":111,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getTasks().get(0).getClass(),"},{"lineNumber":112,"author":{"gitId":"SoulUseless"},"content":"                ToDoTask.class);"},{"lineNumber":113,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":114,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":116,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":117,"author":{"gitId":"SoulUseless"},"content":"    public void testAddDeadineTask() {"},{"lineNumber":118,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":119,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":120,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":121,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":122,"author":{"gitId":"SoulUseless"},"content":"        LocalDate d \u003d LocalDate.parse(\"12.Dec.1999\", formatter);"},{"lineNumber":123,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":124,"author":{"gitId":"SoulUseless"},"content":"        tm.addDeadlineTask(\"test\", d);"},{"lineNumber":125,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 1);"},{"lineNumber":126,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getTasks().get(0).getClass(),"},{"lineNumber":127,"author":{"gitId":"SoulUseless"},"content":"                DeadlineTask.class);"},{"lineNumber":128,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":130,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":131,"author":{"gitId":"SoulUseless"},"content":"    public void testAddEventTask() {"},{"lineNumber":132,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":133,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 0);"},{"lineNumber":134,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":135,"author":{"gitId":"SoulUseless"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd.MMM.yyyy\");"},{"lineNumber":136,"author":{"gitId":"SoulUseless"},"content":"        LocalDate d \u003d LocalDate.parse(\"12.Dec.1999\", formatter);"},{"lineNumber":137,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":138,"author":{"gitId":"SoulUseless"},"content":"        tm.addEventTask(\"test\", d);"},{"lineNumber":139,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getSize(), 1);"},{"lineNumber":140,"author":{"gitId":"SoulUseless"},"content":"        assertEquals(tm.getTasks().get(0).getClass(),"},{"lineNumber":141,"author":{"gitId":"SoulUseless"},"content":"                EventTask.class);"},{"lineNumber":142,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":144,"author":{"gitId":"SoulUseless"},"content":"    /*"},{"lineNumber":145,"author":{"gitId":"SoulUseless"},"content":"     * Invalid Operation Tests"},{"lineNumber":146,"author":{"gitId":"SoulUseless"},"content":"     */"},{"lineNumber":147,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":148,"author":{"gitId":"SoulUseless"},"content":"    public void testCorruptFileTaskType() {"},{"lineNumber":149,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":150,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":151,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":152,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"X|1|test1\");"},{"lineNumber":153,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeCorruptFileException.class, () -\u003e tm.loadArray(input));"},{"lineNumber":154,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":156,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":157,"author":{"gitId":"SoulUseless"},"content":"    public void testCorruptFileMissingDate() {"},{"lineNumber":158,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":159,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":160,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":161,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test1\");"},{"lineNumber":162,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeCorruptFileException.class, () -\u003e tm.loadArray(input));"},{"lineNumber":163,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":165,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":166,"author":{"gitId":"SoulUseless"},"content":"    public void testCorruptFileCompletion() {"},{"lineNumber":167,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":168,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":169,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":170,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|V|test1\");"},{"lineNumber":171,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeCorruptFileException.class, () -\u003e tm.loadArray(input));"},{"lineNumber":172,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":173,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":174,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":175,"author":{"gitId":"SoulUseless"},"content":"    public void testCorruptFileDate() {"},{"lineNumber":176,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":177,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":178,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":179,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"D|1|test1|123\");"},{"lineNumber":180,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeCorruptFileException.class, () -\u003e tm.loadArray(input));"},{"lineNumber":181,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":183,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":184,"author":{"gitId":"SoulUseless"},"content":"    public void testMarkAlreadyDone() throws DukeException {"},{"lineNumber":185,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":186,"author":{"gitId":"SoulUseless"},"content":"        //to simulate input from Storage"},{"lineNumber":187,"author":{"gitId":"SoulUseless"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();"},{"lineNumber":188,"author":{"gitId":"SoulUseless"},"content":"        input.add(\"T|1|test1\");"},{"lineNumber":189,"author":{"gitId":"SoulUseless"},"content":"        tm.loadArray(input);"},{"lineNumber":190,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeTaskAlreadyDoneException.class, () -\u003e tm.markTaskAsDone(1));"},{"lineNumber":191,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":193,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":194,"author":{"gitId":"SoulUseless"},"content":"    public void testMarkTaskOutOfRange() {"},{"lineNumber":195,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":196,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeIndexRangeException.class, () -\u003e tm.markTaskAsDone(1));"},{"lineNumber":197,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":198,"author":{"gitId":"SoulUseless"},"content":""},{"lineNumber":199,"author":{"gitId":"SoulUseless"},"content":"    @Test"},{"lineNumber":200,"author":{"gitId":"SoulUseless"},"content":"    public void testDeleteOutOfRange() {"},{"lineNumber":201,"author":{"gitId":"SoulUseless"},"content":"        TaskManager tm \u003d new TaskManager();"},{"lineNumber":202,"author":{"gitId":"SoulUseless"},"content":"        assertThrows(DukeIndexRangeException.class, () -\u003e tm.deleteTask(1));"},{"lineNumber":203,"author":{"gitId":"SoulUseless"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"SoulUseless"},"content":"}"}],"authorContributionMap":{"SoulUseless":204}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"SoulUseless"},"content":"hello"},{"lineNumber":2,"author":{"gitId":"SoulUseless"},"content":"list"},{"lineNumber":3,"author":{"gitId":"SoulUseless"},"content":"delete 1"},{"lineNumber":4,"author":{"gitId":"SoulUseless"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"SoulUseless"},"content":"todo"},{"lineNumber":6,"author":{"gitId":"SoulUseless"},"content":"deadline"},{"lineNumber":7,"author":{"gitId":"SoulUseless"},"content":"event"},{"lineNumber":8,"author":{"gitId":"SoulUseless"},"content":"deadline Complete Assignment /at 1230"},{"lineNumber":9,"author":{"gitId":"SoulUseless"},"content":"event CS2103 Lecture /by 1600"},{"lineNumber":10,"author":{"gitId":"SoulUseless"},"content":"todo Tutorial"},{"lineNumber":11,"author":{"gitId":"SoulUseless"},"content":"deadline Assignment /by 22 Nov"},{"lineNumber":12,"author":{"gitId":"SoulUseless"},"content":"event Lecture /at 20 Nov"},{"lineNumber":13,"author":{"gitId":"SoulUseless"},"content":"list"},{"lineNumber":14,"author":{"gitId":"SoulUseless"},"content":"done 1"},{"lineNumber":15,"author":{"gitId":"SoulUseless"},"content":"done 1"},{"lineNumber":16,"author":{"gitId":"SoulUseless"},"content":"done 2"},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"list"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"done 3"},{"lineNumber":19,"author":{"gitId":"SoulUseless"},"content":"delete 2"},{"lineNumber":20,"author":{"gitId":"SoulUseless"},"content":"list"},{"lineNumber":21,"author":{"gitId":"SoulUseless"},"content":"delete 3"},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"delete 0"},{"lineNumber":23,"author":{"gitId":"SoulUseless"},"content":"delete 2"},{"lineNumber":24,"author":{"gitId":"SoulUseless"},"content":"list"},{"lineNumber":25,"author":{"gitId":"SoulUseless"},"content":"bye"}],"authorContributionMap":{"SoulUseless":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"SoulUseless"},"content":"REM run the program, feed duke.command from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"SoulUseless"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"-":19,"SoulUseless":2}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"SoulUseless"},"content":"# run the program, feed duke.commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"-":37,"SoulUseless":1}}]
