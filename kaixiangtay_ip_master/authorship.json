[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"}"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"dependencies {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"checkstyleMain {"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    source \u003d\u0027src/main/java\u0027"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"}"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"checkstyleTest {"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"    source \u003d\u0027src/test/java\u0027"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"}"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":69,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"    enableAssertions \u003d true"},{"lineNumber":72,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kaixiangtay":27,"-":45}},{"path":"data/Duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"T | 1 | finish CS2103 tutorial"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"D | 0 | CS2103 ip submission | 2021-02-19"}],"authorContributionMap":{"kaixiangtay":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"CS2103 Duke Task Manager is a GUI task manager where the user can manage and keep track of tasks of"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"different types (ToDo, Event and Deadline) with various actions (list, sort, find, done, delete, exit) available."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"![Image of Duke](Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"### 1. Adding a ToDo task"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"Adds an ToDo task to the task list in Duke Task Manager."},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"`todo {description}`"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"`todo finish CS2103 tutorial`"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    [T][] finish CS2103 tutorial"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    Now you have 1 task(s) in the list."},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"### 2. Adding an Event task"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"Adds an Event task to the task list in Duke Task Manager."},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"`event {description} /at {MMM-DD-YYYY}`"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"`event CS2103 Group meeting /at Feb 22 2021 `"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    [E][] CS2103 Group meeting (at: 22-02-2021)"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    Now you have 2 task(s) in the list. "},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"### 3. Adding a Deadline task"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"Adds a Deadline task to the task list in Duke Task Manager."},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"`deadline {description} /by {MMM-DD-YYYY}`"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"`deadline CS2103 ip submission /by Feb 19 2021 `"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"Got it. I\u0027ve added this task: "},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    [D][] CS2103 ip submission (by: 19-02-2021)"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    Now you have 3 task(s) in the list. "},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"### 4. Listing all tasks"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"List all recorded tasks from the task list in Duke Task Manager."},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"`list`"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"`list`"},{"lineNumber":65,"author":{"gitId":"-"},"content":""},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"Here are the task(s) in your list: "},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"    1. [T][] finish CS2103 tutorial"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"    2. [E][] CS2103 Group meeting (at: 22-02-2021) "},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"    3. [D][] CS2103 ip submission (by: 19-02-2021)"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":73,"author":{"gitId":"-"},"content":""},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"### 5. Deleting a task"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"Delete a task from the task list in the Duke Task Manager based on the index number given by user input."},{"lineNumber":76,"author":{"gitId":"-"},"content":""},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"`delete {task index number}`"},{"lineNumber":79,"author":{"gitId":"-"},"content":""},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"`delete 1`"},{"lineNumber":82,"author":{"gitId":"-"},"content":""},{"lineNumber":83,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"Noted. I\u0027ve removed this task:"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"    [T][] finish CS2103 tutorial"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    Now you have 2 task(s) in the list."},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"### 6. Marking a task as done "},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"Marks a task as done status from the task list in the Duke Task Manager."},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"Format:"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"`done {task index number}`"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"`done 2`"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"Nice! I\u0027ve marked this task as done:"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"    [E][✘] CS2103 Group meeting (at: 22-02-2021) "},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"### 7. Finding a task"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"Find a task from the task list in Duke Task Manager based on the keyword from the user input."},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":"`find submission`"},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":112,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":113,"author":{"gitId":"kaixiangtay"},"content":"Here are the matching task(s) in your list:"},{"lineNumber":114,"author":{"gitId":"kaixiangtay"},"content":"    1.[D][] CS2103 ip submission (by: 19-02-2021)"},{"lineNumber":115,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":116,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":117,"author":{"gitId":"kaixiangtay"},"content":"### 8. Sorting a task"},{"lineNumber":118,"author":{"gitId":"kaixiangtay"},"content":"Sort tasks (date in ascending order) which are of Event and Deadline type from the task list in Duke Task Manager."},{"lineNumber":119,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":120,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":121,"author":{"gitId":"kaixiangtay"},"content":"`sort`"},{"lineNumber":122,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":123,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:"},{"lineNumber":124,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":125,"author":{"gitId":"kaixiangtay"},"content":"Here are the event and deadline task(s) (sorted by date) in your list:"},{"lineNumber":126,"author":{"gitId":"kaixiangtay"},"content":"    1.[D][] CS2103 ip submission (by: 19-02-2021)"},{"lineNumber":127,"author":{"gitId":"kaixiangtay"},"content":"    2.[E][✘] CS2103 Group meeting (at: 22-02-2021) "},{"lineNumber":128,"author":{"gitId":"kaixiangtay"},"content":"```"},{"lineNumber":129,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":130,"author":{"gitId":"kaixiangtay"},"content":"### 9. Exiting the program"},{"lineNumber":131,"author":{"gitId":"kaixiangtay"},"content":"Bid farewell to Duke Task Manager."},{"lineNumber":132,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":133,"author":{"gitId":"kaixiangtay"},"content":"Usage example:"},{"lineNumber":134,"author":{"gitId":"kaixiangtay"},"content":"`bye`"},{"lineNumber":135,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":136,"author":{"gitId":"kaixiangtay"},"content":"Expected outcome:`Bye. Hope to see you again!`"},{"lineNumber":137,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"kaixiangtay":121,"-":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" * Driver class for Duke project"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * Duke class constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        String filePath \u003d System.getProperty(\"user.dir\") + \"/data/Duke.txt\";"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        initialiseDuke(filePath);"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     * Initialisation of Duke"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @param filePath Path directory to location of storage file"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    public void initialiseDuke(String filePath) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"            assert this.storage !\u003d null : \"Storage is not initialised\";"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"            this.storage \u003d new Storage(filePath);"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            this.tasks \u003d new TaskList(this.storage.loadData());"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            this.tasks \u003d new TaskList();"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * Read and response to different inputs provided by the user accordingly"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @param input Text entered by the user in the GUI"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @return Response message in string format"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    public String getResponse(String input) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        String responseMsg \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            command.execute(this.tasks, this.storage);"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            responseMsg \u003d \"Duke:\\n\" + command.getMessage();"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"            responseMsg \u003d \"Duke:\\n\" + ex.getMessage();"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"        return responseMsg;"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     * Greeting message from Duke Bot"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"     * @return Greeting message in String format"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    public String greetUser() {"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"        String greetingMsg \u003d \"Duke:\\n Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"        return greetingMsg;"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"}"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":""}],"authorContributionMap":{"kaixiangtay":67}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.controller.MainWindow;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     * Sets up program to run MainWindow on start"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     * @param stage Stage to show"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    public void start(Stage stage) {"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"            stage.setScene(scene);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"            stage.setResizable(false);"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            stage.setTitle(\"CS2103 Duke Task Manager\");"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().welcomeUser();"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"            stage.show();"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":40}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Collections;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.AddTask;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.Command;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.DeleteTask;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.ExitCommand;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.FindCommand;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.ListCommand;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.SortCommand;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":" * Parser class which translates input of user to task command, task description and date"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * Decipher command based on the input of the user"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     * @param input Input provided by the user"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @return Command to be executed by the Duke Bot"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the user gives an empty description (except bye and list commands) or an invalid input"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public static Command parse(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        String[] commandStr \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        String taskCommand \u003d commandStr[0];"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d formatInput(taskCommand, input);"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        Command commandType \u003d handleNewCommand(taskCommand, commandStr, taskDetail);"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        return commandType;"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    private static Command handleNewCommand(String taskCommand, String[] commandStr, String taskDetail) {"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        Command commandType \u003d null;"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        switch (taskCommand) {"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        case \"bye\":"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new ExitCommand(taskCommand);"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"        case \"list\":"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new ListCommand(taskCommand);"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        case \"done\":"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new DoneCommand(taskCommand, Integer.parseInt(commandStr[1]));"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        case \"todo\":"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            // Fallthrough"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        case \"deadline\":"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"            // Fallthrough"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"        case \"event\":"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new AddTask(taskCommand, taskDetail);"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        case \"delete\":"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new DeleteTask(taskCommand, Integer.parseInt(commandStr[1]));"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"        case \"find\":"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new FindCommand(taskCommand, taskDetail);"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"        case \"sort\":"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new SortCommand(taskCommand);"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        return commandType;"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"    private static String formatInput(String taskCommand, String input) throws DukeException {"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d \"\";"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"        HashSet\u003cString\u003e noDescriptionCommands \u003d new HashSet\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"        Collections.addAll(noDescriptionCommands, \"bye\", \"list\", \"sort\");"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"        boolean haveDescription \u003d !noDescriptionCommands.contains(taskCommand);"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"        if (haveDescription) {"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"            checkValidInput(taskCommand, input);"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"            taskDetail \u003d formatTaskDetail(taskCommand, input);"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"            checkBlankDescription(taskCommand, taskDetail);"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"        return taskDetail;"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    private static String formatTaskDetail(String taskCommand, String input) {"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d input.replaceFirst(taskCommand + \" \", \"\");"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"        return taskDetail;"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"    private static void checkValidInput(String taskCommand, String input) throws DukeException {"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"        HashSet\u003cString\u003e validInputCommands \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":"        Collections.addAll(validInputCommands, \"bye\", \"list\", \"done\","},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"                \"delete\", \"todo\", \"event\", \"deadline\", \"find\", \"sort\");"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidCommand \u003d !validInputCommands.contains(taskCommand);"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"        checkValidFormat(taskCommand, input);"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"        if (isInvalidCommand) {"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INPUT, taskCommand);"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"    private static void checkValidFormat(String taskCommand, String input) throws DukeException {"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidEventFormat \u003d !input.contains(\"/at\");"},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"        if (taskCommand.equals(\"event\") \u0026\u0026 isInvalidEventFormat) { // guard clause"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_FORMAT, taskCommand);"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidDeadlineFormat \u003d !input.contains(\"/by\");"},{"lineNumber":112,"author":{"gitId":"kaixiangtay"},"content":"        if (taskCommand.equals(\"deadline\") \u0026\u0026 isInvalidDeadlineFormat) { // guard clause"},{"lineNumber":113,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_FORMAT, taskCommand);"},{"lineNumber":114,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":117,"author":{"gitId":"kaixiangtay"},"content":"    private static void checkBlankDescription(String taskCommand, String taskDetail) throws DukeException {"},{"lineNumber":118,"author":{"gitId":"kaixiangtay"},"content":"        boolean isBlankDescription \u003d taskCommand.equals(taskDetail);"},{"lineNumber":119,"author":{"gitId":"kaixiangtay"},"content":"        if (isBlankDescription) {"},{"lineNumber":120,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.BLANK_DESCRIPTION, taskCommand);"},{"lineNumber":121,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":123}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Deadline;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Event;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.ToDo;"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":" * Storage class to manage saving tasks into the list and loading of tasks from the list when requested by the user"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"public class Storage {"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    private final String fileDirectory;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    private final String pathDirectory;"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * Storage class overloaded constructor"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @param fileDirectory Location where the list of tasks will be stored"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    public Storage(String fileDirectory) {"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.fileDirectory \u003d fileDirectory;"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        this.pathDirectory \u003d fileDirectory.replaceFirst(\"/Duke.txt\", \"\");"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    private File fileConfiguration() throws DukeException {"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        File dataDirectory \u003d new File(this.pathDirectory);"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        File dataFile \u003d new File(this.fileDirectory);"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            boolean isInvalidFolder \u003d !(Files.isDirectory(Paths.get(this.pathDirectory)));"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            boolean isInvalidFile \u003d !dataFile.exists();"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            if (isInvalidFolder) {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"                // Handles folder does not exist case"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"                dataDirectory.mkdir();"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"                assert Files.isDirectory(Paths.get(this.pathDirectory)) : \"Directory does not exist\";"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"                dataFile.createNewFile();"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            } else if (isInvalidFile) {"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"                // Handles file does not exist"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"                dataFile.createNewFile();"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"            return dataFile;"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_FILE_CONFIGURATION, \"\");"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"     * Write list of tasks into the data file Duke.txt"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks List of tasks to write into data file"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is error in saving the data into file Duke.txt"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"    public void saveData(TaskList tasks) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"            FileWriter fileWriter \u003d new FileWriter(fileConfiguration(), false);"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"            assert fileWriter !\u003d null : \"File writer is not initialised\";"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"            for (int index \u003d 0; index \u003c tasks.getSize(); index++) {"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"                Task currTask \u003d tasks.getTask(index);"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"                String formattedTask \u003d currTask.formatTask() + System.lineSeparator();"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"                fileWriter.write(formattedTask);"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"            fileWriter.close();"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.SAVING_ERROR, \"\");"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"     * Read list of tasks from data file Duke.txt"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"     * @return List of tasks from storage data file in ArrayList format"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is an error in loading the data from file Duke.txt"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"    public ArrayList\u003cTask\u003e loadData() throws DukeException {"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"            File dataFile \u003d fileConfiguration();"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"            Scanner sc \u003d new Scanner(dataFile);"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"            assert sc !\u003d null : \"Scanner for data file is null\";"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":"            while (sc.hasNext()) {"},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"                String[] taskDetail \u003d sc.nextLine().split(\" \\\\| \");"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"                String taskType \u003d taskDetail[0];"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"                Task newTask \u003d handleNewTask(taskType, taskDetail);"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"                tasks.add(newTask);"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"            return tasks;"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.LOADING_ERROR, \"\");"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"    private Task handleNewTask(String taskType, String[] taskDetail) {"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"        Task newTask \u003d new Task();"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":"        switch (taskType) {"},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"        case \"T\":"},{"lineNumber":112,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new ToDo(taskDetail[2]);"},{"lineNumber":113,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"kaixiangtay"},"content":"        case \"E\":"},{"lineNumber":115,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Event(taskDetail[2], LocalDate.parse(taskDetail[3]));"},{"lineNumber":116,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":117,"author":{"gitId":"kaixiangtay"},"content":"        case \"D\":"},{"lineNumber":118,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Deadline(taskDetail[2], LocalDate.parse(taskDetail[3]));"},{"lineNumber":119,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":120,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":121,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":122,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":123,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":124,"author":{"gitId":"kaixiangtay"},"content":"        boolean isValidTask \u003d taskType.equals(\"T\") || taskType.equals(\"E\") || taskType.equals(\"D\");"},{"lineNumber":125,"author":{"gitId":"kaixiangtay"},"content":"        boolean isTaskCompleted \u003d taskDetail[1].equals(\"1\");"},{"lineNumber":126,"author":{"gitId":"kaixiangtay"},"content":"        if (isValidTask \u0026\u0026 isTaskCompleted) {"},{"lineNumber":127,"author":{"gitId":"kaixiangtay"},"content":"            newTask.markAsDone();"},{"lineNumber":128,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"kaixiangtay"},"content":"        return newTask;"},{"lineNumber":130,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":131}},{"path":"src/main/java/duke/command/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Deadline;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Event;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.ToDo;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":" * AddTask handles the addition of event, deadline and todo tasks to the list only"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"@SuppressWarnings(\"checkstyle:Regexp\")"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"public class AddTask extends Command {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * AddTask Constructor"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     * @param command Task name"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandDetail Task details"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    public AddTask(String command, String commandDetail) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d command;"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d commandDetail;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    private void addNewTask(TaskList taskList) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        Task newTask \u003d new Task();"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \"Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        switch (this.commandType) {"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        case \"event\":"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            formatDateTime();"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Event(this.commandDetail,"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"                    LocalDate.parse(this.dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        case \"deadline\":"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            formatDateTime();"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Deadline(this.commandDetail,"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"                    LocalDate.parse(this.dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        case \"todo\":"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new ToDo(this.commandDetail);"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        taskList.addTask(newTask);"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d newTask.toString();"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"        int numTasks \u003d taskList.getSize();"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage +\u003d \"\\t  \" + taskDetail + \"\\n\\t Now you have \" + numTasks + \" task(s) in the list.\";"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"    private void formatDateTime() throws DukeException {"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        boolean isEventTask \u003d this.commandType.equals(\"event\");"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"        boolean isDeadlineTask \u003d this.commandType.equals(\"deadline\");"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        if (isEventTask) { // Guard clause"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d this.commandDetail.trim().split(\" /at \");"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"        if (isDeadlineTask) { // Guard clause"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d this.commandDetail.trim().split(\" /by \");"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"        this.dateTime \u003d result[1];"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"        this.commandDetail \u003d result[0];"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidDateTime \u003d !checkDateTime(this.dateTime);"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"        if (isInvalidDateTime) {"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_DATETIME, \"\");"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    private boolean checkDateTime(String dateTime) {"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"            LocalDate.parse(dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"            return false;"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"     * Adds task to TaskList, save the updated TaskList into data file and output message to the command line"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the input is invalid date format"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"        addNewTask(tasks);"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":108}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" * Abstract command class that can be inherited by various commands"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    protected String commandType;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    protected String commandDetail;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    protected int index;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    protected String dateTime;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    protected String outputMessage;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * Used for testing in Junit"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     * @return Command name, details of task and date (when applicable)"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    public String getTaskDetails() {"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"%s %s %s\", this.commandType, this.commandDetail, this.dateTime);"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * Execute the command accordingly"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is an invalid input value from the user"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * Used for displaying of output message in GUI"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * @return Message details in string format"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"    public String getMessage() {"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        return this.outputMessage;"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":43}},{"path":"src/main/java/duke/command/DeleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * DeleteTask handles the deletion of event, deadline and todo tasks to the list only"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class DeleteTask extends Command {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * DeleteTask Constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Integer index on the display list in command line"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public DeleteTask(String commandType, int index) {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d String.valueOf(index);"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d index;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private void handleDeleteTask(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        Task deleteTask \u003d taskList.getTask(index - 1);"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        taskList.removeTask(deleteTask);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d deleteTask.toString();"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        int numTasks \u003d taskList.getSize();"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \"Noted. I\u0027ve removed this task: \\n\" + \"\\t  \" + taskDetail"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"                + \"\\n\\t Now you have \" + numTasks + \" task(s) in the list.\";"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * Delete selected task from the TaskList, save the updated TaskList into file and output message to command line"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the integer input is out of list range (negative, 0 or greater than TaskList size)"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidIndex \u003d this.index \u003c\u003d 0 || this.index \u003e tasks.getSize();"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        if (isInvalidIndex) {"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        handleDeleteTask(tasks);"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":55}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" * DoneCommand handles the marking of tasks as done status in the list only"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * DoneCommand Constructor"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Integer index on the display list in command line"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    public DoneCommand(String commandType, int index) {"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d String.valueOf(index);"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d index;"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    private void markDoneTask(TaskList taskList) {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        Task doneTask \u003d taskList.getTask(this.index - 1);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        doneTask.markAsDone();"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetail \u003d doneTask.toString();"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"\\t  \" + taskDetail;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     * Mark selected task as done status from the TaskList,"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * Save the updated TaskList into file and output message to command line"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the integer input is out of list range (negative, 0 or greater than TaskList size)"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"        boolean isInvalidIndex \u003d this.index \u003c\u003d 0 || this.index \u003e tasks.getSize();"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        if (isInvalidIndex) {"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        markDoneTask(tasks);"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":54}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * ExitCommand handles the termination of the Duke Bot program"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     * ExitCommand Constructor"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    public ExitCommand(String commandType) {"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d \"\";"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * Output message to the command line"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":35}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * FindCommand handles the filtering of tasks in the list that matches the keyword given by the user only"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class FindCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * FindCommand Constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandDetails Task details"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public FindCommand(String commandType, String commandDetails) {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d commandDetails;"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    private void retrieveMatchingTasks(TaskList taskList) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\"Here are the matching task(s) in your list:\");"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        int index \u003d 0;"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        boolean isEmptyList \u003d taskList.getSize() \u003d\u003d 0;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        if (isEmptyList) {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.EMPTY_DATA, \"\");"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d taskList.getSize(); num++) {"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d taskList.getTask(num - 1);"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"            String description \u003d currentTask.getDescription();"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            boolean isValidKeyword \u003d findKeyword(description, this.commandDetail);"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            if (isValidKeyword) {"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"                index++;"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"                String taskDetail \u003d currentTask.toString();"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"                currText.append(\"\\n\\t \").append(index).append(\".\").append(taskDetail);"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d currText.toString();"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    private boolean findKeyword(String string, String subString) {"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        return string.toLowerCase().contains(subString.toLowerCase());"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     * Find a subset of tasks from the TaskList given a keyword input from the user and"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     * Display the result as output message in the command line"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"        retrieveMatchingTasks(tasks);"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":67}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * ListCommand handles the retrieval of all the tasks in the TaskList as requested by the user"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * ListCommand Constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    public ListCommand(String commandType) {"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private void retrieveList(TaskList taskList) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\"Here are the task(s) in your list:\");"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        boolean isEmptyList \u003d taskList.getSize() \u003d\u003d 0;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        if (isEmptyList) {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.EMPTY_DATA, \"\");"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d taskList.getSize(); num++) {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d taskList.getTask(num - 1);"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            String taskDetail \u003d currentTask.toString();"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"            currText.append(\"\\n\\t \").append(num).append(\".\").append(taskDetail);"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d currText.toString();"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve all the tasks from the TaskList given a keyword input from the user and"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"     * Output the whole TaskList as message to the command line"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        retrieveList(tasks);"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":54}},{"path":"src/main/java/duke/command/SortCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Map;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.util.TreeMap;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.ExceptionType;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":" * SortCommand handles the date organisations of task types Deadline and Event in the TaskList"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"public class SortCommand extends Command {"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * SortCommand Constructor"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public SortCommand(String commandType) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetail \u003d \"\";"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    private void sort(TaskList taskList) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\"Here are the event and deadline \""},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"                + \"task(s) (sorted by date) in your list:\");"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        TreeMap\u003cString, String\u003e map \u003d new TreeMap\u003c\u003e();"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        boolean isEmptyList \u003d taskList.getSize() \u003d\u003d 0;"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        if (isEmptyList) {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.EMPTY_DATA, \"\");"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d taskList.getSize(); num++) {"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d taskList.getTask(num - 1);"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            String taskDetail \u003d currentTask.toString();"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            String taskType \u003d taskDetail.substring(1, 2);"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            if (!(taskType.equals(\"E\") || taskType.equals(\"D\"))) {"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"                continue;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            map.put(formatDateString(taskType, taskDetail), taskDetail);"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"        int index \u003d 0;"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        for (Map.Entry\u003cString, String\u003e entry : map.entrySet()) {"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            index++;"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"            String taskDetail \u003d entry.getValue();"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"            currText.append(\"\\n\\t \").append(index).append(\".\").append(taskDetail);"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d currText.toString();"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"    private String formatDateString(String taskType, String description) {"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        if (taskType.equals(\"E\")) { // Guard clause"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d description.split(\"at: \");"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        if (taskType.equals(\"D\")) { // Guard clause"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d description.split(\"by: \");"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"        String[] dateTime \u003d result[1].replace(\")\", \"\").split(\"-\");"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"        String dateTimeInt \u003d String.join(\"\", dateTime[2] + dateTime[1] + dateTime[0]);"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"        return dateTimeInt;"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"     * Find a subset of tasks from the TaskList given a keyword input from the user and"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"     * Display the result as output message in the command line"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"        sort(tasks);"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":90}},{"path":"src/main/java/duke/controller/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"import javafx.geometry.Pos;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.Node;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":" * containing text from the speaker."},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"public class DialogBox extends HBox {"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    private Label dialog;"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    private ImageView displayPicture;"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            assert fxmlLoader !\u003d null : \"FXML Loader is not initialised\";"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            fxmlLoader.load();"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            e.printStackTrace();"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"        dialog.setPadding(new Insets(0, 5, 0, 5));"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        dialog.setText(text);"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"        displayPicture.setImage(img);"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        Circle clip \u003d new Circle(50, 50, 50);"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    private void flip() {"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"        Collections.reverse(tmp);"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"     * Creates a user dialog box"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"     * @param text Input from user"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"     * @param img User display picture"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"     * @return DialogBox with User input and display picture"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        assert db !\u003d null : \"Dialog Box is not initialised\";"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"        db.setBackground(new Background(new BackgroundFill(Color.BEIGE,"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"                new CornerRadii(5.0),"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"                Insets.EMPTY)));"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"        return db;"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"     * Creates a duke dialog box"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"     * @param text Response from duke"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"     * @param img Duke display picture"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"     * @return DialogBox with Duke input and display picture"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"        assert db !\u003d null : \"Dialog Box is not initialised\";"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"        db.flip();"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"        Color dialogColor \u003d text.contains(\"☹ OOPS\") ? Color.CRIMSON : Color.LIGHTBLUE;"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"        db.setBackground(new Background(new BackgroundFill(dialogColor,"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"                new CornerRadii(5.0),"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"                Insets.EMPTY)));"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"        return db;"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":94}},{"path":"src/main/java/duke/controller/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.controller;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     * Initialize MainWindow.fxml"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * Receives duke object and sets up for MainWindow"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @param d Duke object"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        duke \u003d d;"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"     * Creates a dialog box where Duke welcomes user"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    public void welcomeUser() {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"                DialogBox.getDukeDialog(duke.greetUser(), dukeImage)"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    private void handleUserInput() {"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"            String input \u003d userInput.getText();"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"            String response \u003d duke.getResponse(input);"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            assert dukeImage !\u003d null : \"Duke Image not found\";"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"            assert userImage !\u003d null : \"User Image not found\";"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"                    DialogBox.getUserDialog(\"User:\\n\" + input, userImage),"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"            );"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"            userInput.clear();"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"            dialogContainer.getChildren().addAll("},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"                    DialogBox.getDukeDialog(ex.getMessage(), dukeImage)"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"            );"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"            userInput.clear();"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":82}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * DukeException class to handle various types of exception in DukeBot"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    protected final ExceptionType typeException;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    protected final String taskType;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DukeException"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * @param typeException Type of exception caught by the DukeBot"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * @param taskType Type of task"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    public DukeException(ExceptionType typeException, String taskType) {"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"        this.typeException \u003d typeException;"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * A custom error message will be generated depending on exception type"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     * @return Error message"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    public String getMessage() {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        String errorMsg \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        switch (this.typeException) {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_INPUT:"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_FORMAT:"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Invalid format detected :-( \\n\\n \""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"                    + \"Pls enter your event/deadline commands followed by \""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"                    + \"description then /at with date (for event) or \\n/by with date (for deadline)\";"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_INTEGER:"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The integer value is invalid (negative, 0 or out of task list range) :-(\";"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_DATETIME:"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Invalid date has been detected :-( \""},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"                    + \"\\n Pls key in a valid date in MMM dd yyyy format (i.e. Oct 15 2019) !!!\";"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        case BLANK_DESCRIPTION:"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The description of a \" + this.taskType + \" cannot be empty :-(\";"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        case LOADING_ERROR:"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\";"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        case SAVING_ERROR:"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment :-( \""},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"                    + \"Pls kindly try again later !!!\";"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_FILE_CONFIGURATION:"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Unfortunately, file configuration is not working at the moment :-( \""},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"                    + \"Pls restart (exit and start again) the Duke Bot !!!\";"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"        case EMPTY_DATA:"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Unfortunately, there is no data on the list at the moment :-( \";"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        return errorMsg;"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":69}},{"path":"src/main/java/duke/exception/ExceptionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * Enum class which consists of the different types of exception"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public enum ExceptionType {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    BLANK_DESCRIPTION, EMPTY_DATA, INVALID_INTEGER, INVALID_FORMAT, INVALID_INPUT, INVALID_DATETIME,"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    LOADING_ERROR, SAVING_ERROR, INVALID_FILE_CONFIGURATION"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":9}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * Deadline class to handle tasks that are need to be done before a specific date/time"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    protected final LocalDate by;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DeadLine class"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param by Specific date/time to complete the task"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type, description and deadline of tasks in Duke.txt"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the task deadline information"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"D | %s | %s\", super.formatTask(), this.by);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and deadline of task"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the task deadline information"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        String taskDescription \u003d super.toString();"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        String formattedDate \u003d this.by.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        String taskMsg \u003d \"[D]\" + taskDescription + \" (by: \" + formattedDate + \")\";"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        return taskMsg;"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":45}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * Event class to handle tasks that starts at a specific date/time and ends at a specific date/time"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    protected final LocalDate at;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Event class"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param at Starts and ends at specific date/time to complete the task"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type, description and timeframe of tasks in Duke.txt"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the Event details"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"E | %s | %s\", super.formatTask(), this.at);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and timeframe of tasks"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the Event details"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        String taskDescription \u003d super.toString();"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        String formattedDate \u003d this.at.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        String taskMsg \u003d \"[E]\" + taskDescription + \" (at: \" + formattedDate + \")\";"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        return taskMsg;"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":45}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * Task class created when user inputs todo, event, deadline"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Task class"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    public Task() {"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        this.description \u003d \"\";"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * Overloaded Constructor for Task class"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public Task(String description) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d false;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * Set state of task as done once the task is completed"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the status of task"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * @return Cross if task is marked as completed, empty string if incomplete"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"    public String getStatusIcon() {"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        return (this.isDone ? \"\\u2718\" : \" \");"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the description of task"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format of task description"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    public String getDescription() {"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        return this.description;"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     * Format the task into custom format before saving into data file"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"%s | %s\", this.isDone ? \"1\" : \"0\", this.description);"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"     * Format task status icon and task details as string"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     * @return Task status icon and task details"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":69}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":" * TaskList class which keeps tracks all the tasks in a list"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     * TaskList class constructor"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * TaskList overload constructor"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks Consists of all the tasks added into the list as given by the user input"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * Adds task to the list of tasks"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @param task Task to be added"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    public void addTask(Task task) {"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.add(task);"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * Removes selected task from the list of tasks"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @param task Task to be removed"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    public void removeTask(Task task) {"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.remove(task);"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"     * Obtains the size of the TaskList"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"     * @return TaskList Size"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    public int getSize() {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        return this.tasks.size();"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     * Find the task from TaskList"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Index of task in the TaskList (starting from 0)"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"     * @return Task as requested by the Duke Bot"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    public Task getTask(int index) {"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"        return this.tasks.get(index);"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":64}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * ToDo class to handle tasks without any deadline (no date /time)"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for ToDo class"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type and description in Duke.txt"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the ToDo task"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"T | %s\", super.formatTask());"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type and task description"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format of ToDO task"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":35}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kaixiangtay":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.controller.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"kaixiangtay":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    public void parseTest() throws DukeException {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"todo finish english report \","},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"todo finish english report\").getTaskDetails());"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"list  \", Parser.parse(\"list\").getTaskDetails());"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"bye  \", Parser.parse(\"bye\").getTaskDetails());"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"done 5 \", Parser.parse(\"done 5\").getTaskDetails());"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"delete 3 \", Parser.parse(\"delete 3\").getTaskDetails());"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"deadline finish Duke Project /by Oct 10 2019 \","},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"deadline finish Duke Project /by Oct 10 2019\").getTaskDetails());"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"event project meeting /at Jan 27 2021 \","},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"event project meeting /at Jan 27 2021\").getTaskDetails());"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":24}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"public class StorageTest {"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    public void loadStorage() {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\")).loadData();"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.home\")).loadData();"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/DukeBot.txt\").loadData();"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").loadData();"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Successfully loaded file!\");"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file configuration is not working at the moment \""},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls restart (exit and start again) the Duke Bot !!!\", ex.getMessage());"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"    public void saveStorage() {"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\")).saveData(new TaskList());"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.home\")).saveData(new TaskList());"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/DukeBot.txt\").saveData(new TaskList());"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").saveData(new TaskList());"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Successfully loaded file!\");"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":80}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"todo buy book"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"deadline sell book /by Sunday"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"deadline do homework /by June 6th"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"blah"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"done -3"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"delete 0"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"bye"}],"authorContributionMap":{"kaixiangtay":14}}]
