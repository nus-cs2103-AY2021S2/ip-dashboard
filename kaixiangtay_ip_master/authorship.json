[{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" * Driver class for Duke project"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    private final Storage storage;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    private TaskList tasks;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    private final Ui ui;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * Duke class constructor"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param filePath Path directory to location of storage file"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"            tasks \u003d new TaskList(storage.loadData());"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"            ui.display(ex.getMessage());"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"     * Starts up the Duke Bot program, read and response to user various inputs accordingly"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    public void run() {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        boolean continueInput \u003d true;"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        while (continueInput) {"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            String input \u003d ui.nextCommand();"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            try {"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"                Command command \u003d Parser.parse(input);"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"                command.execute(tasks, ui, storage);"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"                continueInput \u003d command.continueInput();"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            } catch (DukeException ex) {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"                ui.display(ex.getMessage());"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    public static void main(String[] args) {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        String filePath \u003d System.getProperty(\"user.dir\") + \"/data/Duke.txt\";"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        new Duke(filePath).run();"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":55}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.*;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Collections;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * Parser class which translates input of user to task command, task description and date"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * Decipher command based on the input of the user"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param input Input provided by the user"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @return Command to be executed by the Duke Bot"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the user gives an empty description (except bye and list commands) or an invalid input"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    public static Command parse(String input) throws DukeException {"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        String[] commandStr \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        String taskCommand \u003d commandStr[0];"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        String taskDetails \u003d formatInput(taskCommand, input);"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        Command commandType \u003d null;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"        switch (taskCommand) {"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        case \"bye\":"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new ExitCommand(taskCommand);"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        case \"list\":"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new ListCommand(taskCommand);"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        case \"done\":"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new DoneCommand(taskCommand, Integer.parseInt(commandStr[1]));"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        case \"todo\":"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        case \"deadline\":"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        case \"event\":"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new AddTask(taskCommand, taskDetails);"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        case \"delete\":"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new DeleteTask(taskCommand, Integer.parseInt(commandStr[1]));"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        case \"find\":"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            commandType \u003d new FindCommand(taskCommand, taskDetails);"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        return commandType;"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     private static String formatInput(String taskCommand, String input)  throws DukeException {"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"         String taskStr \u003d \"\";"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"         if (!taskCommand.equals(\"bye\") \u0026\u0026 !taskCommand.equals(\"list\")) {"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"             checkValidInput(taskCommand);"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"             taskStr \u003d formatTaskDetails(taskCommand, input);"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"             checkBlankDescription(taskCommand, taskStr);"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"         }"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"         return taskStr;"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     }"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"    private static String formatTaskDetails(String taskCommand, String input) {"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        input \u003d input.replaceFirst(taskCommand + \" \", \"\");"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        String taskStr \u003d \"\";"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        if (taskCommand.equals(\"event\")) {"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"            taskStr \u003d input.split(\" /at\")[0].replaceFirst(\"event \", \"\");"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"        } else if (taskCommand.equals(\"deadline\")) {"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"            taskStr \u003d input.split(\" /by\")[0].replaceFirst(\"deadline \", \"\");"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"            taskStr \u003d input;"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"        return taskStr;"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"    private static void checkValidInput(String taskCommand) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"        HashSet\u003cString\u003e validInputSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"        Collections.addAll(validInputSet, \"bye\", \"list\", \"done\","},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"                \"delete\", \"todo\", \"event\", \"deadline\", \"find\");"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"        if (!validInputSet.contains(taskCommand)) {"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INPUT, taskCommand);"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"    private static void checkBlankDescription(String taskCommand, String taskDetails) throws DukeException {"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"        if (taskCommand.equals(taskDetails)) {"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.BLANK_DESCRIPTION, taskCommand);"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":95}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.*;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.*;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import java.nio.file.Files;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":" * Storage class to manage saving tasks into the list and loading of tasks from the list when requested by the user"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    private final String fileDirectory;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    private final String pathDirectory;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * Storage class constructor"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     * @param fileDirectory Location where the list of tasks will be stored"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    public Storage(String fileDirectory) {"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        this.fileDirectory \u003d fileDirectory;"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        this.pathDirectory \u003d fileDirectory.replaceFirst(\"/Duke.txt\", \"\");"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    private File fileConfiguration() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        File dataDirectory \u003d new File(this.pathDirectory);"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        File dataFile \u003d new File(this.fileDirectory);"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            if (!(Files.isDirectory(Paths.get(this.pathDirectory)))) {"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"                // Handles folder does not exist case"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"                dataDirectory.mkdir();"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"                dataFile.createNewFile();"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            } else if (!dataFile.exists()) {"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"                // Handles file does not exist"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"                dataFile.createNewFile();"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            return dataFile;"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_FILE_CONFIGURATION, \"\");"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"     * Write list of tasks into the data file Duke.txt"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks List of tasks to write into data file"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is error in saving the data into file Duke.txt"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"    public void saveData(TaskList tasks) throws DukeException {"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"            File dataFile \u003d fileConfiguration();"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"            FileWriter fileWriter \u003d new FileWriter(dataFile, false);"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"            for (int index \u003d 0; index \u003c tasks.size(); index++) {"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"                Task currTask \u003d tasks.get(index);"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"                fileWriter.write(currTask.formatTask() + System.lineSeparator());"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            fileWriter.close();"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.SAVING_ERROR, \"\");"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"     * Read list of tasks from data file Duke.txt"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"     * @return List of tasks from storage data file in ArrayList format"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is an error in loading the data from file Duke.txt"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"    public ArrayList\u003cTask\u003e loadData() throws DukeException {"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"            File dataFile \u003d fileConfiguration();"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"            Scanner sc \u003d new Scanner(dataFile);"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"            while (sc.hasNext()) {"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"                String[] taskDetails \u003d sc.nextLine().split(\"[|]\");"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"                String taskType \u003d taskDetails[0];"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"                Task newTask \u003d null;"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"                switch (taskType) {"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"                case \"T\":"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"                    newTask \u003d new ToDo(taskDetails[2]);"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"                    break;"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"                case \"E\":"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":"                    newTask \u003d new Event(taskDetails[2], LocalDate.parse(taskDetails[3]));"},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"                    break;"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"                case \"D\":"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"                    newTask \u003d new Deadline(taskDetails[2], LocalDate.parse(taskDetails[3]));"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"                    break;"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"                default:"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"                    break;"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"                }"},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":"                if (taskType.equals(\"T\") || taskType.equals(\"E\") || taskType.equals(\"D\")) {"},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"                    if (taskDetails[1].equals(\"1\")) {"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"                        newTask.markAsDone();"},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"                    }"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"                    tasks.add(newTask);"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"            return tasks;"},{"lineNumber":112,"author":{"gitId":"kaixiangtay"},"content":"        } catch (IOException ex) {"},{"lineNumber":113,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.LOADING_ERROR, \"\");"},{"lineNumber":114,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":116}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":" * Ui class to handle interaction and display of Duke Bot program interface in the command line"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    private final Scanner sc;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    private static final String BORDER \u003d \"\\t___________________________________\\n\";"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * Ui class constructor"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"        greetUser();"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * Reads user input"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * @return User input in String format"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    public String nextCommand() {"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        return sc.nextLine();"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    private void greetUser() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        String output \u003d \" Hello! I\u0027m Duke\\n\" + \"\\t What can I do for you?\";"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        display(output);"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     * Displays response message back to the user in the command line"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    public void display(String message) {"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        System.out.println(BORDER + \"\\t\" + message + \"\\n\" + BORDER);"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":40}},{"path":"src/main/java/duke/command/AddTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.*;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.*;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":" * AddTask handles the addition of event, deadline and todo tasks to the list only"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"public class AddTask extends Command {"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * AddTask Constructor"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     * @param command Task name"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandDetails Task details"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public AddTask(String command, String commandDetails) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d command;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d commandDetails;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    private void handleNewTask(TaskList taskList) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        Task newTask \u003d null;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \" Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        switch (commandType) {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        case \"event\":"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"            formatDateTime();"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Event(this.commandDetails,"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"                    LocalDate.parse(this.dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        case \"deadline\":"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            formatDateTime();"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new Deadline(this.commandDetails,"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"                    LocalDate.parse(this.dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        case \"todo\":"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new ToDo(this.commandDetails);"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        taskList.add(newTask);"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        if (newTask !\u003d null) {"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            this.outputMessage +\u003d \"\\t  \" + newTask.toString() + \"\\n\\t Now you have \""},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"                    + taskList.size() + \" tasks in the list.\";"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    private void formatDateTime() throws DukeException {"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"        String[] result;"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"        if (commandType.equals(\"event\")) {"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d commandDetails.trim().split(\" /at \");"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            result \u003d commandDetails.trim().split(\" /by \");"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"        this.dateTime \u003d result[1];"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"        this.commandDetails \u003d result[0];"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"        if (!validDateTime(this.dateTime)) {"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_DATETIME, \"\");"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"    private boolean validDateTime(String dateTime) {"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"            LocalDate.parse(dateTime, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DateTimeParseException ex) {"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"            return false;"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":"     * Adds task to TaskList, save the updated TaskList into data file and output message to the command line"},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the input is invalid date format"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"        handleNewTask(tasks);"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(this.outputMessage);"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"     * @return True"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":111}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" * Abstract command class that can be inherited by various commands"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    protected String commandType;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    protected String commandDetails;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    protected int index;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    protected String dateTime;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    protected String outputMessage;"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * Used for testing in Junit"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @return Command name, details of task and date (when applicable)"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public String getTaskDetails() {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"%s %s %s\", commandType, commandDetails, dateTime);"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     * Execute the command accordingly"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If there is an invalid input value from the user"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @return Boolean result (true or false)"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    public abstract boolean continueInput();"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":43}},{"path":"src/main/java/duke/command/DeleteTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.*;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * DeleteTask handles the deletion of event, deadline and todo tasks to the list only"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class DeleteTask extends Command {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * DeleteTask Constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Integer index on the display list in command line"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public DeleteTask(String commandType, int index) {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d String.valueOf(index);"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d index;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private void handleDeleteTask(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        Task deleteTask \u003d taskList.get(index - 1);"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        taskList.remove(deleteTask);"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \"Noted. I\u0027ve removed this task: \\n\" + \"\\t  \" + deleteTask.toString()"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"                + \"\\n\\t Now you have \" + taskList.size() + \" tasks in the list.\";"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * Delete selected task from the TaskList, save the updated TaskList into file and output message to command line"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the integer input is out of list range (negative, 0 or greater than TaskList size)"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        if (index \u003c\u003d 0 || index \u003e tasks.size()) {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        handleDeleteTask(tasks);"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(outputMessage);"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     * @return True"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":63}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.*;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" * DoneCommand handles the marking of tasks as done status in the list only"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * DoneCommand Constructor"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Integer index on the display list in command line"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public DoneCommand(String commandType, int index) {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d String.valueOf(index);"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d index;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private void markDoneTask(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        Task doneTask \u003d taskList.get(this.index - 1);"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        doneTask.markAsDone();"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \" Nice! I\u0027ve marked this task as done:\\n\" + \"\\t  \" + doneTask.toString();"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     * Mark selected task as done status from the TaskList,"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * Save the updated TaskList into file and output message to command line"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the integer input is out of list range (negative, 0 or greater than TaskList size)"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        if (index \u003c\u003d 0 || index \u003e tasks.size()) {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        markDoneTask(tasks);"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"        storage.saveData(tasks);"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(outputMessage);"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     * @return True"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":63}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" * ExitCommand handles the termination of the Duke Bot program"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * ExitCommand Constructor"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public ExitCommand(String commandType) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     * Output message to the command line"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException If the input is invalid date format"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage)  {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d \" Bye. Hope to see you again soon!\";"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(outputMessage);"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"     * @return False"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        return false;"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":50}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" * FindCommand handles the filtering of tasks in the list that matches the keyword given by the user only"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * FindCommand Constructor"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandDetails Task details"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    public FindCommand(String commandType, String commandDetails) {"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d commandDetails;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    private void retrieveMatchingTasks(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\" Here are the matching tasks in your list:\");"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        int index \u003d 0;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d taskList.size(); num++) {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d taskList.get(num - 1);"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            String description \u003d currentTask.getDescription();"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            if(ignoreCase(description, this.commandDetails)) {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"                index++;"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"                currText.append(\"\\n\\t \").append(index).append(\".\").append(currentTask.toString());"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d currText.toString();"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    private boolean ignoreCase(String string, String subString) {"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"        return string.toLowerCase().contains(subString.toLowerCase());"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"     * Find a subset of tasks from the TaskList given a keyword input from the user and"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"     * Display the result as output message in the command line"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        retrieveMatchingTasks(tasks);"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(outputMessage);"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"     * @return True"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":71}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.Storage;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":" * ListCommand handles the retrieval of all the tasks in the TaskList as requested by the user"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * ListCommand Constructor"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param commandType Task name"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public ListCommand(String commandType) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super.commandType \u003d commandType;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        super.commandDetails \u003d \"\";"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        super.dateTime \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        super.outputMessage \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        // index is -1 because it is only used in done and delete tasks"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        super.index \u003d -1;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    private void retrieveList(TaskList taskList) {"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\" Here are the tasks in your list:\");"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d taskList.size(); num++) {"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d taskList.get(num - 1);"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            currText.append(\"\\n\\t \").append(num).append(\".\").append(currentTask.toString());"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.outputMessage \u003d currText.toString();"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve all the tasks from the TaskList given a keyword input from the user and"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * Output the whole TaskList as message to the command line"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks TaskList"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @param ui Instance of Ui"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     * @param storage Instance of Storage"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        retrieveList(tasks);"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"        ui.display(outputMessage);"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"     * Determines if whether the Duke Bot should continue processing the user input"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     * @return True"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"    public boolean continueInput() {"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        return true;"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":60}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * DukeException class to handle various types of exception in DukeBot"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    protected final ExceptionType typeException;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    protected final String taskType;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DukeException"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * @param typeException Type of exception caught by the DukeBot"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * @param taskType Type of task"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    public DukeException(ExceptionType typeException, String taskType) {"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"        this.typeException \u003d typeException;"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"     * A custom error message will be generated depending on exception type"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     * @return Error message"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    public String getMessage() {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"        String errorMsg \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"        switch (this.typeException) {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_INPUT:"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_INTEGER:"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The integer value is invalid (negative, 0 or out of task list range) :-(\";"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_DATETIME:"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Invalid date has been detected :-( \" +"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"                    \"Pls key in a valid date in MMM dd yyyy format (i.e. Oct 15 2019) !!!\";"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        case BLANK_DESCRIPTION:"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The description of a \" + this.taskType +"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"                    \" cannot be empty :-(\";"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"        case LOADING_ERROR:"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\";"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        case SAVING_ERROR:"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment :-( \" +"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"                    \"Pls kindly try again later !!!\";"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        case INVALID_FILE_CONFIGURATION:"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"            errorMsg \u003d \"☹ OOPS!!! Unfortunately, file configuration is not working at the moment :-( \" +"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"                    \"Pls restart (exit and start again) the Duke Bot !!!\";"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        default:"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"        return errorMsg;"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":62}},{"path":"src/main/java/duke/exception/ExceptionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * Enum class which consists of the different types of exception"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public enum ExceptionType {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    BLANK_DESCRIPTION, INVALID_INTEGER, INVALID_INPUT, INVALID_DATETIME, LOADING_ERROR, SAVING_ERROR,"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    INVALID_FILE_CONFIGURATION"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":9}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * Deadline class to handle tasks that are need to be done before a specific date/time"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    protected final LocalDate by;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DeadLine class"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param by Specific date/time to complete the task"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public Deadline(String description, LocalDate by) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        this.by \u003d by;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type, description and deadline of tasks in Duke.txt"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the task deadline information"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"D | %s\", super.formatTask());"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and deadline of task"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the task deadline information"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * Event class to handle tasks that starts at a specific date/time and ends at a specific date/time"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    protected final LocalDate at;"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Event class"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     * @param at Starts and ends at specific date/time to complete the task"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public Event(String description, LocalDate at) {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type, description and timeframe of tasks in Duke.txt"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the Event details"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"E | %s\", super.formatTask());"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and timeframe of tasks"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the Event details"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + this.at.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\")) + \")\";"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":42}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * Task class created when user inputs todo, event, deadline"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    protected final String description;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Task class"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * Set state of task as done once the task is completed"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public void markAsDone() {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the status of task"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     * @return Cross if task is marked as completed, empty string if incomplete"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    public String getStatusIcon() {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        return (this.isDone ? \"\\u2718\" : \" \");"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the description of task"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format of task description"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"    public String getDescription() {"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        return this.description;"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"     * Format the task into custom format before saving into data file"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"%s | %s\", this.isDone ? \"1\" : \"0\", this.description);"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"     * Format task status icon and task details as string"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"     * @return Task status icon and task details"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":61}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":" * TaskList class which keeps tracks all the tasks in a list"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     * TaskList class constructor"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * TaskList overload constructor"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @param tasks Consists of all the tasks added into the list as given by the user input"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * Adds task to the list of tasks"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"     * @param task Task to be added"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    public void add(Task task) {"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.add(task);"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"     * Removes selected task from the list of tasks"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"     * @param task Task to be removed"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"    public void remove(Task task) {"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"        this.tasks.remove(task);"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"     * Obtains the size of the TaskList"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"     * @return TaskList Size"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"    public int size() {"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"        return tasks.size();"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"     * Find the task from TaskList"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"     * @param index Index of task in the TaskList (starting from 0)"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"     * @return Task as requested by the Duke Bot"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"    public Task get(int index) {"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"        return this.tasks.get(index);"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":64}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * ToDo class to handle tasks without any deadline (no date /time)"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for ToDo class"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param description Details of the task"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    public ToDo(String description) {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * Displays simplified version of task type and description in Duke.txt"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the ToDo task"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    public String formatTask() {"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"T | %s\", super.formatTask());"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type and task description"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format of ToDO task"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":35}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"import org.junit.Test;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"public class ParserTest {"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    public void parseTest() throws DukeException {"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"todo finish english report \","},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"todo finish english report\").getTaskDetails());"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"list  \", Parser.parse(\"list\").getTaskDetails());"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"bye  \", Parser.parse(\"bye\").getTaskDetails());"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"done 5 \", Parser.parse(\"done 5\").getTaskDetails());"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"delete 3 \", Parser.parse(\"delete 3\").getTaskDetails());"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"deadline finish Duke Project /by Oct 10 2019 \","},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"deadline finish Duke Project /by Oct 10 2019\").getTaskDetails());"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        assertEquals(\"event project meeting /at Jan 27 2021 \","},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"                Parser.parse(\"event project meeting /at Jan 27 2021\").getTaskDetails());"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":23}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class StorageTest {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    public void loadStorage() {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\")).loadData();"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.home\")).loadData();"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") +\"/data/DukeBot.txt\").loadData();"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! The file cannot be loaded and a new file will be created !!!\","},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"                    ex.getMessage());"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").loadData();"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Successfully loaded file!\");"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file configuration is not working at the moment \""},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls restart (exit and start again) the Duke Bot !!!\", ex.getMessage());"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    @Test"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"    public void saveStorage() {"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\")).saveData(new TaskList());"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.home\")).saveData(new TaskList());"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") +\"/data/DukeBot.txt\").saveData(new TaskList());"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Fail to load file!\");"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"            new Storage(System.getProperty(\"user.dir\") + \"/data/Duke.txt\").saveData(new TaskList());"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":"            System.out.println(\"Successfully loaded file!\");"},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"        } catch (DukeException ex) {"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"            assertEquals(\"☹ OOPS!!! Unfortunately, file saving to Duke.txt is not working at the moment \""},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"                    + \":-( Pls kindly try again later !!!\", ex.getMessage());"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":79}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"todo buy book"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"deadline sell book /by Sunday"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"deadline do homework /by June 6th"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"blah"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"done -3"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"delete 0"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"bye"}],"authorContributionMap":{"kaixiangtay":14}}]
