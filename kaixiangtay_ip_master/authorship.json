[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * Deadline class to handle tasks that are need to be done before a specific date/time"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"public class Deadline extends Task {"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"    protected final String by;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DeadLine class"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     * @param description details of the task"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param by specific date/time to complete the task"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        this.by \u003d by;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and deadline of task"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the task deadline information"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":25}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":" * Driver class for Duke project"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"        DukeBot dukeBot \u003d new DukeBot();"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"            while(true) {"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"                try {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"                    dukeBot.echo(sc.nextLine());"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"                }"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"                catch(DukeException ex){"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"                    dukeBot.outputMessage(ex.getMessage());"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"                }"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    }"}],"authorContributionMap":{"kaixiangtay":16,"-":4}},{"path":"src/main/java/DukeBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"import java.util.Arrays;"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":" * DukeBot that manages user input, recognise and response to inputs accordingly"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":" * Commands that are available: list, bye, done, delete, todo, delete, event, deadline"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"public class DukeBot {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"    private static final String BORDER \u003d \"\\t___________________________________\\n\";"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    private final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    private int numTasks;"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    private String output;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"    private boolean continueInput;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DukeBot class"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * Configuration for DukeBot to welcome the user"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    public DukeBot() {"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"        this.continueInput \u003d true;"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        this.output \u003d \" Hello! I\u0027m Duke\\n\" + \"\\t What can I do for you?\";"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"        outputMessage(this.output);"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * Bot will carry out the different process depending on the user input"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     * @param input provided by the user"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException if the user enters an invalid input"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    public void echo(String input) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"        String[] commandStr \u003d input.trim().split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"        String taskAction \u003d commandStr[0];"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"        switch (taskAction) {"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"            case \"bye\":"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"                this.output \u003d \" Bye. Hope to see you again soon!\";"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"                this.continueInput \u003d false;"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"            case \"list\":"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"                this.output \u003d retrieveList();"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"            case \"done\":"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"                markDoneTask(Integer.parseInt(commandStr[1]));"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"            case \"todo\":"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"            case \"deadline\":"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"            case \"event\":"},{"lineNumber":49,"author":{"gitId":"kaixiangtay"},"content":"                this.numTasks++;"},{"lineNumber":50,"author":{"gitId":"kaixiangtay"},"content":"                handleNewTask(taskAction, commandStr);"},{"lineNumber":51,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":52,"author":{"gitId":"kaixiangtay"},"content":"            case \"delete\":"},{"lineNumber":53,"author":{"gitId":"kaixiangtay"},"content":"                this.numTasks--;"},{"lineNumber":54,"author":{"gitId":"kaixiangtay"},"content":"                handleDeleteTask(Integer.parseInt(commandStr[1]));"},{"lineNumber":55,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":56,"author":{"gitId":"kaixiangtay"},"content":"            default:"},{"lineNumber":57,"author":{"gitId":"kaixiangtay"},"content":"                throw new DukeException(ExceptionType.INVALID_INPUT, \"\");"},{"lineNumber":58,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kaixiangtay"},"content":"        outputMessage(this.output);"},{"lineNumber":60,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":62,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"kaixiangtay"},"content":"     * Return a response from the input of user"},{"lineNumber":64,"author":{"gitId":"kaixiangtay"},"content":"     * @param message consists of the return output to be displayed to the user"},{"lineNumber":65,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"kaixiangtay"},"content":"    public void outputMessage(String message) {"},{"lineNumber":67,"author":{"gitId":"kaixiangtay"},"content":"        System.out.println(BORDER + \"\\t\" + message + \"\\n\" + BORDER);"},{"lineNumber":68,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":69,"author":{"gitId":"kaixiangtay"},"content":"        if(!this.continueInput) {"},{"lineNumber":70,"author":{"gitId":"kaixiangtay"},"content":"            System.exit(0);"},{"lineNumber":71,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":74,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"kaixiangtay"},"content":"     * Indicated a given task as done among the list of tasks"},{"lineNumber":76,"author":{"gitId":"kaixiangtay"},"content":"     * @param index provided when user enters an input like \"done 2\" to mark 2nd task on the list as done"},{"lineNumber":77,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException if the integer value entered by user is negative, 0 or out of list range"},{"lineNumber":78,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kaixiangtay"},"content":"    public void markDoneTask(int index) throws DukeException{"},{"lineNumber":80,"author":{"gitId":"kaixiangtay"},"content":"        if (index \u003c\u003d 0 || index \u003e this.numTasks) {"},{"lineNumber":81,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":82,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":83,"author":{"gitId":"kaixiangtay"},"content":"            Task doneTask \u003d this.taskList.get(index - 1);"},{"lineNumber":84,"author":{"gitId":"kaixiangtay"},"content":"            doneTask.markAsDone();"},{"lineNumber":85,"author":{"gitId":"kaixiangtay"},"content":"            this.output \u003d \" Nice! I\u0027ve marked this task as done:\\n\" + \"\\t  \" + doneTask.toString();"},{"lineNumber":86,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":89,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"kaixiangtay"},"content":"     * Iterating through the list of tasks and numbering the tasks"},{"lineNumber":91,"author":{"gitId":"kaixiangtay"},"content":"     * @return the list of tasks formatted in String"},{"lineNumber":92,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"kaixiangtay"},"content":"    public String retrieveList() {"},{"lineNumber":94,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder currText \u003d new StringBuilder(\" Here are the tasks in your list:\");"},{"lineNumber":95,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":96,"author":{"gitId":"kaixiangtay"},"content":"        for (int num \u003d 1; num \u003c\u003d this.taskList.size(); num++) {"},{"lineNumber":97,"author":{"gitId":"kaixiangtay"},"content":"            Task currentTask \u003d this.taskList.get(num - 1);"},{"lineNumber":98,"author":{"gitId":"kaixiangtay"},"content":"            currText.append(\"\\n\\t \").append(num).append(\".\").append(currentTask.toString());"},{"lineNumber":99,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"kaixiangtay"},"content":"        return currText.toString();"},{"lineNumber":101,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":103,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"kaixiangtay"},"content":"     * Manage the new task of todo, event or deadline types"},{"lineNumber":105,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException if the task description is empty"},{"lineNumber":106,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"kaixiangtay"},"content":"    public void handleNewTask(String taskAction, String[] commandStr) throws DukeException {"},{"lineNumber":108,"author":{"gitId":"kaixiangtay"},"content":"        Task newTask;"},{"lineNumber":109,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder description \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitId":"kaixiangtay"},"content":"        List\u003cString\u003e taskDetails \u003d Arrays.asList(commandStr);"},{"lineNumber":111,"author":{"gitId":"kaixiangtay"},"content":"        this.output \u003d \" Got it. I\u0027ve added this task: \\n\";"},{"lineNumber":112,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":113,"author":{"gitId":"kaixiangtay"},"content":"        if (!taskAction.equals(\"todo\")) {"},{"lineNumber":114,"author":{"gitId":"kaixiangtay"},"content":"            String[] result \u003d handleEventDeadLine(taskDetails);"},{"lineNumber":115,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":116,"author":{"gitId":"kaixiangtay"},"content":"            if (taskAction.equals(\"event\")) {"},{"lineNumber":117,"author":{"gitId":"kaixiangtay"},"content":"                newTask \u003d new Event(result[0], result[1]);"},{"lineNumber":118,"author":{"gitId":"kaixiangtay"},"content":"            } else {"},{"lineNumber":119,"author":{"gitId":"kaixiangtay"},"content":"                newTask \u003d new Deadline(result[0], result[1]);"},{"lineNumber":120,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":121,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":122,"author":{"gitId":"kaixiangtay"},"content":"            for (int num \u003d 1; num \u003c taskDetails.size(); num++) {"},{"lineNumber":123,"author":{"gitId":"kaixiangtay"},"content":"                String curr \u003d taskDetails.get(num);"},{"lineNumber":124,"author":{"gitId":"kaixiangtay"},"content":"                description.append(curr).append(\" \");"},{"lineNumber":125,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"kaixiangtay"},"content":"            newTask \u003d new ToDo(description.toString());"},{"lineNumber":127,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":128,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":129,"author":{"gitId":"kaixiangtay"},"content":"        if (newTask.getDescription().equals(\"\")) {"},{"lineNumber":130,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.BLANK_DESCRIPTION, taskAction);"},{"lineNumber":131,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":132,"author":{"gitId":"kaixiangtay"},"content":"            this.taskList.add(newTask);"},{"lineNumber":133,"author":{"gitId":"kaixiangtay"},"content":"            this.output +\u003d \"\\t  \" + newTask.toString() + \"\\n\\t Now you have \""},{"lineNumber":134,"author":{"gitId":"kaixiangtay"},"content":"                    + this.numTasks + \" tasks in the list.\";"},{"lineNumber":135,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":138,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"kaixiangtay"},"content":"     * Sub-function to manage the new task of event or deadline types only"},{"lineNumber":140,"author":{"gitId":"kaixiangtay"},"content":"     * @return the output string array of description and date/time as required"},{"lineNumber":141,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"kaixiangtay"},"content":"    public String[] handleEventDeadLine(List\u003cString\u003e taskDetails) {"},{"lineNumber":143,"author":{"gitId":"kaixiangtay"},"content":"        int num;"},{"lineNumber":144,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder description \u003d new StringBuilder();"},{"lineNumber":145,"author":{"gitId":"kaixiangtay"},"content":"        StringBuilder dateTime \u003d new StringBuilder();"},{"lineNumber":146,"author":{"gitId":"kaixiangtay"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":147,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":148,"author":{"gitId":"kaixiangtay"},"content":"        for (num \u003d 1; num \u003c taskDetails.size(); num++) {"},{"lineNumber":149,"author":{"gitId":"kaixiangtay"},"content":"            String curr \u003d taskDetails.get(num);"},{"lineNumber":150,"author":{"gitId":"kaixiangtay"},"content":"            if (curr.contains(\"/\")) {"},{"lineNumber":151,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":152,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"kaixiangtay"},"content":"            description.append(curr).append(\" \");"},{"lineNumber":154,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"kaixiangtay"},"content":"        for (int i \u003d num + 1; i \u003c taskDetails.size(); i++) {"},{"lineNumber":156,"author":{"gitId":"kaixiangtay"},"content":"            dateTime.append(taskDetails.get(i));"},{"lineNumber":157,"author":{"gitId":"kaixiangtay"},"content":"            if (i \u003c taskDetails.size() - 1) {"},{"lineNumber":158,"author":{"gitId":"kaixiangtay"},"content":"                dateTime.append(\" \");"},{"lineNumber":159,"author":{"gitId":"kaixiangtay"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"kaixiangtay"},"content":"        result[0] \u003d description.toString();"},{"lineNumber":162,"author":{"gitId":"kaixiangtay"},"content":"        result[1] \u003d dateTime.toString();"},{"lineNumber":163,"author":{"gitId":"kaixiangtay"},"content":"        return result;"},{"lineNumber":164,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":165,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":166,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":167,"author":{"gitId":"kaixiangtay"},"content":"     * Delete the task as entered by the user input by removing the task from the list of tasks"},{"lineNumber":168,"author":{"gitId":"kaixiangtay"},"content":"     * @throws DukeException if the integer value entered by user is negative, 0 or out of list range"},{"lineNumber":169,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":170,"author":{"gitId":"kaixiangtay"},"content":"    public void handleDeleteTask(int index) throws DukeException {"},{"lineNumber":171,"author":{"gitId":"kaixiangtay"},"content":"        if (index \u003c\u003d 0 || index \u003e this.numTasks) {"},{"lineNumber":172,"author":{"gitId":"kaixiangtay"},"content":"            throw new DukeException(ExceptionType.INVALID_INTEGER, \"\");"},{"lineNumber":173,"author":{"gitId":"kaixiangtay"},"content":"        } else {"},{"lineNumber":174,"author":{"gitId":"kaixiangtay"},"content":"            Task deleteTask \u003d this.taskList.get(index - 1);"},{"lineNumber":175,"author":{"gitId":"kaixiangtay"},"content":"            this.taskList.remove(deleteTask);"},{"lineNumber":176,"author":{"gitId":"kaixiangtay"},"content":"            this.output \u003d \"Noted. I\u0027ve removed this task: \\n\" + \"\\t  \" + deleteTask.toString()"},{"lineNumber":177,"author":{"gitId":"kaixiangtay"},"content":"                    + \"\\n\\t Now you have \" + this.numTasks + \" tasks in the list.\";"},{"lineNumber":178,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":179,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":180,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":180}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * DukeException class to handle various types of exception in DukeBot"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"    protected final ExceptionType typeException;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"    protected final String taskType;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for DukeException"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param typeException type of exception caught by the DukeBot"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * @param taskType type of task"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    public DukeException(ExceptionType typeException, String taskType) {"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        super();"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        this.typeException \u003d typeException;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     * A custom error message will be generated depending on exception type"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     * @return error message"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"    public String getMessage() {"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"        String errorMsg;"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"        switch (this.typeException) {"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"            case INVALID_INPUT:"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"                errorMsg \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"            case INVALID_INTEGER:"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":"                errorMsg \u003d \"☹ OOPS!!! The integer value is invalid (negative, 0 or out of task list range)!!!\";"},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"            default:"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"                errorMsg \u003d \"☹ OOPS!!! The description of a \" + this.taskType +"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"                        \" cannot be empty.\";"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"                break;"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":"        return errorMsg;"},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":41}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * Event class to handle tasks that starts at a specific date/time and ends at a specific date/time"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"    protected final String at;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Event class"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param description details of the task"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     * @param at starts and ends at specific date/time to complete the task"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    public Event(String description, String at) {"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"        this.at \u003d at;"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type, description and timeframe of tasks"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format regarding the Event details"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":26}},{"path":"src/main/java/ExceptionType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * Enum class which consists of the different types of exception"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"public enum ExceptionType {"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"    BLANK_DESCRIPTION, INVALID_INTEGER, INVALID_INPUT"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":6}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * Task class created when user inputs todo, event, deadline"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"    protected final String description;"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for Task class"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"     * @param description details of the task"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the status of task"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"     * @return Cross if task is marked as completed, empty string if incomplete"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"    public String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"kaixiangtay"},"content":"        return (this.isDone ?\"\\u2718\" : \" \");"},{"lineNumber":23,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":25,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"kaixiangtay"},"content":"     * Retrieve the details of task"},{"lineNumber":27,"author":{"gitId":"kaixiangtay"},"content":"     * @return details of the task in String format"},{"lineNumber":28,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kaixiangtay"},"content":"    public String getDescription() {"},{"lineNumber":30,"author":{"gitId":"kaixiangtay"},"content":"        return this.description;"},{"lineNumber":31,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":33,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"kaixiangtay"},"content":"     * Set state of task as done once the task is completed"},{"lineNumber":35,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"kaixiangtay"},"content":"    public void markAsDone() {"},{"lineNumber":37,"author":{"gitId":"kaixiangtay"},"content":"        this.isDone \u003d true;"},{"lineNumber":38,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":40,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kaixiangtay"},"content":"     * Format task status icon and task details as string"},{"lineNumber":42,"author":{"gitId":"kaixiangtay"},"content":"     * @return task status icon and task details"},{"lineNumber":43,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":46,"author":{"gitId":"kaixiangtay"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), this.description);"},{"lineNumber":47,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":48}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":" * ToDo class to handle tasks without any deadline (no date /time)"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":" */"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"     * Constructor for ToDo class"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"     * @param description details of the task"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"    public ToDo(String description) {"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":""},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"     * Displays task type and task description"},{"lineNumber":15,"author":{"gitId":"kaixiangtay"},"content":"     * @return String format of ToDO task"},{"lineNumber":16,"author":{"gitId":"kaixiangtay"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kaixiangtay"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kaixiangtay"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"kaixiangtay"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"kaixiangtay"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kaixiangtay"},"content":"}"}],"authorContributionMap":{"kaixiangtay":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kaixiangtay"},"content":"todo buy book"},{"lineNumber":2,"author":{"gitId":"kaixiangtay"},"content":"deadline sell book /by Sunday"},{"lineNumber":3,"author":{"gitId":"kaixiangtay"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"kaixiangtay"},"content":"deadline do homework /by June 6th"},{"lineNumber":5,"author":{"gitId":"kaixiangtay"},"content":"blah"},{"lineNumber":6,"author":{"gitId":"kaixiangtay"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":8,"author":{"gitId":"kaixiangtay"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":10,"author":{"gitId":"kaixiangtay"},"content":"done -3"},{"lineNumber":11,"author":{"gitId":"kaixiangtay"},"content":"delete 1"},{"lineNumber":12,"author":{"gitId":"kaixiangtay"},"content":"delete 0"},{"lineNumber":13,"author":{"gitId":"kaixiangtay"},"content":"list"},{"lineNumber":14,"author":{"gitId":"kaixiangtay"},"content":"bye"}],"authorContributionMap":{"kaixiangtay":14}}]
