[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    mainClassName \u003d \"dukebody.Duke\""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":61}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"User guide for the use of task management chatbot dogeDuke."},{"lineNumber":3,"author":{"gitId":"-"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"### LogIn"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `USERNAME [/read_from:DIRECTORY_PATH]`"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"- Sets up the username for dogeDuke to address the user and reads any stored data from "},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"  USERNAME.txt in the DIRECTORY_PATH."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"- Where DIRECTORY_PATH is invalid or unspecified, defaults to userdata in the "},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"  current working directory."},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"- DogeDuke greets the user and prompts for subsequent actions post-set up."},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"`A0183450J /read_from:custom`"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"- Sets username as A0183450J and reads the stored data from custom/A0183450J.txt file."},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"- DogeDuke greets \"HENLO A0183450J ...\""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"### Listing All Tasks"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `list`"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"- Lists information of all tasks in queue regardless of their current state."},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"- Task information include the type of task (T: todo, E: event, D: deadline), whether the "},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"  task has been done (marked by X), the description of the task, datetime of creation and "},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"  other information."},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"- Responds to user with banter when there are no tasks in the queue."},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"### Listing Undone Tasks"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `undone`"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"- Lists information of outstanding undone tasks in queue."},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"- Task information as per the **list** command."},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"- Responds to user with praise when there are no outstanding tasks in the queue."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"### Search Tasks by Task Description"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `find SEARCH TEXT PHRASE`"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"- Lists the matched tasks with the SEARCH TEXT PHRASE in their task description."},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"- Task information as per the **list** command."},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"`find hidden task`"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"- Returns a list of tasks with \"hidden task\" as a substring in the task descriptions."},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"### Mark Task as Done"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `done INDEX`"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"- Marks the task at the specified INDEX (one-based indexing) as done."},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"- Shows the task that was marked done as per the **list** command."},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"`done 1`"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"- Marks the task at INDEX 1 as done."},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"### Removing Task from Queue"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `remove INDEX` or `delete INDEX`"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"- Removes the task at the specified INDEX (one-based indexing) from the queue, resetting "},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"  the indices of the remaining tasks as a consequence."},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"- Shows the deleted task information as per the **list** command."},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"`remove 1`"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"- Removes the task at INDEX 1 from the queue. INDEX 1 now refers to the next task at the"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"  previous INDEX 2."},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"### Adding Todo Task to Queue"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `todo TODO DESCRIPTION`"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"- Adds a todo task (undone) to the queue with the task description as the specified TODO "},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"  DESCRIPTION."},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"- Shows the newly added task information as per the **list** command."},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"`todo IP increments`"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"- Adds a todo task with the description \"IP increments\", in an undone state and creation"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"  datetime as the current datetime."},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"### Adding Event Task to Queue"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `event EVENT DESCRIPTION /at DATETIME`"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"- Adds an event task (undone) to the queue with the task description as the specified"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"  EVENT DESCRIPTION and the timing of the event as the DATETIME."},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"- The format of the DATETIME argument must be YYYY-MM-DD HHmm."},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"- Shows the newly added task information as per the **list** command."},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"`event LNY Reunion Dinner /at 2021-02-11 1830`"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"- Adds an event task with the description \"LNY Reunion Dinner\", in an undone state,"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"  at 11 Feb 2021 6:30pm and creation datetime at current datetime."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"### Adding Deadline Task to Queue"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `event DEADLINE DESCRIPTION /by DATETIME`"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"- Adds a deadline task (undone) to the queue with the task description as the specified"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"  DEADLINE DESCRIPTION and the deadline timing as the DATETIME."},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"- The format of the DATETIME argument must be YYYY-MM-DD HHmm."},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"- Shows the newly added task information as per the **list** command."},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"#### Example Usage:"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"`deadline IP Submission /by 2021-02-19 2359`"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"#### Expected Outcome:"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"- Adds a deadline task with the description \"IP Submission\", in an undone state,"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"  to be done by 19 Feb 2021 11:59pm and creation datetime at current datetime."},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"### Exiting the App"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"#### Command: `bye`"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"- Update tasks to the database and exits the app."},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"- Where DIRECTORY_PATH/USERNAME.txt as per the LogIn setup does not exist, DogeDuke creates"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"  the directory and file."},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"  "},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"## Example Use of DogeDuke"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"- App start up and setting up of user"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"![startup.png](startup.png)  "},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"- Adding an event task"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"![add_event.png](add_event.png)"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"- Listing tasks"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"![list.png](list.png)"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"- marking as done"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"![markdone.png](markdone.png)"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"- listing undone tasks"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"![undone_tasks.png](undone_tasks.png)"}],"authorContributionMap":{"Jacob-Pang":118,"-":11}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":":init"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":":end"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":":omega"}],"authorContributionMap":{"Jacob-Pang":103}},{"path":"src/main/java/DukeBody/DataBase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * represents a database to query from and update to"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class DataBase {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public static class LegacyDataException extends Exception {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        public LegacyDataException (Exception e) {"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"! Error in reading previously saved tasks due to unresolved differences in \""},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"Legacy parse formats: \" + e.getMessage());"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    Path dirPath;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public DataBase (String path) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        dirPath \u003d Paths.get(path);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    // default constructor set child directory in current working directory as path."},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public DataBase () {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this(Paths.get(\"\").toAbsolutePath().toString() + File.separator"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                + \"userdata\");"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * returns a list of tasks from stored userdata at the directory"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * path associated with this DataBase object. The data is stored"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * as: directory_path\\\\username.txt"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * @return  TaskList object containing the list of tasks stored"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     *          previously. TaskList is empty is it is a new user."},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList queryTasks (String username) throws DataBase.LegacyDataException {"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"            File userdata \u003d new File(dirPath.toAbsolutePath() + File.separator"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"                    + username + \".txt\");"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"            Scanner scanner \u003d new Scanner(userdata);"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"                tasks.add(Parser.commandToTask(scanner.nextLine()));"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"            scanner.close();"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException E) {"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            // userdata not found (new user: no action)"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (Duke.UnrecognisedCommandException"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"                | Task.EmptyDescriptionException e) {"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"            throw new LegacyDataException(e);"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        return tasks;"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * Saves the task to the stored database location determined by the dirpath"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     * member and the username."},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @param username  the username which doubles as the file name."},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * @param tasks     the list of tasks to save."},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws IOException"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateTasks (String username, TaskList tasks) throws IOException {"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Files.exists(dirPath)) {"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"            Files.createDirectories(dirPath);"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        assert Files.exists(dirPath): \"database directory not found on update.\";"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        FileWriter writer \u003d new FileWriter(dirPath.toAbsolutePath()"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"                + File.separator + username + \".txt\");"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: tasks) {"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            writer.write(Parser.taskToCommand(task) + \"\\n\");"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        writer.close();"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     * Changes the directory path associated with the database connection."},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     * @param path      the new path to store and read tasks from."},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws java.nio.file.InvalidPathException"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"    public void changePath (String path) throws java.nio.file.InvalidPathException {"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        dirPath \u003d Paths.get(path);"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":99}},{"path":"src/main/java/DukeBody/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.InvalidPathException;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import dukegui.MainApp;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import dukegui.MainWindow;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Deadline;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Event;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.ToDo;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static class ExpectedSubcommandException extends Exception  {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        public ExpectedSubcommandException (String expectedSubcommand) {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"doge cannot find subcommand: \" + expectedSubcommand"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"! very missing...\");"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public static class UnrecognisedCommandException extends Exception  {"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        public UnrecognisedCommandException (String command) {"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"?? doge confused very. no understand: \" + command);"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    String username \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    TaskList tasks;"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    DataBase connection \u003d new DataBase();"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    MainWindow mainWindow;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     * Checks if the user profile has been setup."},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * @return  boolean whether the user profile has been setup."},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasSetupUser() {"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        return username.length() \u003e 0;"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"     * Syncs duke with the main window in order to directly output"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"     * responses into the window dialog box."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * @param window    the main window to syn in the application."},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    public void syncWindow (MainWindow window) {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        mainWindow \u003d window;"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"     * Setups the user profile through the username. Loads any"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"     * previously saved tasks under the same alias from the"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"     * default database directory path."},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"     * @param input  the user alias used to setup the user profile."},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    public void userSetup (String input) {"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"            String[] commandBreakdown \u003d Parser.parseSubcommand(input, \"/read_from:\");"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"            username \u003d commandBreakdown[0];"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"            connection.changePath(commandBreakdown[1]);"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"HENLO \" + username + \", reading tasks from \""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"                    + commandBreakdown[1] + \" ...\");"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (InvalidPathException e) {"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"An invalid path was given to Doge! Connecting to default database ...\");"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (Duke.ExpectedSubcommandException e) {"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"            username \u003d input;"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"HENLO \" + username + \", reading tasks from secret database...\");"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"            tasks \u003d connection.queryTasks(username);"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"... very success! what can doge do for you now?\");"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (DataBase.LegacyDataException e) {"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"doge could not read userdata! previous tasks go brrrrrrrr...\");"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"sorry hooman, what can doge do for you now?\");"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"     * The duke logic to response and act on the user inputs from the"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"     * main window by recognition of specific commands and necessary"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"     * subcommands."},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * @param command   the entire user input from the main window"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"    public void respondToCommand (String command) {"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"        String[] subcommands \u003d command.split(\" \", 2);"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"        String[] commandBreakdown;"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"        Scanner scanner;"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        int taskNumber;"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"            switch (subcommands[0].trim().toLowerCase()) {"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                case \"bye\":"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"                    connection.updateTasks(username, tasks);"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(\"bye hooman, come back soon!\");"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.exit();"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"                case \"list\":"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"                    if (tasks.size() \u003e 0) {"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"                        mainWindow.dukeOutput(\"hooman has the following tasks:\");"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"                        outputTasks(tasks);"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"                    } else{"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"                        mainWindow.dukeOutput(\"hooman has no tasks... why tho\");"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"                case \"find\":"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.ExpectedSubcommandException(\"\u003csearch_text\u003e\");"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(\"sniff... sniff... I\u0027ve found these tasks hooman!\");"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"                    outputTasks(tasks.getMatchedTasks(subcommands[1].trim()));"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"                case \"undone\":"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"                    TaskList undoneTasks \u003d tasks.getUndoneTasks();"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"                    if (undoneTasks.size() \u003e 0) {"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                        mainWindow.dukeOutput(\"These are undone... so concern...\");"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                        outputTasks(undoneTasks);"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"                    } else {"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"                        mainWindow.dukeOutput(\"No more tasks! very speed. much wow\");"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"                case \"done\":"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.ExpectedSubcommandException(\"\u003ctask_number\u003e\");"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner \u003d new Scanner(subcommands[1]);"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"                    taskNumber \u003d scanner.nextInt() - 1;"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner.close();"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"                    tasks.get(taskNumber).markAsDone();"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(\"marked the task as done! yip yip.\");"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(tasks.get(taskNumber).getTaskInformation("},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"                            mainWindow.getDateFormat()));"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"                case \"delete\": // Fallthrough"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"                case \"remove\":"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"                         throw new Duke.ExpectedSubcommandException(\"\u003ctask_number\u003e\");"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner \u003d new Scanner(subcommands[1]);"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"                    taskNumber \u003d scanner.nextInt() - 1;"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner.close();"},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(\"removed the task! begone!\");"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.dukeOutput(tasks.remove(taskNumber).getTaskInformation("},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"                            mainWindow.getDateFormat()));"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"                case \"todo\":"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"                    tasks.add(new ToDo((subcommands.length \u003d\u003d 1) ? \"\" : subcommands[1].trim()));"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":"                    outputNewTask();"},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"                case \"deadline\":"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"                    commandBreakdown \u003d Parser.parseSubcommand(subcommands[1], \"/by\");"},{"lineNumber":169,"author":{"gitId":"Jacob-Pang"},"content":"                    tasks.add(new Deadline(commandBreakdown[0], Parser.parseDateTime("},{"lineNumber":170,"author":{"gitId":"Jacob-Pang"},"content":"                            commandBreakdown[1])));"},{"lineNumber":171,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":172,"author":{"gitId":"Jacob-Pang"},"content":"                    outputNewTask();"},{"lineNumber":173,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":174,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":175,"author":{"gitId":"Jacob-Pang"},"content":"                case \"event\":"},{"lineNumber":176,"author":{"gitId":"Jacob-Pang"},"content":"                    commandBreakdown \u003d Parser.parseSubcommand(subcommands[1], \"/at\");"},{"lineNumber":177,"author":{"gitId":"Jacob-Pang"},"content":"                    tasks.add(new Event(commandBreakdown[0], Parser.parseDateTime("},{"lineNumber":178,"author":{"gitId":"Jacob-Pang"},"content":"                            commandBreakdown[1])));"},{"lineNumber":179,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":180,"author":{"gitId":"Jacob-Pang"},"content":"                    outputNewTask();"},{"lineNumber":181,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":182,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":183,"author":{"gitId":"Jacob-Pang"},"content":"                default:"},{"lineNumber":184,"author":{"gitId":"Jacob-Pang"},"content":"                    throw new Duke.UnrecognisedCommandException(subcommands[0]);"},{"lineNumber":185,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":186,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (InputMismatchException e) {"},{"lineNumber":187,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"oh no, task number must be an integer!\");"},{"lineNumber":188,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":189,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"no such task number exists hooman... ?\");"},{"lineNumber":190,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {"},{"lineNumber":191,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(\"spectacular failure! doge cannot save tasks...\");"},{"lineNumber":192,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (Exception e) {"},{"lineNumber":193,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(e.getMessage());"},{"lineNumber":194,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":195,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":196,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":197,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":198,"author":{"gitId":"Jacob-Pang"},"content":"     * Responds to users the most recent task in the tasklist."},{"lineNumber":199,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"Jacob-Pang"},"content":"    private void outputNewTask () {"},{"lineNumber":201,"author":{"gitId":"Jacob-Pang"},"content":"        mainWindow.dukeOutput(\"added the task for hooman!\");"},{"lineNumber":202,"author":{"gitId":"Jacob-Pang"},"content":"        mainWindow.dukeOutput(tasks.get(tasks.size() - 1).getTaskInformation("},{"lineNumber":203,"author":{"gitId":"Jacob-Pang"},"content":"                mainWindow.getDateFormat()));"},{"lineNumber":204,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":206,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"Jacob-Pang"},"content":"     * Formats a list of tasks to output in the window dialog box."},{"lineNumber":208,"author":{"gitId":"Jacob-Pang"},"content":"     * @param tasks     the list of tasks."},{"lineNumber":209,"author":{"gitId":"Jacob-Pang"},"content":"     * @return          the formatted string to output."},{"lineNumber":210,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":211,"author":{"gitId":"Jacob-Pang"},"content":"    private void outputTasks (TaskList tasks) {"},{"lineNumber":212,"author":{"gitId":"Jacob-Pang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++ i) {"},{"lineNumber":213,"author":{"gitId":"Jacob-Pang"},"content":"            mainWindow.dukeOutput(i + 1 + \". \" + tasks.get(i).getTaskInformation("},{"lineNumber":214,"author":{"gitId":"Jacob-Pang"},"content":"                    mainWindow.getDateFormat()));"},{"lineNumber":215,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":216,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":217,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":218,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":219,"author":{"gitId":"Jacob-Pang"},"content":"     * Launches the main application"},{"lineNumber":220,"author":{"gitId":"Jacob-Pang"},"content":"     * @param args  variable arguments from CMD"},{"lineNumber":221,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":222,"author":{"gitId":"Jacob-Pang"},"content":"    public static void main(String[] args) {"},{"lineNumber":223,"author":{"gitId":"Jacob-Pang"},"content":"        Application.launch(MainApp.class, args);"},{"lineNumber":224,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":225,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":225}},{"path":"src/main/java/DukeBody/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Deadline;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Event;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.ToDo;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    // members"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    private static final String DELIMITER \u003d \" :: \";"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    private static final DateTimeFormatter DATETIME_PARSE_FORMAT \u003d DateTimeFormatter.ofPattern("},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        \"yyyy-MM-dd HHmm\");"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    // exception class"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public static class ParserDateTimeParseException extends Exception {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        public ParserDateTimeParseException () {"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"The datetime format must be:\\n\" + Parser.DATETIME_PARSE_FORMAT.toString());"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    // methods"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the string command representing the task information to be parsed."},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"     * @param task  the task object to create command for"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      the string command associated with the task object, and the"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     *              Parser delimiter and datetime parseFormat."},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public static String taskToCommand (Task task) {"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        return task.toCommand(Parser.DELIMITER, Parser.DATETIME_PARSE_FORMAT);"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the task object represented by a string command."},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * @param command   the string command to be parsed to derive the task information"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * @return          the task object associated with the string command."},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Duke.UnrecognisedCommandException"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public static Task commandToTask (String command) throws Duke.UnrecognisedCommandException,"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"            Task.EmptyDescriptionException {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        // format \u003d type :: state :: description :: createdTime :: others"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        String[] parsedCommand \u003d command.split(Parser.DELIMITER);"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        switch (parsedCommand[0]) {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"        case \"T\":"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            return new ToDo(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.DATETIME_PARSE_FORMAT));"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        case \"E\":"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"            return new Event(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.DATETIME_PARSE_FORMAT),"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[4], Parser.DATETIME_PARSE_FORMAT));"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        case \"D\":"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"            return new Deadline(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.DATETIME_PARSE_FORMAT),"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[4], Parser.DATETIME_PARSE_FORMAT));"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Duke.UnrecognisedCommandException(parsedCommand[0]);"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * Parses the command input for the subcommand."},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     * @param command"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * @param subcommand"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     * @return"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Duke.ExpectedSubcommandException"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    public static String[] parseSubcommand (String command, String subcommand) throws"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"            Duke.ExpectedSubcommandException {"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        String[] commandBreakdown \u003d new String[2];"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        int subcommandIndex \u003d command.indexOf(subcommand);"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        if (subcommandIndex \u003c 0) {"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Duke.ExpectedSubcommandException(subcommand);"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        commandBreakdown[0] \u003d (subcommandIndex \u003d\u003d 0) ? \"\" : command.substring(0, subcommandIndex - 1).trim();"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        commandBreakdown[1] \u003d command.substring(subcommandIndex + subcommand.length()).trim();"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        return commandBreakdown;"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    public static LocalDateTime parseDateTime (String dateTime) throws Parser.ParserDateTimeParseException {"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"            return LocalDateTime.parse(dateTime, Parser.DATETIME_PARSE_FORMAT);"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Parser.ParserDateTimeParseException();"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":99}},{"path":"src/main/java/DukeBody/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * ArrayList derived class representing a list of tasks with"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * added functionality to mark tasks as done at indexes."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    private static final long serialVersionUID \u003d 6951591508963981354L;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList getUndoneTasks() {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList undone \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: this) {"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"            if (!task.isDone()) {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"                undone.add(task);"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        return undone;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList getMatchedTasks(String keyphrase) {"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList matched \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: this) {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            if (task.inDescription(keyphrase)) {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"                matched.add(task);"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return matched;"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone (int taskIndex) throws IndexOutOfBoundsException,"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            Task.MarkedAsDoneException {"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        this.get(taskIndex).markAsDone();"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":45}},{"path":"src/main/java/DukeTask/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * Subclass of Task representing a deadline task consisting"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * of additional member by to represent the deadline."},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime by;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     * Default constructor of deadline which calls the"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     * default super constructor:"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"     * state defaults to UNDONE."},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"     * createdDateTime defaults to current datetime."},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description   the task description."},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"     * @param by            the task deadline."},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public Deadline (String description, LocalDateTime by)"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        this.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public Deadline (String description, boolean isDone, LocalDateTime createdDateTime,"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"            LocalDateTime by) throws Task.EmptyDescriptionException {"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        this.by \u003d by;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public String getTaskInformation(DateTimeFormatter outputFormat) {"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[D]\" + super.getTaskInformation(outputFormat) + \" [ by: \""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"                + this.by.format(outputFormat) + \" ]\";"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        return \"D\" + delimiter + super.toCommand(delimiter, parseFormat) + delimiter"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"                + this.by.format(parseFormat);"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":45}},{"path":"src/main/java/DukeTask/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":" * Subclass of Task representing an event consisting"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * of additional member at to represent the datetime"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * of occurrence."},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime at;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     * Default constructor of Event which calls the"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     * default super constructor:"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"     * state defaults to UNDONE."},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"     * createdDateTime defaults to current datetime."},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description   the event description."},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"     * @param at            the event occurrence time."},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public Event (String description, LocalDateTime at)"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        throws Task.EmptyDescriptionException {"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        this.at \u003d at;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    public Event (String description, boolean isDone, LocalDateTime createdDateTime,"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            LocalDateTime at) throws Task.EmptyDescriptionException {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        this.at \u003d at;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    public String getTaskInformation(DateTimeFormatter outputFormat) {"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[E]\" + super.getTaskInformation(outputFormat) + \" [ at: \""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"                + this.at.format(outputFormat) + \" ]\";"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        return \"E\" + delimiter + super.toCommand(delimiter, parseFormat) + delimiter"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"                + this.at.format(parseFormat);"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":47}},{"path":"src/main/java/DukeTask/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * Represents an abstract task storing the task description,"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * state (whether it is done or not) and the time of creation"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * by the end-user."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public abstract class Task {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"     * Exception thrown when the user does not provide any"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     * task description on construction."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static class EmptyDescriptionException extends Exception {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        private static final long serialVersionUID \u003d -365632185953600895L;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        public EmptyDescriptionException() {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"task description cannot be empty! no sense...\");"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     * Exception thrown when user attempts to mark the task as done"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"     * when the task is already in a done state."},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public static class MarkedAsDoneException extends Exception {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        private static final long serialVersionUID \u003d -7397628460804553793L;"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        public MarkedAsDoneException() {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"trickery! task has already been marked done by dogeDuke...\");"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     * Enum switch state for whether the task is done or not."},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    protected enum TaskState {"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        DONE, UNDONE;"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    protected String description;"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    protected TaskState state;"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    protected LocalDateTime createdDateTime;"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * Class main constructor."},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description       the task description; cannot be empty."},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     * @param isDone            whether the task is done on creation."},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * @param createdDateTime   the datetime at which the task is created."},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public Task (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        if (description.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Task.EmptyDescriptionException();"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        this.state \u003d (isDone ? TaskState.DONE : TaskState.UNDONE);"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        this.description \u003d description;"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        this.createdDateTime \u003d createdDateTime;"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     * Class default constructor."},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * passes the undone state and current datetime for the task isDone and"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     * createdDateTime parameters."},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description       the task description; cannot be empty."},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    public Task (String description) throws Task.EmptyDescriptionException {"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        this(description, false, LocalDateTime.now());"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean isDone () {"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        return (this.state \u003d\u003d TaskState.DONE);"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean inDescription (String keyphrase) {"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        return this.description.indexOf(keyphrase) \u003e\u003d 0;"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns information about the task."},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     * @param outputFormat  the format in which to output any datetime"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     *                      attributes as string representation."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      string containing the current state, the description"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"     *              and the datetime of creation in the format of the"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     *              specified outputFormat."},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    public String getTaskInformation(DateTimeFormatter outputFormat) {"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[\" + (this.state \u003d\u003d TaskState.DONE ? \"X\" : \" \")"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"                + \"] \" + this.description + \" [ created: \""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                + this.createdDateTime.format(outputFormat) + \" ]\";"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns a string command interpretable by the Parser class for future"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"     * reconstruction."},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"     * @param delimiter     the Parser delimiter used to separate blocks of"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"     *                      information."},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"     * @param parseFormat   the Parser format for reading datetime objects."},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"     * @return              string of parsable task information."},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        // unique parsing sequence for Task"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        return (this.isDone() ? 1 : 0) + delimiter + this.description"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"                + delimiter + this.createdDateTime.format(parseFormat);"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"     * Switches the task from an undone to a done state. The task must not"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"     * already be in the done state."},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.MarkedAsDoneException"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone () throws Task.MarkedAsDoneException {"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        switch (this.state) {"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        case DONE:"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Task.MarkedAsDoneException();"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        case UNDONE:"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"            this.state \u003d TaskState.DONE;"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"            break;"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"        default:"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"            return;"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":133}},{"path":"src/main/java/DukeTask/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * Subclass of Task representing a todo task."},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"public class ToDo extends Task {"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"     * Default constructor of ToDo which calls the"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"     * default super constructor:"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"     * state defaults to UNDONE."},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     * createdDateTime defaults to current datetime."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description   the task description."},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    public ToDo (String description) throws Task.EmptyDescriptionException {"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public ToDo (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public String getTaskInformation(DateTimeFormatter outputFormat) {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[T]\" + super.getTaskInformation(outputFormat);"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        return \"T\" + delimiter + super.toCommand(delimiter, parseFormat);"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":36}},{"path":"src/main/java/dukegui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukegui;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class DialogBox extends HBox {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    private Label content;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    private ImageView display;"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    public DialogBox(String text, Image image, boolean reverse) {"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource("},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"                    \"/view/DialogBox.fxml\"));"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"            fxmlLoader.load();"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        content.setText(text);"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        display.setImage(image);"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        if (reverse) {"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"            this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList("},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"                    this.getChildren());"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"            FXCollections.reverse(tmp);"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            this.getChildren().setAll(tmp);"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    // default constructor in user perspective"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    public DialogBox(String text, Image image) {"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        this(text, image, false);"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"    public void appendText (String text) {"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        content.setText(content.getText() + \"\\n\" + text);"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":55}},{"path":"src/main/java/dukegui/MainApp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukegui;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import dukebody.Duke;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"public class MainApp extends Application {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public void start(Stage stage) {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainApp.class.getResource("},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                    \"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().syncDuke(duke);"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"            // greet user"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().dukeOutput(\"I am DogeDuke. what are you?\\n\""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"Please type in your username.\\n\\nTo specify a database to \""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"connect to, input /read_from:\u003cpath\u003e\");"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":35}},{"path":"src/main/java/dukegui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukegui;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import dukebody.Duke;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.application.Platform;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":" * The main GUI window for the duke application"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":" * which handles the construction of scene settings,"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":" * nodes and the input / output from the dialog."},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private VBox dialogContainer;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    private TextField userInput;"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private Button sendButton;"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    // data members"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    private DialogBox mostRecentDialogBox;"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    private boolean hasRecentDukeOutput \u003d false;"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    private Image userFace \u003d new Image(this.getClass().getResourceAsStream("},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"            \"/images/DefaultUser.png\"));;"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    private Image dukeFace \u003d new Image(this.getClass().getResourceAsStream("},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            \"/images/DogeDuke.png\"));"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    private DateTimeFormatter dateFormat \u003d DateTimeFormatter.ofPattern("},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"            \"eee, dd MMM yyyy HH:mm a\");"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    public void initialize() {"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * Syncs the window with Duke in order to directly"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     * trigger a response upon receiving an input as well"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     * as making duke sync with the window."},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * @param duke  the duke logic for the application"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"    public void syncDuke (Duke duke) {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        this.duke \u003d duke;"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        duke.syncWindow(this);"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            if (duke.hasSetupUser()) {"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"                duke.respondToCommand(pushUserInput());"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"            } else{"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"                duke.userSetup(pushUserInput());"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"            if (duke.hasSetupUser()) {"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"                duke.respondToCommand(pushUserInput());"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"            } else{"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"                duke.userSetup(pushUserInput());"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"     * Accesses the window\u0027s current datetime format setting"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"     * @return  current datetime format being used in dialog text."},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    public DateTimeFormatter getDateFormat () {"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"        return dateFormat;"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * Pushes the user input from the text box to a dialog box in"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     * the dialog container and clears the text box."},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      the user input to output into the dialog."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    private String pushUserInput () {"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer.getChildren().add(new DialogBox(input, userFace));"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        userInput.clear();"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"        hasRecentDukeOutput \u003d false;"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"        return input;"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"     * Pushes a message to a dialog box in the dialog container as an"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"     * output from duke."},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"     * @param message  the message to output into the dialog."},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"    @FXML"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"    public void dukeOutput (String message) {"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        if (hasRecentDukeOutput) {"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"            mostRecentDialogBox.appendText(message);"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        } else {"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"            mostRecentDialogBox \u003d new DialogBox(message, dukeFace, true);"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"            dialogContainer.getChildren().add(mostRecentDialogBox);"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"        hasRecentDukeOutput  \u003d true;"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"     * Changes the datetime format of the window dialog contents"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"     * @param formatExpression  an expression that represents the datetime format."},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"    public void changeDateFormat (String formatExpression) {"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        dateFormat \u003d DateTimeFormatter.ofPattern(formatExpression);"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"    public void exit () {"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"        Platform.exit();"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"        System.exit(0);"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":129}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cLabel fx:id\u003d\"content\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cImageView fx:id\u003d\"display\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jacob-Pang":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"dukegui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Jacob-Pang":19}},{"path":"src/test/java/DukeBody/TestParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Event;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.TaskStub;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"public class TestParser {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public void taskToCommandToTask () throws Event.EmptyDescriptionException,"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            Duke.UnrecognisedCommandException {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        Event event \u003d new Event(\"testing event\", true, LocalDateTime.now(),"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                LocalDateTime.now());"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        String taskCommand \u003d Parser.taskToCommand(event);"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        Task reconstructedTask \u003d Parser.commandToTask(taskCommand);"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Parser.taskToCommand(reconstructedTask),"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"                Parser.taskToCommand(event));"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public void taskToCommandToTask_exceptionThrown () throws Event.EmptyDescriptionException {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        TaskStub taskStub \u003d new TaskStub(\"testing task stub\", true, LocalDateTime.now());"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        String taskCommand \u003d Parser.taskToCommand(taskStub);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(Duke.UnrecognisedCommandException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            Parser.commandToTask(taskCommand);"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":36}},{"path":"src/test/java/DukeTask/TaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"public class TaskStub extends Task {"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskStub (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":11}},{"path":"src/test/java/DukeTask/TestTaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"public class TestTaskStub {"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    public void newTask_exceptionThrown () {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        Exception exception \u003d assertThrows(TaskStub.EmptyDescriptionException.class, () -\u003e {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"            new TaskStub(\"\", false, LocalDateTime.now());"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(exception.getMessage().contains(\"! Task description cannot be empty.\"));"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone () throws TaskStub.EmptyDescriptionException, TaskStub.MarkedAsDoneException {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        TaskStub taskStub \u003d new TaskStub(\"testing task stub\", false, LocalDateTime.now());"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        taskStub.markAsDone();"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(taskStub.isDone());"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-1"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-2"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-3"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-4"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP A-TextUiTesting"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-5"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-6"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP A-Enums"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"deadline CS2103 /by Thursday 23:59"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"event cry /at home"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"list"}],"authorContributionMap":{"Jacob-Pang":24}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\DukeBody\\*.java ..\\src\\main\\java\\DukeTask\\*.java"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"java -classpath ..\\bin DukeBody.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Jacob-Pang":3,"-":19}},{"path":"userdata/A0183450J.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"D :: 0 :: IP Project :: 2021-02-17 1400 :: 2021-02-19 2359"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"E :: 0 :: smth :: 2021-02-17 1520 :: 2021-02-17 2359"}],"authorContributionMap":{"Jacob-Pang":2}}]
