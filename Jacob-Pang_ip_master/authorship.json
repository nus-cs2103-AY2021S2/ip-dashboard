[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"}"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":61}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":":init"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":":end"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":":omega"}],"authorContributionMap":{"Jacob-Pang":103}},{"path":"src/main/java/DukeBody/DataBase.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":" * represents a database to query from and update to"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"public class DataBase {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public static class LegacyDataException extends Exception {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        public LegacyDataException (Exception e) {"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"! Error in reading previously saved tasks due to unresolved differences in \""},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"Legacy parse formats: \" + e.getMessage());"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    Path dirpath;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public DataBase (String path) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        dirpath \u003d Paths.get(path);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    // default constructor set child directory in current working directory as path."},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    public DataBase () {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        this(Paths.get(\"\").toAbsolutePath().toString() + File.separator"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"                + \"userdata\");"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     * returns a list of tasks from stored userdata at the directory"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"     * path associated with this DataBase object. The data is stored"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"     * as: directory_path\\\\username.txt"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"     * @return  TaskList object containing the list of tasks stored"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"     *          previously. TaskList is empty is it is a new user."},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList queryTasks (String username) throws DataBase.LegacyDataException {"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"            File userdata \u003d new File(dirpath.toAbsolutePath() + File.separator"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                    + username + \".txt\");"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"            Scanner scanner \u003d new Scanner(userdata);"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"            while (scanner.hasNextLine()) {"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"                tasks.add(Parser.commandToTask(scanner.nextLine()));"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"            scanner.close();"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException E) {"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"            // userdata not found (new user: no action)"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (Duke.UnrecognisedCommandException"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"                | Task.EmptyDescriptionException e) {"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"            throw new LegacyDataException(e);"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        return tasks;"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"    public void updateTasks (String username, TaskList tasks) throws IOException {"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        if (!Files.exists(dirpath)) {"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"            Files.createDirectories(dirpath);"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        FileWriter writer \u003d new FileWriter(dirpath.toAbsolutePath()"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"                + File.separator + username + \".txt\");"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: tasks) {"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"            writer.write(Parser.taskToCommand(task) + \"\\n\");"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        writer.close();"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    public void changePath (String path) {"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        dirpath \u003d Paths.get(path);"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":87}},{"path":"src/main/java/DukeBody/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.InputMismatchException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import dukegui.DukeApp;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.Scene;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static class ExpectedSubcommandException extends Exception  {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        public ExpectedSubcommandException (String expectedSubcommand) {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"doge cannot find subcommand: \" + expectedSubcommand"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"! very missing...\");"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    public static class UnrecognisedCommandException extends Exception  {"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        public UnrecognisedCommandException (String command) {"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"?? doge confused very. no understand: \" + command);"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    String username \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    DukeApp app;"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    TaskList tasks;"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    DataBase connection \u003d new DataBase();"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean hasSetupUser() {"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return username.length() \u003e 0;"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    public void syncDukeApp (DukeApp app) {"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        this.app \u003d app;"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    public void userSetup (String name) {"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        username \u003d name;"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"        app.dukeOutput(\"HenLo \" + username + \", reading tasks from secret database...\");"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"            tasks \u003d connection.queryTasks(username);"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"            app.dukeOutput(\"... very success! what can doge do for you now?\");"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (DataBase.LegacyDataException e) {"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"            app.dukeOutput(\"doge could not read userdata! previous tasks go brrrrrrrr...\\n\""},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"sorry hooman, what can doge do for you now?\");"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"    public void respondToCommand (String command) {"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        String[] subcommands \u003d command.split(\" \", 2);"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        Scanner scanner;"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        int taskNumber;"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"            switch (subcommands[0].trim()) {"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"                case \"bye\":"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"                    connection.updateTasks(username, tasks);"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(\"bye hooman, come back soon!\");"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"                case \"list\":"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"                    if (tasks.size() \u003e 0) {"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(\"hooman has the following tasks:\\n\");"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(outputTasks(tasks));"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"                    } else{"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(\"hooman has no tasks... why tho\");"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"                case \"find\":"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(\"sniff... sniff... I\u0027ve found these tasks hooman!\\n\");"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.ExpectedSubcommandException(\"\u003csearch_text\u003e\");"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(outputTasks(tasks.matchedTasks(subcommands[1].trim())));"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"                case \"undone\":"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"                    TaskList undone \u003d tasks.undoneTasks();"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"                    if (undone.size() \u003e 0) {"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(\"These are undone... so concern...\\n\");"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(outputTasks(undone));"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"                    } else {"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(\"No more tasks! very speed. much wow\");"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"                case \"done\":"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.ExpectedSubcommandException(\"\u003ctask_number\u003e\");"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner \u003d new Scanner(subcommands[1]);"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"                    taskNumber \u003d scanner.nextInt() - 1;"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner.close();"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"                    tasks.get(taskNumber).markAsDone();"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(\"marked the task as done! yip yip.\\n\");"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(tasks.get(taskNumber).taskInformation("},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"                            app.getDateformat()));"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"                case \"delete\":"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"                case \"remove\":"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.ExpectedSubcommandException(\"\u003ctask_number\u003e\");"},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner \u003d new Scanner(subcommands[1]);"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"                    taskNumber \u003d scanner.nextInt() - 1;"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"                    scanner.close();"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"                    Task removed \u003d tasks.get(taskNumber);"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(\"removed the task! begone!\\n\");"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"                    output.append(tasks.remove(taskNumber).taskInformation("},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"                            app.getDateformat()));"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"                    break;"},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"                default:"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"                    if (subcommands.length \u003d\u003d 1) {"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"                        throw new Duke.UnrecognisedCommandException(subcommands[0]);"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"                    } else {"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"                        tasks.add(Parser.parseNewCommand(subcommands[0].trim(), subcommands[1].trim()));"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(\"added the task for hooman!\\n\");"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"                        output.append(tasks.get(tasks.size() - 1).taskInformation("},{"lineNumber":137,"author":{"gitId":"Jacob-Pang"},"content":"                                app.getDateformat()));"},{"lineNumber":138,"author":{"gitId":"Jacob-Pang"},"content":"                    }"},{"lineNumber":139,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (InputMismatchException e) {"},{"lineNumber":141,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(\"oh no, task number must be an integer!\");"},{"lineNumber":142,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":143,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(\"no such task number exists hooman... ?\");"},{"lineNumber":144,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (IOException e) {"},{"lineNumber":145,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(\"spectacular failure! doge cannot save tasks...\");"},{"lineNumber":146,"author":{"gitId":"Jacob-Pang"},"content":"        } catch (Exception e) {"},{"lineNumber":147,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(e.getMessage());"},{"lineNumber":148,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":150,"author":{"gitId":"Jacob-Pang"},"content":"        app.dukeOutput(output.toString());"},{"lineNumber":151,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":153,"author":{"gitId":"Jacob-Pang"},"content":"    private String outputTasks (TaskList tasks) {"},{"lineNumber":154,"author":{"gitId":"Jacob-Pang"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":155,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":156,"author":{"gitId":"Jacob-Pang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); ++ i) {"},{"lineNumber":157,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(i + 1);"},{"lineNumber":158,"author":{"gitId":"Jacob-Pang"},"content":"            output.append(\". \" + tasks.get(i).taskInformation(app.getDateformat())"},{"lineNumber":159,"author":{"gitId":"Jacob-Pang"},"content":"                    + \"\\n\");"},{"lineNumber":160,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":161,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":162,"author":{"gitId":"Jacob-Pang"},"content":"        return output.toString();"},{"lineNumber":163,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":164,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":165,"author":{"gitId":"Jacob-Pang"},"content":"    public static void main(String[] args) {"},{"lineNumber":166,"author":{"gitId":"Jacob-Pang"},"content":"        Application.launch(DukeApp.class, args);"},{"lineNumber":167,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":168}},{"path":"src/main/java/DukeBody/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Deadline;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Event;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.ToDo;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    // members"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    private static String delimiter \u003d \" :: \";"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    private static DateTimeFormatter parseFormat \u003d DateTimeFormatter.ofPattern("},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        \"yyyy-MM-dd HHmm\");"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    // methods"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the string command representing the task information to be parsed."},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"     * @param task  the task object to create command for"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      the string command associated with the task object, and the"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"     *              Parser delimiter and datetime parseFormat."},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    public static String taskToCommand (Task task) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"        return task.toCommand(Parser.delimiter, Parser.parseFormat);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the task object represented by a string command."},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"     * @param command   the string command to be parsed to derive the task information"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"     * @return          the task object associated with the string command."},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Duke.UnrecognisedCommandException"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    public static Task commandToTask (String command) throws Duke.UnrecognisedCommandException,"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"            Task.EmptyDescriptionException {"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        // format \u003d type :: state :: description :: createdTime :: others"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        String[] parsedCommand \u003d command.split(Parser.delimiter);"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        switch (parsedCommand[0]) {"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        case \"T\":"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"            return new ToDo(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.parseFormat));"},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        case \"E\":"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"            return new Event(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.parseFormat),"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[4], Parser.parseFormat));"},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        case \"D\":"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"            return new Deadline(parsedCommand[2], (Integer.parseInt(parsedCommand[1]) \u003e 0),"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[3], Parser.parseFormat),"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(parsedCommand[4], Parser.parseFormat));"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        default:"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Duke.UnrecognisedCommandException(parsedCommand[0]);"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns the task object created by parsing user input commands."},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"     * @param taskType      the type of task to create. must be todo, event or deadline."},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"     * @param command       the task description and subcommands where applicable such"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     *                      as /at in event and /by in deadline task creations."},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      the task object in default undone state and created at the"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     *              current datetime."},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Duke.UnrecognisedCommandException"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Duke.ExpectedSubcommandException"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws DateTimeParseException"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    public static Task parseNewCommand (String taskType, String command)"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"            throws Duke.UnrecognisedCommandException, Duke.ExpectedSubcommandException,"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"            Task.EmptyDescriptionException, DateTimeParseException {"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        int subcommandIndex;"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        Task task;"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        switch (taskType) {"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        case \"todo\":"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"            task \u003d new ToDo(command);"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"        case \"event\":"},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"            subcommandIndex \u003d command.indexOf(\"/at\");"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"            if (subcommandIndex \u003c 0) {"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"                throw new Duke.ExpectedSubcommandException(\"/at\");"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"            task \u003d new Event (command.substring(0, subcommandIndex - 1).trim(),"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(command.substring(subcommandIndex + 3).trim(),"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"                    Parser.parseFormat));"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"            break;"},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"        case \"deadline\":"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"            subcommandIndex \u003d command.indexOf(\"/by\");"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"            if (subcommandIndex \u003c 0) {"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"                throw new Duke.ExpectedSubcommandException(\"/by\");"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"            task \u003d new Deadline (command.substring(0, subcommandIndex - 1).trim(),"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"                    LocalDateTime.parse(command.substring(subcommandIndex + 3).trim(),"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"                    Parser.parseFormat));"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        default:"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Duke.UnrecognisedCommandException(taskType);"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"        return task;"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":115}},{"path":"src/main/java/DukeBody/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * ArrayList derived class representing a list of tasks with"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * added functionality to mark tasks as done at indexes."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    private static final long serialVersionUID \u003d 6951591508963981354L;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList undoneTasks () {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList undone \u003d new TaskList();"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: this) {"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"            if (!task.isDone()) {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"                undone.add(task);"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        return undone;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskList matchedTasks (String keyphrase) {"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"        TaskList matched \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        for (Task task: this) {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"            if (task.inDescription(keyphrase)) {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"                matched.add(task);"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        return matched;"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone (int taskIndex) throws IndexOutOfBoundsException,"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"            Task.MarkedAsDoneException {"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        this.get(taskIndex).markAsDone();"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":45}},{"path":"src/main/java/DukeTask/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime by;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    public Deadline (String description, LocalDateTime by)"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        this.by \u003d by;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public Deadline (String description, boolean isDone, LocalDateTime createdDateTime,"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            LocalDateTime by) throws Task.EmptyDescriptionException {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        this.by \u003d by;"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public String taskInformation (DateTimeFormatter outputFormat) {"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[D]\" + super.taskInformation(outputFormat) + \" [ by: \""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"                + this.by.format(outputFormat) + \" ]\";"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        return \"D\" + delimiter + super.toCommand(delimiter, parseFormat) + delimiter"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"                + this.by.format(parseFormat);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":32}},{"path":"src/main/java/DukeTask/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"    private LocalDateTime at;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    public Event (String description, LocalDateTime at)"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"        throws Task.EmptyDescriptionException {"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"        this.at \u003d at;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public Event (String description, boolean isDone, LocalDateTime createdDateTime,"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"            LocalDateTime at) throws Task.EmptyDescriptionException {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        this.at \u003d at;"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    public String taskInformation (DateTimeFormatter outputFormat) {"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[E]\" + super.taskInformation(outputFormat) + \" [ at: \""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"                + this.at.format(outputFormat) + \" ]\";"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        return \"E\" + delimiter + super.toCommand(delimiter, parseFormat) + delimiter"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"                + this.at.format(parseFormat);"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":34}},{"path":"src/main/java/DukeTask/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":" * Represents an abstract task storing the task description,"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":" * state (whether it is done or not) and the time of creation"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":" * by the end-user."},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public abstract class Task {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"     * Exception thrown when the user does not provide any"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"     * task description on construction."},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    public static class EmptyDescriptionException extends Exception {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        private static final long serialVersionUID \u003d -365632185953600895L;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        public EmptyDescriptionException() {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"task description cannot be empty! no sense...\");"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"     * Exception thrown when user attempts to mark the task as done"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"     * when the task is already in a done state."},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public static class MarkedAsDoneException extends Exception {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        private static final long serialVersionUID \u003d -7397628460804553793L;"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        public MarkedAsDoneException() {"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"            super(\"trickery! task has already been marked done by dogeDuke...\");"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"     * Enum switch state for whether the task is done or not."},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    protected enum TaskState {"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        done, undone;"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"    protected String description;"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"    protected TaskState state;"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"    protected LocalDateTime createdDateTime;"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"     * Class main constructor."},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description       the task description; cannot be empty."},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"     * @param isDone            whether the task is done on creation."},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":"     * @param createdDateTime   the datetime at which the task is created."},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"    public Task (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":"        if (description.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Task.EmptyDescriptionException();"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        this.state \u003d (isDone ? TaskState.done : TaskState.undone);"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        this.description \u003d description;"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        this.createdDateTime \u003d createdDateTime;"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"     * Class default constructor."},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":"     * passes the undone state and current datetime for the task isDone and"},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"     * createdDateTime parameters."},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"     * @param description       the task description; cannot be empty."},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.EmptyDescriptionException"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"    public Task (String description) throws Task.EmptyDescriptionException {"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        this(description, false, LocalDateTime.now());"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean isDone () {"},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        return (this.state \u003d\u003d TaskState.done);"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"    public boolean inDescription (String keyphrase) {"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        return this.description.indexOf(keyphrase) \u003e\u003d 0;"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns information about the task."},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"     * @param outputFormat  the format in which to output any datetime"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"     *                      attributes as string representation."},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"     * @return      string containing the current state, the description"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":"     *              and the datetime of creation in the format of the"},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"     *              specified outputFormat."},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"    public String taskInformation (DateTimeFormatter outputFormat) {"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[\" + (this.state \u003d\u003d TaskState.done ? \"X\" : \" \")"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":"                + \"] \" + this.description + \" [ created: \""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"                + this.createdDateTime.format(outputFormat) + \" ]\";"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"     * Returns a string command interpretable by the Parser class for future"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"     * reconstruction."},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"     * @param delimiter     the Parser delimiter used to separate blocks of"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"     *                      information."},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"     * @param parseFormat   the Parser format for reading datetime objects."},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"     * @return              string of parsable task information."},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        // unique parsing sequence for Task"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"        return (this.isDone() ? 1 : 0) + delimiter + this.description"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"                + delimiter + this.createdDateTime.format(parseFormat);"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"     * Switches the task from an undone to a done state. The task must not"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":"     * already be in the done state."},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"     * @throws Task.MarkedAsDoneException"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"     */"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone () throws Task.MarkedAsDoneException {"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"        switch (this.state) {"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":"        case done:"},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"            throw new Task.MarkedAsDoneException();"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"        case undone:"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":"            this.state \u003d TaskState.done;"},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"            break;"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"        default:"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"            return;"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":133}},{"path":"src/main/java/DukeTask/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"    public ToDo (String description) throws Task.EmptyDescriptionException {"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    public ToDo (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    public String taskInformation (DateTimeFormatter outputFormat) {"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        return \"[T]\" + super.taskInformation(outputFormat);"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    public String toCommand (String delimiter, DateTimeFormatter parseFormat) {"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        return \"T\" + delimiter + super.toCommand(delimiter, parseFormat);"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":25}},{"path":"src/main/java/dukegui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukegui;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.geometry.Pos;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"public class DialogBox extends HBox {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    private Label content;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    private ImageView display;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public DialogBox(Label text, ImageView picture, boolean reverse) {"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        content \u003d text;"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        display \u003d picture;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"        content.setWrapText(true);"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"        display.setFitWidth(100.0);"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        display.setFitHeight(100.0);"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        this.setAlignment(Pos.TOP_RIGHT);"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        this.getChildren().addAll(content, display);"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"        if (reverse) {"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"            this.setAlignment(Pos.TOP_LEFT);"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"            ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"            FXCollections.reverse(tmp);"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            this.getChildren().setAll(tmp);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"    // default constructor in user perspective"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    public DialogBox(Label text, ImageView picture) {"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"        this(text, picture, false);"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":38}},{"path":"src/main/java/dukegui/DukeApp.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukegui;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.stage.Stage;"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"import dukebody.Duke;"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"public class DukeApp extends Application {"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    // nodes"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"    private ScrollPane scrollpane;"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"    private VBox dialogContainer;"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"    private TextField userInput;"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"    private Scene scene;"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":"    // data members"},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    private Duke dukeCallback \u003d new Duke();"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"    private Image userFace \u003d new Image(this.getClass().getResourceAsStream("},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"            \"/images/DefaultUser.png\"));;"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"    private Image dukeFace \u003d new Image(this.getClass().getResourceAsStream("},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            \"/images/DogeDuke.png\"));"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    private DateTimeFormatter dateformat \u003d DateTimeFormatter.ofPattern("},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"            \"eee, dd MMM yyyy HH:mm a\");"},{"lineNumber":37,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":38,"author":{"gitId":"Jacob-Pang"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"Jacob-Pang"},"content":"    public void start(Stage stage) {"},{"lineNumber":40,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up nodes"},{"lineNumber":41,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane \u003d new ScrollPane();"},{"lineNumber":42,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer \u003d new VBox();"},{"lineNumber":43,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setContent(dialogContainer);"},{"lineNumber":44,"author":{"gitId":"Jacob-Pang"},"content":"        userInput \u003d new TextField();"},{"lineNumber":45,"author":{"gitId":"Jacob-Pang"},"content":"        sendButton \u003d new Button(\"send\");"},{"lineNumber":46,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":47,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();"},{"lineNumber":48,"author":{"gitId":"Jacob-Pang"},"content":"        mainLayout.getChildren().addAll(scrollpane, userInput, sendButton);"},{"lineNumber":49,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":50,"author":{"gitId":"Jacob-Pang"},"content":"        scene \u003d new Scene(mainLayout);"},{"lineNumber":51,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":52,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up window"},{"lineNumber":53,"author":{"gitId":"Jacob-Pang"},"content":"        stage.setTitle(\"Duke\");"},{"lineNumber":54,"author":{"gitId":"Jacob-Pang"},"content":"        stage.setResizable(false);"},{"lineNumber":55,"author":{"gitId":"Jacob-Pang"},"content":"        stage.setMinHeight(600.0);"},{"lineNumber":56,"author":{"gitId":"Jacob-Pang"},"content":"        stage.setMinWidth(400.0);"},{"lineNumber":57,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":58,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up mainLayout"},{"lineNumber":59,"author":{"gitId":"Jacob-Pang"},"content":"        mainLayout.setPrefSize(400.0, 600.0);"},{"lineNumber":60,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":61,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up scroll pane"},{"lineNumber":62,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setPrefSize(400.0, 550.0);"},{"lineNumber":63,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);"},{"lineNumber":64,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":65,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setVvalue(1.0);"},{"lineNumber":66,"author":{"gitId":"Jacob-Pang"},"content":"        scrollpane.setFitToWidth(true);"},{"lineNumber":67,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane.setTopAnchor(scrollpane, 1.0);"},{"lineNumber":68,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":69,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);"},{"lineNumber":70,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e"},{"lineNumber":71,"author":{"gitId":"Jacob-Pang"},"content":"                scrollpane.setVvalue(1.0));"},{"lineNumber":72,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":73,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up user input"},{"lineNumber":74,"author":{"gitId":"Jacob-Pang"},"content":"        userInput.setPrefSize(335.0, 45.0);"},{"lineNumber":75,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":76,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);"},{"lineNumber":77,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);"},{"lineNumber":78,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":79,"author":{"gitId":"Jacob-Pang"},"content":"        // set-up send button"},{"lineNumber":80,"author":{"gitId":"Jacob-Pang"},"content":"        sendButton.setPrefSize(60.0, 45.0);"},{"lineNumber":81,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":82,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);"},{"lineNumber":83,"author":{"gitId":"Jacob-Pang"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);"},{"lineNumber":84,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":85,"author":{"gitId":"Jacob-Pang"},"content":"        stage.setScene(scene);"},{"lineNumber":86,"author":{"gitId":"Jacob-Pang"},"content":"        stage.show();"},{"lineNumber":87,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":88,"author":{"gitId":"Jacob-Pang"},"content":"        syncDuke();"},{"lineNumber":89,"author":{"gitId":"Jacob-Pang"},"content":"        dukeOutput(\"Im Doge, who are you? type your username!\");"},{"lineNumber":90,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":92,"author":{"gitId":"Jacob-Pang"},"content":"    // accessors"},{"lineNumber":93,"author":{"gitId":"Jacob-Pang"},"content":"    public DateTimeFormatter getDateformat () {"},{"lineNumber":94,"author":{"gitId":"Jacob-Pang"},"content":"        return dateformat;"},{"lineNumber":95,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":97,"author":{"gitId":"Jacob-Pang"},"content":"    // mutators"},{"lineNumber":98,"author":{"gitId":"Jacob-Pang"},"content":"    private void syncDuke () {"},{"lineNumber":99,"author":{"gitId":"Jacob-Pang"},"content":"        dukeCallback.syncDukeApp(this);"},{"lineNumber":100,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":101,"author":{"gitId":"Jacob-Pang"},"content":"        userInput.setOnAction((event) -\u003e {"},{"lineNumber":102,"author":{"gitId":"Jacob-Pang"},"content":"            if (dukeCallback.hasSetupUser()) {"},{"lineNumber":103,"author":{"gitId":"Jacob-Pang"},"content":"                dukeCallback.respondToCommand(pushUserInput());"},{"lineNumber":104,"author":{"gitId":"Jacob-Pang"},"content":"            } else{"},{"lineNumber":105,"author":{"gitId":"Jacob-Pang"},"content":"                dukeCallback.userSetup(pushUserInput());"},{"lineNumber":106,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":107,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":108,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":109,"author":{"gitId":"Jacob-Pang"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {"},{"lineNumber":110,"author":{"gitId":"Jacob-Pang"},"content":"            if (dukeCallback.hasSetupUser()) {"},{"lineNumber":111,"author":{"gitId":"Jacob-Pang"},"content":"                dukeCallback.respondToCommand(pushUserInput());"},{"lineNumber":112,"author":{"gitId":"Jacob-Pang"},"content":"            } else{"},{"lineNumber":113,"author":{"gitId":"Jacob-Pang"},"content":"                dukeCallback.userSetup(pushUserInput());"},{"lineNumber":114,"author":{"gitId":"Jacob-Pang"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":116,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":118,"author":{"gitId":"Jacob-Pang"},"content":"    private String pushUserInput () {"},{"lineNumber":119,"author":{"gitId":"Jacob-Pang"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":120,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer.getChildren().add(new DialogBox(new Label(input),"},{"lineNumber":121,"author":{"gitId":"Jacob-Pang"},"content":"                new ImageView(userFace)));"},{"lineNumber":122,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":123,"author":{"gitId":"Jacob-Pang"},"content":"        userInput.clear();"},{"lineNumber":124,"author":{"gitId":"Jacob-Pang"},"content":"        return input;"},{"lineNumber":125,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":127,"author":{"gitId":"Jacob-Pang"},"content":"    public void dukeOutput (String message) {"},{"lineNumber":128,"author":{"gitId":"Jacob-Pang"},"content":"        dialogContainer.getChildren().add(new DialogBox("},{"lineNumber":129,"author":{"gitId":"Jacob-Pang"},"content":"                new Label(message), new ImageView(dukeFace), true"},{"lineNumber":130,"author":{"gitId":"Jacob-Pang"},"content":"        ));"},{"lineNumber":131,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":133,"author":{"gitId":"Jacob-Pang"},"content":"    public void changeDateformat (String formatExpression) {"},{"lineNumber":134,"author":{"gitId":"Jacob-Pang"},"content":"        dateformat \u003d DateTimeFormatter.ofPattern(formatExpression);"},{"lineNumber":135,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":136}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"Jacob-Pang":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"Jacob-Pang":19}},{"path":"src/test/java/DukeBody/TestParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package dukebody;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Task;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.Event;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import duketask.TaskStub;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"public class TestParser {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"    public void taskToCommandToTask () throws Event.EmptyDescriptionException,"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"            Duke.UnrecognisedCommandException {"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"        Event event \u003d new Event(\"testing event\", true, LocalDateTime.now(),"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"                LocalDateTime.now());"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        String taskCommand \u003d Parser.taskToCommand(event);"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        Task reconstructedTask \u003d Parser.commandToTask(taskCommand);"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"        assertEquals(Parser.taskToCommand(reconstructedTask),"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"                Parser.taskToCommand(event));"},{"lineNumber":26,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":28,"author":{"gitId":"Jacob-Pang"},"content":"    public void taskToCommandToTask_exceptionThrown () throws Event.EmptyDescriptionException {"},{"lineNumber":29,"author":{"gitId":"Jacob-Pang"},"content":"        TaskStub taskStub \u003d new TaskStub(\"testing task stub\", true, LocalDateTime.now());"},{"lineNumber":30,"author":{"gitId":"Jacob-Pang"},"content":"        String taskCommand \u003d Parser.taskToCommand(taskStub);"},{"lineNumber":31,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":32,"author":{"gitId":"Jacob-Pang"},"content":"        assertThrows(Duke.UnrecognisedCommandException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"Jacob-Pang"},"content":"            Parser.commandToTask(taskCommand);"},{"lineNumber":34,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":35,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":36}},{"path":"src/test/java/DukeTask/TaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"public class TaskStub extends Task {"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"    public TaskStub (String description, boolean isDone, LocalDateTime createdDateTime)"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"            throws Task.EmptyDescriptionException {"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"        super(description, isDone, createdDateTime);"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":11}},{"path":"src/test/java/DukeTask/TestTaskStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"package duketask;"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"public class TestTaskStub {"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"    public void newTask_exceptionThrown () {"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"        Exception exception \u003d assertThrows(TaskStub.EmptyDescriptionException.class, () -\u003e {"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"            new TaskStub(\"\", false, LocalDateTime.now());"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(exception.getMessage().contains(\"! Task description cannot be empty.\"));"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"    public void markAsDone () throws TaskStub.EmptyDescriptionException, TaskStub.MarkedAsDoneException {"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"        TaskStub taskStub \u003d new TaskStub(\"testing task stub\", false, LocalDateTime.now());"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"        taskStub.markAsDone();"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"        assertTrue(taskStub.isDone());"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"Jacob-Pang"},"content":"}"}],"authorContributionMap":{"Jacob-Pang":25}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-1"},{"lineNumber":2,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-2"},{"lineNumber":3,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-3"},{"lineNumber":4,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-4"},{"lineNumber":5,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP A-TextUiTesting"},{"lineNumber":6,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-5"},{"lineNumber":7,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP Level-6"},{"lineNumber":8,"author":{"gitId":"Jacob-Pang"},"content":"todo CS2103 IP A-Enums"},{"lineNumber":9,"author":{"gitId":"Jacob-Pang"},"content":"deadline CS2103 /by Thursday 23:59"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"event cry /at home"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":"list"},{"lineNumber":12,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":13,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":14,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":15,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":17,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":18,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":20,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":21,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":22,"author":{"gitId":"Jacob-Pang"},"content":"done 1"},{"lineNumber":23,"author":{"gitId":"Jacob-Pang"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"Jacob-Pang"},"content":"list"}],"authorContributionMap":{"Jacob-Pang":24}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Jacob-Pang"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\DukeBody\\*.java ..\\src\\main\\java\\DukeTask\\*.java"},{"lineNumber":11,"author":{"gitId":"Jacob-Pang"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"-"},"content":")"},{"lineNumber":16,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"Jacob-Pang"},"content":"java -classpath ..\\bin DukeBody.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Jacob-Pang":3,"-":19}}]
