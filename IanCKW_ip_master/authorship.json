[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}"},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"},{"lineNumber":43,"author":{"gitId":"-"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"repositories {"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"    mavenCentral()"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"}"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"dependencies {"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":61,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":62,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":63,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":64,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":65,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":66,"author":{"gitId":"IanCKW"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":67,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"-":44,"IanCKW":23}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"___________________________"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"1.[E][X] 4 people at: 4 people "},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"2.[D][O] ghogh by: JANUARY 1 2020 "},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"3.[D][O]  by: 5pme "},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"4.[T][O] add "},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"___________________________"}],"authorContributionMap":{"IanCKW":6}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"        displayPicture.setImage(img);"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"    private void flip() {"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"        Collections.reverse(tmp);"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"        return new DialogBox(text, img);"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"        db.flip();"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"        return db;"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":60}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":" * Main class is the main class. It implements a simple task manager that has a variety of"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":" * functions such as listing, adding Todos, Events, Deadlines, deletion and completion."},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":" *"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":" * @author : IanCKW"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"public class Main extends Application {"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"    private Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"    public void start(Stage stage) {"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"            stage.setScene(scene);"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"            stage.show();"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"     * Main Method"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"     **/"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    public static void main(String[] args) {"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        //Duke duke \u003d new Duke(\"data/duke.txt\");"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        //duke.start();"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":46}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"    public void initialize() {"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":51}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * Deadline is a type of task that has a name and a date/time."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Deadline extends Task {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    private String info;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"     * Only deadline constructor that checks it\u0027s validity and sets the info instance variable."},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine the entire scanned line from the input"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    protected Deadline(String taskLine) throws ArrayIndexOutOfBoundsException, IllegalArgumentException {"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        super(taskLine);"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"        checkTask(taskLine);"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"        buildInfo();"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"     * Checks the validity of the deadline task."},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no body to the deadline task"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     * @throws IllegalArgumentException       if there is no \u0027/by\u0027 indicator"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"    protected void checkTask(String taskLine) throws ArrayIndexOutOfBoundsException, IllegalArgumentException {"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        if (taskLine.length() \u003c 2) {"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"            throw new ArrayIndexOutOfBoundsException(\"☹ OOPS!!! The description of a Deadline cannot be empty.\");"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        } else if (!taskLine.contains(\"/by\")) {"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The Deadline needs an \u0027/by\u0027 time.\");"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    private void buildInfo() {"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"        String[] parsedTask \u003d taskLine.split(\"deadline\");"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"        parsedTask \u003d parsedTask[1].split(\"/by\");"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"        this.name \u003d parsedTask[0].strip();"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"        this.dateTime \u003d parsedTask[1].strip();"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        setDateTimeLD(dateTime);"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        this.info \u003d name + \" by: \" + dateTime;"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"    protected String printNew() {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        return \"[D][ ] \" + info;"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"        return info;"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"    protected String type() {"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"        return \"D\";"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":60}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"cmd + alt + l reformats code"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"Code was refractored after week 2"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"Credit of light reuse: James Lee"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":" * Represents the task manager known as Duke."},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":" **/"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"    private boolean isJustOn;"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"    public boolean isOn \u003d false;"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    private Parser parser;"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"    private TaskList taskList;"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    public static String line \u003d \"___________________________\";"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"     * Duke\u0027s only constructor that sets in place its components. Namely: the ui,"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"     * parser, taskList and storage."},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     * @param filePath"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"    public Duke(String filePath) {"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"        this.isOn \u003d true;"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"        this.isJustOn \u003d true;"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"     * Shorthand printer"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"     * @param s"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    protected static void print(String s) {"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        System.out.println(s);"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"     * Starts the Duke instance. Retreives data from the text file of past tasks."},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"    public String getResponse(String input){"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"        if(isJustOn) {"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"            storage.getLastSave(taskList);"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"        isJustOn \u003d false;"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"        return parser.activate(input,this, taskList, ui, storage);"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"IanCKW":57}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * DukeException is an exception made specially for Duke"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * Event is a type of task that has a name and a date/time."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    private String info;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"     * Only constructor for event that checks it\u0027s validity and sets the info instance variable."},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine the entire scanned line from the input"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"     * @throws IllegalArgumentException"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    protected Event(String taskLine) throws ArrayIndexOutOfBoundsException, IllegalArgumentException {"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        super(taskLine);"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"        checkTask(taskLine);"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"        buildInfo();"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     * Checks the validity of the event task."},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException if there is no body to the deadline task."},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"     * @throws IllegalArgumentException       if there is no \u0027/by\u0027 indicator."},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"    protected void checkTask(String taskLine) throws ArrayIndexOutOfBoundsException, IllegalArgumentException {"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"        if (taskLine.length() \u003c 2) {"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"            throw new ArrayIndexOutOfBoundsException(\"☹ OOPS!!! The description of a Event cannot be empty.\");"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"        } else if (!taskLine.contains(\"/at\")) {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"            throw new IllegalArgumentException(\"☹ OOPS!!! The Event needs an \u0027/at\u0027 time.\");"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"    private void buildInfo() {"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"        String[] parsedTask \u003d taskLine.split(\"event\");"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"        parsedTask \u003d parsedTask[1].split(\"/at\");"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"        this.name \u003d parsedTask[0].strip();"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        this.dateTime \u003d parsedTask[1].strip();"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        setDateTimeLD(dateTime);"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"        this.info \u003d name + \" at: \" + dateTime;"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"    protected String printNew() {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        return \"[E][ ] \" + info;"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"        return info;"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"    protected String type() {"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"        return \"E\";"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":59}},{"path":"src/main/java/duke/FileReading.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"/*"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"Taken from 2103T file access demo"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":" * A class that is used to read files and catch checked exceptions"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"public class FileReading {"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    private static String printFileContents(String filePath) throws FileNotFoundException {"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        File f \u003d new File(filePath);"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"        Scanner s \u003d new Scanner(f);"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"        String output \u003d \"\";"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"        while (s.hasNext()) {"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"            output +\u003d s.nextLine() + \"\\n\";"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"        return output;"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     * Reads file and generates a string of the contents."},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"     * Catches FileNotFoundExceptions."},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"     * @param filePath"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"     * @return"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    protected static String readFile(String filePath) {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        String output \u003d \"\";"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"            output \u003d printFileContents(filePath);"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"            System.out.println(\"File not found\");"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"        } finally {"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"            return output;"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":44}},{"path":"src/main/java/duke/FileWriting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"/*"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"Taken from 2103T file access demo"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":" * A class that is used to write files and catch checked exceptions"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"public class FileWriting {"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"    private static void writeToFile(String filePath, String textToAdd) throws IOException {"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"        fw.write(textToAdd);"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        fw.close();"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"     * Writes into file and catches IO excpetion."},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"     * @param filePath"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     * @param string"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    protected static void write(String filePath, String string) {"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"        String file2 \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"            writeToFile(file2, string);"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":35}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * Handles individual inputs and interprets the commands from the user."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    public Parser() {"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"     * Only constructor for parser. Catches cases where the user inputs an invalid command."},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"     * @param duke"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"     * @param taskList"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"     * @param ui"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"     * @param storage"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    protected String activate(String input, Duke duke, TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"            return handleCommand(duke, input, taskList, ui, storage);"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"        } catch (Exception e) {"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"            return String.format(\"%s\\n☹ %s\\n%s\", Duke.line, e.getMessage(), Duke.line);"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     * Listens to input. Parses the input into the command, body and date/time."},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"     * Activates taskList to manage the task."},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"     * Activates UI to respond to the user."},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"     * Hanldes commands:"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"     * \"list\", \"save\", \"bye\", \"delete\", \"done\", \"todo\" , \"deadline\", \"event\"."},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"     * @param duke"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"     * @param currLine the current input from the user"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"     * @param taskList"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"     * @param ui"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"     * @param storage"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"     * @throws Exception when an invalid command is made. i.e. the first word in the input is"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"     *                   invalid"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"     * @return"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"    protected String handleCommand(Duke duke, String currLine, TaskList taskList, Ui ui, Storage storage) throws Exception {"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        // basic commands"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"        currLine \u003d currLine.toLowerCase();"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"        String[] parsedLine \u003d currLine.split(\" \");"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"        if (currLine.startsWith(\"list\")) {"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"            return ui.printListTasks(taskList);"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"find\")) {"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"            return ui.find(taskList, currLine);"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"save\")) {"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"            storage.save(ui, taskList);"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"            return \"Your information has been saved!\";"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"bye\")) {"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"            taskList.bye(duke);"},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"            return ui.bye();"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"delete\")) {"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"            Task task \u003d taskList.delete(Integer.parseInt(parsedLine[1]));"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"            return ui.delete(task, taskList.list.size());"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"done\")) {"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"            Task task \u003d taskList.doTask(Integer.parseInt(parsedLine[1]));"},{"lineNumber":61,"author":{"gitId":"IanCKW"},"content":"            return ui.doTask(task);"},{"lineNumber":62,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"todo\")) {"},{"lineNumber":63,"author":{"gitId":"IanCKW"},"content":"            Task task \u003d taskList.addTask(new Todo(currLine));"},{"lineNumber":64,"author":{"gitId":"IanCKW"},"content":"            return ui.addTask(task, taskList.list.size());"},{"lineNumber":65,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"deadline\")) {"},{"lineNumber":66,"author":{"gitId":"IanCKW"},"content":"            Task task \u003d taskList.addTask(new Deadline(currLine));"},{"lineNumber":67,"author":{"gitId":"IanCKW"},"content":"            return ui.addTask(task, taskList.list.size());"},{"lineNumber":68,"author":{"gitId":"IanCKW"},"content":"        } else if (currLine.startsWith(\"event\")) {"},{"lineNumber":69,"author":{"gitId":"IanCKW"},"content":"            Task task \u003d taskList.addTask(new Event(currLine));"},{"lineNumber":70,"author":{"gitId":"IanCKW"},"content":"            return ui.addTask(task, taskList.list.size());"},{"lineNumber":71,"author":{"gitId":"IanCKW"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"IanCKW"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":73,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":75,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":76}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * Represents the stored data of the Duke."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Storage {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    String taskListStr;"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"    String filePath;"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"     * Only constructor for Storage class."},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"     * Sets the filepath for the stored file."},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"     * @param filePath"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    public Storage(String filePath) {"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        this.taskListStr \u003d \"\";"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"     * Obtains the last save of tasks as a string and stores it as an instance variable."},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"     * Parses the string and inteprets them as tasks that are stored in the current instance"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     * of taskList in Duke."},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"     * @param taskList list of current tasks that the duke has."},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"    protected void getLastSave(TaskList taskList) {"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"        this.taskListStr \u003d FileReading.readFile(filePath);"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        System.out.println(\"These are the tasks on your todolist\");"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"        System.out.println(taskListStr);"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        addSavedTasks(taskList);"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"     * Parses string, in the \"list\" format, and interprets them into commands that the current"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"     * instance of Duke should have."},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"     * @param taskList list of current tasks that the duke has."},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    protected void addSavedTasks(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        String[] lines \u003d taskListStr.split(\"\\n\");"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        for (int i \u003d 0; i \u003c lines.length; i++) {"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"            if (!lines[i].contains(Duke.line)) {"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"                String[] details \u003d lines[i].split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"                Task currTask;"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"                if (details[0].contains(\"T\")) {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"                    currTask \u003d new Todo(\"todo\" + details[1]);"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"                } else if (details[0].contains(\"E\")) {"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"                    String[] nameDate \u003d details[1].split(\"at:\");"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"                    currTask \u003d new Event(\"event\" + nameDate[0].strip() + \"/at\" + nameDate[1].strip());"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"                } else {"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"                    String[] nameDate \u003d details[1].split(\"by:\");"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"                    currTask \u003d new Deadline(\"deadline\" + nameDate[0].strip() + \"/by\" + nameDate[1].strip());"},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"                }"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"                if (details[0].contains(\"X\")) {"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"                    currTask.isDone \u003d true;"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"                taskList.list.add(currTask);"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":64,"author":{"gitId":"IanCKW"},"content":"    protected void save(Ui ui, TaskList taskList) {"},{"lineNumber":65,"author":{"gitId":"IanCKW"},"content":"        FileWriting.write(filePath, ui.listTasks(taskList));"},{"lineNumber":66,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":67}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"import java.time.temporal.ChronoUnit;"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":" * Task (should be an abstract class but it is currently not) is a superclass"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":" * of Event, Deadline and Todo."},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":" * Duke manages these tasks."},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"    protected String type \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"    boolean isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"    String taskLine;"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"    String name;"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"    String dateTime;"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    LocalDate date;"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"     * Constructor for Task that sets all the instance variables to a default state."},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"     * eg, name \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine untouched input from the user"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    protected Task(String taskLine) {"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"        this.taskLine \u003d taskLine;"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"        this.name \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"        this.dateTime \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"        this.date \u003d LocalDate.parse(\"0000-01-01\");"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    protected String status() {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        String status \u003d isDone ? \"X\" : \"O\";"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"        return status;"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"    protected String printNew() {"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"        return toString();"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"    protected String type() {"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        return \"task\";"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"    protected void setDateTimeLD(String time) {"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"            this.date \u003d LocalDate.parse(time);"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"            this.dateTime \u003d date.getMonth().name() + \" \" + date.getDayOfMonth() + \" \" + date.getYear();"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"        } catch (Exception e) {"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":53}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":" * Represents the list of tasks, and the relevant commands for the list, of the Duke."},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    protected ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"    protected TaskList() {"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"     * Adds task to the list of tasks."},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"     * @param task"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"     * @return task mainly for the Ui class\u0027 use. The user interface (Ui) needs to know the affected."},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"     * task to inform the user."},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"    protected Task addTask(Task task) {"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"        list.add(task);"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"        return task;"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"     * Sets the task as done."},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"     * @param taskNum counting from numer 1, this is the number of the task that is done."},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"     * @return task mainly for the Ui class\u0027 use. The user interface (Ui) needs to know the affected."},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"     * task to inform the user."},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    protected Task doTask(int taskNum) {"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"        Task curr \u003d list.get(taskNum - 1);"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"        curr.isDone \u003d true;"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"        return curr;"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"     * Sets the task as deleted"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"     * @param num counting from numer 1, this is the number of the task that is deleted."},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"     * @return task mainly for the Ui class\u0027 use. The user interface (Ui) needs to know the affected."},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"     * task to inform the user."},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"    protected Task delete(int num) throws ArrayIndexOutOfBoundsException {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        Task curr \u003d list.get(num - 1);"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"        list.remove(num - 1);"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"        return curr;"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"     * Turns off the duke and ends the program."},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"     * @param duke"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"    protected void bye(Duke duke) {"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"        duke.isOn \u003d false;"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":61}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":" * Todo is a type of task with only a body, and no date/time."},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":" */"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"     * Constructs Todo instance"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"     * @param taskLine untouched input from the user"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"     * @throws ArrayIndexOutOfBoundsException"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"    public Todo(String taskLine) throws ArrayIndexOutOfBoundsException {"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"        super(taskLine);"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"        checkTask();"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"        buildInfo();"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    private void checkTask() throws ArrayIndexOutOfBoundsException {"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"        if (this.taskLine.length() \u003c 2) {"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"            throw new ArrayIndexOutOfBoundsException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"    private void buildInfo() {"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"        String[] taskParsed \u003d taskLine.split(\"todo\");"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"        this.dateTime \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"        this.name \u003d taskParsed[1].strip(); // taskParsed[0] \u003d\u003d \"\""},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"    protected String printNew() {"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"        return \"[T][ ] \" + name;"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"        return name;"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"    protected String type() {"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        return \"T\";"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":46}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"    Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"    public Ui() {"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"    protected String addTask(Task task, int size) {"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"        String output \u003d Duke.line + \"\\n\" + \" Got it. I\u0027ve added this task: \\n\""},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"                + task.printNew() + \"\\n Now you have \" + size"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"                + \" tasks in the list\" + \"\\n\" + Duke.line;"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"        Duke.print(output);"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"        return output; // for testing"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    protected String doTask(Task task) {"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"        return String.format(Duke.line + \"\\n Nice! I\u0027ve marked this task as done: \" +"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"                \"\\n [%s] [%s] %s\" +"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"                \"\\n\" + Duke.line, task.type(), task.status(), task.toString());"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"    protected String delete(Task task, int size) {"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"        String deleted \u003d \"[\" + task.type() + \"]\" + \"[\" + task.status() + \"] \" + task.toString();"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"        return String.format(\"%s\\nNoted. I\u0027ve removed this task: \\n %s\\nNow you have %d tasks in the list\\n%s\","},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":"                Duke.line, deleted, size, Duke.line);"},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"    protected String bye() {"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"        return Duke.line + \"\\n\" + \" Bye. Hope to see you again soon!\" + \"\\n\" + Duke.line;"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"    protected String listTasks(TaskList taskList) throws ArrayIndexOutOfBoundsException {"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"        String output \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"        output +\u003d Duke.line + \"\\n\";"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"        int i \u003d 1;"},{"lineNumber":39,"author":{"gitId":"IanCKW"},"content":"        for (Task s : taskList.list) {"},{"lineNumber":40,"author":{"gitId":"IanCKW"},"content":"            output +\u003d String.format(\"%d.[%s][%s] %s \\n\", i, s.type(), s.status(), s.toString());"},{"lineNumber":41,"author":{"gitId":"IanCKW"},"content":"            i++;"},{"lineNumber":42,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"IanCKW"},"content":"        output +\u003d Duke.line;"},{"lineNumber":44,"author":{"gitId":"IanCKW"},"content":"        return output; // for storage"},{"lineNumber":45,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":47,"author":{"gitId":"IanCKW"},"content":"    protected String printListTasks(TaskList taskList) {"},{"lineNumber":48,"author":{"gitId":"IanCKW"},"content":"        String output \u003d listTasks(taskList);"},{"lineNumber":49,"author":{"gitId":"IanCKW"},"content":"        return output;"},{"lineNumber":50,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":52,"author":{"gitId":"IanCKW"},"content":"    protected String find(TaskList taskList, String currLine) {"},{"lineNumber":53,"author":{"gitId":"IanCKW"},"content":"        String output \u003d \"Here are the matching tasks in your list \\n\";"},{"lineNumber":54,"author":{"gitId":"IanCKW"},"content":"        String toFind \u003d currLine.split(\"find\")[1].strip();"},{"lineNumber":55,"author":{"gitId":"IanCKW"},"content":"        String[] tasksByLine \u003d listTasks(taskList).split(\"\\n\");"},{"lineNumber":56,"author":{"gitId":"IanCKW"},"content":"        for (String line : tasksByLine) {"},{"lineNumber":57,"author":{"gitId":"IanCKW"},"content":"            if (line.contains(toFind)) {"},{"lineNumber":58,"author":{"gitId":"IanCKW"},"content":"                output +\u003d line + \"\\n\";"},{"lineNumber":59,"author":{"gitId":"IanCKW"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"IanCKW"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"IanCKW"},"content":"        return output;"},{"lineNumber":62,"author":{"gitId":"IanCKW"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":64,"author":{"gitId":"IanCKW"},"content":"}"}],"authorContributionMap":{"IanCKW":64}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"2.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"        \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"IanCKW":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"652.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"IanCKW":19}},{"path":"src/production/IndProj/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"1.[T][O] task "},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"2.[E][O] 4 people at: 4 people "},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"3.[D][O] ghogh by: JANUARY 1 2020 "},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"4.[D][O]  by: 5pme "},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"5.[T][O] tasasdf "},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"6.[T][O] tata "},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"}],"authorContributionMap":{"IanCKW":8}},{"path":"src/production/IndProj/ip/CONTRIBUTORS.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"# Contributors"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"Display | Name | Github Profile | Homepage"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"---|:---:|:---:|:---:"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"![](https://avatars0.githubusercontent.com/u/22460123?s\u003d100) | Jeffry Lum | [Github](https://github.com/j-lum/) | [Homepage](https://se.kasugano.moe)"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"![](https://avatars0.githubusercontent.com/u/1673303?s\u003d100) | Damith C. Rajapakse | [Github](https://github.com/damithc/) | [Homepage](https://www.comp.nus.edu.sg/~damithch/)"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"# I would like to join this list. How can I help the project"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"For more information, please refer to our [contributor\u0027s guide](https://oss-generic.github.io/process/)."}],"authorContributionMap":{"IanCKW":9}},{"path":"src/production/IndProj/ip/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"   ```"}],"authorContributionMap":{"IanCKW":23}},{"path":"src/production/IndProj/ip/docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"### Feature 1 "},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"Description of feature."},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"## Usage"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"### `Keyword` - Describe action"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"Describe action and its outcome."},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"`keyword (optional arguments)`"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"`outcome`"}],"authorContributionMap":{"IanCKW":20}},{"path":"src/production/IndProj/ip/text-ui-test/expected.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"Hello! I\u0027m Duke"},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"What can I do for you?"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":" Got it. I\u0027ve added this task: "},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"  [D][ ] do homework (at: no idea :-p )"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":" Now you have 1 tasks in the list"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":" Bye. Hope to see you again soon!"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"____________________________________________________________"}],"authorContributionMap":{"IanCKW":12}},{"path":"src/production/IndProj/ip/text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"bye"}],"authorContributionMap":{"IanCKW":2}},{"path":"src/production/IndProj/ip/text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":")"},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"IanCKW":21}},{"path":"src/production/IndProj/ip/text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"then"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"then"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":"then"},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":25,"author":{"gitId":"IanCKW"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"IanCKW"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"IanCKW"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":29,"author":{"gitId":"IanCKW"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"IanCKW"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"IanCKW"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"IanCKW"},"content":"then"},{"lineNumber":33,"author":{"gitId":"IanCKW"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"IanCKW"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"IanCKW"},"content":"else"},{"lineNumber":36,"author":{"gitId":"IanCKW"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"IanCKW"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"IanCKW"},"content":"fi"}],"authorContributionMap":{"IanCKW":38}},{"path":"src/production/IndProj/notesForIP.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"TODOS:"},{"lineNumber":3,"author":{"gitId":"IanCKW"},"content":"- put every class into a package"},{"lineNumber":4,"author":{"gitId":"IanCKW"},"content":"- add linter"},{"lineNumber":5,"author":{"gitId":"IanCKW"},"content":"- credit James"},{"lineNumber":6,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":7,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":8,"author":{"gitId":"IanCKW"},"content":"instanceOf may be useful for handling objects of the same superclass"},{"lineNumber":9,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":10,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":11,"author":{"gitId":"IanCKW"},"content":"JAMES CODE WEEK 2:"},{"lineNumber":12,"author":{"gitId":"IanCKW"},"content":"DRY"},{"lineNumber":13,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":14,"author":{"gitId":"IanCKW"},"content":"return (isDone ? \"[X]\" : \"[ ]\"); "},{"lineNumber":15,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":16,"author":{"gitId":"IanCKW"},"content":"WEEK 3 NOTES:"},{"lineNumber":17,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":18,"author":{"gitId":"IanCKW"},"content":"Junit tests should only have one test per method"},{"lineNumber":19,"author":{"gitId":"IanCKW"},"content":"[csharp]WhatAreWeTesting_InWhatConditions_WhatAreExpectedResult[/csharp]"},{"lineNumber":20,"author":{"gitId":"IanCKW"},"content":"E.g. LogIn_ExistingUsernameWithIncorrectPassword_ShouldReturnMessageWrongPassword."},{"lineNumber":21,"author":{"gitId":"IanCKW"},"content":"JUNIT tests should be for public methods which are \"contracts\""},{"lineNumber":22,"author":{"gitId":"IanCKW"},"content":"Tests should be done in isolation. IE find a way to test only ONE method and ONE class. Use stubs"},{"lineNumber":23,"author":{"gitId":"IanCKW"},"content":""},{"lineNumber":24,"author":{"gitId":"IanCKW"},"content":""}],"authorContributionMap":{"IanCKW":24}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"IanCKW"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":2,"author":{"gitId":"IanCKW"},"content":"bye"}],"authorContributionMap":{"IanCKW":2}}]
